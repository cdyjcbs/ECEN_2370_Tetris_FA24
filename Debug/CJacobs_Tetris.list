
CJacobs_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ffc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  080061a8  080061a8  000071a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  08007388  08007388  00008388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007390  08007390  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00008390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007394  08007394  00008394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007398  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009020  2**0
                  CONTENTS
 10 .bss          00025e38  20000020  20000020  00009020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e58  20025e58  00009020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f534  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a29  00000000  00000000  00018584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe0  00000000  00000000  0001afb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c0a  00000000  00000000  0001bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269e0  00000000  00000000  0001cb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138db  00000000  00000000  0004357a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1988  00000000  00000000  00056e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001387dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040ec  00000000  00000000  00138820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013c90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006190 	.word	0x08006190

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08006190 	.word	0x08006190

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f003 fb91 	bl	8003c06 <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f998 	bl	8000818 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f955 	bl	8000798 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fb48 	bl	8000b88 <LCD_Clear>
    GameInit();
 80004f8:	f000 fc18 	bl	8000d2c <GameInit>
    buttonIRQInit();
 80004fc:	f000 f852 	bl	80005a4 <buttonIRQInit>
    RNG_Init();
 8000500:	f002 fdac 	bl	800305c <RNG_Init>
    timer3Init();
 8000504:	f002 fdf0 	bl	80030e8 <timer3Init>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <TIM3_App_Start>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void TIM3_App_Start(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	TIM3_Start();
 8000510:	f002 fe2a 	bl	8003168 <TIM3_Start>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800051c:	2006      	movs	r0, #6
 800051e:	f003 fd74 	bl	800400a <HAL_NVIC_DisableIRQ>
//	addSchedulerEvent(ROTATE_BLOCK);
	rotateBlock();
 8000522:	f002 f925 	bl	8002770 <rotateBlock>
//	eraseCurrentBlock();
//	uint32_t randBlock = GetRandomBlock();
//	uint32_t randOrientation = GetRandomOrientation();
//	updateCurrentBlock(randBlock, 5, 5, randOrientation);
//	drawCurrentBlock();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000526:	4b04      	ldr	r3, [pc, #16]	@ (8000538 <EXTI0_IRQHandler+0x20>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800052c:	2006      	movs	r0, #6
 800052e:	f003 fd5e 	bl	8003fee <HAL_NVIC_EnableIRQ>
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40013c00 	.word	0x40013c00

0800053c <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&TIM3_Config, TIM_FLAG_UPDATE)) {
 8000542:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <TIM3_IRQHandler+0x64>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	691b      	ldr	r3, [r3, #16]
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b01      	cmp	r3, #1
 800054e:	d122      	bne.n	8000596 <TIM3_IRQHandler+0x5a>
	        // Clear the update interrupt flag
	        __HAL_TIM_CLEAR_FLAG(&TIM3_Config, TIM_FLAG_UPDATE);
 8000550:	4b13      	ldr	r3, [pc, #76]	@ (80005a0 <TIM3_IRQHandler+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f06f 0201 	mvn.w	r2, #1
 8000558:	611a      	str	r2, [r3, #16]
	        int full = isFull();
 800055a:	f002 fa99 	bl	8002a90 <isFull>
 800055e:	60f8      	str	r0, [r7, #12]

	        if (full != 0){
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <TIM3_IRQHandler+0x3a>
		        eraseCurrentBlock();
 8000566:	f002 fa0b 	bl	8002980 <eraseCurrentBlock>
				uint16_t currentYpos = updateYpos();
 800056a:	f002 fa7f 	bl	8002a6c <updateYpos>
 800056e:	4603      	mov	r3, r0
 8000570:	817b      	strh	r3, [r7, #10]
				drawCurrentBlock();
 8000572:	f002 f9b1 	bl	80028d8 <drawCurrentBlock>
	        }

			if (full == 0){
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10c      	bne.n	8000596 <TIM3_IRQHandler+0x5a>
//				uint16_t currentYpos = getCurrentYpos();
//				if (currentYpos > 1) {
				uint32_t randBlock = GetRandomBlock();
 800057c:	f002 fd94 	bl	80030a8 <GetRandomBlock>
 8000580:	4603      	mov	r3, r0
 8000582:	607b      	str	r3, [r7, #4]
				updateCurrentBlock(randBlock, 5, 2, 1);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	b298      	uxth	r0, r3
 8000588:	2301      	movs	r3, #1
 800058a:	2202      	movs	r2, #2
 800058c:	2105      	movs	r1, #5
 800058e:	f002 fa4b 	bl	8002a28 <updateCurrentBlock>
				drawCurrentBlock();
 8000592:	f002 f9a1 	bl	80028d8 <drawCurrentBlock>
//				HAL_NVIC_DisableIRQ(TIM3_IRQn);
//				gameOver();
//				}
			}
	 }
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20025db0 	.word	0x20025db0

080005a4 <buttonIRQInit>:
	}
	return returnValue;
}

// Button initialization for Interrupt Mode
void buttonIRQInit(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef pinConfig = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
	pinConfig.Pin = GPIO_PIN_0; //GPIO_PIN_0
 80005b8:	2301      	movs	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
	pinConfig.Mode = GPIO_MODE_IT_FALLING;
 80005bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80005c0:	60bb      	str	r3, [r7, #8]
	pinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
	pinConfig.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <buttonIRQInit+0x5c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000600 <buttonIRQInit+0x5c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <buttonIRQInit+0x5c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &pinConfig);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <buttonIRQInit+0x60>)
 80005ec:	f003 fd28 	bl	8004040 <HAL_GPIO_Init>

//	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f0:	2006      	movs	r0, #6
 80005f2:	f003 fcfc 	bl	8003fee <HAL_NVIC_EnableIRQ>
}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	@ 0x30
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
 8000612:	4b5a      	ldr	r3, [pc, #360]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000616:	4a59      	ldr	r2, [pc, #356]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000618:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800061c:	6453      	str	r3, [r2, #68]	@ 0x44
 800061e:	4b57      	ldr	r3, [pc, #348]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000622:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	4b53      	ldr	r3, [pc, #332]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a52      	ldr	r2, [pc, #328]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b50      	ldr	r3, [pc, #320]	@ (800077c <LCD_GPIO_Init+0x174>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b4c      	ldr	r3, [pc, #304]	@ (800077c <LCD_GPIO_Init+0x174>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a4b      	ldr	r2, [pc, #300]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000650:	f043 0302 	orr.w	r3, r3, #2
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b49      	ldr	r3, [pc, #292]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b45      	ldr	r3, [pc, #276]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a44      	ldr	r2, [pc, #272]	@ (800077c <LCD_GPIO_Init+0x174>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b42      	ldr	r3, [pc, #264]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b3e      	ldr	r3, [pc, #248]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a3d      	ldr	r2, [pc, #244]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <LCD_GPIO_Init+0x174>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0308 	and.w	r3, r3, #8
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b37      	ldr	r3, [pc, #220]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a36      	ldr	r2, [pc, #216]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b34      	ldr	r3, [pc, #208]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b30      	ldr	r3, [pc, #192]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a2f      	ldr	r2, [pc, #188]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <LCD_GPIO_Init+0x174>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80006d2:	f641 0358 	movw	r3, #6232	@ 0x1858
 80006d6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80006e0:	2302      	movs	r3, #2
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80006e4:	230e      	movs	r3, #14
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4824      	ldr	r0, [pc, #144]	@ (8000780 <LCD_GPIO_Init+0x178>)
 80006f0:	f003 fca6 	bl	8004040 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80006f4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006f8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4820      	ldr	r0, [pc, #128]	@ (8000784 <LCD_GPIO_Init+0x17c>)
 8000702:	f003 fc9d 	bl	8004040 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000706:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	4619      	mov	r1, r3
 8000712:	481d      	ldr	r0, [pc, #116]	@ (8000788 <LCD_GPIO_Init+0x180>)
 8000714:	f003 fc94 	bl	8004040 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000718:	2348      	movs	r3, #72	@ 0x48
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	481a      	ldr	r0, [pc, #104]	@ (800078c <LCD_GPIO_Init+0x184>)
 8000724:	f003 fc8c 	bl	8004040 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800072c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4816      	ldr	r0, [pc, #88]	@ (8000790 <LCD_GPIO_Init+0x188>)
 8000736:	f003 fc83 	bl	8004040 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800073a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800073e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4813      	ldr	r0, [pc, #76]	@ (8000794 <LCD_GPIO_Init+0x18c>)
 8000748:	f003 fc7a 	bl	8004040 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800074c:	2303      	movs	r3, #3
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000750:	2309      	movs	r3, #9
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	480a      	ldr	r0, [pc, #40]	@ (8000784 <LCD_GPIO_Init+0x17c>)
 800075c:	f003 fc70 	bl	8004040 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000760:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <LCD_GPIO_Init+0x18c>)
 800076e:	f003 fc67 	bl	8004040 <HAL_GPIO_Init>
}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	@ 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40020000 	.word	0x40020000
 8000784:	40020400 	.word	0x40020400
 8000788:	40020800 	.word	0x40020800
 800078c:	40020c00 	.word	0x40020c00
 8000790:	40021400 	.word	0x40021400
 8000794:	40021800 	.word	0x40021800

08000798 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	@ 0x40
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80007a6:	23f0      	movs	r3, #240	@ 0xf0
 80007a8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80007ae:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007b2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80007b8:	23ff      	movs	r3, #255	@ 0xff
 80007ba:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007c6:	2305      	movs	r3, #5
 80007c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <LTCD_Layer_Init+0x78>)
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80007d4:	23f0      	movs	r3, #240	@ 0xf0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80007d8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4806      	ldr	r0, [pc, #24]	@ (8000814 <LTCD_Layer_Init+0x7c>)
 80007fa:	f003 ffc3 	bl	8004784 <HAL_LTDC_ConfigLayer>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000804:	f002 fc24 	bl	8003050 <LCD_Error_Handler>
	}
}
 8000808:	bf00      	nop
 800080a:	3740      	adds	r7, #64	@ 0x40
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200005a0 	.word	0x200005a0
 8000814:	2000003c 	.word	0x2000003c

08000818 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800081c:	4b2a      	ldr	r3, [pc, #168]	@ (80008c8 <LTCD__Init+0xb0>)
 800081e:	4a2b      	ldr	r2, [pc, #172]	@ (80008cc <LTCD__Init+0xb4>)
 8000820:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000822:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <LTCD__Init+0xb0>)
 8000824:	2209      	movs	r2, #9
 8000826:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <LTCD__Init+0xb0>)
 800082a:	2201      	movs	r2, #1
 800082c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <LTCD__Init+0xb0>)
 8000830:	221d      	movs	r2, #29
 8000832:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <LTCD__Init+0xb0>)
 8000836:	2203      	movs	r2, #3
 8000838:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <LTCD__Init+0xb0>)
 800083c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <LTCD__Init+0xb0>)
 8000844:	f240 1243 	movw	r2, #323	@ 0x143
 8000848:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <LTCD__Init+0xb0>)
 800084c:	f240 1217 	movw	r2, #279	@ 0x117
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <LTCD__Init+0xb0>)
 8000854:	f240 1247 	movw	r2, #327	@ 0x147
 8000858:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <LTCD__Init+0xb0>)
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <LTCD__Init+0xb0>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <LTCD__Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <LTCD__Init+0xb8>)
 8000874:	2208      	movs	r2, #8
 8000876:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <LTCD__Init+0xb8>)
 800087a:	22c0      	movs	r2, #192	@ 0xc0
 800087c:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <LTCD__Init+0xb8>)
 8000880:	2204      	movs	r2, #4
 8000882:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <LTCD__Init+0xb8>)
 8000886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800088a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800088c:	4810      	ldr	r0, [pc, #64]	@ (80008d0 <LTCD__Init+0xb8>)
 800088e:	f004 fdb3 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000892:	4b0d      	ldr	r3, [pc, #52]	@ (80008c8 <LTCD__Init+0xb0>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <LTCD__Init+0xb0>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <LTCD__Init+0xb0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <LTCD__Init+0xb0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80008aa:	f7ff fead 	bl	8000608 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <LTCD__Init+0xb0>)
 80008b0:	f003 fe98 	bl	80045e4 <HAL_LTDC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80008ba:	f002 fbc9 	bl	8003050 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80008be:	f002 fc5d 	bl	800317c <ili9341_Init>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000003c 	.word	0x2000003c
 80008cc:	40016800 	.word	0x40016800
 80008d0:	200000e4 	.word	0x200000e4

080008d4 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
 80008de:	460b      	mov	r3, r1
 80008e0:	80bb      	strh	r3, [r7, #4]
 80008e2:	4613      	mov	r3, r2
 80008e4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80008e6:	88ba      	ldrh	r2, [r7, #4]
 80008e8:	4613      	mov	r3, r2
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	1a9b      	subs	r3, r3, r2
 80008ee:	011b      	lsls	r3, r3, #4
 80008f0:	461a      	mov	r2, r3
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	4413      	add	r3, r2
 80008f6:	4905      	ldr	r1, [pc, #20]	@ (800090c <LCD_Draw_Pixel+0x38>)
 80008f8:	887a      	ldrh	r2, [r7, #2]
 80008fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200005a0 	.word	0x200005a0

08000910 <LCD_Draw_Square_Fill_Border>:
        }
    }
}

void LCD_Draw_Square_Fill_Border(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
 800091a:	460b      	mov	r3, r1
 800091c:	80bb      	strh	r3, [r7, #4]
 800091e:	4613      	mov	r3, r2
 8000920:	807b      	strh	r3, [r7, #2]
	uint16_t x = Xpos*blockSize;
 8000922:	4b34      	ldr	r3, [pc, #208]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	88fa      	ldrh	r2, [r7, #6]
 800092a:	fb12 f303 	smulbb	r3, r2, r3
 800092e:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000930:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	88ba      	ldrh	r2, [r7, #4]
 8000938:	fb12 f303 	smulbb	r3, r2, r3
 800093c:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 800093e:	2301      	movs	r3, #1
 8000940:	81fb      	strh	r3, [r7, #14]
 8000942:	e04c      	b.n	80009de <LCD_Draw_Square_Fill_Border+0xce>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000944:	2301      	movs	r3, #1
 8000946:	81bb      	strh	r3, [r7, #12]
 8000948:	e03d      	b.n	80009c6 <LCD_Draw_Square_Fill_Border+0xb6>
	        {
	            LCD_Draw_Pixel(i+x, j+y, color);
 800094a:	89fa      	ldrh	r2, [r7, #14]
 800094c:	897b      	ldrh	r3, [r7, #10]
 800094e:	4413      	add	r3, r2
 8000950:	b298      	uxth	r0, r3
 8000952:	89ba      	ldrh	r2, [r7, #12]
 8000954:	893b      	ldrh	r3, [r7, #8]
 8000956:	4413      	add	r3, r2
 8000958:	b29b      	uxth	r3, r3
 800095a:	887a      	ldrh	r2, [r7, #2]
 800095c:	4619      	mov	r1, r3
 800095e:	f7ff ffb9 	bl	80008d4 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000962:	4b24      	ldr	r3, [pc, #144]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	b29a      	uxth	r2, r3
 8000968:	8939      	ldrh	r1, [r7, #8]
 800096a:	8978      	ldrh	r0, [r7, #10]
 800096c:	2300      	movs	r3, #0
 800096e:	f000 f8bd 	bl	8000aec <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,LCD_COLOR_BLACK);
 8000972:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	4413      	add	r3, r2
 800097c:	b298      	uxth	r0, r3
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	3301      	adds	r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	8939      	ldrh	r1, [r7, #8]
 800098a:	2300      	movs	r3, #0
 800098c:	f000 f8ae 	bl	8000aec <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000990:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	b29a      	uxth	r2, r3
 8000996:	8939      	ldrh	r1, [r7, #8]
 8000998:	8978      	ldrh	r0, [r7, #10]
 800099a:	2300      	movs	r3, #0
 800099c:	f000 f8cd 	bl	8000b3a <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,LCD_COLOR_BLACK);
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	893b      	ldrh	r3, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	b299      	uxth	r1, r3
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	8978      	ldrh	r0, [r7, #10]
 80009b4:	2300      	movs	r3, #0
 80009b6:	f000 f8c0 	bl	8000b3a <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 80009ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	3301      	adds	r3, #1
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	ddbb      	ble.n	800094a <LCD_Draw_Square_Fill_Border+0x3a>
	for(int16_t i=1; i<=blockSize; i++)
 80009d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	3301      	adds	r3, #1
 80009da:	b29b      	uxth	r3, r3
 80009dc:	81fb      	strh	r3, [r7, #14]
 80009de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009e2:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <LCD_Draw_Square_Fill_Border+0xe4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	ddac      	ble.n	8000944 <LCD_Draw_Square_Fill_Border+0x34>
	        }
	    }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000004 	.word	0x20000004

080009f8 <LCD_Erase_Square>:

void LCD_Erase_Square(uint16_t Xpos, uint16_t Ypos)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	460a      	mov	r2, r1
 8000a02:	80fb      	strh	r3, [r7, #6]
 8000a04:	4613      	mov	r3, r2
 8000a06:	80bb      	strh	r3, [r7, #4]
	uint16_t x = Xpos*blockSize;
 8000a08:	4b36      	ldr	r3, [pc, #216]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	88fa      	ldrh	r2, [r7, #6]
 8000a10:	fb12 f303 	smulbb	r3, r2, r3
 8000a14:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000a16:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	88ba      	ldrh	r2, [r7, #4]
 8000a1e:	fb12 f303 	smulbb	r3, r2, r3
 8000a22:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000a24:	2301      	movs	r3, #1
 8000a26:	81fb      	strh	r3, [r7, #14]
 8000a28:	e051      	b.n	8000ace <LCD_Erase_Square+0xd6>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	81bb      	strh	r3, [r7, #12]
 8000a2e:	e042      	b.n	8000ab6 <LCD_Erase_Square+0xbe>
	        {
	            LCD_Draw_Pixel(i+x, j+y, GameScreenColor);
 8000a30:	89fa      	ldrh	r2, [r7, #14]
 8000a32:	897b      	ldrh	r3, [r7, #10]
 8000a34:	4413      	add	r3, r2
 8000a36:	b298      	uxth	r0, r3
 8000a38:	89ba      	ldrh	r2, [r7, #12]
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	4a29      	ldr	r2, [pc, #164]	@ (8000ae8 <LCD_Erase_Square+0xf0>)
 8000a42:	8812      	ldrh	r2, [r2, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f7ff ff45 	bl	80008d4 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b25      	ldr	r3, [pc, #148]	@ (8000ae8 <LCD_Erase_Square+0xf0>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	8939      	ldrh	r1, [r7, #8]
 8000a56:	8978      	ldrh	r0, [r7, #10]
 8000a58:	f000 f848 	bl	8000aec <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	897b      	ldrh	r3, [r7, #10]
 8000a64:	4413      	add	r3, r2
 8000a66:	b298      	uxth	r0, r3
 8000a68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae8 <LCD_Erase_Square+0xf0>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	8939      	ldrh	r1, [r7, #8]
 8000a78:	f000 f838 	bl	8000aec <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 8000a7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <LCD_Erase_Square+0xf0>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	8939      	ldrh	r1, [r7, #8]
 8000a88:	8978      	ldrh	r0, [r7, #10]
 8000a8a:	f000 f856 	bl	8000b3a <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	893b      	ldrh	r3, [r7, #8]
 8000a96:	4413      	add	r3, r2
 8000a98:	b299      	uxth	r1, r3
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <LCD_Erase_Square+0xf0>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	8978      	ldrh	r0, [r7, #10]
 8000aa6:	f000 f848 	bl	8000b3a <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000aaa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	81bb      	strh	r3, [r7, #12]
 8000ab6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	ddb6      	ble.n	8000a30 <LCD_Erase_Square+0x38>
	for(int16_t i=1; i<=blockSize; i++)
 8000ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	81fb      	strh	r3, [r7, #14]
 8000ace:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <LCD_Erase_Square+0xec>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	dda7      	ble.n	8000a2a <LCD_Erase_Square+0x32>
	        }
	    }
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	20000002 	.word	0x20000002

08000aec <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	81fb      	strh	r3, [r7, #14]
 8000b0e:	e00b      	b.n	8000b28 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000b10:	89fa      	ldrh	r2, [r7, #14]
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	b299      	uxth	r1, r3
 8000b18:	883a      	ldrh	r2, [r7, #0]
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fed9 	bl	80008d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	3301      	adds	r3, #1
 8000b26:	81fb      	strh	r3, [r7, #14]
 8000b28:	89fa      	ldrh	r2, [r7, #14]
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3ef      	bcc.n	8000b10 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}

08000b3a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000b3a:	b590      	push	{r4, r7, lr}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4604      	mov	r4, r0
 8000b42:	4608      	mov	r0, r1
 8000b44:	4611      	mov	r1, r2
 8000b46:	461a      	mov	r2, r3
 8000b48:	4623      	mov	r3, r4
 8000b4a:	80fb      	strh	r3, [r7, #6]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	80bb      	strh	r3, [r7, #4]
 8000b50:	460b      	mov	r3, r1
 8000b52:	807b      	strh	r3, [r7, #2]
 8000b54:	4613      	mov	r3, r2
 8000b56:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	81fb      	strh	r3, [r7, #14]
 8000b5c:	e00b      	b.n	8000b76 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000b5e:	89fa      	ldrh	r2, [r7, #14]
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4413      	add	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	883a      	ldrh	r2, [r7, #0]
 8000b68:	88b9      	ldrh	r1, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff feb2 	bl	80008d4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	3301      	adds	r3, #1
 8000b74:	81fb      	strh	r3, [r7, #14]
 8000b76:	89fa      	ldrh	r2, [r7, #14]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3ef      	bcc.n	8000b5e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd90      	pop	{r4, r7, pc}

08000b88 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d10e      	bne.n	8000bbc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e007      	b.n	8000bb4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ba4:	4908      	ldr	r1, [pc, #32]	@ (8000bc8 <LCD_Clear+0x40>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	88ba      	ldrh	r2, [r7, #4]
 8000baa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000bba:	d3f3      	bcc.n	8000ba4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200005a0 	.word	0x200005a0

08000bcc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <LCD_SetTextColor+0x1c>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	8013      	strh	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20000000 	.word	0x20000000

08000bec <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <LCD_SetFont+0x1c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000114 	.word	0x20000114

08000c0c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	603a      	str	r2, [r7, #0]
 8000c16:	80fb      	strh	r3, [r7, #6]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e04c      	b.n	8000cc4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	e03f      	b.n	8000cb0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <LCD_Draw_Char+0xd0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	889b      	ldrh	r3, [r3, #4]
 8000c42:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <LCD_Draw_Char+0xd4>)
 8000c44:	fba2 2303 	umull	r2, r3, r2, r3
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	409a      	lsls	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	fa42 f303 	asr.w	r3, r2, r3
 8000c58:	400b      	ands	r3, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d104      	bne.n	8000c68 <LCD_Draw_Char+0x5c>
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <LCD_Draw_Char+0xd0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	889b      	ldrh	r3, [r3, #4]
 8000c64:	2b0c      	cmp	r3, #12
 8000c66:	d920      	bls.n	8000caa <LCD_Draw_Char+0x9e>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	fa42 f303 	asr.w	r3, r2, r3
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d104      	bne.n	8000c8c <LCD_Draw_Char+0x80>
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <LCD_Draw_Char+0xd0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	889b      	ldrh	r3, [r3, #4]
 8000c88:	2b0c      	cmp	r3, #12
 8000c8a:	d80e      	bhi.n	8000caa <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	4413      	add	r3, r2
 8000c94:	b298      	uxth	r0, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4a10      	ldr	r2, [pc, #64]	@ (8000ce4 <LCD_Draw_Char+0xd8>)
 8000ca2:	8812      	ldrh	r2, [r2, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f7ff fe15 	bl	80008d4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <LCD_Draw_Char+0xd0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	889b      	ldrh	r3, [r3, #4]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d3b8      	bcc.n	8000c30 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <LCD_Draw_Char+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	88db      	ldrh	r3, [r3, #6]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d3ab      	bcc.n	8000c2a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000114 	.word	0x20000114
 8000ce0:	aaaaaaab 	.word	0xaaaaaaab
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	3b20      	subs	r3, #32
 8000cfe:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <LCD_DisplayChar+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <LCD_DisplayChar+0x40>)
 8000d0a:	6809      	ldr	r1, [r1, #0]
 8000d0c:	88c9      	ldrh	r1, [r1, #6]
 8000d0e:	fb01 f303 	mul.w	r3, r1, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	441a      	add	r2, r3
 8000d16:	88b9      	ldrh	r1, [r7, #4]
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff76 	bl	8000c0c <LCD_Draw_Char>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000114 	.word	0x20000114

08000d2c <GameInit>:
	LCD_DisplayChar(140,160,'d');
//	blockOne();
}

void GameInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	uint16_t size = 10;
 8000d32:	230a      	movs	r3, #10
 8000d34:	80fb      	strh	r3, [r7, #6]

	LCD_Clear(0,GameScreenColor);
 8000d36:	4b3b      	ldr	r3, [pc, #236]	@ (8000e24 <GameInit+0xf8>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff23 	bl	8000b88 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d42:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d46:	f7ff ff41 	bl	8000bcc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000d4a:	4837      	ldr	r0, [pc, #220]	@ (8000e28 <GameInit+0xfc>)
 8000d4c:	f7ff ff4e 	bl	8000bec <LCD_SetFont>

	LCD_DisplayChar(80,140,'W');
 8000d50:	2257      	movs	r2, #87	@ 0x57
 8000d52:	218c      	movs	r1, #140	@ 0x8c
 8000d54:	2050      	movs	r0, #80	@ 0x50
 8000d56:	f7ff ffc7 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(94,140,'e');
 8000d5a:	2265      	movs	r2, #101	@ 0x65
 8000d5c:	218c      	movs	r1, #140	@ 0x8c
 8000d5e:	205e      	movs	r0, #94	@ 0x5e
 8000d60:	f7ff ffc2 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(104,140,'l');
 8000d64:	226c      	movs	r2, #108	@ 0x6c
 8000d66:	218c      	movs	r1, #140	@ 0x8c
 8000d68:	2068      	movs	r0, #104	@ 0x68
 8000d6a:	f7ff ffbd 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(112,140,'c');
 8000d6e:	2263      	movs	r2, #99	@ 0x63
 8000d70:	218c      	movs	r1, #140	@ 0x8c
 8000d72:	2070      	movs	r0, #112	@ 0x70
 8000d74:	f7ff ffb8 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(124,140,'o');
 8000d78:	226f      	movs	r2, #111	@ 0x6f
 8000d7a:	218c      	movs	r1, #140	@ 0x8c
 8000d7c:	207c      	movs	r0, #124	@ 0x7c
 8000d7e:	f7ff ffb3 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'m');
 8000d82:	226d      	movs	r2, #109	@ 0x6d
 8000d84:	218c      	movs	r1, #140	@ 0x8c
 8000d86:	208c      	movs	r0, #140	@ 0x8c
 8000d88:	f7ff ffae 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'e');
 8000d8c:	2265      	movs	r2, #101	@ 0x65
 8000d8e:	218c      	movs	r1, #140	@ 0x8c
 8000d90:	209b      	movs	r0, #155	@ 0x9b
 8000d92:	f7ff ffa9 	bl	8000ce8 <LCD_DisplayChar>

	LCD_DisplayChar(110,165,'t');
 8000d96:	2274      	movs	r2, #116	@ 0x74
 8000d98:	21a5      	movs	r1, #165	@ 0xa5
 8000d9a:	206e      	movs	r0, #110	@ 0x6e
 8000d9c:	f7ff ffa4 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(120,165,'o');
 8000da0:	226f      	movs	r2, #111	@ 0x6f
 8000da2:	21a5      	movs	r1, #165	@ 0xa5
 8000da4:	2078      	movs	r0, #120	@ 0x78
 8000da6:	f7ff ff9f 	bl	8000ce8 <LCD_DisplayChar>

	LCD_DisplayChar(95,190,'T');
 8000daa:	2254      	movs	r2, #84	@ 0x54
 8000dac:	21be      	movs	r1, #190	@ 0xbe
 8000dae:	205f      	movs	r0, #95	@ 0x5f
 8000db0:	f7ff ff9a 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(105,190,'e');
 8000db4:	2265      	movs	r2, #101	@ 0x65
 8000db6:	21be      	movs	r1, #190	@ 0xbe
 8000db8:	2069      	movs	r0, #105	@ 0x69
 8000dba:	f7ff ff95 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(115,190,'t');
 8000dbe:	2274      	movs	r2, #116	@ 0x74
 8000dc0:	21be      	movs	r1, #190	@ 0xbe
 8000dc2:	2073      	movs	r0, #115	@ 0x73
 8000dc4:	f7ff ff90 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(125,190,'r');
 8000dc8:	2272      	movs	r2, #114	@ 0x72
 8000dca:	21be      	movs	r1, #190	@ 0xbe
 8000dcc:	207d      	movs	r0, #125	@ 0x7d
 8000dce:	f7ff ff8b 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(132,190,'i');
 8000dd2:	2269      	movs	r2, #105	@ 0x69
 8000dd4:	21be      	movs	r1, #190	@ 0xbe
 8000dd6:	2084      	movs	r0, #132	@ 0x84
 8000dd8:	f7ff ff86 	bl	8000ce8 <LCD_DisplayChar>
	LCD_DisplayChar(139,190,'s');
 8000ddc:	2273      	movs	r2, #115	@ 0x73
 8000dde:	21be      	movs	r1, #190	@ 0xbe
 8000de0:	208b      	movs	r0, #139	@ 0x8b
 8000de2:	f7ff ff81 	bl	8000ce8 <LCD_DisplayChar>
//	blockSix(105,55,10,LCD_COLOR_MAGENTA);
//	blockSeven(155,55,10,LCD_COLOR_RED);
//
//	blockOneV(45,85,10,LCD_COLOR_CYAN);

	LCD_Clear(0,GameScreenColor);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <GameInit+0xf8>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4619      	mov	r1, r3
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fecb 	bl	8000b88 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000df2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000df6:	f7ff fee9 	bl	8000bcc <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000dfa:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <GameInit+0xfc>)
 8000dfc:	f7ff fef6 	bl	8000bec <LCD_SetFont>
//	__disable_irq();
	drawBottomBorder();
 8000e00:	f001 fc8c 	bl	800271c <drawBottomBorder>
//	__enable_irq();

//	drawBlockSeven(5, 2, 1);
	updateCurrentBlock(1, 5, 2, 1);
 8000e04:	2301      	movs	r3, #1
 8000e06:	2202      	movs	r2, #2
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f001 fe0c 	bl	8002a28 <updateCurrentBlock>
	drawCurrentBlock();
 8000e10:	f001 fd62 	bl	80028d8 <drawCurrentBlock>
	HAL_Delay(1000);
 8000e14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e18:	f002 ffaa 	bl	8003d70 <HAL_Delay>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000002 	.word	0x20000002
 8000e28:	20000008 	.word	0x20000008

08000e2c <drawBlockOne>:
	LCD_DisplayChar(112,160,'v');
	LCD_DisplayChar(124,160,'e');
	LCD_DisplayChar(140,160,'r');
}

void drawBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	460b      	mov	r3, r1
 8000e38:	80bb      	strh	r3, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d002      	beq.n	8000e4a <drawBlockOne+0x1e>
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d129      	bne.n	8000e9e <drawBlockOne+0x72>
		for (int i = Xpos; i < (Xpos+4); i++){
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	e021      	b.n	8000e94 <drawBlockOne+0x68>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_CYAN);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	88b9      	ldrh	r1, [r7, #4]
 8000e56:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fd58 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8000e60:	88ba      	ldrh	r2, [r7, #4]
 8000e62:	492b      	ldr	r1, [pc, #172]	@ (8000f10 <drawBlockOne+0xe4>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4413      	add	r3, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_CYAN;
 8000e76:	88ba      	ldrh	r2, [r7, #4]
 8000e78:	4926      	ldr	r1, [pc, #152]	@ (8000f14 <drawBlockOne+0xe8>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	4413      	add	r3, r2
 8000e86:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	3303      	adds	r3, #3
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	ddd8      	ble.n	8000e50 <drawBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d002      	beq.n	8000eaa <drawBlockOne+0x7e>
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d12e      	bne.n	8000f08 <drawBlockOne+0xdc>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	e025      	b.n	8000efe <drawBlockOne+0xd2>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_CYAN);
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	b291      	uxth	r1, r2
 8000ebc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fd25 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	4811      	ldr	r0, [pc, #68]	@ (8000f10 <drawBlockOne+0xe4>)
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_CYAN;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	1c59      	adds	r1, r3, #1
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <drawBlockOne+0xe8>)
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000ef4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	3302      	adds	r3, #2
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	ddd4      	ble.n	8000eb2 <drawBlockOne+0x86>
		}
	}
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000298 	.word	0x20000298
 8000f14:	20000118 	.word	0x20000118

08000f18 <eraseBlockOne>:

void eraseBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	460b      	mov	r3, r1
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d002      	beq.n	8000f36 <eraseBlockOne+0x1e>
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d127      	bne.n	8000f86 <eraseBlockOne+0x6e>
		for (int i = Xpos; i < (Xpos+4); i++){
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e01f      	b.n	8000f7c <eraseBlockOne+0x64>
			LCD_Erase_Square(i, Ypos);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	88ba      	ldrh	r2, [r7, #4]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fd57 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 8000f4a:	88b9      	ldrh	r1, [r7, #4]
 8000f4c:	4829      	ldr	r0, [pc, #164]	@ (8000ff4 <eraseBlockOne+0xdc>)
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 8000f60:	88b9      	ldrh	r1, [r7, #4]
 8000f62:	4825      	ldr	r0, [pc, #148]	@ (8000ff8 <eraseBlockOne+0xe0>)
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4613      	mov	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	3303      	adds	r3, #3
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	ddda      	ble.n	8000f3c <eraseBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d002      	beq.n	8000f92 <eraseBlockOne+0x7a>
 8000f8c:	887b      	ldrh	r3, [r7, #2]
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d12c      	bne.n	8000fec <eraseBlockOne+0xd4>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	e023      	b.n	8000fe2 <eraseBlockOne+0xca>
			LCD_Erase_Square(Xpos+1, i);
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fd26 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+1][i] = 0;
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	4910      	ldr	r1, [pc, #64]	@ (8000ff4 <eraseBlockOne+0xdc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = 0;
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	490b      	ldr	r1, [pc, #44]	@ (8000ff8 <eraseBlockOne+0xe0>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	ddd6      	ble.n	8000f9a <eraseBlockOne+0x82>
		}
	}
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000298 	.word	0x20000298
 8000ff8:	20000118 	.word	0x20000118

08000ffc <drawBlockTwo>:

void drawBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d147      	bne.n	80010a4 <drawBlockTwo+0xa8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e01f      	b.n	800105a <drawBlockTwo+0x5e>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	b29b      	uxth	r3, r3
 800101e:	88b9      	ldrh	r1, [r7, #4]
 8001020:	221f      	movs	r2, #31
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fc74 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8001028:	88b9      	ldrh	r1, [r7, #4]
 800102a:	489a      	ldr	r0, [pc, #616]	@ (8001294 <drawBlockTwo+0x298>)
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	2201      	movs	r2, #1
 800103a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_BLUE;
 800103e:	88b9      	ldrh	r1, [r7, #4]
 8001040:	4895      	ldr	r0, [pc, #596]	@ (8001298 <drawBlockTwo+0x29c>)
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	221f      	movs	r2, #31
 8001050:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	3302      	adds	r3, #2
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	429a      	cmp	r2, r3
 8001062:	ddda      	ble.n	800101a <drawBlockTwo+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_BLUE);
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	b299      	uxth	r1, r3
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	221f      	movs	r2, #31
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fc4e 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos][Ypos-1] = 1;
 8001074:	88fa      	ldrh	r2, [r7, #6]
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	1e59      	subs	r1, r3, #1
 800107a:	4886      	ldr	r0, [pc, #536]	@ (8001294 <drawBlockTwo+0x298>)
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	2201      	movs	r2, #1
 8001088:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos-1] = LCD_COLOR_BLUE;
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	88bb      	ldrh	r3, [r7, #4]
 8001090:	1e59      	subs	r1, r3, #1
 8001092:	4881      	ldr	r0, [pc, #516]	@ (8001298 <drawBlockTwo+0x29c>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	221f      	movs	r2, #31
 80010a0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80010a4:	887b      	ldrh	r3, [r7, #2]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d150      	bne.n	800114c <drawBlockTwo+0x150>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80010aa:	88bb      	ldrh	r3, [r7, #4]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	e023      	b.n	80010fa <drawBlockTwo+0xfe>
				LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	b291      	uxth	r1, r2
 80010bc:	221f      	movs	r2, #31
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fc26 	bl	8000910 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[Xpos+1][i] = 1;
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	4972      	ldr	r1, [pc, #456]	@ (8001294 <drawBlockTwo+0x298>)
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4413      	add	r3, r2
 80010d6:	2201      	movs	r2, #1
 80010d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Obj_Color[Xpos+1][i] = LCD_COLOR_BLUE;
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	496d      	ldr	r1, [pc, #436]	@ (8001298 <drawBlockTwo+0x29c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	221f      	movs	r2, #31
 80010f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	3301      	adds	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	88bb      	ldrh	r3, [r7, #4]
 80010fc:	3301      	adds	r3, #1
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	ddd6      	ble.n	80010b2 <drawBlockTwo+0xb6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_BLUE);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	3302      	adds	r3, #2
 8001108:	b298      	uxth	r0, r3
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	3b01      	subs	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	221f      	movs	r2, #31
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fbfc 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos+2][Ypos-1] = 1;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	1c9a      	adds	r2, r3, #2
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	1e59      	subs	r1, r3, #1
 8001120:	485c      	ldr	r0, [pc, #368]	@ (8001294 <drawBlockTwo+0x298>)
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	2201      	movs	r2, #1
 800112e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos+2][Ypos-1] = LCD_COLOR_BLUE;
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	1c9a      	adds	r2, r3, #2
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	1e59      	subs	r1, r3, #1
 800113a:	4857      	ldr	r0, [pc, #348]	@ (8001298 <drawBlockTwo+0x29c>)
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	221f      	movs	r2, #31
 8001148:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d14b      	bne.n	80011ea <drawBlockTwo+0x1ee>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e01f      	b.n	8001198 <drawBlockTwo+0x19c>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	b29b      	uxth	r3, r3
 800115c:	88b9      	ldrh	r1, [r7, #4]
 800115e:	221f      	movs	r2, #31
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fbd5 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8001166:	88b9      	ldrh	r1, [r7, #4]
 8001168:	484a      	ldr	r0, [pc, #296]	@ (8001294 <drawBlockTwo+0x298>)
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	2201      	movs	r2, #1
 8001178:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_BLUE;
 800117c:	88b9      	ldrh	r1, [r7, #4]
 800117e:	4846      	ldr	r0, [pc, #280]	@ (8001298 <drawBlockTwo+0x29c>)
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	221f      	movs	r2, #31
 800118e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	3302      	adds	r3, #2
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	ddda      	ble.n	8001158 <drawBlockTwo+0x15c>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_BLUE);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	3302      	adds	r3, #2
 80011a6:	b298      	uxth	r0, r3
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	221f      	movs	r2, #31
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fbad 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos+2][Ypos+1] = 1;
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	1c9a      	adds	r2, r3, #2
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	1c59      	adds	r1, r3, #1
 80011be:	4835      	ldr	r0, [pc, #212]	@ (8001294 <drawBlockTwo+0x298>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	2201      	movs	r2, #1
 80011cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos+2][Ypos+1] = LCD_COLOR_BLUE;
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	1c9a      	adds	r2, r3, #2
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	1c59      	adds	r1, r3, #1
 80011d8:	482f      	ldr	r0, [pc, #188]	@ (8001298 <drawBlockTwo+0x29c>)
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	440b      	add	r3, r1
 80011e4:	221f      	movs	r2, #31
 80011e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 80011ea:	887b      	ldrh	r3, [r7, #2]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d14c      	bne.n	800128a <drawBlockTwo+0x28e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80011f0:	88bb      	ldrh	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	e023      	b.n	8001240 <drawBlockTwo+0x244>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	b291      	uxth	r1, r2
 8001202:	221f      	movs	r2, #31
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fb83 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos+1][i] = 1;
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	4921      	ldr	r1, [pc, #132]	@ (8001294 <drawBlockTwo+0x298>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	4413      	add	r3, r2
 800121c:	2201      	movs	r2, #1
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = LCD_COLOR_BLUE;
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	491c      	ldr	r1, [pc, #112]	@ (8001298 <drawBlockTwo+0x29c>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	221f      	movs	r2, #31
 8001236:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3301      	adds	r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	ddd6      	ble.n	80011f8 <drawBlockTwo+0x1fc>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_BLUE);
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	b299      	uxth	r1, r3
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	221f      	movs	r2, #31
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fb5b 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos][Ypos+1] = 1;
 800125a:	88fa      	ldrh	r2, [r7, #6]
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	1c59      	adds	r1, r3, #1
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <drawBlockTwo+0x298>)
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	2201      	movs	r2, #1
 800126e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos+1] = LCD_COLOR_BLUE;
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	4807      	ldr	r0, [pc, #28]	@ (8001298 <drawBlockTwo+0x29c>)
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	221f      	movs	r2, #31
 8001286:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000298 	.word	0x20000298
 8001298:	20000118 	.word	0x20000118

0800129c <eraseBlockTwo>:

void eraseBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d147      	bne.n	8001344 <eraseBlockTwo+0xa8>
		for (int i = Xpos; i < (Xpos+3); i++){
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e01f      	b.n	80012fa <eraseBlockTwo+0x5e>
			LCD_Erase_Square(i,Ypos);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fb98 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 80012c8:	88b9      	ldrh	r1, [r7, #4]
 80012ca:	489a      	ldr	r0, [pc, #616]	@ (8001534 <eraseBlockTwo+0x298>)
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	2200      	movs	r2, #0
 80012da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 80012de:	88b9      	ldrh	r1, [r7, #4]
 80012e0:	4895      	ldr	r0, [pc, #596]	@ (8001538 <eraseBlockTwo+0x29c>)
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	3302      	adds	r3, #2
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	ddda      	ble.n	80012ba <eraseBlockTwo+0x1e>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	b29a      	uxth	r2, r3
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fb72 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos][Ypos-1] = 0;
 8001314:	88fa      	ldrh	r2, [r7, #6]
 8001316:	88bb      	ldrh	r3, [r7, #4]
 8001318:	1e59      	subs	r1, r3, #1
 800131a:	4886      	ldr	r0, [pc, #536]	@ (8001534 <eraseBlockTwo+0x298>)
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	2200      	movs	r2, #0
 8001328:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos-1] = 0;
 800132c:	88fa      	ldrh	r2, [r7, #6]
 800132e:	88bb      	ldrh	r3, [r7, #4]
 8001330:	1e59      	subs	r1, r3, #1
 8001332:	4881      	ldr	r0, [pc, #516]	@ (8001538 <eraseBlockTwo+0x29c>)
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	2200      	movs	r2, #0
 8001340:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d150      	bne.n	80013ec <eraseBlockTwo+0x150>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	3b01      	subs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	e023      	b.n	800139a <eraseBlockTwo+0xfe>
				LCD_Erase_Square(Xpos+1,i);
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	3301      	adds	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	b292      	uxth	r2, r2
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fb4a 	bl	80009f8 <LCD_Erase_Square>
				LCD_Screen[Xpos+1][i] = 0;
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	4972      	ldr	r1, [pc, #456]	@ (8001534 <eraseBlockTwo+0x298>)
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Obj_Color[Xpos+1][i] = 0;
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	496d      	ldr	r1, [pc, #436]	@ (8001538 <eraseBlockTwo+0x29c>)
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4413      	add	r3, r2
 800138e:	2200      	movs	r2, #0
 8001390:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	3301      	adds	r3, #1
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	88bb      	ldrh	r3, [r7, #4]
 800139c:	3301      	adds	r3, #1
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	ddd6      	ble.n	8001352 <eraseBlockTwo+0xb6>
			}
			LCD_Erase_Square(Xpos+2,Ypos-1);
 80013a4:	88fb      	ldrh	r3, [r7, #6]
 80013a6:	3302      	adds	r3, #2
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f7ff fb20 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+2][Ypos-1] = 0;
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	1c9a      	adds	r2, r3, #2
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	1e59      	subs	r1, r3, #1
 80013c0:	485c      	ldr	r0, [pc, #368]	@ (8001534 <eraseBlockTwo+0x298>)
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	2200      	movs	r2, #0
 80013ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos+2][Ypos-1] = 0;
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	1c9a      	adds	r2, r3, #2
 80013d6:	88bb      	ldrh	r3, [r7, #4]
 80013d8:	1e59      	subs	r1, r3, #1
 80013da:	4857      	ldr	r0, [pc, #348]	@ (8001538 <eraseBlockTwo+0x29c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	2200      	movs	r2, #0
 80013e8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d14b      	bne.n	800148a <eraseBlockTwo+0x1ee>
		for (int i = Xpos; i < (Xpos+3); i++){
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e01f      	b.n	8001438 <eraseBlockTwo+0x19c>
			LCD_Erase_Square(i,Ypos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	88ba      	ldrh	r2, [r7, #4]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff faf9 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 8001406:	88b9      	ldrh	r1, [r7, #4]
 8001408:	484a      	ldr	r0, [pc, #296]	@ (8001534 <eraseBlockTwo+0x298>)
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	2200      	movs	r2, #0
 8001418:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 800141c:	88b9      	ldrh	r1, [r7, #4]
 800141e:	4846      	ldr	r0, [pc, #280]	@ (8001538 <eraseBlockTwo+0x29c>)
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	440b      	add	r3, r1
 800142c:	2200      	movs	r2, #0
 800142e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	3302      	adds	r3, #2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	ddda      	ble.n	80013f8 <eraseBlockTwo+0x15c>
		}
		LCD_Erase_Square(Xpos+2,Ypos+1);
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	3302      	adds	r3, #2
 8001446:	b29a      	uxth	r2, r3
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f7ff fad1 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos+2][Ypos+1] = 0;
 8001456:	88fb      	ldrh	r3, [r7, #6]
 8001458:	1c9a      	adds	r2, r3, #2
 800145a:	88bb      	ldrh	r3, [r7, #4]
 800145c:	1c59      	adds	r1, r3, #1
 800145e:	4835      	ldr	r0, [pc, #212]	@ (8001534 <eraseBlockTwo+0x298>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	2200      	movs	r2, #0
 800146c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos+2][Ypos+1] = 0;
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	1c9a      	adds	r2, r3, #2
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	482f      	ldr	r0, [pc, #188]	@ (8001538 <eraseBlockTwo+0x29c>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	2200      	movs	r2, #0
 8001486:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d14c      	bne.n	800152a <eraseBlockTwo+0x28e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	e023      	b.n	80014e0 <eraseBlockTwo+0x244>
			LCD_Erase_Square(Xpos+1,i);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	3301      	adds	r3, #1
 800149c:	b29b      	uxth	r3, r3
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	b292      	uxth	r2, r2
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff faa7 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+1][i] = 0;
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	4921      	ldr	r1, [pc, #132]	@ (8001534 <eraseBlockTwo+0x298>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	4413      	add	r3, r2
 80014bc:	2200      	movs	r2, #0
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = 0;
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	491c      	ldr	r1, [pc, #112]	@ (8001538 <eraseBlockTwo+0x29c>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3301      	adds	r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	ddd6      	ble.n	8001498 <eraseBlockTwo+0x1fc>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80014ea:	88bb      	ldrh	r3, [r7, #4]
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fa7f 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos][Ypos+1] = 0;
 80014fa:	88fa      	ldrh	r2, [r7, #6]
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	1c59      	adds	r1, r3, #1
 8001500:	480c      	ldr	r0, [pc, #48]	@ (8001534 <eraseBlockTwo+0x298>)
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	2200      	movs	r2, #0
 800150e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos+1] = 0;
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	1c59      	adds	r1, r3, #1
 8001518:	4807      	ldr	r0, [pc, #28]	@ (8001538 <eraseBlockTwo+0x29c>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	2200      	movs	r2, #0
 8001526:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000298 	.word	0x20000298
 8001538:	20000118 	.word	0x20000118

0800153c <drawBlockThree>:

void drawBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
 8001546:	460b      	mov	r3, r1
 8001548:	80bb      	strh	r3, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d14f      	bne.n	80015f4 <drawBlockThree+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e021      	b.n	800159e <drawBlockThree+0x62>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	b29b      	uxth	r3, r3
 800155e:	88b9      	ldrh	r1, [r7, #4]
 8001560:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f9d3 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 800156a:	88b9      	ldrh	r1, [r7, #4]
 800156c:	48a1      	ldr	r0, [pc, #644]	@ (80017f4 <drawBlockThree+0x2b8>)
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	2201      	movs	r2, #1
 800157c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_ORANGE;
 8001580:	88b9      	ldrh	r1, [r7, #4]
 8001582:	489d      	ldr	r0, [pc, #628]	@ (80017f8 <drawBlockThree+0x2bc>)
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001594:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	3302      	adds	r3, #2
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	ddd8      	ble.n	800155a <drawBlockThree+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_ORANGE);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	3302      	adds	r3, #2
 80015ac:	b298      	uxth	r0, r3
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff f9a9 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos+2][Ypos-1] = 1;
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	1c9a      	adds	r2, r3, #2
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	1e59      	subs	r1, r3, #1
 80015c6:	488b      	ldr	r0, [pc, #556]	@ (80017f4 <drawBlockThree+0x2b8>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	2201      	movs	r2, #1
 80015d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos+2][Ypos-1] = LCD_COLOR_ORANGE;
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	1c9a      	adds	r2, r3, #2
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	1e59      	subs	r1, r3, #1
 80015e0:	4885      	ldr	r0, [pc, #532]	@ (80017f8 <drawBlockThree+0x2bc>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80015f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d154      	bne.n	80016a4 <drawBlockThree+0x168>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	e025      	b.n	800164e <drawBlockThree+0x112>
				LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	3301      	adds	r3, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	b291      	uxth	r1, r2
 800160c:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f97d 	bl	8000910 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[Xpos+1][i] = 1;
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	4976      	ldr	r1, [pc, #472]	@ (80017f4 <drawBlockThree+0x2b8>)
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4413      	add	r3, r2
 8001628:	2201      	movs	r2, #1
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Obj_Color[Xpos+1][i] = LCD_COLOR_ORANGE;
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	4971      	ldr	r1, [pc, #452]	@ (80017f8 <drawBlockThree+0x2bc>)
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4413      	add	r3, r2
 8001640:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001644:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	3301      	adds	r3, #1
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	88bb      	ldrh	r3, [r7, #4]
 8001650:	3301      	adds	r3, #1
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	ddd4      	ble.n	8001602 <drawBlockThree+0xc6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_ORANGE);
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	3302      	adds	r3, #2
 800165c:	b298      	uxth	r0, r3
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	3301      	adds	r3, #1
 8001662:	b29b      	uxth	r3, r3
 8001664:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff f951 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos+2][Ypos+1] = 1;
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	1c9a      	adds	r2, r3, #2
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	1c59      	adds	r1, r3, #1
 8001676:	485f      	ldr	r0, [pc, #380]	@ (80017f4 <drawBlockThree+0x2b8>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	2201      	movs	r2, #1
 8001684:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos+2][Ypos+1] = LCD_COLOR_ORANGE;
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	1c9a      	adds	r2, r3, #2
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	1c59      	adds	r1, r3, #1
 8001690:	4859      	ldr	r0, [pc, #356]	@ (80017f8 <drawBlockThree+0x2bc>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80016a0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d14b      	bne.n	8001742 <drawBlockThree+0x206>
		for (int i = Xpos; i < (Xpos+3); i++){
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e021      	b.n	80016f4 <drawBlockThree+0x1b8>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	88b9      	ldrh	r1, [r7, #4]
 80016b6:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f928 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 80016c0:	88b9      	ldrh	r1, [r7, #4]
 80016c2:	484c      	ldr	r0, [pc, #304]	@ (80017f4 <drawBlockThree+0x2b8>)
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	2201      	movs	r2, #1
 80016d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_ORANGE;
 80016d6:	88b9      	ldrh	r1, [r7, #4]
 80016d8:	4847      	ldr	r0, [pc, #284]	@ (80017f8 <drawBlockThree+0x2bc>)
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80016ea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	3302      	adds	r3, #2
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	ddd8      	ble.n	80016b0 <drawBlockThree+0x174>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_ORANGE);
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	3301      	adds	r3, #1
 8001702:	b299      	uxth	r1, r3
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f900 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos][Ypos+1] = 1;
 8001710:	88fa      	ldrh	r2, [r7, #6]
 8001712:	88bb      	ldrh	r3, [r7, #4]
 8001714:	1c59      	adds	r1, r3, #1
 8001716:	4837      	ldr	r0, [pc, #220]	@ (80017f4 <drawBlockThree+0x2b8>)
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	2201      	movs	r2, #1
 8001724:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos+1] = LCD_COLOR_ORANGE;
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	88bb      	ldrh	r3, [r7, #4]
 800172c:	1c59      	adds	r1, r3, #1
 800172e:	4832      	ldr	r0, [pc, #200]	@ (80017f8 <drawBlockThree+0x2bc>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800173e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d150      	bne.n	80017ea <drawBlockThree+0x2ae>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	e025      	b.n	800179c <drawBlockThree+0x260>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	3301      	adds	r3, #1
 8001754:	b29b      	uxth	r3, r3
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	b291      	uxth	r1, r2
 800175a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f8d6 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos+1][i] = 1;
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4922      	ldr	r1, [pc, #136]	@ (80017f4 <drawBlockThree+0x2b8>)
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	4413      	add	r3, r2
 8001776:	2201      	movs	r2, #1
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = LCD_COLOR_ORANGE;
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	491d      	ldr	r1, [pc, #116]	@ (80017f8 <drawBlockThree+0x2bc>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4413      	add	r3, r2
 800178e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001792:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	88bb      	ldrh	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	ddd4      	ble.n	8001750 <drawBlockThree+0x214>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_ORANGE);
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b299      	uxth	r1, r3
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f8ac 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos][Ypos-1] = 1;
 80017b8:	88fa      	ldrh	r2, [r7, #6]
 80017ba:	88bb      	ldrh	r3, [r7, #4]
 80017bc:	1e59      	subs	r1, r3, #1
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <drawBlockThree+0x2b8>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	2201      	movs	r2, #1
 80017cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos-1] = LCD_COLOR_ORANGE;
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	1e59      	subs	r1, r3, #1
 80017d6:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <drawBlockThree+0x2bc>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80017e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000298 	.word	0x20000298
 80017f8:	20000118 	.word	0x20000118

080017fc <eraseBlockThree>:

void eraseBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	460b      	mov	r3, r1
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d14b      	bne.n	80018ac <eraseBlockThree+0xb0>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	e01f      	b.n	800185a <eraseBlockThree+0x5e>
			LCD_Erase_Square(i,Ypos);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	b29b      	uxth	r3, r3
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f8e8 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 8001828:	88b9      	ldrh	r1, [r7, #4]
 800182a:	489a      	ldr	r0, [pc, #616]	@ (8001a94 <eraseBlockThree+0x298>)
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	2200      	movs	r2, #0
 800183a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 800183e:	88b9      	ldrh	r1, [r7, #4]
 8001840:	4895      	ldr	r0, [pc, #596]	@ (8001a98 <eraseBlockThree+0x29c>)
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	2200      	movs	r2, #0
 8001850:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3302      	adds	r3, #2
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	ddda      	ble.n	800181a <eraseBlockThree+0x1e>
		}
		LCD_Erase_Square(Xpos+2,Ypos-1);
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	3302      	adds	r3, #2
 8001868:	b29a      	uxth	r2, r3
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff f8c0 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos+2][Ypos-1] = 0;
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	1c9a      	adds	r2, r3, #2
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1e59      	subs	r1, r3, #1
 8001880:	4884      	ldr	r0, [pc, #528]	@ (8001a94 <eraseBlockThree+0x298>)
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	2200      	movs	r2, #0
 800188e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos+2][Ypos-1] = 0;
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	1c9a      	adds	r2, r3, #2
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	1e59      	subs	r1, r3, #1
 800189a:	487f      	ldr	r0, [pc, #508]	@ (8001a98 <eraseBlockThree+0x29c>)
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	2200      	movs	r2, #0
 80018a8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d150      	bne.n	8001954 <eraseBlockThree+0x158>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	e023      	b.n	8001902 <eraseBlockThree+0x106>
				LCD_Erase_Square(Xpos+1,i);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	3301      	adds	r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	b292      	uxth	r2, r2
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f896 	bl	80009f8 <LCD_Erase_Square>
				LCD_Screen[Xpos+1][i] = 0;
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	4970      	ldr	r1, [pc, #448]	@ (8001a94 <eraseBlockThree+0x298>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4413      	add	r3, r2
 80018de:	2200      	movs	r2, #0
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Obj_Color[Xpos+1][i] = 0;
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	496b      	ldr	r1, [pc, #428]	@ (8001a98 <eraseBlockThree+0x29c>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4413      	add	r3, r2
 80018f6:	2200      	movs	r2, #0
 80018f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3301      	adds	r3, #1
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	88bb      	ldrh	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	ddd6      	ble.n	80018ba <eraseBlockThree+0xbe>
			}
			LCD_Erase_Square(Xpos+2,Ypos+1);
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	3302      	adds	r3, #2
 8001910:	b29a      	uxth	r2, r3
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	3301      	adds	r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f7ff f86c 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+2][Ypos+1] = 0;
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	1c9a      	adds	r2, r3, #2
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	1c59      	adds	r1, r3, #1
 8001928:	485a      	ldr	r0, [pc, #360]	@ (8001a94 <eraseBlockThree+0x298>)
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	2200      	movs	r2, #0
 8001936:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos+2][Ypos+1] = 0;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	1c9a      	adds	r2, r3, #2
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	1c59      	adds	r1, r3, #1
 8001942:	4855      	ldr	r0, [pc, #340]	@ (8001a98 <eraseBlockThree+0x29c>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	2200      	movs	r2, #0
 8001950:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d147      	bne.n	80019ea <eraseBlockThree+0x1ee>
		for (int i = Xpos; i < (Xpos+3); i++){
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e01f      	b.n	80019a0 <eraseBlockThree+0x1a4>
			LCD_Erase_Square(i,Ypos);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	b29b      	uxth	r3, r3
 8001964:	88ba      	ldrh	r2, [r7, #4]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f845 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 800196e:	88b9      	ldrh	r1, [r7, #4]
 8001970:	4848      	ldr	r0, [pc, #288]	@ (8001a94 <eraseBlockThree+0x298>)
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	2200      	movs	r2, #0
 8001980:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 8001984:	88b9      	ldrh	r1, [r7, #4]
 8001986:	4844      	ldr	r0, [pc, #272]	@ (8001a98 <eraseBlockThree+0x29c>)
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	2200      	movs	r2, #0
 8001996:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	3302      	adds	r3, #2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	ddda      	ble.n	8001960 <eraseBlockThree+0x164>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f81f 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos][Ypos+1] = 0;
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	88bb      	ldrh	r3, [r7, #4]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	4834      	ldr	r0, [pc, #208]	@ (8001a94 <eraseBlockThree+0x298>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	2200      	movs	r2, #0
 80019ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos+1] = 0;
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	482f      	ldr	r0, [pc, #188]	@ (8001a98 <eraseBlockThree+0x29c>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d14c      	bne.n	8001a8a <eraseBlockThree+0x28e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	e023      	b.n	8001a40 <eraseBlockThree+0x244>
			LCD_Erase_Square(Xpos+1,i);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	3301      	adds	r3, #1
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	b292      	uxth	r2, r2
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fff7 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+1][i] = 0;
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	4921      	ldr	r1, [pc, #132]	@ (8001a94 <eraseBlockThree+0x298>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = 0;
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	491c      	ldr	r1, [pc, #112]	@ (8001a98 <eraseBlockThree+0x29c>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	4413      	add	r3, r2
 8001a34:	2200      	movs	r2, #0
 8001a36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	ddd6      	ble.n	80019f8 <eraseBlockThree+0x1fc>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe ffcf 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos][Ypos-1] = 0;
 8001a5a:	88fa      	ldrh	r2, [r7, #6]
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	1e59      	subs	r1, r3, #1
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <eraseBlockThree+0x298>)
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos-1] = 0;
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	1e59      	subs	r1, r3, #1
 8001a78:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <eraseBlockThree+0x29c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000298 	.word	0x20000298
 8001a98:	20000118 	.word	0x20000118

08001a9c <drawBlockFour>:

void drawBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	80bb      	strh	r3, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e044      	b.n	8001b3e <drawBlockFour+0xa2>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_YELLOW);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	88b9      	ldrh	r1, [r7, #4]
 8001aba:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe ff26 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8001ac4:	88b9      	ldrh	r1, [r7, #4]
 8001ac6:	4823      	ldr	r0, [pc, #140]	@ (8001b54 <drawBlockFour+0xb8>)
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_YELLOW;
 8001ada:	88b9      	ldrh	r1, [r7, #4]
 8001adc:	481e      	ldr	r0, [pc, #120]	@ (8001b58 <drawBlockFour+0xbc>)
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001aee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_YELLOW);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	b298      	uxth	r0, r3
 8001af6:	88bb      	ldrh	r3, [r7, #4]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7fe ff05 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos-1] = 1;
 8001b06:	88bb      	ldrh	r3, [r7, #4]
 8001b08:	1e59      	subs	r1, r3, #1
 8001b0a:	4812      	ldr	r0, [pc, #72]	@ (8001b54 <drawBlockFour+0xb8>)
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos-1] = LCD_COLOR_YELLOW;
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	1e59      	subs	r1, r3, #1
 8001b22:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <drawBlockFour+0xbc>)
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001b34:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	3301      	adds	r3, #1
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	ddb5      	ble.n	8001ab4 <drawBlockFour+0x18>
		}
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000298 	.word	0x20000298
 8001b58:	20000118 	.word	0x20000118

08001b5c <eraseBlockFour>:

void eraseBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
 8001b66:	460b      	mov	r3, r1
 8001b68:	80bb      	strh	r3, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e040      	b.n	8001bf6 <eraseBlockFour+0x9a>
			LCD_Erase_Square(i,Ypos);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	88ba      	ldrh	r2, [r7, #4]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe ff3b 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 8001b82:	88b9      	ldrh	r1, [r7, #4]
 8001b84:	4821      	ldr	r0, [pc, #132]	@ (8001c0c <eraseBlockFour+0xb0>)
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 8001b98:	88b9      	ldrh	r1, [r7, #4]
 8001b9a:	481d      	ldr	r0, [pc, #116]	@ (8001c10 <eraseBlockFour+0xb4>)
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(i,Ypos-1);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f7fe ff1c 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos-1] = 0;
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	1e59      	subs	r1, r3, #1
 8001bc4:	4811      	ldr	r0, [pc, #68]	@ (8001c0c <eraseBlockFour+0xb0>)
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos-1] = 0;
 8001bd8:	88bb      	ldrh	r3, [r7, #4]
 8001bda:	1e59      	subs	r1, r3, #1
 8001bdc:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <eraseBlockFour+0xb4>)
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	ddb9      	ble.n	8001b74 <eraseBlockFour+0x18>
		}
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000298 	.word	0x20000298
 8001c10:	20000118 	.word	0x20000118

08001c14 <drawBlockFive>:

void drawBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	80bb      	strh	r3, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d002      	beq.n	8001c32 <drawBlockFive+0x1e>
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d150      	bne.n	8001cd4 <drawBlockFive+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e048      	b.n	8001cca <drawBlockFive+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_GREEN);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	88b9      	ldrh	r1, [r7, #4]
 8001c3e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fe64 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8001c48:	88b9      	ldrh	r1, [r7, #4]
 8001c4a:	4850      	ldr	r0, [pc, #320]	@ (8001d8c <drawBlockFive+0x178>)
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_GREEN;
 8001c5e:	88b9      	ldrh	r1, [r7, #4]
 8001c60:	484b      	ldr	r0, [pc, #300]	@ (8001d90 <drawBlockFive+0x17c>)
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001c72:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i+1,Ypos-1,LCD_COLOR_GREEN);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b298      	uxth	r0, r3
 8001c7e:	88bb      	ldrh	r3, [r7, #4]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe fe41 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i+1][Ypos-1] = 1;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	1e59      	subs	r1, r3, #1
 8001c96:	483d      	ldr	r0, [pc, #244]	@ (8001d8c <drawBlockFive+0x178>)
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i+1][Ypos-1] = LCD_COLOR_GREEN;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	1e59      	subs	r1, r3, #1
 8001cb0:	4837      	ldr	r0, [pc, #220]	@ (8001d90 <drawBlockFive+0x17c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001cc0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	ddb1      	ble.n	8001c38 <drawBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d002      	beq.n	8001ce0 <drawBlockFive+0xcc>
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d150      	bne.n	8001d82 <drawBlockFive+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	e048      	b.n	8001d78 <drawBlockFive+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i-1,LCD_COLOR_GREEN);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b299      	uxth	r1, r3
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fe0b 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos][i-1] = 1;
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1e59      	subs	r1, r3, #1
 8001d00:	4822      	ldr	r0, [pc, #136]	@ (8001d8c <drawBlockFive+0x178>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos][i-1] = LCD_COLOR_GREEN;
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1e59      	subs	r1, r3, #1
 8001d18:	481d      	ldr	r0, [pc, #116]	@ (8001d90 <drawBlockFive+0x17c>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d28:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_GREEN);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	b291      	uxth	r1, r2
 8001d36:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fde8 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos+1][i] = 1;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	4911      	ldr	r1, [pc, #68]	@ (8001d8c <drawBlockFive+0x178>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4413      	add	r3, r2
 8001d52:	2201      	movs	r2, #1
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = LCD_COLOR_GREEN;
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <drawBlockFive+0x17c>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001d6e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	88bb      	ldrh	r3, [r7, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	68ba      	ldr	r2, [r7, #8]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	ddb1      	ble.n	8001ce6 <drawBlockFive+0xd2>
		}
	}
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000298 	.word	0x20000298
 8001d90:	20000118 	.word	0x20000118

08001d94 <eraseBlockFive>:

void eraseBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	80bb      	strh	r3, [r7, #4]
 8001da2:	4613      	mov	r3, r2
 8001da4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d002      	beq.n	8001db2 <eraseBlockFive+0x1e>
 8001dac:	887b      	ldrh	r3, [r7, #2]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d14c      	bne.n	8001e4c <eraseBlockFive+0xb8>
		for (int i = Xpos; i < (Xpos+2); i++){
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	e044      	b.n	8001e42 <eraseBlockFive+0xae>
			LCD_Erase_Square(i,Ypos);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	88ba      	ldrh	r2, [r7, #4]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fe19 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 8001dc6:	88b9      	ldrh	r1, [r7, #4]
 8001dc8:	484c      	ldr	r0, [pc, #304]	@ (8001efc <eraseBlockFive+0x168>)
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 8001ddc:	88b9      	ldrh	r1, [r7, #4]
 8001dde:	4848      	ldr	r0, [pc, #288]	@ (8001f00 <eraseBlockFive+0x16c>)
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	2200      	movs	r2, #0
 8001dee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(i+1,Ypos-1);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f7fe fdf8 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i+1][Ypos-1] = 0;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	88bb      	ldrh	r3, [r7, #4]
 8001e0e:	1e59      	subs	r1, r3, #1
 8001e10:	483a      	ldr	r0, [pc, #232]	@ (8001efc <eraseBlockFive+0x168>)
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i+1][Ypos-1] = 0;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	1e59      	subs	r1, r3, #1
 8001e2a:	4835      	ldr	r0, [pc, #212]	@ (8001f00 <eraseBlockFive+0x16c>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	2200      	movs	r2, #0
 8001e38:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	3301      	adds	r3, #1
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	ddb5      	ble.n	8001db8 <eraseBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d002      	beq.n	8001e58 <eraseBlockFive+0xc4>
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d14c      	bne.n	8001ef2 <eraseBlockFive+0x15e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8001e58:	88bb      	ldrh	r3, [r7, #4]
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	e044      	b.n	8001ee8 <eraseBlockFive+0x154>
			LCD_Erase_Square(Xpos,i-1);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fdc4 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos][i-1] = 0;
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1e59      	subs	r1, r3, #1
 8001e76:	4821      	ldr	r0, [pc, #132]	@ (8001efc <eraseBlockFive+0x168>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	2200      	movs	r2, #0
 8001e84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos][i-1] = 0;
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1e59      	subs	r1, r3, #1
 8001e8e:	481c      	ldr	r0, [pc, #112]	@ (8001f00 <eraseBlockFive+0x16c>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i);
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	b292      	uxth	r2, r2
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fda3 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+1][i] = 0;
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	4911      	ldr	r1, [pc, #68]	@ (8001efc <eraseBlockFive+0x168>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos+1][i] = 0;
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	490c      	ldr	r1, [pc, #48]	@ (8001f00 <eraseBlockFive+0x16c>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	4413      	add	r3, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	88bb      	ldrh	r3, [r7, #4]
 8001eea:	3301      	adds	r3, #1
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	ddb5      	ble.n	8001e5e <eraseBlockFive+0xca>
		}
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000298 	.word	0x20000298
 8001f00:	20000118 	.word	0x20000118

08001f04 <drawBlockSix>:

void drawBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	80bb      	strh	r3, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d14c      	bne.n	8001fb6 <drawBlockSix+0xb2>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e021      	b.n	8001f68 <drawBlockSix+0x64>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	88b9      	ldrh	r1, [r7, #4]
 8001f2a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fcee 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8001f34:	88b9      	ldrh	r1, [r7, #4]
 8001f36:	489a      	ldr	r0, [pc, #616]	@ (80021a0 <drawBlockSix+0x29c>)
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	2201      	movs	r2, #1
 8001f46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_MAGENTA;
 8001f4a:	88b9      	ldrh	r1, [r7, #4]
 8001f4c:	4895      	ldr	r0, [pc, #596]	@ (80021a4 <drawBlockSix+0x2a0>)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001f5e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	ddd8      	ble.n	8001f24 <drawBlockSix+0x20>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_MAGENTA);
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b299      	uxth	r1, r3
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fcc6 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos][Ypos-1] = 1;
 8001f84:	88fa      	ldrh	r2, [r7, #6]
 8001f86:	88bb      	ldrh	r3, [r7, #4]
 8001f88:	1e59      	subs	r1, r3, #1
 8001f8a:	4885      	ldr	r0, [pc, #532]	@ (80021a0 <drawBlockSix+0x29c>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	2201      	movs	r2, #1
 8001f98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos-1] = LCD_COLOR_MAGENTA;
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	88bb      	ldrh	r3, [r7, #4]
 8001fa0:	1e59      	subs	r1, r3, #1
 8001fa2:	4880      	ldr	r0, [pc, #512]	@ (80021a4 <drawBlockSix+0x2a0>)
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001fb2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d14c      	bne.n	8002056 <drawBlockSix+0x152>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e021      	b.n	8002008 <drawBlockSix+0x104>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	88b9      	ldrh	r1, [r7, #4]
 8001fca:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fc9e 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8001fd4:	88b9      	ldrh	r1, [r7, #4]
 8001fd6:	4872      	ldr	r0, [pc, #456]	@ (80021a0 <drawBlockSix+0x29c>)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_MAGENTA;
 8001fea:	88b9      	ldrh	r1, [r7, #4]
 8001fec:	486d      	ldr	r0, [pc, #436]	@ (80021a4 <drawBlockSix+0x2a0>)
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001ffe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	3301      	adds	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	88fb      	ldrh	r3, [r7, #6]
 800200a:	3301      	adds	r3, #1
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	ddd8      	ble.n	8001fc4 <drawBlockSix+0xc0>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_MAGENTA);
 8002012:	88bb      	ldrh	r3, [r7, #4]
 8002014:	3301      	adds	r3, #1
 8002016:	b299      	uxth	r1, r3
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fc76 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos][Ypos+1] = 1;
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	88bb      	ldrh	r3, [r7, #4]
 8002028:	1c59      	adds	r1, r3, #1
 800202a:	485d      	ldr	r0, [pc, #372]	@ (80021a0 <drawBlockSix+0x29c>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	2201      	movs	r2, #1
 8002038:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos+1] = LCD_COLOR_MAGENTA;
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	88bb      	ldrh	r3, [r7, #4]
 8002040:	1c59      	adds	r1, r3, #1
 8002042:	4858      	ldr	r0, [pc, #352]	@ (80021a4 <drawBlockSix+0x2a0>)
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002052:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8002056:	887b      	ldrh	r3, [r7, #2]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d14c      	bne.n	80020f6 <drawBlockSix+0x1f2>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800205c:	88bb      	ldrh	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e021      	b.n	80020a8 <drawBlockSix+0x1a4>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	b299      	uxth	r1, r3
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fc4e 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos][i] = 1;
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	494a      	ldr	r1, [pc, #296]	@ (80021a0 <drawBlockSix+0x29c>)
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	2201      	movs	r2, #1
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos][i] = LCD_COLOR_MAGENTA;
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	4945      	ldr	r1, [pc, #276]	@ (80021a4 <drawBlockSix+0x2a0>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800209e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	3301      	adds	r3, #1
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	ddd8      	ble.n	8002064 <drawBlockSix+0x160>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos,LCD_COLOR_MAGENTA);
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	3301      	adds	r3, #1
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	88b9      	ldrh	r1, [r7, #4]
 80020ba:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fc26 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos+1][Ypos] = 1;
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	88b9      	ldrh	r1, [r7, #4]
 80020ca:	4835      	ldr	r0, [pc, #212]	@ (80021a0 <drawBlockSix+0x29c>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	2201      	movs	r2, #1
 80020d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos+1][Ypos] = LCD_COLOR_MAGENTA;
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	88b9      	ldrh	r1, [r7, #4]
 80020e2:	4830      	ldr	r0, [pc, #192]	@ (80021a4 <drawBlockSix+0x2a0>)
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80020f2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 80020f6:	887b      	ldrh	r3, [r7, #2]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d14c      	bne.n	8002196 <drawBlockSix+0x292>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80020fc:	88bb      	ldrh	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	e021      	b.n	8002148 <drawBlockSix+0x244>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	b299      	uxth	r1, r3
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fbfe 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos][i] = 1;
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	4922      	ldr	r1, [pc, #136]	@ (80021a0 <drawBlockSix+0x29c>)
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	4413      	add	r3, r2
 8002124:	2201      	movs	r2, #1
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos][i] = LCD_COLOR_MAGENTA;
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	491d      	ldr	r1, [pc, #116]	@ (80021a4 <drawBlockSix+0x2a0>)
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4413      	add	r3, r2
 800213a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800213e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3301      	adds	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	88bb      	ldrh	r3, [r7, #4]
 800214a:	3301      	adds	r3, #1
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	429a      	cmp	r2, r3
 8002150:	ddd8      	ble.n	8002104 <drawBlockSix+0x200>
		}
		LCD_Draw_Square_Fill_Border(Xpos-1,Ypos,LCD_COLOR_MAGENTA);
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	3b01      	subs	r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	88b9      	ldrh	r1, [r7, #4]
 800215a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fbd6 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Xpos-1][Ypos] = 1;
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	88b9      	ldrh	r1, [r7, #4]
 800216a:	480d      	ldr	r0, [pc, #52]	@ (80021a0 <drawBlockSix+0x29c>)
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	2201      	movs	r2, #1
 8002178:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos-1][Ypos] = LCD_COLOR_MAGENTA;
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	1e5a      	subs	r2, r3, #1
 8002180:	88b9      	ldrh	r1, [r7, #4]
 8002182:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <drawBlockSix+0x2a0>)
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002192:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8002196:	bf00      	nop
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000298 	.word	0x20000298
 80021a4:	20000118 	.word	0x20000118

080021a8 <eraseBlockSix>:

void eraseBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
 80021b2:	460b      	mov	r3, r1
 80021b4:	80bb      	strh	r3, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d148      	bne.n	8002252 <eraseBlockSix+0xaa>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e01f      	b.n	8002208 <eraseBlockSix+0x60>
			LCD_Erase_Square(i,Ypos);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	88ba      	ldrh	r2, [r7, #4]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fc11 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 80021d6:	88b9      	ldrh	r1, [r7, #4]
 80021d8:	4892      	ldr	r0, [pc, #584]	@ (8002424 <eraseBlockSix+0x27c>)
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	2200      	movs	r2, #0
 80021e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 80021ec:	88b9      	ldrh	r1, [r7, #4]
 80021ee:	488e      	ldr	r0, [pc, #568]	@ (8002428 <eraseBlockSix+0x280>)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3301      	adds	r3, #1
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	3301      	adds	r3, #1
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	ddda      	ble.n	80021c8 <eraseBlockSix+0x20>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8002212:	88bb      	ldrh	r3, [r7, #4]
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fbeb 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos][Ypos-1] = 0;
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	88bb      	ldrh	r3, [r7, #4]
 8002226:	1e59      	subs	r1, r3, #1
 8002228:	487e      	ldr	r0, [pc, #504]	@ (8002424 <eraseBlockSix+0x27c>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	2200      	movs	r2, #0
 8002236:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos-1] = 0;
 800223a:	88fa      	ldrh	r2, [r7, #6]
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	1e59      	subs	r1, r3, #1
 8002240:	4879      	ldr	r0, [pc, #484]	@ (8002428 <eraseBlockSix+0x280>)
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	440b      	add	r3, r1
 800224c:	2200      	movs	r2, #0
 800224e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d148      	bne.n	80022ea <eraseBlockSix+0x142>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	3b01      	subs	r3, #1
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	e01f      	b.n	80022a0 <eraseBlockSix+0xf8>
			LCD_Erase_Square(i,Ypos);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	b29b      	uxth	r3, r3
 8002264:	88ba      	ldrh	r2, [r7, #4]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fbc5 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 800226e:	88b9      	ldrh	r1, [r7, #4]
 8002270:	486c      	ldr	r0, [pc, #432]	@ (8002424 <eraseBlockSix+0x27c>)
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	2200      	movs	r2, #0
 8002280:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 8002284:	88b9      	ldrh	r1, [r7, #4]
 8002286:	4868      	ldr	r0, [pc, #416]	@ (8002428 <eraseBlockSix+0x280>)
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	2200      	movs	r2, #0
 8002296:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3301      	adds	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	3301      	adds	r3, #1
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	ddda      	ble.n	8002260 <eraseBlockSix+0xb8>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80022aa:	88bb      	ldrh	r3, [r7, #4]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fb9f 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos][Ypos+1] = 0;
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	1c59      	adds	r1, r3, #1
 80022c0:	4858      	ldr	r0, [pc, #352]	@ (8002424 <eraseBlockSix+0x27c>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	2200      	movs	r2, #0
 80022ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos][Ypos+1] = 0;
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	4853      	ldr	r0, [pc, #332]	@ (8002428 <eraseBlockSix+0x280>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	2200      	movs	r2, #0
 80022e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d148      	bne.n	8002382 <eraseBlockSix+0x1da>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	e01f      	b.n	8002338 <eraseBlockSix+0x190>
			LCD_Erase_Square(Xpos,i);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe fb79 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos][i] = 0;
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	4946      	ldr	r1, [pc, #280]	@ (8002424 <eraseBlockSix+0x27c>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	2200      	movs	r2, #0
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos][i] = 0;
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	4942      	ldr	r1, [pc, #264]	@ (8002428 <eraseBlockSix+0x280>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	2200      	movs	r2, #0
 800232e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3301      	adds	r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	88bb      	ldrh	r3, [r7, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	429a      	cmp	r2, r3
 8002340:	ddda      	ble.n	80022f8 <eraseBlockSix+0x150>
		}
		LCD_Erase_Square(Xpos+1,Ypos);
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	3301      	adds	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	88ba      	ldrh	r2, [r7, #4]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fb53 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos+1][Ypos] = 0;
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	88b9      	ldrh	r1, [r7, #4]
 8002358:	4832      	ldr	r0, [pc, #200]	@ (8002424 <eraseBlockSix+0x27c>)
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	2200      	movs	r2, #0
 8002366:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos+1][Ypos] = 0;
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	88b9      	ldrh	r1, [r7, #4]
 8002370:	482d      	ldr	r0, [pc, #180]	@ (8002428 <eraseBlockSix+0x280>)
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	2200      	movs	r2, #0
 800237e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d148      	bne.n	800241a <eraseBlockSix+0x272>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002388:	88bb      	ldrh	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	e01f      	b.n	80023d0 <eraseBlockSix+0x228>
			LCD_Erase_Square(Xpos,i);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	b29a      	uxth	r2, r3
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fb2d 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos][i] = 0;
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	4920      	ldr	r1, [pc, #128]	@ (8002424 <eraseBlockSix+0x27c>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	2200      	movs	r2, #0
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos][i] = 0;
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	491c      	ldr	r1, [pc, #112]	@ (8002428 <eraseBlockSix+0x280>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	4413      	add	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	88bb      	ldrh	r3, [r7, #4]
 80023d2:	3301      	adds	r3, #1
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	ddda      	ble.n	8002390 <eraseBlockSix+0x1e8>
		}
		LCD_Erase_Square(Xpos-1,Ypos);
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	88ba      	ldrh	r2, [r7, #4]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fb07 	bl	80009f8 <LCD_Erase_Square>
		LCD_Screen[Xpos-1][Ypos] = 0;
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	88b9      	ldrh	r1, [r7, #4]
 80023f0:	480c      	ldr	r0, [pc, #48]	@ (8002424 <eraseBlockSix+0x27c>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	2200      	movs	r2, #0
 80023fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Xpos-1][Ypos] = 0;
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	88b9      	ldrh	r1, [r7, #4]
 8002408:	4807      	ldr	r0, [pc, #28]	@ (8002428 <eraseBlockSix+0x280>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	2200      	movs	r2, #0
 8002416:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000298 	.word	0x20000298
 8002428:	20000118 	.word	0x20000118

0800242c <drawBlockSeven>:

void drawBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
 8002436:	460b      	mov	r3, r1
 8002438:	80bb      	strh	r3, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d002      	beq.n	800244a <drawBlockSeven+0x1e>
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d150      	bne.n	80024ec <drawBlockSeven+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e048      	b.n	80024e2 <drawBlockSeven+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_RED);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	b29b      	uxth	r3, r3
 8002454:	88b9      	ldrh	r1, [r7, #4]
 8002456:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fa58 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Ypos] = 1;
 8002460:	88b9      	ldrh	r1, [r7, #4]
 8002462:	4850      	ldr	r0, [pc, #320]	@ (80025a4 <drawBlockSeven+0x178>)
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	2201      	movs	r2, #1
 8002472:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = LCD_COLOR_RED;
 8002476:	88b9      	ldrh	r1, [r7, #4]
 8002478:	484b      	ldr	r0, [pc, #300]	@ (80025a8 <drawBlockSeven+0x17c>)
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800248a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i-1,Ypos-1,LCD_COLOR_RED);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b298      	uxth	r0, r3
 8002496:	88bb      	ldrh	r3, [r7, #4]
 8002498:	3b01      	subs	r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fa35 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Ypos-1] = 1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	88bb      	ldrh	r3, [r7, #4]
 80024ac:	1e59      	subs	r1, r3, #1
 80024ae:	483d      	ldr	r0, [pc, #244]	@ (80025a4 <drawBlockSeven+0x178>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	2201      	movs	r2, #1
 80024bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Ypos-1] = LCD_COLOR_RED;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	88bb      	ldrh	r3, [r7, #4]
 80024c6:	1e59      	subs	r1, r3, #1
 80024c8:	4837      	ldr	r0, [pc, #220]	@ (80025a8 <drawBlockSeven+0x17c>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80024d8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	3301      	adds	r3, #1
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	ddb1      	ble.n	8002450 <drawBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d002      	beq.n	80024f8 <drawBlockSeven+0xcc>
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d150      	bne.n	800259a <drawBlockSeven+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 80024f8:	88bb      	ldrh	r3, [r7, #4]
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e048      	b.n	8002590 <drawBlockSeven+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_RED);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	b299      	uxth	r1, r3
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fa01 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos][i] = 1;
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	4924      	ldr	r1, [pc, #144]	@ (80025a4 <drawBlockSeven+0x178>)
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4413      	add	r3, r2
 800251e:	2201      	movs	r2, #1
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos][i] = LCD_COLOR_RED;
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	4920      	ldr	r1, [pc, #128]	@ (80025a8 <drawBlockSeven+0x17c>)
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	4413      	add	r3, r2
 8002534:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002538:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i-1,LCD_COLOR_RED);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	3301      	adds	r3, #1
 8002540:	b298      	uxth	r0, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800254e:	4619      	mov	r1, r3
 8002550:	f7fe f9de 	bl	8000910 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Xpos+1][i-1] = 1;
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	1e59      	subs	r1, r3, #1
 800255c:	4811      	ldr	r0, [pc, #68]	@ (80025a4 <drawBlockSeven+0x178>)
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	2201      	movs	r2, #1
 800256a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos+1][i-1] = LCD_COLOR_RED;
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1e59      	subs	r1, r3, #1
 8002576:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <drawBlockSeven+0x17c>)
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002586:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3301      	adds	r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	88bb      	ldrh	r3, [r7, #4]
 8002592:	3301      	adds	r3, #1
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	ddb1      	ble.n	80024fe <drawBlockSeven+0xd2>
		}
	}
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000298 	.word	0x20000298
 80025a8:	20000118 	.word	0x20000118

080025ac <eraseBlockSeven>:

void eraseBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
 80025b6:	460b      	mov	r3, r1
 80025b8:	80bb      	strh	r3, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d002      	beq.n	80025ca <eraseBlockSeven+0x1e>
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d14c      	bne.n	8002664 <eraseBlockSeven+0xb8>
		for (int i = Xpos; i < (Xpos+2); i++){
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e044      	b.n	800265a <eraseBlockSeven+0xae>
			LCD_Erase_Square(i,Ypos);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	88ba      	ldrh	r2, [r7, #4]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fa0d 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i][Ypos] = 0;
 80025de:	88b9      	ldrh	r1, [r7, #4]
 80025e0:	484c      	ldr	r0, [pc, #304]	@ (8002714 <eraseBlockSeven+0x168>)
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	2200      	movs	r2, #0
 80025f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Ypos] = 0;
 80025f4:	88b9      	ldrh	r1, [r7, #4]
 80025f6:	4848      	ldr	r0, [pc, #288]	@ (8002718 <eraseBlockSeven+0x16c>)
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	2200      	movs	r2, #0
 8002606:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(i-1,Ypos-1);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	88bb      	ldrh	r3, [r7, #4]
 8002614:	3b01      	subs	r3, #1
 8002616:	b29b      	uxth	r3, r3
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f7fe f9ec 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[i-1][Ypos-1] = 0;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e5a      	subs	r2, r3, #1
 8002624:	88bb      	ldrh	r3, [r7, #4]
 8002626:	1e59      	subs	r1, r3, #1
 8002628:	483a      	ldr	r0, [pc, #232]	@ (8002714 <eraseBlockSeven+0x168>)
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	2200      	movs	r2, #0
 8002636:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Ypos-1] = 0;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	88bb      	ldrh	r3, [r7, #4]
 8002640:	1e59      	subs	r1, r3, #1
 8002642:	4835      	ldr	r0, [pc, #212]	@ (8002718 <eraseBlockSeven+0x16c>)
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	2200      	movs	r2, #0
 8002650:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	3301      	adds	r3, #1
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	ddb5      	ble.n	80025d0 <eraseBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d002      	beq.n	8002670 <eraseBlockSeven+0xc4>
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d14c      	bne.n	800270a <eraseBlockSeven+0x15e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	e044      	b.n	8002700 <eraseBlockSeven+0x154>
			LCD_Erase_Square(Xpos,i);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	b29a      	uxth	r2, r3
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe f9ba 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos][i] = 0;
 8002684:	88fa      	ldrh	r2, [r7, #6]
 8002686:	4923      	ldr	r1, [pc, #140]	@ (8002714 <eraseBlockSeven+0x168>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	2200      	movs	r2, #0
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Xpos][i] = 0;
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	491e      	ldr	r1, [pc, #120]	@ (8002718 <eraseBlockSeven+0x16c>)
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4413      	add	r3, r2
 80026aa:	2200      	movs	r2, #0
 80026ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i-1);
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	4610      	mov	r0, r2
 80026c2:	f7fe f999 	bl	80009f8 <LCD_Erase_Square>
			LCD_Screen[Xpos+1][i-1] = 0;
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1e59      	subs	r1, r3, #1
 80026ce:	4811      	ldr	r0, [pc, #68]	@ (8002714 <eraseBlockSeven+0x168>)
 80026d0:	4613      	mov	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	2200      	movs	r2, #0
 80026dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Xpos+1][i-1] = 0;
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1e59      	subs	r1, r3, #1
 80026e8:	480b      	ldr	r0, [pc, #44]	@ (8002718 <eraseBlockSeven+0x16c>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	2200      	movs	r2, #0
 80026f6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	3301      	adds	r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	88bb      	ldrh	r3, [r7, #4]
 8002702:	3301      	adds	r3, #1
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	429a      	cmp	r2, r3
 8002708:	ddb5      	ble.n	8002676 <eraseBlockSeven+0xca>
		}
	}
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000298 	.word	0x20000298
 8002718:	20000118 	.word	0x20000118

0800271c <drawBottomBorder>:
				}
			}
		}
}

void drawBottomBorder(){
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 12; i++){
 8002722:	2300      	movs	r3, #0
 8002724:	80fb      	strh	r3, [r7, #6]
 8002726:	e014      	b.n	8002752 <drawBottomBorder+0x36>
		LCD_Draw_Square_Fill_Border(i, 15, LCD_COLOR_BLACK);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	2200      	movs	r2, #0
 800272c:	210f      	movs	r1, #15
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe f8ee 	bl	8000910 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[15][i] = 1;
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	4a0c      	ldr	r2, [pc, #48]	@ (8002768 <drawBottomBorder+0x4c>)
 8002738:	33b4      	adds	r3, #180	@ 0xb4
 800273a:	2101      	movs	r1, #1
 800273c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Obj_Color[15][i] = LCD_COLOR_BLACK;
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	4a0a      	ldr	r2, [pc, #40]	@ (800276c <drawBottomBorder+0x50>)
 8002744:	33b4      	adds	r3, #180	@ 0xb4
 8002746:	2100      	movs	r1, #0
 8002748:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < 12; i++){
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	3301      	adds	r3, #1
 8002750:	80fb      	strh	r3, [r7, #6]
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	2b0b      	cmp	r3, #11
 8002756:	d9e7      	bls.n	8002728 <drawBottomBorder+0xc>
	}
	HAL_Delay(1000);
 8002758:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800275c:	f001 fb08 	bl	8003d70 <HAL_Delay>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000298 	.word	0x20000298
 800276c:	20000118 	.word	0x20000118

08002770 <rotateBlock>:

void rotateBlock(){
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002776:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <rotateBlock+0x164>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpos = CurrentBlock[1];
 800277c:	4b55      	ldr	r3, [pc, #340]	@ (80028d4 <rotateBlock+0x164>)
 800277e:	885b      	ldrh	r3, [r3, #2]
 8002780:	817b      	strh	r3, [r7, #10]
	uint16_t Ypos = CurrentBlock[2];
 8002782:	4b54      	ldr	r3, [pc, #336]	@ (80028d4 <rotateBlock+0x164>)
 8002784:	889b      	ldrh	r3, [r3, #4]
 8002786:	813b      	strh	r3, [r7, #8]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002788:	4b52      	ldr	r3, [pc, #328]	@ (80028d4 <rotateBlock+0x164>)
 800278a:	88db      	ldrh	r3, [r3, #6]
 800278c:	80fb      	strh	r3, [r7, #6]
	uint16_t NewOrientation;
	if (OrgOrientation < 4){
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d803      	bhi.n	800279c <rotateBlock+0x2c>
		NewOrientation = OrgOrientation + 1;
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	3301      	adds	r3, #1
 8002798:	81fb      	strh	r3, [r7, #14]
 800279a:	e004      	b.n	80027a6 <rotateBlock+0x36>
	}
	else if (OrgOrientation >= 4){
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d901      	bls.n	80027a6 <rotateBlock+0x36>
		NewOrientation = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	81fb      	strh	r3, [r7, #14]
	}

	if (BlockNum == 1){
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d111      	bne.n	80027d0 <rotateBlock+0x60>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	8939      	ldrh	r1, [r7, #8]
 80027b0:	897b      	ldrh	r3, [r7, #10]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fbb0 	bl	8000f18 <eraseBlockOne>
		drawBlockOne(Xpos, Ypos, NewOrientation);
 80027b8:	89fa      	ldrh	r2, [r7, #14]
 80027ba:	8939      	ldrh	r1, [r7, #8]
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fb34 	bl	8000e2c <drawBlockOne>
		updateCurrentBlock(1, Xpos, Ypos, NewOrientation);
 80027c4:	89fb      	ldrh	r3, [r7, #14]
 80027c6:	893a      	ldrh	r2, [r7, #8]
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	2001      	movs	r0, #1
 80027cc:	f000 f92c 	bl	8002a28 <updateCurrentBlock>
	}
	if (BlockNum == 2){
 80027d0:	89bb      	ldrh	r3, [r7, #12]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d111      	bne.n	80027fa <rotateBlock+0x8a>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	8939      	ldrh	r1, [r7, #8]
 80027da:	897b      	ldrh	r3, [r7, #10]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fd5d 	bl	800129c <eraseBlockTwo>
		drawBlockTwo(Xpos, Ypos, NewOrientation);
 80027e2:	89fa      	ldrh	r2, [r7, #14]
 80027e4:	8939      	ldrh	r1, [r7, #8]
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fc07 	bl	8000ffc <drawBlockTwo>
		updateCurrentBlock(2, Xpos, Ypos, NewOrientation);
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	893a      	ldrh	r2, [r7, #8]
 80027f2:	8979      	ldrh	r1, [r7, #10]
 80027f4:	2002      	movs	r0, #2
 80027f6:	f000 f917 	bl	8002a28 <updateCurrentBlock>
		}
	if (BlockNum == 3){
 80027fa:	89bb      	ldrh	r3, [r7, #12]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d111      	bne.n	8002824 <rotateBlock+0xb4>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	8939      	ldrh	r1, [r7, #8]
 8002804:	897b      	ldrh	r3, [r7, #10]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fff8 	bl	80017fc <eraseBlockThree>
		drawBlockThree(Xpos, Ypos, NewOrientation);
 800280c:	89fa      	ldrh	r2, [r7, #14]
 800280e:	8939      	ldrh	r1, [r7, #8]
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fe92 	bl	800153c <drawBlockThree>
		updateCurrentBlock(3, Xpos, Ypos, NewOrientation);
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	893a      	ldrh	r2, [r7, #8]
 800281c:	8979      	ldrh	r1, [r7, #10]
 800281e:	2003      	movs	r0, #3
 8002820:	f000 f902 	bl	8002a28 <updateCurrentBlock>
		}
	if (BlockNum == 4){
 8002824:	89bb      	ldrh	r3, [r7, #12]
 8002826:	2b04      	cmp	r3, #4
 8002828:	d111      	bne.n	800284e <rotateBlock+0xde>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	8939      	ldrh	r1, [r7, #8]
 800282e:	897b      	ldrh	r3, [r7, #10]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f993 	bl	8001b5c <eraseBlockFour>
		drawBlockFour(Xpos, Ypos, NewOrientation);
 8002836:	89fa      	ldrh	r2, [r7, #14]
 8002838:	8939      	ldrh	r1, [r7, #8]
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff f92d 	bl	8001a9c <drawBlockFour>
		updateCurrentBlock(4, Xpos, Ypos, NewOrientation);
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	893a      	ldrh	r2, [r7, #8]
 8002846:	8979      	ldrh	r1, [r7, #10]
 8002848:	2004      	movs	r0, #4
 800284a:	f000 f8ed 	bl	8002a28 <updateCurrentBlock>
		}
	if (BlockNum == 5){
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d111      	bne.n	8002878 <rotateBlock+0x108>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 8002854:	88fa      	ldrh	r2, [r7, #6]
 8002856:	8939      	ldrh	r1, [r7, #8]
 8002858:	897b      	ldrh	r3, [r7, #10]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fa9a 	bl	8001d94 <eraseBlockFive>
		drawBlockFive(Xpos, Ypos, NewOrientation);
 8002860:	89fa      	ldrh	r2, [r7, #14]
 8002862:	8939      	ldrh	r1, [r7, #8]
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff f9d4 	bl	8001c14 <drawBlockFive>
		updateCurrentBlock(5, Xpos, Ypos, NewOrientation);
 800286c:	89fb      	ldrh	r3, [r7, #14]
 800286e:	893a      	ldrh	r2, [r7, #8]
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	2005      	movs	r0, #5
 8002874:	f000 f8d8 	bl	8002a28 <updateCurrentBlock>
		}
	if (BlockNum == 6){
 8002878:	89bb      	ldrh	r3, [r7, #12]
 800287a:	2b06      	cmp	r3, #6
 800287c:	d111      	bne.n	80028a2 <rotateBlock+0x132>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 800287e:	88fa      	ldrh	r2, [r7, #6]
 8002880:	8939      	ldrh	r1, [r7, #8]
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fc8f 	bl	80021a8 <eraseBlockSix>
		drawBlockSix(Xpos, Ypos, NewOrientation);
 800288a:	89fa      	ldrh	r2, [r7, #14]
 800288c:	8939      	ldrh	r1, [r7, #8]
 800288e:	897b      	ldrh	r3, [r7, #10]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb37 	bl	8001f04 <drawBlockSix>
		updateCurrentBlock(6, Xpos, Ypos, NewOrientation);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	2006      	movs	r0, #6
 800289e:	f000 f8c3 	bl	8002a28 <updateCurrentBlock>
		}
	if (BlockNum == 7){
 80028a2:	89bb      	ldrh	r3, [r7, #12]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	d111      	bne.n	80028cc <rotateBlock+0x15c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	8939      	ldrh	r1, [r7, #8]
 80028ac:	897b      	ldrh	r3, [r7, #10]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fe7c 	bl	80025ac <eraseBlockSeven>
		drawBlockSeven(Xpos, Ypos, NewOrientation);
 80028b4:	89fa      	ldrh	r2, [r7, #14]
 80028b6:	8939      	ldrh	r1, [r7, #8]
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fdb6 	bl	800242c <drawBlockSeven>
		updateCurrentBlock(7, Xpos, Ypos, NewOrientation);
 80028c0:	89fb      	ldrh	r3, [r7, #14]
 80028c2:	893a      	ldrh	r2, [r7, #8]
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2007      	movs	r0, #7
 80028c8:	f000 f8ae 	bl	8002a28 <updateCurrentBlock>
		}
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000598 	.word	0x20000598

080028d8 <drawCurrentBlock>:

void drawCurrentBlock(){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <drawCurrentBlock+0xa4>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 80028e4:	4b25      	ldr	r3, [pc, #148]	@ (800297c <drawCurrentBlock+0xa4>)
 80028e6:	885b      	ldrh	r3, [r3, #2]
 80028e8:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 80028ea:	4b24      	ldr	r3, [pc, #144]	@ (800297c <drawCurrentBlock+0xa4>)
 80028ec:	889b      	ldrh	r3, [r3, #4]
 80028ee:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <drawCurrentBlock+0xa4>)
 80028f2:	88db      	ldrh	r3, [r3, #6]
 80028f4:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d105      	bne.n	8002908 <drawCurrentBlock+0x30>
		drawBlockOne(Xpos, Ypos, OrgOrientation);
 80028fc:	883a      	ldrh	r2, [r7, #0]
 80028fe:	8879      	ldrh	r1, [r7, #2]
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fa92 	bl	8000e2c <drawBlockOne>
	}
	if (BlockNum == 2){
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d105      	bne.n	800291a <drawCurrentBlock+0x42>
		drawBlockTwo(Xpos, Ypos, OrgOrientation);
 800290e:	883a      	ldrh	r2, [r7, #0]
 8002910:	8879      	ldrh	r1, [r7, #2]
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fb71 	bl	8000ffc <drawBlockTwo>
	}
	if (BlockNum == 3){
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d105      	bne.n	800292c <drawCurrentBlock+0x54>
		drawBlockThree(Xpos, Ypos, OrgOrientation);
 8002920:	883a      	ldrh	r2, [r7, #0]
 8002922:	8879      	ldrh	r1, [r7, #2]
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fe08 	bl	800153c <drawBlockThree>
	}
	if (BlockNum == 4){
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	2b04      	cmp	r3, #4
 8002930:	d105      	bne.n	800293e <drawCurrentBlock+0x66>
		drawBlockFour(Xpos, Ypos, OrgOrientation);
 8002932:	883a      	ldrh	r2, [r7, #0]
 8002934:	8879      	ldrh	r1, [r7, #2]
 8002936:	88bb      	ldrh	r3, [r7, #4]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff f8af 	bl	8001a9c <drawBlockFour>
	}
	if (BlockNum == 5){
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d105      	bne.n	8002950 <drawCurrentBlock+0x78>
		drawBlockFive(Xpos, Ypos, OrgOrientation);
 8002944:	883a      	ldrh	r2, [r7, #0]
 8002946:	8879      	ldrh	r1, [r7, #2]
 8002948:	88bb      	ldrh	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f962 	bl	8001c14 <drawBlockFive>
	}
	if (BlockNum == 6){
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d105      	bne.n	8002962 <drawCurrentBlock+0x8a>
		drawBlockSix(Xpos, Ypos, OrgOrientation);
 8002956:	883a      	ldrh	r2, [r7, #0]
 8002958:	8879      	ldrh	r1, [r7, #2]
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fad1 	bl	8001f04 <drawBlockSix>
	}
	if (BlockNum == 7){
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b07      	cmp	r3, #7
 8002966:	d105      	bne.n	8002974 <drawCurrentBlock+0x9c>
		drawBlockSeven(Xpos, Ypos, OrgOrientation);
 8002968:	883a      	ldrh	r2, [r7, #0]
 800296a:	8879      	ldrh	r1, [r7, #2]
 800296c:	88bb      	ldrh	r3, [r7, #4]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fd5c 	bl	800242c <drawBlockSeven>
	}
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000598 	.word	0x20000598

08002980 <eraseCurrentBlock>:

void eraseCurrentBlock(){
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002986:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <eraseCurrentBlock+0xa4>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 800298c:	4b25      	ldr	r3, [pc, #148]	@ (8002a24 <eraseCurrentBlock+0xa4>)
 800298e:	885b      	ldrh	r3, [r3, #2]
 8002990:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002992:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <eraseCurrentBlock+0xa4>)
 8002994:	889b      	ldrh	r3, [r3, #4]
 8002996:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002998:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <eraseCurrentBlock+0xa4>)
 800299a:	88db      	ldrh	r3, [r3, #6]
 800299c:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <eraseCurrentBlock+0x30>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 80029a4:	883a      	ldrh	r2, [r7, #0]
 80029a6:	8879      	ldrh	r1, [r7, #2]
 80029a8:	88bb      	ldrh	r3, [r7, #4]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fab4 	bl	8000f18 <eraseBlockOne>
	}
	if (BlockNum == 2){
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d105      	bne.n	80029c2 <eraseCurrentBlock+0x42>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 80029b6:	883a      	ldrh	r2, [r7, #0]
 80029b8:	8879      	ldrh	r1, [r7, #2]
 80029ba:	88bb      	ldrh	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fc6d 	bl	800129c <eraseBlockTwo>
	}
	if (BlockNum == 3){
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d105      	bne.n	80029d4 <eraseCurrentBlock+0x54>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 80029c8:	883a      	ldrh	r2, [r7, #0]
 80029ca:	8879      	ldrh	r1, [r7, #2]
 80029cc:	88bb      	ldrh	r3, [r7, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe ff14 	bl	80017fc <eraseBlockThree>
	}
	if (BlockNum == 4){
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d105      	bne.n	80029e6 <eraseCurrentBlock+0x66>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 80029da:	883a      	ldrh	r2, [r7, #0]
 80029dc:	8879      	ldrh	r1, [r7, #2]
 80029de:	88bb      	ldrh	r3, [r7, #4]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f8bb 	bl	8001b5c <eraseBlockFour>
	}
	if (BlockNum == 5){
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d105      	bne.n	80029f8 <eraseCurrentBlock+0x78>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 80029ec:	883a      	ldrh	r2, [r7, #0]
 80029ee:	8879      	ldrh	r1, [r7, #2]
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f9ce 	bl	8001d94 <eraseBlockFive>
	}
	if (BlockNum == 6){
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d105      	bne.n	8002a0a <eraseCurrentBlock+0x8a>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 80029fe:	883a      	ldrh	r2, [r7, #0]
 8002a00:	8879      	ldrh	r1, [r7, #2]
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fbcf 	bl	80021a8 <eraseBlockSix>
	}
	if (BlockNum == 7){
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	2b07      	cmp	r3, #7
 8002a0e:	d105      	bne.n	8002a1c <eraseCurrentBlock+0x9c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 8002a10:	883a      	ldrh	r2, [r7, #0]
 8002a12:	8879      	ldrh	r1, [r7, #2]
 8002a14:	88bb      	ldrh	r3, [r7, #4]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fdc8 	bl	80025ac <eraseBlockSeven>
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000598 	.word	0x20000598

08002a28 <updateCurrentBlock>:

void updateCurrentBlock(uint16_t BlockNum, uint16_t Xpos, uint16_t Ypos, uint16_t Orientation){
 8002a28:	b490      	push	{r4, r7}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4623      	mov	r3, r4
 8002a38:	80fb      	strh	r3, [r7, #6]
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80bb      	strh	r3, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	807b      	strh	r3, [r7, #2]
 8002a42:	4613      	mov	r3, r2
 8002a44:	803b      	strh	r3, [r7, #0]
	CurrentBlock[0] = BlockNum;
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <updateCurrentBlock+0x40>)
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	8013      	strh	r3, [r2, #0]
	CurrentBlock[1] = Xpos;
 8002a4c:	4a06      	ldr	r2, [pc, #24]	@ (8002a68 <updateCurrentBlock+0x40>)
 8002a4e:	88bb      	ldrh	r3, [r7, #4]
 8002a50:	8053      	strh	r3, [r2, #2]
	CurrentBlock[2] = Ypos;
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <updateCurrentBlock+0x40>)
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	8093      	strh	r3, [r2, #4]
	CurrentBlock[3] = Orientation;
 8002a58:	4a03      	ldr	r2, [pc, #12]	@ (8002a68 <updateCurrentBlock+0x40>)
 8002a5a:	883b      	ldrh	r3, [r7, #0]
 8002a5c:	80d3      	strh	r3, [r2, #6]
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc90      	pop	{r4, r7}
 8002a66:	4770      	bx	lr
 8002a68:	20000598 	.word	0x20000598

08002a6c <updateYpos>:

uint16_t getCurrentYpos(){
	return CurrentBlock[2];
}

uint16_t updateYpos(){
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	CurrentBlock[2] += 1;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <updateYpos+0x20>)
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	3301      	adds	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <updateYpos+0x20>)
 8002a7a:	809a      	strh	r2, [r3, #4]
	return CurrentBlock[2];
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <updateYpos+0x20>)
 8002a7e:	889b      	ldrh	r3, [r3, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000598 	.word	0x20000598

08002a90 <isFull>:
	if (BlockNum == 1){

	}
}

int isFull(){
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002a96:	4ba4      	ldr	r3, [pc, #656]	@ (8002d28 <isFull+0x298>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8002a9c:	4ba2      	ldr	r3, [pc, #648]	@ (8002d28 <isFull+0x298>)
 8002a9e:	885b      	ldrh	r3, [r3, #2]
 8002aa0:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002aa2:	4ba1      	ldr	r3, [pc, #644]	@ (8002d28 <isFull+0x298>)
 8002aa4:	889b      	ldrh	r3, [r3, #4]
 8002aa6:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8002aa8:	4b9f      	ldr	r3, [pc, #636]	@ (8002d28 <isFull+0x298>)
 8002aaa:	88db      	ldrh	r3, [r3, #6]
 8002aac:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d137      	bne.n	8002b24 <isFull+0x94>
		if (Orientation == 1 || Orientation == 3){
 8002ab4:	883b      	ldrh	r3, [r7, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d002      	beq.n	8002ac0 <isFull+0x30>
 8002aba:	883b      	ldrh	r3, [r7, #0]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d11a      	bne.n	8002af6 <isFull+0x66>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	81fb      	strh	r3, [r7, #14]
 8002ac4:	e012      	b.n	8002aec <isFull+0x5c>
				if (LCD_Screen[Ypos+1][Ypos+1] == 1){
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	887b      	ldrh	r3, [r7, #2]
 8002acc:	1c59      	adds	r1, r3, #1
 8002ace:	4897      	ldr	r0, [pc, #604]	@ (8002d2c <isFull+0x29c>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <isFull+0x56>
					return 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e2ac      	b.n	8003040 <isFull+0x5b0>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	81fb      	strh	r3, [r7, #14]
 8002aec:	88bb      	ldrh	r3, [r7, #4]
 8002aee:	1cda      	adds	r2, r3, #3
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	dae7      	bge.n	8002ac6 <isFull+0x36>
				}
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8002af6:	883b      	ldrh	r3, [r7, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d002      	beq.n	8002b02 <isFull+0x72>
 8002afc:	883b      	ldrh	r3, [r7, #0]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d10e      	bne.n	8002b20 <isFull+0x90>
			if (LCD_Screen[Xpos][Ypos+2] == 1){
 8002b02:	88ba      	ldrh	r2, [r7, #4]
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	1c99      	adds	r1, r3, #2
 8002b08:	4888      	ldr	r0, [pc, #544]	@ (8002d2c <isFull+0x29c>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <isFull+0x90>
				return 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e28f      	b.n	8003040 <isFull+0x5b0>
			}
		}
		return 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e28d      	b.n	8003040 <isFull+0x5b0>
	}

	if (BlockNum == 2){
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	f040 808d 	bne.w	8002c46 <isFull+0x1b6>
		if (Orientation == 1){
 8002b2c:	883b      	ldrh	r3, [r7, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d119      	bne.n	8002b66 <isFull+0xd6>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002b32:	88bb      	ldrh	r3, [r7, #4]
 8002b34:	81bb      	strh	r3, [r7, #12]
 8002b36:	e011      	b.n	8002b5c <isFull+0xcc>
				if (LCD_Screen[i][Ypos+1] == 1)
 8002b38:	89ba      	ldrh	r2, [r7, #12]
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	1c59      	adds	r1, r3, #1
 8002b3e:	487b      	ldr	r0, [pc, #492]	@ (8002d2c <isFull+0x29c>)
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <isFull+0xc6>
				{
					return 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e274      	b.n	8003040 <isFull+0x5b0>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002b56:	89bb      	ldrh	r3, [r7, #12]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	81bb      	strh	r3, [r7, #12]
 8002b5c:	88bb      	ldrh	r3, [r7, #4]
 8002b5e:	1c9a      	adds	r2, r3, #2
 8002b60:	89bb      	ldrh	r3, [r7, #12]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	dae8      	bge.n	8002b38 <isFull+0xa8>
				}
			}
		}
		if (Orientation == 2){
 8002b66:	883b      	ldrh	r3, [r7, #0]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11c      	bne.n	8002ba6 <isFull+0x116>
			if (LCD_Screen[Xpos+1][Ypos+2] == 1 || LCD_Screen[Xpos+2][Ypos]){
 8002b6c:	88bb      	ldrh	r3, [r7, #4]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	1c99      	adds	r1, r3, #2
 8002b74:	486d      	ldr	r0, [pc, #436]	@ (8002d2c <isFull+0x29c>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d00c      	beq.n	8002ba2 <isFull+0x112>
 8002b88:	88bb      	ldrh	r3, [r7, #4]
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	8879      	ldrh	r1, [r7, #2]
 8002b8e:	4867      	ldr	r0, [pc, #412]	@ (8002d2c <isFull+0x29c>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <isFull+0x116>
				return 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e24c      	b.n	8003040 <isFull+0x5b0>
			}
		}
		if (Orientation == 3){
 8002ba6:	883b      	ldrh	r3, [r7, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d12a      	bne.n	8002c02 <isFull+0x172>
			if (LCD_Screen[Xpos][Ypos+1] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1 || LCD_Screen[Xpos+2][Ypos+2] == 1) {
 8002bac:	88ba      	ldrh	r2, [r7, #4]
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	1c59      	adds	r1, r3, #1
 8002bb2:	485e      	ldr	r0, [pc, #376]	@ (8002d2c <isFull+0x29c>)
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d01b      	beq.n	8002bfe <isFull+0x16e>
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	887b      	ldrh	r3, [r7, #2]
 8002bcc:	1c59      	adds	r1, r3, #1
 8002bce:	4857      	ldr	r0, [pc, #348]	@ (8002d2c <isFull+0x29c>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d00d      	beq.n	8002bfe <isFull+0x16e>
 8002be2:	88bb      	ldrh	r3, [r7, #4]
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	1c99      	adds	r1, r3, #2
 8002bea:	4850      	ldr	r0, [pc, #320]	@ (8002d2c <isFull+0x29c>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <isFull+0x172>
				return 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e21e      	b.n	8003040 <isFull+0x5b0>
			}
		}
		if (Orientation == 4){
 8002c02:	883b      	ldrh	r3, [r7, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11c      	bne.n	8002c42 <isFull+0x1b2>
			if (LCD_Screen[Xpos][Ypos+2] == 1 || LCD_Screen[Xpos+1][Ypos+2] == 1){
 8002c08:	88ba      	ldrh	r2, [r7, #4]
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	1c99      	adds	r1, r3, #2
 8002c0e:	4847      	ldr	r0, [pc, #284]	@ (8002d2c <isFull+0x29c>)
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d00d      	beq.n	8002c3e <isFull+0x1ae>
 8002c22:	88bb      	ldrh	r3, [r7, #4]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	1c99      	adds	r1, r3, #2
 8002c2a:	4840      	ldr	r0, [pc, #256]	@ (8002d2c <isFull+0x29c>)
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <isFull+0x1b2>
				return 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e1fe      	b.n	8003040 <isFull+0x5b0>
			}
		}
		return 1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1fc      	b.n	8003040 <isFull+0x5b0>
	}

	if (BlockNum == 3){
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	f040 8092 	bne.w	8002d72 <isFull+0x2e2>
		if (Orientation == 1){
 8002c4e:	883b      	ldrh	r3, [r7, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d119      	bne.n	8002c88 <isFull+0x1f8>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	817b      	strh	r3, [r7, #10]
 8002c58:	e011      	b.n	8002c7e <isFull+0x1ee>
				if (LCD_Screen[i][Ypos+1] == 1)
 8002c5a:	897a      	ldrh	r2, [r7, #10]
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	1c59      	adds	r1, r3, #1
 8002c60:	4832      	ldr	r0, [pc, #200]	@ (8002d2c <isFull+0x29c>)
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <isFull+0x1e8>
				{
					return 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e1e3      	b.n	8003040 <isFull+0x5b0>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002c78:	897b      	ldrh	r3, [r7, #10]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	88bb      	ldrh	r3, [r7, #4]
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	dae8      	bge.n	8002c5a <isFull+0x1ca>
				}
			}
		}
		if (Orientation == 2){
 8002c88:	883b      	ldrh	r3, [r7, #0]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d11d      	bne.n	8002cca <isFull+0x23a>
			if (LCD_Screen[Xpos+1][Ypos+2] == 1 || LCD_Screen[Xpos+2][Ypos+2]){
 8002c8e:	88bb      	ldrh	r3, [r7, #4]
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	1c99      	adds	r1, r3, #2
 8002c96:	4825      	ldr	r0, [pc, #148]	@ (8002d2c <isFull+0x29c>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d00d      	beq.n	8002cc6 <isFull+0x236>
 8002caa:	88bb      	ldrh	r3, [r7, #4]
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	887b      	ldrh	r3, [r7, #2]
 8002cb0:	1c99      	adds	r1, r3, #2
 8002cb2:	481e      	ldr	r0, [pc, #120]	@ (8002d2c <isFull+0x29c>)
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <isFull+0x23a>
				return 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e1ba      	b.n	8003040 <isFull+0x5b0>
			}
		}
		if (Orientation == 3){
 8002cca:	883b      	ldrh	r3, [r7, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d12f      	bne.n	8002d30 <isFull+0x2a0>
			if (LCD_Screen[Xpos][Ypos+2] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1 || LCD_Screen[Xpos+2][Ypos+1] == 1) {
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	887b      	ldrh	r3, [r7, #2]
 8002cd4:	1c99      	adds	r1, r3, #2
 8002cd6:	4815      	ldr	r0, [pc, #84]	@ (8002d2c <isFull+0x29c>)
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d01b      	beq.n	8002d22 <isFull+0x292>
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	1c59      	adds	r1, r3, #1
 8002cf2:	480e      	ldr	r0, [pc, #56]	@ (8002d2c <isFull+0x29c>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d00d      	beq.n	8002d22 <isFull+0x292>
 8002d06:	88bb      	ldrh	r3, [r7, #4]
 8002d08:	1c9a      	adds	r2, r3, #2
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	1c59      	adds	r1, r3, #1
 8002d0e:	4807      	ldr	r0, [pc, #28]	@ (8002d2c <isFull+0x29c>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d106      	bne.n	8002d30 <isFull+0x2a0>
				return 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e18c      	b.n	8003040 <isFull+0x5b0>
 8002d26:	bf00      	nop
 8002d28:	20000598 	.word	0x20000598
 8002d2c:	20000298 	.word	0x20000298
			}
		}
		if (Orientation == 4){
 8002d30:	883b      	ldrh	r3, [r7, #0]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d11b      	bne.n	8002d6e <isFull+0x2de>
			if (LCD_Screen[Xpos][Ypos] == 1 || LCD_Screen[Xpos+1][Ypos+2] == 1) {
 8002d36:	88ba      	ldrh	r2, [r7, #4]
 8002d38:	8879      	ldrh	r1, [r7, #2]
 8002d3a:	48ad      	ldr	r0, [pc, #692]	@ (8002ff0 <isFull+0x560>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d00d      	beq.n	8002d6a <isFull+0x2da>
 8002d4e:	88bb      	ldrh	r3, [r7, #4]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	1c99      	adds	r1, r3, #2
 8002d56:	48a6      	ldr	r0, [pc, #664]	@ (8002ff0 <isFull+0x560>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <isFull+0x2de>
				return 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e168      	b.n	8003040 <isFull+0x5b0>
			}
		}
		return 1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e166      	b.n	8003040 <isFull+0x5b0>
	}

	if (BlockNum == 4){
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d11e      	bne.n	8002db6 <isFull+0x326>
		if (LCD_Screen[Xpos][Ypos+1] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1) {
 8002d78:	88ba      	ldrh	r2, [r7, #4]
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	1c59      	adds	r1, r3, #1
 8002d7e:	489c      	ldr	r0, [pc, #624]	@ (8002ff0 <isFull+0x560>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d00d      	beq.n	8002dae <isFull+0x31e>
 8002d92:	88bb      	ldrh	r3, [r7, #4]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	1c59      	adds	r1, r3, #1
 8002d9a:	4895      	ldr	r0, [pc, #596]	@ (8002ff0 <isFull+0x560>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <isFull+0x322>
			return 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e146      	b.n	8003040 <isFull+0x5b0>
		}
		return 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e144      	b.n	8003040 <isFull+0x5b0>
	}

	if (BlockNum == 5){
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d154      	bne.n	8002e66 <isFull+0x3d6>
		if (Orientation == 1 || Orientation == 3){
 8002dbc:	883b      	ldrh	r3, [r7, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d002      	beq.n	8002dc8 <isFull+0x338>
 8002dc2:	883b      	ldrh	r3, [r7, #0]
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d129      	bne.n	8002e1c <isFull+0x38c>
			if (LCD_Screen[Xpos][Ypos+1] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1 || LCD_Screen[Xpos+2][Ypos] == 1) {
 8002dc8:	88ba      	ldrh	r2, [r7, #4]
 8002dca:	887b      	ldrh	r3, [r7, #2]
 8002dcc:	1c59      	adds	r1, r3, #1
 8002dce:	4888      	ldr	r0, [pc, #544]	@ (8002ff0 <isFull+0x560>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d01a      	beq.n	8002e18 <isFull+0x388>
 8002de2:	88bb      	ldrh	r3, [r7, #4]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	4881      	ldr	r0, [pc, #516]	@ (8002ff0 <isFull+0x560>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d00c      	beq.n	8002e18 <isFull+0x388>
 8002dfe:	88bb      	ldrh	r3, [r7, #4]
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	8879      	ldrh	r1, [r7, #2]
 8002e04:	487a      	ldr	r0, [pc, #488]	@ (8002ff0 <isFull+0x560>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <isFull+0x38c>
				return 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e111      	b.n	8003040 <isFull+0x5b0>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8002e1c:	883b      	ldrh	r3, [r7, #0]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d002      	beq.n	8002e28 <isFull+0x398>
 8002e22:	883b      	ldrh	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d11c      	bne.n	8002e62 <isFull+0x3d2>
			if (LCD_Screen[Xpos][Ypos+1] == 1 || LCD_Screen[Xpos+1][Ypos+2] == 1) {
 8002e28:	88ba      	ldrh	r2, [r7, #4]
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	4870      	ldr	r0, [pc, #448]	@ (8002ff0 <isFull+0x560>)
 8002e30:	4613      	mov	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d00d      	beq.n	8002e5e <isFull+0x3ce>
 8002e42:	88bb      	ldrh	r3, [r7, #4]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	1c99      	adds	r1, r3, #2
 8002e4a:	4869      	ldr	r0, [pc, #420]	@ (8002ff0 <isFull+0x560>)
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <isFull+0x3d2>
				return 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e0ee      	b.n	8003040 <isFull+0x5b0>
			}
		}
		return 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ec      	b.n	8003040 <isFull+0x5b0>
	}

	if (BlockNum == 6){
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	f040 808e 	bne.w	8002f8a <isFull+0x4fa>
		if (Orientation == 1){
 8002e6e:	883b      	ldrh	r3, [r7, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d11a      	bne.n	8002eaa <isFull+0x41a>
			for (uint16_t i = Xpos-1; i < Xpos+2; i++){
 8002e74:	88bb      	ldrh	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	813b      	strh	r3, [r7, #8]
 8002e7a:	e011      	b.n	8002ea0 <isFull+0x410>
				if (LCD_Screen[i][Ypos+1] == 1){
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	887b      	ldrh	r3, [r7, #2]
 8002e80:	1c59      	adds	r1, r3, #1
 8002e82:	485b      	ldr	r0, [pc, #364]	@ (8002ff0 <isFull+0x560>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <isFull+0x40a>
					return 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e0d2      	b.n	8003040 <isFull+0x5b0>
			for (uint16_t i = Xpos-1; i < Xpos+2; i++){
 8002e9a:	893b      	ldrh	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	813b      	strh	r3, [r7, #8]
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	dae8      	bge.n	8002e7c <isFull+0x3ec>
				}
			}
		}
		if (Orientation == 2){
 8002eaa:	883b      	ldrh	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11c      	bne.n	8002eea <isFull+0x45a>
			if (LCD_Screen[Xpos][Ypos+2] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1){
 8002eb0:	88ba      	ldrh	r2, [r7, #4]
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	1c99      	adds	r1, r3, #2
 8002eb6:	484e      	ldr	r0, [pc, #312]	@ (8002ff0 <isFull+0x560>)
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00d      	beq.n	8002ee6 <isFull+0x456>
 8002eca:	88bb      	ldrh	r3, [r7, #4]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	4847      	ldr	r0, [pc, #284]	@ (8002ff0 <isFull+0x560>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <isFull+0x45a>
				return 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e0aa      	b.n	8003040 <isFull+0x5b0>
			}
		}
		if (Orientation == 3){
 8002eea:	883b      	ldrh	r3, [r7, #0]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	d12a      	bne.n	8002f46 <isFull+0x4b6>
			if (LCD_Screen[Xpos-1][Ypos+1] == 1 || LCD_Screen[Xpos][Ypos+2] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1){
 8002ef0:	88bb      	ldrh	r3, [r7, #4]
 8002ef2:	1e5a      	subs	r2, r3, #1
 8002ef4:	887b      	ldrh	r3, [r7, #2]
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	483d      	ldr	r0, [pc, #244]	@ (8002ff0 <isFull+0x560>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d01a      	beq.n	8002f42 <isFull+0x4b2>
 8002f0c:	88ba      	ldrh	r2, [r7, #4]
 8002f0e:	887b      	ldrh	r3, [r7, #2]
 8002f10:	1c99      	adds	r1, r3, #2
 8002f12:	4837      	ldr	r0, [pc, #220]	@ (8002ff0 <isFull+0x560>)
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d00d      	beq.n	8002f42 <isFull+0x4b2>
 8002f26:	88bb      	ldrh	r3, [r7, #4]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	1c59      	adds	r1, r3, #1
 8002f2e:	4830      	ldr	r0, [pc, #192]	@ (8002ff0 <isFull+0x560>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <isFull+0x4b6>
				return 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e07c      	b.n	8003040 <isFull+0x5b0>
			}
		}
		if (Orientation == 4){
 8002f46:	883b      	ldrh	r3, [r7, #0]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d11c      	bne.n	8002f86 <isFull+0x4f6>
			if (LCD_Screen[Xpos-1][Ypos+1] == 1 || LCD_Screen[Xpos][Ypos+2] == 1){
 8002f4c:	88bb      	ldrh	r3, [r7, #4]
 8002f4e:	1e5a      	subs	r2, r3, #1
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	4826      	ldr	r0, [pc, #152]	@ (8002ff0 <isFull+0x560>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d00c      	beq.n	8002f82 <isFull+0x4f2>
 8002f68:	88ba      	ldrh	r2, [r7, #4]
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	1c99      	adds	r1, r3, #2
 8002f6e:	4820      	ldr	r0, [pc, #128]	@ (8002ff0 <isFull+0x560>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <isFull+0x4f6>
				return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e05c      	b.n	8003040 <isFull+0x5b0>
			}
		}
		return 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e05a      	b.n	8003040 <isFull+0x5b0>
	}

	if (BlockNum == 7){
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b07      	cmp	r3, #7
 8002f8e:	d156      	bne.n	800303e <isFull+0x5ae>
		if (Orientation == 1 || Orientation == 3){
 8002f90:	883b      	ldrh	r3, [r7, #0]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d002      	beq.n	8002f9c <isFull+0x50c>
 8002f96:	883b      	ldrh	r3, [r7, #0]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d12b      	bne.n	8002ff4 <isFull+0x564>
			if (LCD_Screen[Xpos][Ypos] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1 || LCD_Screen[Xpos+2][Ypos+1] == 1) {
 8002f9c:	88ba      	ldrh	r2, [r7, #4]
 8002f9e:	8879      	ldrh	r1, [r7, #2]
 8002fa0:	4813      	ldr	r0, [pc, #76]	@ (8002ff0 <isFull+0x560>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d01b      	beq.n	8002fec <isFull+0x55c>
 8002fb4:	88bb      	ldrh	r3, [r7, #4]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	1c59      	adds	r1, r3, #1
 8002fbc:	480c      	ldr	r0, [pc, #48]	@ (8002ff0 <isFull+0x560>)
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d00d      	beq.n	8002fec <isFull+0x55c>
 8002fd0:	88bb      	ldrh	r3, [r7, #4]
 8002fd2:	1c9a      	adds	r2, r3, #2
 8002fd4:	887b      	ldrh	r3, [r7, #2]
 8002fd6:	1c59      	adds	r1, r3, #1
 8002fd8:	4805      	ldr	r0, [pc, #20]	@ (8002ff0 <isFull+0x560>)
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d103      	bne.n	8002ff4 <isFull+0x564>
				return 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e027      	b.n	8003040 <isFull+0x5b0>
 8002ff0:	20000298 	.word	0x20000298
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8002ff4:	883b      	ldrh	r3, [r7, #0]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d002      	beq.n	8003000 <isFull+0x570>
 8002ffa:	883b      	ldrh	r3, [r7, #0]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d11c      	bne.n	800303a <isFull+0x5aa>
			if (LCD_Screen[Xpos][Ypos+2] == 1 || LCD_Screen[Xpos+1][Ypos+1] == 1) {
 8003000:	88ba      	ldrh	r2, [r7, #4]
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	1c99      	adds	r1, r3, #2
 8003006:	4811      	ldr	r0, [pc, #68]	@ (800304c <isFull+0x5bc>)
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d00d      	beq.n	8003036 <isFull+0x5a6>
 800301a:	88bb      	ldrh	r3, [r7, #4]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	1c59      	adds	r1, r3, #1
 8003022:	480a      	ldr	r0, [pc, #40]	@ (800304c <isFull+0x5bc>)
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <isFull+0x5aa>
				return 0;
 8003036:	2300      	movs	r3, #0
 8003038:	e002      	b.n	8003040 <isFull+0x5b0>
			}
		}
		return 1;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <isFull+0x5b0>
	}
	return 1;
 800303e:	2301      	movs	r3, #1
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	20000298 	.word	0x20000298

08003050 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <LCD_Error_Handler+0x8>

0800305c <RNG_Init>:

#include <RNG.h>

RNG_HandleTypeDef RNG_Config;

void RNG_Init(){
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	4b0d      	ldr	r3, [pc, #52]	@ (800309c <RNG_Init+0x40>)
 8003068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306a:	4a0c      	ldr	r2, [pc, #48]	@ (800309c <RNG_Init+0x40>)
 800306c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003070:	6353      	str	r3, [r2, #52]	@ 0x34
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <RNG_Init+0x40>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
	RNG_Config.Instance = RNG;
 800307e:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <RNG_Init+0x44>)
 8003080:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <RNG_Init+0x48>)
 8003082:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&RNG_Config) != HAL_OK){
 8003084:	4806      	ldr	r0, [pc, #24]	@ (80030a0 <RNG_Init+0x44>)
 8003086:	f002 fb77 	bl	8005778 <HAL_RNG_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <RNG_Init+0x38>
		for (;;);
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <RNG_Init+0x34>
	}
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	20025da0 	.word	0x20025da0
 80030a4:	50060800 	.word	0x50060800

080030a8 <GetRandomBlock>:

uint32_t GetRandomBlock(){
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	uint32_t random_num = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
	random_num = HAL_RNG_GetRandomNumber(&RNG_Config);
 80030b2:	480b      	ldr	r0, [pc, #44]	@ (80030e0 <GetRandomBlock+0x38>)
 80030b4:	f002 fbe0 	bl	8005878 <HAL_RNG_GetRandomNumber>
 80030b8:	6078      	str	r0, [r7, #4]
	random_num = (random_num % 7) + 1;
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <GetRandomBlock+0x3c>)
 80030be:	fba3 2301 	umull	r2, r3, r3, r1
 80030c2:	1aca      	subs	r2, r1, r3
 80030c4:	0852      	lsrs	r2, r2, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	089a      	lsrs	r2, r3, #2
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	1aca      	subs	r2, r1, r3
 80030d2:	1c53      	adds	r3, r2, #1
 80030d4:	607b      	str	r3, [r7, #4]
	return random_num;
 80030d6:	687b      	ldr	r3, [r7, #4]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20025da0 	.word	0x20025da0
 80030e4:	24924925 	.word	0x24924925

080030e8 <timer3Init>:
#include <Timer_Driver.h>

TIM_HandleTypeDef TIM3_Config;


void timer3Init(){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <timer3Init+0x74>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	4a19      	ldr	r2, [pc, #100]	@ (800315c <timer3Init+0x74>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030fe:	4b17      	ldr	r3, [pc, #92]	@ (800315c <timer3Init+0x74>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]

	TIM3_Config.Instance = TIM3;
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <timer3Init+0x78>)
 800310c:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <timer3Init+0x7c>)
 800310e:	601a      	str	r2, [r3, #0]
	TIM3_Config.Init.Prescaler = 1000;
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <timer3Init+0x78>)
 8003112:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003116:	605a      	str	r2, [r3, #4]
	TIM3_Config.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <timer3Init+0x78>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
	TIM3_Config.Init.Period = (65536-1);
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <timer3Init+0x78>)
 8003120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003124:	60da      	str	r2, [r3, #12]
	TIM3_Config.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <timer3Init+0x78>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
	TIM3_Config.Init.RepetitionCounter = 0;
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <timer3Init+0x78>)
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]

	if (HAL_TIM_Base_Init(&TIM3_Config) != HAL_OK) {
 8003132:	480b      	ldr	r0, [pc, #44]	@ (8003160 <timer3Init+0x78>)
 8003134:	f002 fe94 	bl	8005e60 <HAL_TIM_Base_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <timer3Init+0x5a>
	        // Initialization Error
	        while(1);
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <timer3Init+0x56>
	    }

	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	201d      	movs	r0, #29
 8003148:	f000 ff35 	bl	8003fb6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800314c:	201d      	movs	r0, #29
 800314e:	f000 ff4e 	bl	8003fee <HAL_NVIC_EnableIRQ>

//	HAL_TIM_Base_Start_IT(&TIM3_Config);
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	20025db0 	.word	0x20025db0
 8003164:	40000400 	.word	0x40000400

08003168 <TIM3_Start>:

void TIM3_Start(){
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&TIM3_Config);
 800316c:	4802      	ldr	r0, [pc, #8]	@ (8003178 <TIM3_Start+0x10>)
 800316e:	f002 fec7 	bl	8005f00 <HAL_TIM_Base_Start_IT>
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20025db0 	.word	0x20025db0

0800317c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003180:	f000 f9fe 	bl	8003580 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003184:	20ca      	movs	r0, #202	@ 0xca
 8003186:	f000 f943 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800318a:	20c3      	movs	r0, #195	@ 0xc3
 800318c:	f000 f94d 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8003190:	2008      	movs	r0, #8
 8003192:	f000 f94a 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8003196:	2050      	movs	r0, #80	@ 0x50
 8003198:	f000 f947 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800319c:	20cf      	movs	r0, #207	@ 0xcf
 800319e:	f000 f937 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80031a2:	2000      	movs	r0, #0
 80031a4:	f000 f941 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80031a8:	20c1      	movs	r0, #193	@ 0xc1
 80031aa:	f000 f93e 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80031ae:	2030      	movs	r0, #48	@ 0x30
 80031b0:	f000 f93b 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80031b4:	20ed      	movs	r0, #237	@ 0xed
 80031b6:	f000 f92b 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80031ba:	2064      	movs	r0, #100	@ 0x64
 80031bc:	f000 f935 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80031c0:	2003      	movs	r0, #3
 80031c2:	f000 f932 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80031c6:	2012      	movs	r0, #18
 80031c8:	f000 f92f 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80031cc:	2081      	movs	r0, #129	@ 0x81
 80031ce:	f000 f92c 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80031d2:	20e8      	movs	r0, #232	@ 0xe8
 80031d4:	f000 f91c 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80031d8:	2085      	movs	r0, #133	@ 0x85
 80031da:	f000 f926 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 f923 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80031e4:	2078      	movs	r0, #120	@ 0x78
 80031e6:	f000 f920 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80031ea:	20cb      	movs	r0, #203	@ 0xcb
 80031ec:	f000 f910 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80031f0:	2039      	movs	r0, #57	@ 0x39
 80031f2:	f000 f91a 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80031f6:	202c      	movs	r0, #44	@ 0x2c
 80031f8:	f000 f917 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f000 f914 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003202:	2034      	movs	r0, #52	@ 0x34
 8003204:	f000 f911 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003208:	2002      	movs	r0, #2
 800320a:	f000 f90e 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800320e:	20f7      	movs	r0, #247	@ 0xf7
 8003210:	f000 f8fe 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003214:	2020      	movs	r0, #32
 8003216:	f000 f908 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800321a:	20ea      	movs	r0, #234	@ 0xea
 800321c:	f000 f8f8 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f000 f902 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f000 f8ff 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800322c:	20b1      	movs	r0, #177	@ 0xb1
 800322e:	f000 f8ef 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f000 f8f9 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003238:	201b      	movs	r0, #27
 800323a:	f000 f8f6 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800323e:	20b6      	movs	r0, #182	@ 0xb6
 8003240:	f000 f8e6 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003244:	200a      	movs	r0, #10
 8003246:	f000 f8f0 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800324a:	20a2      	movs	r0, #162	@ 0xa2
 800324c:	f000 f8ed 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003250:	20c0      	movs	r0, #192	@ 0xc0
 8003252:	f000 f8dd 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003256:	2010      	movs	r0, #16
 8003258:	f000 f8e7 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800325c:	20c1      	movs	r0, #193	@ 0xc1
 800325e:	f000 f8d7 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003262:	2010      	movs	r0, #16
 8003264:	f000 f8e1 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8003268:	20c5      	movs	r0, #197	@ 0xc5
 800326a:	f000 f8d1 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800326e:	2045      	movs	r0, #69	@ 0x45
 8003270:	f000 f8db 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003274:	2015      	movs	r0, #21
 8003276:	f000 f8d8 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800327a:	20c7      	movs	r0, #199	@ 0xc7
 800327c:	f000 f8c8 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003280:	2090      	movs	r0, #144	@ 0x90
 8003282:	f000 f8d2 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8003286:	2036      	movs	r0, #54	@ 0x36
 8003288:	f000 f8c2 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800328c:	20c8      	movs	r0, #200	@ 0xc8
 800328e:	f000 f8cc 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8003292:	20f2      	movs	r0, #242	@ 0xf2
 8003294:	f000 f8bc 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f000 f8c6 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800329e:	20b0      	movs	r0, #176	@ 0xb0
 80032a0:	f000 f8b6 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80032a4:	20c2      	movs	r0, #194	@ 0xc2
 80032a6:	f000 f8c0 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80032aa:	20b6      	movs	r0, #182	@ 0xb6
 80032ac:	f000 f8b0 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80032b0:	200a      	movs	r0, #10
 80032b2:	f000 f8ba 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80032b6:	20a7      	movs	r0, #167	@ 0xa7
 80032b8:	f000 f8b7 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80032bc:	2027      	movs	r0, #39	@ 0x27
 80032be:	f000 f8b4 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80032c2:	2004      	movs	r0, #4
 80032c4:	f000 f8b1 	bl	800342a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80032c8:	202a      	movs	r0, #42	@ 0x2a
 80032ca:	f000 f8a1 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f000 f8ab 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f000 f8a8 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f8a5 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80032e0:	20ef      	movs	r0, #239	@ 0xef
 80032e2:	f000 f8a2 	bl	800342a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80032e6:	202b      	movs	r0, #43	@ 0x2b
 80032e8:	f000 f892 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f000 f89c 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f000 f899 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80032f8:	2001      	movs	r0, #1
 80032fa:	f000 f896 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80032fe:	203f      	movs	r0, #63	@ 0x3f
 8003300:	f000 f893 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003304:	20f6      	movs	r0, #246	@ 0xf6
 8003306:	f000 f883 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800330a:	2001      	movs	r0, #1
 800330c:	f000 f88d 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f000 f88a 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003316:	2006      	movs	r0, #6
 8003318:	f000 f887 	bl	800342a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 800331c:	202c      	movs	r0, #44	@ 0x2c
 800331e:	f000 f877 	bl	8003410 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003322:	20c8      	movs	r0, #200	@ 0xc8
 8003324:	f000 f9e8 	bl	80036f8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003328:	2026      	movs	r0, #38	@ 0x26
 800332a:	f000 f871 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800332e:	2001      	movs	r0, #1
 8003330:	f000 f87b 	bl	800342a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003334:	20e0      	movs	r0, #224	@ 0xe0
 8003336:	f000 f86b 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800333a:	200f      	movs	r0, #15
 800333c:	f000 f875 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003340:	2029      	movs	r0, #41	@ 0x29
 8003342:	f000 f872 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003346:	2024      	movs	r0, #36	@ 0x24
 8003348:	f000 f86f 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800334c:	200c      	movs	r0, #12
 800334e:	f000 f86c 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003352:	200e      	movs	r0, #14
 8003354:	f000 f869 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003358:	2009      	movs	r0, #9
 800335a:	f000 f866 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800335e:	204e      	movs	r0, #78	@ 0x4e
 8003360:	f000 f863 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003364:	2078      	movs	r0, #120	@ 0x78
 8003366:	f000 f860 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800336a:	203c      	movs	r0, #60	@ 0x3c
 800336c:	f000 f85d 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003370:	2009      	movs	r0, #9
 8003372:	f000 f85a 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8003376:	2013      	movs	r0, #19
 8003378:	f000 f857 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800337c:	2005      	movs	r0, #5
 800337e:	f000 f854 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003382:	2017      	movs	r0, #23
 8003384:	f000 f851 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8003388:	2011      	movs	r0, #17
 800338a:	f000 f84e 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f000 f84b 	bl	800342a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8003394:	20e1      	movs	r0, #225	@ 0xe1
 8003396:	f000 f83b 	bl	8003410 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f000 f845 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80033a0:	2016      	movs	r0, #22
 80033a2:	f000 f842 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80033a6:	201b      	movs	r0, #27
 80033a8:	f000 f83f 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80033ac:	2004      	movs	r0, #4
 80033ae:	f000 f83c 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80033b2:	2011      	movs	r0, #17
 80033b4:	f000 f839 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80033b8:	2007      	movs	r0, #7
 80033ba:	f000 f836 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80033be:	2031      	movs	r0, #49	@ 0x31
 80033c0:	f000 f833 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80033c4:	2033      	movs	r0, #51	@ 0x33
 80033c6:	f000 f830 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80033ca:	2042      	movs	r0, #66	@ 0x42
 80033cc:	f000 f82d 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80033d0:	2005      	movs	r0, #5
 80033d2:	f000 f82a 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80033d6:	200c      	movs	r0, #12
 80033d8:	f000 f827 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80033dc:	200a      	movs	r0, #10
 80033de:	f000 f824 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80033e2:	2028      	movs	r0, #40	@ 0x28
 80033e4:	f000 f821 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80033e8:	202f      	movs	r0, #47	@ 0x2f
 80033ea:	f000 f81e 	bl	800342a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80033ee:	200f      	movs	r0, #15
 80033f0:	f000 f81b 	bl	800342a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80033f4:	2011      	movs	r0, #17
 80033f6:	f000 f80b 	bl	8003410 <ili9341_Write_Reg>
  LCD_Delay(200);
 80033fa:	20c8      	movs	r0, #200	@ 0xc8
 80033fc:	f000 f97c 	bl	80036f8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003400:	2029      	movs	r0, #41	@ 0x29
 8003402:	f000 f805 	bl	8003410 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003406:	202c      	movs	r0, #44	@ 0x2c
 8003408:	f000 f802 	bl	8003410 <ili9341_Write_Reg>
}
 800340c:	bf00      	nop
 800340e:	bd80      	pop	{r7, pc}

08003410 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f949 	bl	80036b4 <LCD_IO_WriteReg>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f91a 	bl	8003670 <LCD_IO_WriteData>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003448:	4819      	ldr	r0, [pc, #100]	@ (80034b0 <SPI_Init+0x6c>)
 800344a:	f002 fc1f 	bl	8005c8c <HAL_SPI_GetState>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d12b      	bne.n	80034ac <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003454:	4b16      	ldr	r3, [pc, #88]	@ (80034b0 <SPI_Init+0x6c>)
 8003456:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <SPI_Init+0x70>)
 8003458:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800345a:	4b15      	ldr	r3, [pc, #84]	@ (80034b0 <SPI_Init+0x6c>)
 800345c:	2218      	movs	r2, #24
 800345e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003460:	4b13      	ldr	r3, [pc, #76]	@ (80034b0 <SPI_Init+0x6c>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003466:	4b12      	ldr	r3, [pc, #72]	@ (80034b0 <SPI_Init+0x6c>)
 8003468:	2200      	movs	r2, #0
 800346a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800346c:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <SPI_Init+0x6c>)
 800346e:	2200      	movs	r2, #0
 8003470:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003472:	4b0f      	ldr	r3, [pc, #60]	@ (80034b0 <SPI_Init+0x6c>)
 8003474:	2200      	movs	r2, #0
 8003476:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003478:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <SPI_Init+0x6c>)
 800347a:	2207      	movs	r2, #7
 800347c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800347e:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <SPI_Init+0x6c>)
 8003480:	2200      	movs	r2, #0
 8003482:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003484:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <SPI_Init+0x6c>)
 8003486:	2200      	movs	r2, #0
 8003488:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <SPI_Init+0x6c>)
 800348c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003490:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <SPI_Init+0x6c>)
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003498:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <SPI_Init+0x6c>)
 800349a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800349e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80034a0:	4803      	ldr	r0, [pc, #12]	@ (80034b0 <SPI_Init+0x6c>)
 80034a2:	f000 f833 	bl	800350c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80034a6:	4802      	ldr	r0, [pc, #8]	@ (80034b0 <SPI_Init+0x6c>)
 80034a8:	f002 f9fb 	bl	80058a2 <HAL_SPI_Init>
  }
}
 80034ac:	bf00      	nop
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20025df8 	.word	0x20025df8
 80034b4:	40015000 	.word	0x40015000

080034b8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <SPI_Write+0x34>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	1db9      	adds	r1, r7, #6
 80034cc:	2201      	movs	r2, #1
 80034ce:	4808      	ldr	r0, [pc, #32]	@ (80034f0 <SPI_Write+0x38>)
 80034d0:	f002 fa98 	bl	8005a04 <HAL_SPI_Transmit>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80034de:	f000 f809 	bl	80034f4 <SPI_Error>
  }
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000010 	.word	0x20000010
 80034f0:	20025df8 	.word	0x20025df8

080034f4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80034f8:	4803      	ldr	r0, [pc, #12]	@ (8003508 <SPI_Error+0x14>)
 80034fa:	f002 fa5b 	bl	80059b4 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80034fe:	f7ff ffa1 	bl	8003444 <SPI_Init>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20025df8 	.word	0x20025df8

0800350c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <SPI_MspInit+0x6c>)
 800351a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351c:	4a16      	ldr	r2, [pc, #88]	@ (8003578 <SPI_MspInit+0x6c>)
 800351e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003522:	6453      	str	r3, [r2, #68]	@ 0x44
 8003524:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <SPI_MspInit+0x6c>)
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	4b10      	ldr	r3, [pc, #64]	@ (8003578 <SPI_MspInit+0x6c>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003538:	4a0f      	ldr	r2, [pc, #60]	@ (8003578 <SPI_MspInit+0x6c>)
 800353a:	f043 0320 	orr.w	r3, r3, #32
 800353e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003540:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <SPI_MspInit+0x6c>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800354c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003550:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003556:	2302      	movs	r3, #2
 8003558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800355a:	2301      	movs	r3, #1
 800355c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800355e:	2305      	movs	r3, #5
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	4619      	mov	r1, r3
 8003568:	4804      	ldr	r0, [pc, #16]	@ (800357c <SPI_MspInit+0x70>)
 800356a:	f000 fd69 	bl	8004040 <HAL_GPIO_Init>
}
 800356e:	bf00      	nop
 8003570:	3728      	adds	r7, #40	@ 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	40021400 	.word	0x40021400

08003580 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003586:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <LCD_IO_Init+0xe0>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d164      	bne.n	8003658 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800358e:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <LCD_IO_Init+0xe0>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	4b32      	ldr	r3, [pc, #200]	@ (8003664 <LCD_IO_Init+0xe4>)
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	4a31      	ldr	r2, [pc, #196]	@ (8003664 <LCD_IO_Init+0xe4>)
 800359e:	f043 0308 	orr.w	r3, r3, #8
 80035a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <LCD_IO_Init+0xe4>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80035b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035b6:	2301      	movs	r3, #1
 80035b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035be:	2302      	movs	r3, #2
 80035c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	4619      	mov	r1, r3
 80035c8:	4827      	ldr	r0, [pc, #156]	@ (8003668 <LCD_IO_Init+0xe8>)
 80035ca:	f000 fd39 	bl	8004040 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <LCD_IO_Init+0xe4>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a23      	ldr	r2, [pc, #140]	@ (8003664 <LCD_IO_Init+0xe4>)
 80035d8:	f043 0308 	orr.w	r3, r3, #8
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b21      	ldr	r3, [pc, #132]	@ (8003664 <LCD_IO_Init+0xe4>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80035ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80035f0:	2301      	movs	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	4619      	mov	r1, r3
 8003602:	4819      	ldr	r0, [pc, #100]	@ (8003668 <LCD_IO_Init+0xe8>)
 8003604:	f000 fd1c 	bl	8004040 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <LCD_IO_Init+0xe4>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	4a14      	ldr	r2, [pc, #80]	@ (8003664 <LCD_IO_Init+0xe4>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6313      	str	r3, [r2, #48]	@ 0x30
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <LCD_IO_Init+0xe4>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003624:	2304      	movs	r3, #4
 8003626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003628:	2301      	movs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003630:	2302      	movs	r3, #2
 8003632:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	4619      	mov	r1, r3
 800363a:	480c      	ldr	r0, [pc, #48]	@ (800366c <LCD_IO_Init+0xec>)
 800363c:	f000 fd00 	bl	8004040 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003640:	2200      	movs	r2, #0
 8003642:	2104      	movs	r1, #4
 8003644:	4809      	ldr	r0, [pc, #36]	@ (800366c <LCD_IO_Init+0xec>)
 8003646:	f000 ffb3 	bl	80045b0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800364a:	2201      	movs	r2, #1
 800364c:	2104      	movs	r1, #4
 800364e:	4807      	ldr	r0, [pc, #28]	@ (800366c <LCD_IO_Init+0xec>)
 8003650:	f000 ffae 	bl	80045b0 <HAL_GPIO_WritePin>

    SPI_Init();
 8003654:	f7ff fef6 	bl	8003444 <SPI_Init>
  }
}
 8003658:	bf00      	nop
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20025e50 	.word	0x20025e50
 8003664:	40023800 	.word	0x40023800
 8003668:	40020c00 	.word	0x40020c00
 800366c:	40020800 	.word	0x40020800

08003670 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800367a:	2201      	movs	r2, #1
 800367c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003680:	480a      	ldr	r0, [pc, #40]	@ (80036ac <LCD_IO_WriteData+0x3c>)
 8003682:	f000 ff95 	bl	80045b0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003686:	2200      	movs	r2, #0
 8003688:	2104      	movs	r1, #4
 800368a:	4809      	ldr	r0, [pc, #36]	@ (80036b0 <LCD_IO_WriteData+0x40>)
 800368c:	f000 ff90 	bl	80045b0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff10 	bl	80034b8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003698:	2201      	movs	r2, #1
 800369a:	2104      	movs	r1, #4
 800369c:	4804      	ldr	r0, [pc, #16]	@ (80036b0 <LCD_IO_WriteData+0x40>)
 800369e:	f000 ff87 	bl	80045b0 <HAL_GPIO_WritePin>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40020800 	.word	0x40020800

080036b4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80036c4:	480a      	ldr	r0, [pc, #40]	@ (80036f0 <LCD_IO_WriteReg+0x3c>)
 80036c6:	f000 ff73 	bl	80045b0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80036ca:	2200      	movs	r2, #0
 80036cc:	2104      	movs	r1, #4
 80036ce:	4809      	ldr	r0, [pc, #36]	@ (80036f4 <LCD_IO_WriteReg+0x40>)
 80036d0:	f000 ff6e 	bl	80045b0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff feed 	bl	80034b8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036de:	2201      	movs	r2, #1
 80036e0:	2104      	movs	r1, #4
 80036e2:	4804      	ldr	r0, [pc, #16]	@ (80036f4 <LCD_IO_WriteReg+0x40>)
 80036e4:	f000 ff64 	bl	80045b0 <HAL_GPIO_WritePin>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40020c00 	.word	0x40020c00
 80036f4:	40020800 	.word	0x40020800

080036f8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fb35 	bl	8003d70 <HAL_Delay>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003712:	f000 fabb 	bl	8003c8c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8003716:	f000 f807 	bl	8003728 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 800371a:	f7fc fedf 	bl	80004dc <ApplicationInit>
  TIM3_App_Start();
 800371e:	f7fc fef5 	bl	800050c <TIM3_App_Start>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <main+0x14>
	...

08003728 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b092      	sub	sp, #72	@ 0x48
 800372c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4b1c      	ldr	r3, [pc, #112]	@ (80037a4 <SystemClockOverride+0x7c>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a1b      	ldr	r2, [pc, #108]	@ (80037a4 <SystemClockOverride+0x7c>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <SystemClockOverride+0x7c>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800374a:	2301      	movs	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800374e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003752:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003754:	2302      	movs	r3, #2
 8003756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003758:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800375c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800375e:	2308      	movs	r3, #8
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003762:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003768:	2302      	movs	r3, #2
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800376c:	2307      	movs	r3, #7
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f9dc 	bl	8004b30 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003778:	230f      	movs	r3, #15
 800377a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800377c:	2302      	movs	r3, #2
 800377e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003780:	2300      	movs	r3, #0
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003784:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800378a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800378e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003790:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003794:	2105      	movs	r1, #5
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fc42 	bl	8005020 <HAL_RCC_ClockConfig>
}
 800379c:	bf00      	nop
 800379e:	3748      	adds	r7, #72	@ 0x48
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800

080037a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80037ac:	b672      	cpsid	i
}
 80037ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037b0:	bf00      	nop
 80037b2:	e7fd      	b.n	80037b0 <Error_Handler+0x8>

080037b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <HAL_MspInit+0x4c>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003800 <HAL_MspInit+0x4c>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003800 <HAL_MspInit+0x4c>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_MspInit+0x4c>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <HAL_MspInit+0x4c>)
 80037e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_MspInit+0x4c>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037f2:	2007      	movs	r0, #7
 80037f4:	f000 fbd4 	bl	8003fa0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b09a      	sub	sp, #104	@ 0x68
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800381c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003820:	2230      	movs	r2, #48	@ 0x30
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fc87 	bl	8006138 <memset>
  if(hltdc->Instance==LTDC)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a81      	ldr	r2, [pc, #516]	@ (8003a34 <HAL_LTDC_MspInit+0x230>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f040 80fa 	bne.w	8003a2a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003836:	2308      	movs	r3, #8
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800383a:	2332      	movs	r3, #50	@ 0x32
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800383e:	2302      	movs	r3, #2
 8003840:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003842:	2300      	movs	r3, #0
 8003844:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fdd4 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003856:	f7ff ffa7 	bl	80037a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	4b76      	ldr	r3, [pc, #472]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4a75      	ldr	r2, [pc, #468]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003864:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003868:	6453      	str	r3, [r2, #68]	@ 0x44
 800386a:	4b73      	ldr	r3, [pc, #460]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	4b6f      	ldr	r3, [pc, #444]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a6e      	ldr	r2, [pc, #440]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003880:	f043 0320 	orr.w	r3, r3, #32
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b6c      	ldr	r3, [pc, #432]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	4b68      	ldr	r3, [pc, #416]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4a67      	ldr	r2, [pc, #412]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	4b65      	ldr	r3, [pc, #404]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	4b61      	ldr	r3, [pc, #388]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	4a60      	ldr	r2, [pc, #384]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038be:	4b5e      	ldr	r3, [pc, #376]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	4a59      	ldr	r2, [pc, #356]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038da:	4b57      	ldr	r3, [pc, #348]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	4a52      	ldr	r2, [pc, #328]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f6:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4b4c      	ldr	r3, [pc, #304]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 800390c:	f043 0308 	orr.w	r3, r3, #8
 8003910:	6313      	str	r3, [r2, #48]	@ 0x30
 8003912:	4b49      	ldr	r3, [pc, #292]	@ (8003a38 <HAL_LTDC_MspInit+0x234>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800391e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003922:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392c:	2300      	movs	r3, #0
 800392e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003930:	230e      	movs	r3, #14
 8003932:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003934:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003938:	4619      	mov	r1, r3
 800393a:	4840      	ldr	r0, [pc, #256]	@ (8003a3c <HAL_LTDC_MspInit+0x238>)
 800393c:	f000 fb80 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003940:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003944:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003952:	230e      	movs	r3, #14
 8003954:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003956:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800395a:	4619      	mov	r1, r3
 800395c:	4838      	ldr	r0, [pc, #224]	@ (8003a40 <HAL_LTDC_MspInit+0x23c>)
 800395e:	f000 fb6f 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003962:	2303      	movs	r3, #3
 8003964:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003972:	2309      	movs	r3, #9
 8003974:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003976:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800397a:	4619      	mov	r1, r3
 800397c:	4831      	ldr	r0, [pc, #196]	@ (8003a44 <HAL_LTDC_MspInit+0x240>)
 800397e:	f000 fb5f 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003982:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003986:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003994:	230e      	movs	r3, #14
 8003996:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003998:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800399c:	4619      	mov	r1, r3
 800399e:	4829      	ldr	r0, [pc, #164]	@ (8003a44 <HAL_LTDC_MspInit+0x240>)
 80039a0:	f000 fb4e 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80039a4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80039a8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039b6:	230e      	movs	r3, #14
 80039b8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039be:	4619      	mov	r1, r3
 80039c0:	4821      	ldr	r0, [pc, #132]	@ (8003a48 <HAL_LTDC_MspInit+0x244>)
 80039c2:	f000 fb3d 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80039c6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80039ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d4:	2300      	movs	r3, #0
 80039d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039d8:	230e      	movs	r3, #14
 80039da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039e0:	4619      	mov	r1, r3
 80039e2:	481a      	ldr	r0, [pc, #104]	@ (8003a4c <HAL_LTDC_MspInit+0x248>)
 80039e4:	f000 fb2c 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80039e8:	2348      	movs	r3, #72	@ 0x48
 80039ea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039f8:	230e      	movs	r3, #14
 80039fa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a00:	4619      	mov	r1, r3
 8003a02:	4813      	ldr	r0, [pc, #76]	@ (8003a50 <HAL_LTDC_MspInit+0x24c>)
 8003a04:	f000 fb1c 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003a08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a0c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a16:	2300      	movs	r3, #0
 8003a18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003a1a:	2309      	movs	r3, #9
 8003a1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a22:	4619      	mov	r1, r3
 8003a24:	4808      	ldr	r0, [pc, #32]	@ (8003a48 <HAL_LTDC_MspInit+0x244>)
 8003a26:	f000 fb0b 	bl	8004040 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003a2a:	bf00      	nop
 8003a2c:	3768      	adds	r7, #104	@ 0x68
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40016800 	.word	0x40016800
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40021400 	.word	0x40021400
 8003a40:	40020000 	.word	0x40020000
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020c00 	.word	0x40020c00

08003a54 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	@ (8003a90 <HAL_RNG_MspInit+0x3c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10d      	bne.n	8003a82 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_RNG_MspInit+0x40>)
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6e:	4a09      	ldr	r2, [pc, #36]	@ (8003a94 <HAL_RNG_MspInit+0x40>)
 8003a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a74:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a76:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <HAL_RNG_MspInit+0x40>)
 8003a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	50060800 	.word	0x50060800
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	@ 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <HAL_SPI_MspInit+0x84>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d12c      	bne.n	8003b14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ac4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
 8003ada:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	4a10      	ldr	r2, [pc, #64]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ae0:	f043 0320 	orr.w	r3, r3, #32
 8003ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_SPI_MspInit+0x88>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003af2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af8:	2302      	movs	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003b04:	2305      	movs	r3, #5
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4805      	ldr	r0, [pc, #20]	@ (8003b24 <HAL_SPI_MspInit+0x8c>)
 8003b10:	f000 fa96 	bl	8004040 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40015000 	.word	0x40015000
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40021400 	.word	0x40021400

08003b28 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <HAL_SPI_MspDeInit+0x30>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10a      	bne.n	8003b50 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003b3a:	4b08      	ldr	r3, [pc, #32]	@ (8003b5c <HAL_SPI_MspDeInit+0x34>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	4a07      	ldr	r2, [pc, #28]	@ (8003b5c <HAL_SPI_MspDeInit+0x34>)
 8003b40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b44:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003b46:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003b4a:	4805      	ldr	r0, [pc, #20]	@ (8003b60 <HAL_SPI_MspDeInit+0x38>)
 8003b4c:	f000 fc24 	bl	8004398 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40015000 	.word	0x40015000
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40021400 	.word	0x40021400

08003b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba0 <HAL_TIM_Base_MspInit+0x3c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10d      	bne.n	8003b92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x40>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x40>)
 8003b80:	f043 0310 	orr.w	r3, r3, #16
 8003b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b86:	4b07      	ldr	r3, [pc, #28]	@ (8003ba4 <HAL_TIM_Base_MspInit+0x40>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40001000 	.word	0x40001000
 8003ba4:	40023800 	.word	0x40023800

08003ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <NMI_Handler+0x4>

08003bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bb4:	bf00      	nop
 8003bb6:	e7fd      	b.n	8003bb4 <HardFault_Handler+0x4>

08003bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bbc:	bf00      	nop
 8003bbe:	e7fd      	b.n	8003bbc <MemManage_Handler+0x4>

08003bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <BusFault_Handler+0x4>

08003bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <UsageFault_Handler+0x4>

08003bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bfe:	f000 f897 	bl	8003d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c18:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <SystemInit+0x20>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	4a05      	ldr	r2, [pc, #20]	@ (8003c34 <SystemInit+0x20>)
 8003c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c3c:	f7ff ffea 	bl	8003c14 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c40:	480c      	ldr	r0, [pc, #48]	@ (8003c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c42:	490d      	ldr	r1, [pc, #52]	@ (8003c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c44:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c48:	e002      	b.n	8003c50 <LoopCopyDataInit>

08003c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4e:	3304      	adds	r3, #4

08003c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c54:	d3f9      	bcc.n	8003c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c56:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c58:	4c0a      	ldr	r4, [pc, #40]	@ (8003c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c5c:	e001      	b.n	8003c62 <LoopFillZerobss>

08003c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c60:	3204      	adds	r2, #4

08003c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c64:	d3fb      	bcc.n	8003c5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c66:	f002 fa6f 	bl	8006148 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6a:	f7ff fd50 	bl	800370e <main>
  bx  lr    
 8003c6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003c70:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c78:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003c7c:	08007398 	.word	0x08007398
  ldr r2, =_sbss
 8003c80:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003c84:	20025e58 	.word	0x20025e58

08003c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c88:	e7fe      	b.n	8003c88 <ADC_IRQHandler>
	...

08003c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <HAL_Init+0x40>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <HAL_Init+0x40>)
 8003c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ccc <HAL_Init+0x40>)
 8003ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ca8:	4b08      	ldr	r3, [pc, #32]	@ (8003ccc <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <HAL_Init+0x40>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb4:	2003      	movs	r0, #3
 8003cb6:	f000 f973 	bl	8003fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f000 f808 	bl	8003cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc0:	f7ff fd78 	bl	80037b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cd8:	4b12      	ldr	r3, [pc, #72]	@ (8003d24 <HAL_InitTick+0x54>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_InitTick+0x58>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f999 	bl	8004026 <HAL_SYSTICK_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00e      	b.n	8003d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d80a      	bhi.n	8003d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d04:	2200      	movs	r2, #0
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	f000 f953 	bl	8003fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d10:	4a06      	ldr	r2, [pc, #24]	@ (8003d2c <HAL_InitTick+0x5c>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000014 	.word	0x20000014
 8003d28:	2000001c 	.word	0x2000001c
 8003d2c:	20000018 	.word	0x20000018

08003d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d34:	4b06      	ldr	r3, [pc, #24]	@ (8003d50 <HAL_IncTick+0x20>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_IncTick+0x24>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a04      	ldr	r2, [pc, #16]	@ (8003d54 <HAL_IncTick+0x24>)
 8003d42:	6013      	str	r3, [r2, #0]
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	2000001c 	.word	0x2000001c
 8003d54:	20025e54 	.word	0x20025e54

08003d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	@ (8003d6c <HAL_GetTick+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20025e54 	.word	0x20025e54

08003d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7ff ffee 	bl	8003d58 <HAL_GetTick>
 8003d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d005      	beq.n	8003d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <HAL_Delay+0x44>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d96:	bf00      	nop
 8003d98:	f7ff ffde 	bl	8003d58 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d8f7      	bhi.n	8003d98 <HAL_Delay+0x28>
  {
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000001c 	.word	0x2000001c

08003db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dea:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <__NVIC_SetPriorityGrouping+0x44>)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	60d3      	str	r3, [r2, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e04:	4b04      	ldr	r3, [pc, #16]	@ (8003e18 <__NVIC_GetPriorityGrouping+0x18>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	0a1b      	lsrs	r3, r3, #8
 8003e0a:	f003 0307 	and.w	r3, r3, #7
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	db0b      	blt.n	8003e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	f003 021f 	and.w	r2, r3, #31
 8003e34:	4907      	ldr	r1, [pc, #28]	@ (8003e54 <__NVIC_EnableIRQ+0x38>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	db12      	blt.n	8003e90 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e6a:	79fb      	ldrb	r3, [r7, #7]
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	490a      	ldr	r1, [pc, #40]	@ (8003e9c <__NVIC_DisableIRQ+0x44>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2001      	movs	r0, #1
 8003e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e7e:	3320      	adds	r3, #32
 8003e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e84:	f3bf 8f4f 	dsb	sy
}
 8003e88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e8a:	f3bf 8f6f 	isb	sy
}
 8003e8e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000e100 	.word	0xe000e100

08003ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	db0a      	blt.n	8003eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	490c      	ldr	r1, [pc, #48]	@ (8003eec <__NVIC_SetPriority+0x4c>)
 8003eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec8:	e00a      	b.n	8003ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4908      	ldr	r1, [pc, #32]	@ (8003ef0 <__NVIC_SetPriority+0x50>)
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	3b04      	subs	r3, #4
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	440b      	add	r3, r1
 8003ede:	761a      	strb	r2, [r3, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000e100 	.word	0xe000e100
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	@ 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f1c3 0307 	rsb	r3, r3, #7
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	bf28      	it	cs
 8003f12:	2304      	movcs	r3, #4
 8003f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d902      	bls.n	8003f24 <NVIC_EncodePriority+0x30>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3b03      	subs	r3, #3
 8003f22:	e000      	b.n	8003f26 <NVIC_EncodePriority+0x32>
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43da      	mvns	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	401a      	ands	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	43d9      	mvns	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4c:	4313      	orrs	r3, r2
         );
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3724      	adds	r7, #36	@ 0x24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f6c:	d301      	bcc.n	8003f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00f      	b.n	8003f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f72:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <SysTick_Config+0x40>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	f7ff ff8e 	bl	8003ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f84:	4b05      	ldr	r3, [pc, #20]	@ (8003f9c <SysTick_Config+0x40>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f8a:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <SysTick_Config+0x40>)
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	e000e010 	.word	0xe000e010

08003fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff05 	bl	8003db8 <__NVIC_SetPriorityGrouping>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc8:	f7ff ff1a 	bl	8003e00 <__NVIC_GetPriorityGrouping>
 8003fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	6978      	ldr	r0, [r7, #20]
 8003fd4:	f7ff ff8e 	bl	8003ef4 <NVIC_EncodePriority>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff5d 	bl	8003ea0 <__NVIC_SetPriority>
}
 8003fe6:	bf00      	nop
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff0d 	bl	8003e1c <__NVIC_EnableIRQ>
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	4603      	mov	r3, r0
 8004012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff1d 	bl	8003e58 <__NVIC_DisableIRQ>
}
 800401e:	bf00      	nop
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b082      	sub	sp, #8
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff ff94 	bl	8003f5c <SysTick_Config>
 8004034:	4603      	mov	r3, r0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	@ 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e177      	b.n	800434c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800405c:	2201      	movs	r2, #1
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	f040 8166 	bne.w	8004346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d005      	beq.n	8004092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800408e:	2b02      	cmp	r3, #2
 8004090:	d130      	bne.n	80040f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	2203      	movs	r2, #3
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040c8:	2201      	movs	r2, #1
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 0201 	and.w	r2, r3, #1
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d017      	beq.n	8004130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d123      	bne.n	8004184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	08da      	lsrs	r2, r3, #3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3208      	adds	r2, #8
 8004144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	220f      	movs	r2, #15
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	08da      	lsrs	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3208      	adds	r2, #8
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2203      	movs	r2, #3
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80c0 	beq.w	8004346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b66      	ldr	r3, [pc, #408]	@ (8004364 <HAL_GPIO_Init+0x324>)
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	4a65      	ldr	r2, [pc, #404]	@ (8004364 <HAL_GPIO_Init+0x324>)
 80041d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041d6:	4b63      	ldr	r3, [pc, #396]	@ (8004364 <HAL_GPIO_Init+0x324>)
 80041d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041e2:	4a61      	ldr	r2, [pc, #388]	@ (8004368 <HAL_GPIO_Init+0x328>)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	3302      	adds	r3, #2
 80041ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a58      	ldr	r2, [pc, #352]	@ (800436c <HAL_GPIO_Init+0x32c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d037      	beq.n	800427e <HAL_GPIO_Init+0x23e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a57      	ldr	r2, [pc, #348]	@ (8004370 <HAL_GPIO_Init+0x330>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d031      	beq.n	800427a <HAL_GPIO_Init+0x23a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a56      	ldr	r2, [pc, #344]	@ (8004374 <HAL_GPIO_Init+0x334>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d02b      	beq.n	8004276 <HAL_GPIO_Init+0x236>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a55      	ldr	r2, [pc, #340]	@ (8004378 <HAL_GPIO_Init+0x338>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d025      	beq.n	8004272 <HAL_GPIO_Init+0x232>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a54      	ldr	r2, [pc, #336]	@ (800437c <HAL_GPIO_Init+0x33c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01f      	beq.n	800426e <HAL_GPIO_Init+0x22e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a53      	ldr	r2, [pc, #332]	@ (8004380 <HAL_GPIO_Init+0x340>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d019      	beq.n	800426a <HAL_GPIO_Init+0x22a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a52      	ldr	r2, [pc, #328]	@ (8004384 <HAL_GPIO_Init+0x344>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_GPIO_Init+0x226>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a51      	ldr	r2, [pc, #324]	@ (8004388 <HAL_GPIO_Init+0x348>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00d      	beq.n	8004262 <HAL_GPIO_Init+0x222>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a50      	ldr	r2, [pc, #320]	@ (800438c <HAL_GPIO_Init+0x34c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <HAL_GPIO_Init+0x21e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4f      	ldr	r2, [pc, #316]	@ (8004390 <HAL_GPIO_Init+0x350>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_GPIO_Init+0x21a>
 8004256:	2309      	movs	r3, #9
 8004258:	e012      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800425a:	230a      	movs	r3, #10
 800425c:	e010      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800425e:	2308      	movs	r3, #8
 8004260:	e00e      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004262:	2307      	movs	r3, #7
 8004264:	e00c      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004266:	2306      	movs	r3, #6
 8004268:	e00a      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800426a:	2305      	movs	r3, #5
 800426c:	e008      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800426e:	2304      	movs	r3, #4
 8004270:	e006      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004272:	2303      	movs	r3, #3
 8004274:	e004      	b.n	8004280 <HAL_GPIO_Init+0x240>
 8004276:	2302      	movs	r3, #2
 8004278:	e002      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_GPIO_Init+0x240>
 800427e:	2300      	movs	r3, #0
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	f002 0203 	and.w	r2, r2, #3
 8004286:	0092      	lsls	r2, r2, #2
 8004288:	4093      	lsls	r3, r2
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004290:	4935      	ldr	r1, [pc, #212]	@ (8004368 <HAL_GPIO_Init+0x328>)
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800429e:	4b3d      	ldr	r3, [pc, #244]	@ (8004394 <HAL_GPIO_Init+0x354>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c2:	4a34      	ldr	r2, [pc, #208]	@ (8004394 <HAL_GPIO_Init+0x354>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042c8:	4b32      	ldr	r3, [pc, #200]	@ (8004394 <HAL_GPIO_Init+0x354>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042ec:	4a29      	ldr	r2, [pc, #164]	@ (8004394 <HAL_GPIO_Init+0x354>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f2:	4b28      	ldr	r3, [pc, #160]	@ (8004394 <HAL_GPIO_Init+0x354>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	43db      	mvns	r3, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4013      	ands	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004316:	4a1f      	ldr	r2, [pc, #124]	@ (8004394 <HAL_GPIO_Init+0x354>)
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <HAL_GPIO_Init+0x354>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <HAL_GPIO_Init+0x354>)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f ae84 	bls.w	800405c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	@ 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40023800 	.word	0x40023800
 8004368:	40013800 	.word	0x40013800
 800436c:	40020000 	.word	0x40020000
 8004370:	40020400 	.word	0x40020400
 8004374:	40020800 	.word	0x40020800
 8004378:	40020c00 	.word	0x40020c00
 800437c:	40021000 	.word	0x40021000
 8004380:	40021400 	.word	0x40021400
 8004384:	40021800 	.word	0x40021800
 8004388:	40021c00 	.word	0x40021c00
 800438c:	40022000 	.word	0x40022000
 8004390:	40022400 	.word	0x40022400
 8004394:	40013c00 	.word	0x40013c00

08004398 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e0d9      	b.n	8004568 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043b4:	2201      	movs	r2, #1
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f040 80c9 	bne.w	8004562 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80043d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004580 <HAL_GPIO_DeInit+0x1e8>)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	3302      	adds	r3, #2
 80043d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043dc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a63      	ldr	r2, [pc, #396]	@ (8004584 <HAL_GPIO_DeInit+0x1ec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d037      	beq.n	800446a <HAL_GPIO_DeInit+0xd2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a62      	ldr	r2, [pc, #392]	@ (8004588 <HAL_GPIO_DeInit+0x1f0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_GPIO_DeInit+0xce>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a61      	ldr	r2, [pc, #388]	@ (800458c <HAL_GPIO_DeInit+0x1f4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02b      	beq.n	8004462 <HAL_GPIO_DeInit+0xca>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a60      	ldr	r2, [pc, #384]	@ (8004590 <HAL_GPIO_DeInit+0x1f8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d025      	beq.n	800445e <HAL_GPIO_DeInit+0xc6>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a5f      	ldr	r2, [pc, #380]	@ (8004594 <HAL_GPIO_DeInit+0x1fc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_GPIO_DeInit+0xc2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a5e      	ldr	r2, [pc, #376]	@ (8004598 <HAL_GPIO_DeInit+0x200>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_DeInit+0xbe>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a5d      	ldr	r2, [pc, #372]	@ (800459c <HAL_GPIO_DeInit+0x204>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_DeInit+0xba>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a5c      	ldr	r2, [pc, #368]	@ (80045a0 <HAL_GPIO_DeInit+0x208>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_DeInit+0xb6>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a5b      	ldr	r2, [pc, #364]	@ (80045a4 <HAL_GPIO_DeInit+0x20c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_DeInit+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a5a      	ldr	r2, [pc, #360]	@ (80045a8 <HAL_GPIO_DeInit+0x210>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_DeInit+0xae>
 8004442:	2309      	movs	r3, #9
 8004444:	e012      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 8004446:	230a      	movs	r3, #10
 8004448:	e010      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 800444a:	2308      	movs	r3, #8
 800444c:	e00e      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 800444e:	2307      	movs	r3, #7
 8004450:	e00c      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 8004452:	2306      	movs	r3, #6
 8004454:	e00a      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 8004456:	2305      	movs	r3, #5
 8004458:	e008      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 800445a:	2304      	movs	r3, #4
 800445c:	e006      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_DeInit+0xd4>
 800446a:	2300      	movs	r3, #0
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d132      	bne.n	80044e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800447c:	4b4b      	ldr	r3, [pc, #300]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	43db      	mvns	r3, r3
 8004484:	4949      	ldr	r1, [pc, #292]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 8004486:	4013      	ands	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800448a:	4b48      	ldr	r3, [pc, #288]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	43db      	mvns	r3, r3
 8004492:	4946      	ldr	r1, [pc, #280]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 8004494:	4013      	ands	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004498:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	43db      	mvns	r3, r3
 80044a0:	4942      	ldr	r1, [pc, #264]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80044a6:	4b41      	ldr	r3, [pc, #260]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	493f      	ldr	r1, [pc, #252]	@ (80045ac <HAL_GPIO_DeInit+0x214>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	220f      	movs	r2, #15
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80044c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004580 <HAL_GPIO_DeInit+0x1e8>)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	089b      	lsrs	r3, r3, #2
 80044ca:	3302      	adds	r3, #2
 80044cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	482a      	ldr	r0, [pc, #168]	@ (8004580 <HAL_GPIO_DeInit+0x1e8>)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	400a      	ands	r2, r1
 80044dc:	3302      	adds	r3, #2
 80044de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2103      	movs	r1, #3
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	220f      	movs	r2, #15
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	08d2      	lsrs	r2, r2, #3
 8004518:	4019      	ands	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3208      	adds	r2, #8
 800451e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	2103      	movs	r1, #3
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	2101      	movs	r1, #1
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	401a      	ands	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2103      	movs	r1, #3
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	401a      	ands	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	3301      	adds	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	f67f af22 	bls.w	80043b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40013800 	.word	0x40013800
 8004584:	40020000 	.word	0x40020000
 8004588:	40020400 	.word	0x40020400
 800458c:	40020800 	.word	0x40020800
 8004590:	40020c00 	.word	0x40020c00
 8004594:	40021000 	.word	0x40021000
 8004598:	40021400 	.word	0x40021400
 800459c:	40021800 	.word	0x40021800
 80045a0:	40021c00 	.word	0x40021c00
 80045a4:	40022000 	.word	0x40022000
 80045a8:	40022400 	.word	0x40022400
 80045ac:	40013c00 	.word	0x40013c00

080045b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	807b      	strh	r3, [r7, #2]
 80045bc:	4613      	mov	r3, r2
 80045be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045c0:	787b      	ldrb	r3, [r7, #1]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045cc:	e003      	b.n	80045d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ce:	887b      	ldrh	r3, [r7, #2]
 80045d0:	041a      	lsls	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	619a      	str	r2, [r3, #24]
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e0bf      	b.n	8004776 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff f8fa 	bl	8003804 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699a      	ldr	r2, [r3, #24]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004626:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800463c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6899      	ldr	r1, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b4a      	ldr	r3, [pc, #296]	@ (8004780 <HAL_LTDC_Init+0x19c>)
 8004658:	400b      	ands	r3, r1
 800465a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68d9      	ldr	r1, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4b3e      	ldr	r3, [pc, #248]	@ (8004780 <HAL_LTDC_Init+0x19c>)
 8004686:	400b      	ands	r3, r1
 8004688:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68d9      	ldr	r1, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6919      	ldr	r1, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b33      	ldr	r3, [pc, #204]	@ (8004780 <HAL_LTDC_Init+0x19c>)
 80046b4:	400b      	ands	r3, r1
 80046b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6919      	ldr	r1, [r3, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6959      	ldr	r1, [r3, #20]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <HAL_LTDC_Init+0x19c>)
 80046e2:	400b      	ands	r3, r1
 80046e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ea:	041b      	lsls	r3, r3, #16
 80046ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6959      	ldr	r1, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004714:	041b      	lsls	r3, r3, #16
 8004716:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004726:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0206 	orr.w	r2, r2, #6
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	f000f800 	.word	0xf000f800

08004784 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_LTDC_ConfigLayer+0x1a>
 800479a:	2302      	movs	r3, #2
 800479c:	e02c      	b.n	80047f8 <HAL_LTDC_ConfigLayer+0x74>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2134      	movs	r1, #52	@ 0x34
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4614      	mov	r4, r2
 80047c2:	461d      	mov	r5, r3
 80047c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f811 	bl	8004800 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2201      	movs	r2, #1
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bdb0      	pop	{r4, r5, r7, pc}

08004800 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	@ 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	0c1b      	lsrs	r3, r3, #16
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	4413      	add	r3, r2
 800481e:	041b      	lsls	r3, r3, #16
 8004820:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	01db      	lsls	r3, r3, #7
 800482c:	4413      	add	r3, r2
 800482e:	3384      	adds	r3, #132	@ 0x84
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	6812      	ldr	r2, [r2, #0]
 8004836:	4611      	mov	r1, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	01d2      	lsls	r2, r2, #7
 800483c:	440a      	add	r2, r1
 800483e:	3284      	adds	r2, #132	@ 0x84
 8004840:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004844:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004856:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004858:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	440b      	add	r3, r1
 8004866:	3384      	adds	r3, #132	@ 0x84
 8004868:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800486e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800487e:	4413      	add	r3, r2
 8004880:	041b      	lsls	r3, r3, #16
 8004882:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	4413      	add	r3, r2
 8004890:	3384      	adds	r3, #132	@ 0x84
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	4611      	mov	r1, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	01d2      	lsls	r2, r2, #7
 800489e:	440a      	add	r2, r1
 80048a0:	3284      	adds	r2, #132	@ 0x84
 80048a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80048a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048b6:	4413      	add	r3, r2
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	01db      	lsls	r3, r3, #7
 80048c4:	440b      	add	r3, r1
 80048c6:	3384      	adds	r3, #132	@ 0x84
 80048c8:	4619      	mov	r1, r3
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	01db      	lsls	r3, r3, #7
 80048da:	4413      	add	r3, r2
 80048dc:	3384      	adds	r3, #132	@ 0x84
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	4611      	mov	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	01d2      	lsls	r2, r2, #7
 80048ea:	440a      	add	r2, r1
 80048ec:	3284      	adds	r2, #132	@ 0x84
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	01db      	lsls	r3, r3, #7
 80048fe:	4413      	add	r3, r2
 8004900:	3384      	adds	r3, #132	@ 0x84
 8004902:	461a      	mov	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	061b      	lsls	r3, r3, #24
 8004924:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	01db      	lsls	r3, r3, #7
 8004930:	4413      	add	r3, r2
 8004932:	3384      	adds	r3, #132	@ 0x84
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	01db      	lsls	r3, r3, #7
 8004940:	4413      	add	r3, r2
 8004942:	3384      	adds	r3, #132	@ 0x84
 8004944:	461a      	mov	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004950:	461a      	mov	r2, r3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	431a      	orrs	r2, r3
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4619      	mov	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	01db      	lsls	r3, r3, #7
 8004964:	440b      	add	r3, r1
 8004966:	3384      	adds	r3, #132	@ 0x84
 8004968:	4619      	mov	r1, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	4413      	add	r3, r2
 800497c:	3384      	adds	r3, #132	@ 0x84
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	4611      	mov	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	01d2      	lsls	r2, r2, #7
 800498a:	440a      	add	r2, r1
 800498c:	3284      	adds	r2, #132	@ 0x84
 800498e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004992:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	4413      	add	r3, r2
 80049a0:	3384      	adds	r3, #132	@ 0x84
 80049a2:	461a      	mov	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4413      	add	r3, r2
 80049b6:	3384      	adds	r3, #132	@ 0x84
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	4611      	mov	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	01d2      	lsls	r2, r2, #7
 80049c4:	440a      	add	r2, r1
 80049c6:	3284      	adds	r2, #132	@ 0x84
 80049c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80049cc:	f023 0307 	bic.w	r3, r3, #7
 80049d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6809      	ldr	r1, [r1, #0]
 80049de:	4608      	mov	r0, r1
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	01c9      	lsls	r1, r1, #7
 80049e4:	4401      	add	r1, r0
 80049e6:	3184      	adds	r1, #132	@ 0x84
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	01db      	lsls	r3, r3, #7
 80049f6:	4413      	add	r3, r2
 80049f8:	3384      	adds	r3, #132	@ 0x84
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	01db      	lsls	r3, r3, #7
 8004a06:	4413      	add	r3, r2
 8004a08:	3384      	adds	r3, #132	@ 0x84
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	01db      	lsls	r3, r3, #7
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3384      	adds	r3, #132	@ 0x84
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004a2e:	2304      	movs	r3, #4
 8004a30:	61fb      	str	r3, [r7, #28]
 8004a32:	e01b      	b.n	8004a6c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d102      	bne.n	8004a42 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	e014      	b.n	8004a6c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d00b      	beq.n	8004a62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d007      	beq.n	8004a62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d003      	beq.n	8004a62 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004a5e:	2b07      	cmp	r3, #7
 8004a60:	d102      	bne.n	8004a68 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004a62:	2302      	movs	r3, #2
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	e001      	b.n	8004a6c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	01db      	lsls	r3, r3, #7
 8004a76:	4413      	add	r3, r2
 8004a78:	3384      	adds	r3, #132	@ 0x84
 8004a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4611      	mov	r1, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	01d2      	lsls	r2, r2, #7
 8004a86:	440a      	add	r2, r1
 8004a88:	3284      	adds	r2, #132	@ 0x84
 8004a8a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1acb      	subs	r3, r1, r3
 8004aa6:	69f9      	ldr	r1, [r7, #28]
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	6809      	ldr	r1, [r1, #0]
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	01c9      	lsls	r1, r1, #7
 8004ab8:	4401      	add	r1, r0
 8004aba:	3184      	adds	r1, #132	@ 0x84
 8004abc:	4313      	orrs	r3, r2
 8004abe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	01db      	lsls	r3, r3, #7
 8004aca:	4413      	add	r3, r2
 8004acc:	3384      	adds	r3, #132	@ 0x84
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	01d2      	lsls	r2, r2, #7
 8004ada:	440a      	add	r2, r1
 8004adc:	3284      	adds	r2, #132	@ 0x84
 8004ade:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	461a      	mov	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	01db      	lsls	r3, r3, #7
 8004af2:	4413      	add	r3, r2
 8004af4:	3384      	adds	r3, #132	@ 0x84
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	01db      	lsls	r3, r3, #7
 8004b08:	4413      	add	r3, r2
 8004b0a:	3384      	adds	r3, #132	@ 0x84
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4611      	mov	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	01d2      	lsls	r2, r2, #7
 8004b18:	440a      	add	r2, r1
 8004b1a:	3284      	adds	r2, #132	@ 0x84
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6013      	str	r3, [r2, #0]
}
 8004b22:	bf00      	nop
 8004b24:	3724      	adds	r7, #36	@ 0x24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e267      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d075      	beq.n	8004c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b4e:	4b88      	ldr	r3, [pc, #544]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d00c      	beq.n	8004b74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5a:	4b85      	ldr	r3, [pc, #532]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d112      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b66:	4b82      	ldr	r3, [pc, #520]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b72:	d10b      	bne.n	8004b8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	4b7e      	ldr	r3, [pc, #504]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d05b      	beq.n	8004c38 <HAL_RCC_OscConfig+0x108>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d157      	bne.n	8004c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e242      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d106      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x74>
 8004b96:	4b76      	ldr	r3, [pc, #472]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a75      	ldr	r2, [pc, #468]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	e01d      	b.n	8004be0 <HAL_RCC_OscConfig+0xb0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bac:	d10c      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x98>
 8004bae:	4b70      	ldr	r3, [pc, #448]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b6d      	ldr	r3, [pc, #436]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCC_OscConfig+0xb0>
 8004bc8:	4b69      	ldr	r3, [pc, #420]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a68      	ldr	r2, [pc, #416]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b66      	ldr	r3, [pc, #408]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a65      	ldr	r2, [pc, #404]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d013      	beq.n	8004c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be8:	f7ff f8b6 	bl	8003d58 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7ff f8b2 	bl	8003d58 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	@ 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e207      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	4b5b      	ldr	r3, [pc, #364]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0xc0>
 8004c0e:	e014      	b.n	8004c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7ff f8a2 	bl	8003d58 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7ff f89e 	bl	8003d58 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	@ 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1f3      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2a:	4b51      	ldr	r3, [pc, #324]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f0      	bne.n	8004c18 <HAL_RCC_OscConfig+0xe8>
 8004c36:	e000      	b.n	8004c3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d063      	beq.n	8004d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c46:	4b4a      	ldr	r3, [pc, #296]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c52:	4b47      	ldr	r3, [pc, #284]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d11c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5e:	4b44      	ldr	r3, [pc, #272]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d116      	bne.n	8004c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	4b41      	ldr	r3, [pc, #260]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_RCC_OscConfig+0x152>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e1c7      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c82:	4b3b      	ldr	r3, [pc, #236]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4937      	ldr	r1, [pc, #220]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c96:	e03a      	b.n	8004d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca0:	4b34      	ldr	r3, [pc, #208]	@ (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7ff f857 	bl	8003d58 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cae:	f7ff f853 	bl	8003d58 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e1a8      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0f0      	beq.n	8004cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ccc:	4b28      	ldr	r3, [pc, #160]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4925      	ldr	r1, [pc, #148]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]
 8004ce0:	e015      	b.n	8004d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce2:	4b24      	ldr	r3, [pc, #144]	@ (8004d74 <HAL_RCC_OscConfig+0x244>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7ff f836 	bl	8003d58 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf0:	f7ff f832 	bl	8003d58 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e187      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	4b1b      	ldr	r3, [pc, #108]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d036      	beq.n	8004d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d22:	4b15      	ldr	r3, [pc, #84]	@ (8004d78 <HAL_RCC_OscConfig+0x248>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7ff f816 	bl	8003d58 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d30:	f7ff f812 	bl	8003d58 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e167      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <HAL_RCC_OscConfig+0x240>)
 8004d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f0      	beq.n	8004d30 <HAL_RCC_OscConfig+0x200>
 8004d4e:	e01b      	b.n	8004d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d50:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <HAL_RCC_OscConfig+0x248>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d56:	f7fe ffff 	bl	8003d58 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d5c:	e00e      	b.n	8004d7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fffb 	bl	8003d58 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d907      	bls.n	8004d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e150      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
 8004d70:	40023800 	.word	0x40023800
 8004d74:	42470000 	.word	0x42470000
 8004d78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	4b88      	ldr	r3, [pc, #544]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ea      	bne.n	8004d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8097 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d9a:	4b81      	ldr	r3, [pc, #516]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	4b7d      	ldr	r3, [pc, #500]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004db6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dc6:	4b77      	ldr	r3, [pc, #476]	@ (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d118      	bne.n	8004e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dd2:	4b74      	ldr	r3, [pc, #464]	@ (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a73      	ldr	r2, [pc, #460]	@ (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dde:	f7fe ffbb 	bl	8003d58 <HAL_GetTick>
 8004de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	e008      	b.n	8004df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de6:	f7fe ffb7 	bl	8003d58 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e10c      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa4 <HAL_RCC_OscConfig+0x474>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0f0      	beq.n	8004de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x2ea>
 8004e0c:	4b64      	ldr	r3, [pc, #400]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	4a63      	ldr	r2, [pc, #396]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e18:	e01c      	b.n	8004e54 <HAL_RCC_OscConfig+0x324>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x30c>
 8004e22:	4b5f      	ldr	r3, [pc, #380]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e26:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCC_OscConfig+0x324>
 8004e3c:	4b58      	ldr	r3, [pc, #352]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e40:	4a57      	ldr	r2, [pc, #348]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e42:	f023 0301 	bic.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e48:	4b55      	ldr	r3, [pc, #340]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4c:	4a54      	ldr	r2, [pc, #336]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e4e:	f023 0304 	bic.w	r3, r3, #4
 8004e52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d015      	beq.n	8004e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fe ff7c 	bl	8003d58 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7fe ff78 	bl	8003d58 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0cb      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	4b49      	ldr	r3, [pc, #292]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0ee      	beq.n	8004e64 <HAL_RCC_OscConfig+0x334>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e88:	f7fe ff66 	bl	8003d58 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e8e:	e00a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e90:	f7fe ff62 	bl	8003d58 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e0b5      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1ee      	bne.n	8004e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb8:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	4a38      	ldr	r2, [pc, #224]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80a1 	beq.w	8005010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ece:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d05c      	beq.n	8004f94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d141      	bne.n	8004f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b31      	ldr	r3, [pc, #196]	@ (8004fa8 <HAL_RCC_OscConfig+0x478>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fe ff36 	bl	8003d58 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fe ff32 	bl	8003d58 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e087      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f02:	4b27      	ldr	r3, [pc, #156]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	019b      	lsls	r3, r3, #6
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	3b01      	subs	r3, #1
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	061b      	lsls	r3, r3, #24
 8004f32:	491b      	ldr	r1, [pc, #108]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f38:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <HAL_RCC_OscConfig+0x478>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3e:	f7fe ff0b 	bl	8003d58 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f46:	f7fe ff07 	bl	8003d58 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e05c      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f58:	4b11      	ldr	r3, [pc, #68]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x416>
 8004f64:	e054      	b.n	8005010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <HAL_RCC_OscConfig+0x478>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fe fef4 	bl	8003d58 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fe fef0 	bl	8003d58 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e045      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <HAL_RCC_OscConfig+0x470>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x444>
 8004f92:	e03d      	b.n	8005010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e038      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <HAL_RCC_OscConfig+0x4ec>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d028      	beq.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d121      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d11a      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fdc:	4013      	ands	r3, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d111      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005008:	429a      	cmp	r2, r3
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800

08005020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0cc      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b68      	ldr	r3, [pc, #416]	@ (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d90c      	bls.n	800505c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b65      	ldr	r3, [pc, #404]	@ (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b63      	ldr	r3, [pc, #396]	@ (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0b8      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d020      	beq.n	80050aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005074:	4b59      	ldr	r3, [pc, #356]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a58      	ldr	r2, [pc, #352]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800507e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800508c:	4b53      	ldr	r3, [pc, #332]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4a52      	ldr	r2, [pc, #328]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005098:	4b50      	ldr	r3, [pc, #320]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	494d      	ldr	r1, [pc, #308]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d044      	beq.n	8005140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	4b47      	ldr	r3, [pc, #284]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d119      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d003      	beq.n	80050de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	4b3f      	ldr	r3, [pc, #252]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e06f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ee:	4b3b      	ldr	r3, [pc, #236]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e067      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b37      	ldr	r3, [pc, #220]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4934      	ldr	r1, [pc, #208]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 800510c:	4313      	orrs	r3, r2
 800510e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005110:	f7fe fe22 	bl	8003d58 <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fe fe1e 	bl	8003d58 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e04f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b2b      	ldr	r3, [pc, #172]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005140:	4b25      	ldr	r3, [pc, #148]	@ (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d20c      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b20      	ldr	r3, [pc, #128]	@ (80051d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e032      	b.n	80051ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005174:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4916      	ldr	r1, [pc, #88]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005192:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	490e      	ldr	r1, [pc, #56]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051a6:	f000 f821 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	490a      	ldr	r1, [pc, #40]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a09      	ldr	r2, [pc, #36]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051c2:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe fd82 	bl	8003cd0 <HAL_InitTick>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40023c00 	.word	0x40023c00
 80051dc:	40023800 	.word	0x40023800
 80051e0:	08007378 	.word	0x08007378
 80051e4:	20000014 	.word	0x20000014
 80051e8:	20000018 	.word	0x20000018

080051ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f0:	b094      	sub	sp, #80	@ 0x50
 80051f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051f8:	2300      	movs	r3, #0
 80051fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005204:	4b79      	ldr	r3, [pc, #484]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d00d      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x40>
 8005210:	2b08      	cmp	r3, #8
 8005212:	f200 80e1 	bhi.w	80053d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x34>
 800521a:	2b04      	cmp	r3, #4
 800521c:	d003      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x3a>
 800521e:	e0db      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005220:	4b73      	ldr	r3, [pc, #460]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005222:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005224:	e0db      	b.n	80053de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005226:	4b73      	ldr	r3, [pc, #460]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800522a:	e0d8      	b.n	80053de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800522c:	4b6f      	ldr	r3, [pc, #444]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x200>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005234:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005236:	4b6d      	ldr	r3, [pc, #436]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d063      	beq.n	800530a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005242:	4b6a      	ldr	r3, [pc, #424]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	2200      	movs	r2, #0
 800524a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800524c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005254:	633b      	str	r3, [r7, #48]	@ 0x30
 8005256:	2300      	movs	r3, #0
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
 800525a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800525e:	4622      	mov	r2, r4
 8005260:	462b      	mov	r3, r5
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f04f 0100 	mov.w	r1, #0
 800526a:	0159      	lsls	r1, r3, #5
 800526c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005270:	0150      	lsls	r0, r2, #5
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4621      	mov	r1, r4
 8005278:	1a51      	subs	r1, r2, r1
 800527a:	6139      	str	r1, [r7, #16]
 800527c:	4629      	mov	r1, r5
 800527e:	eb63 0301 	sbc.w	r3, r3, r1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005290:	4659      	mov	r1, fp
 8005292:	018b      	lsls	r3, r1, #6
 8005294:	4651      	mov	r1, sl
 8005296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800529a:	4651      	mov	r1, sl
 800529c:	018a      	lsls	r2, r1, #6
 800529e:	4651      	mov	r1, sl
 80052a0:	ebb2 0801 	subs.w	r8, r2, r1
 80052a4:	4659      	mov	r1, fp
 80052a6:	eb63 0901 	sbc.w	r9, r3, r1
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052be:	4690      	mov	r8, r2
 80052c0:	4699      	mov	r9, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	eb18 0303 	adds.w	r3, r8, r3
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	462b      	mov	r3, r5
 80052cc:	eb49 0303 	adc.w	r3, r9, r3
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052de:	4629      	mov	r1, r5
 80052e0:	024b      	lsls	r3, r1, #9
 80052e2:	4621      	mov	r1, r4
 80052e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052e8:	4621      	mov	r1, r4
 80052ea:	024a      	lsls	r2, r1, #9
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052f2:	2200      	movs	r2, #0
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052fc:	f7fa ff76 	bl	80001ec <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4613      	mov	r3, r2
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005308:	e058      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530a:	4b38      	ldr	r3, [pc, #224]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x200>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	2200      	movs	r2, #0
 8005312:	4618      	mov	r0, r3
 8005314:	4611      	mov	r1, r2
 8005316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	2300      	movs	r3, #0
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	f04f 0000 	mov.w	r0, #0
 800532c:	f04f 0100 	mov.w	r1, #0
 8005330:	0159      	lsls	r1, r3, #5
 8005332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005336:	0150      	lsls	r0, r2, #5
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4641      	mov	r1, r8
 800533e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005342:	4649      	mov	r1, r9
 8005344:	eb63 0b01 	sbc.w	fp, r3, r1
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800535c:	ebb2 040a 	subs.w	r4, r2, sl
 8005360:	eb63 050b 	sbc.w	r5, r3, fp
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	00eb      	lsls	r3, r5, #3
 800536e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005372:	00e2      	lsls	r2, r4, #3
 8005374:	4614      	mov	r4, r2
 8005376:	461d      	mov	r5, r3
 8005378:	4643      	mov	r3, r8
 800537a:	18e3      	adds	r3, r4, r3
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	464b      	mov	r3, r9
 8005380:	eb45 0303 	adc.w	r3, r5, r3
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005392:	4629      	mov	r1, r5
 8005394:	028b      	lsls	r3, r1, #10
 8005396:	4621      	mov	r1, r4
 8005398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800539c:	4621      	mov	r1, r4
 800539e:	028a      	lsls	r2, r1, #10
 80053a0:	4610      	mov	r0, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a6:	2200      	movs	r2, #0
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	61fa      	str	r2, [r7, #28]
 80053ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b0:	f7fa ff1c 	bl	80001ec <__aeabi_uldivmod>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4613      	mov	r3, r2
 80053ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053bc:	4b0b      	ldr	r3, [pc, #44]	@ (80053ec <HAL_RCC_GetSysClockFreq+0x200>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	0c1b      	lsrs	r3, r3, #16
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	3301      	adds	r3, #1
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053d6:	e002      	b.n	80053de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053d8:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80053da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3750      	adds	r7, #80	@ 0x50
 80053e4:	46bd      	mov	sp, r7
 80053e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ea:	bf00      	nop
 80053ec:	40023800 	.word	0x40023800
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	007a1200 	.word	0x007a1200

080053f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005428:	2b00      	cmp	r3, #0
 800542a:	d075      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800542c:	4b91      	ldr	r3, [pc, #580]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005432:	f7fe fc91 	bl	8003d58 <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005438:	e008      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800543a:	f7fe fc8d 	bl	8003d58 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e189      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800544c:	4b8a      	ldr	r3, [pc, #552]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	019a      	lsls	r2, r3, #6
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	071b      	lsls	r3, r3, #28
 8005470:	4981      	ldr	r1, [pc, #516]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005484:	4b7c      	ldr	r3, [pc, #496]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	019a      	lsls	r2, r3, #6
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	061b      	lsls	r3, r3, #24
 800549e:	431a      	orrs	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	071b      	lsls	r3, r3, #28
 80054a4:	4974      	ldr	r1, [pc, #464]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054ac:	4b72      	ldr	r3, [pc, #456]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b2:	f023 021f 	bic.w	r2, r3, #31
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	496e      	ldr	r1, [pc, #440]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	019a      	lsls	r2, r3, #6
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	071b      	lsls	r3, r3, #28
 80054e4:	4964      	ldr	r1, [pc, #400]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054ec:	4b61      	ldr	r3, [pc, #388]	@ (8005674 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f2:	f7fe fc31 	bl	8003d58 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054fa:	f7fe fc2d 	bl	8003d58 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e129      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800550c:	4b5a      	ldr	r3, [pc, #360]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800552c:	2b00      	cmp	r3, #0
 800552e:	d079      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005530:	4b52      	ldr	r3, [pc, #328]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005536:	f7fe fc0f 	bl	8003d58 <HAL_GetTick>
 800553a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800553e:	f7fe fc0b 	bl	8003d58 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e107      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005550:	4b49      	ldr	r3, [pc, #292]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800555c:	d0ef      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800556a:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005570:	0f1b      	lsrs	r3, r3, #28
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	019a      	lsls	r2, r3, #6
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	071b      	lsls	r3, r3, #28
 800558a:	493b      	ldr	r1, [pc, #236]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005592:	4b39      	ldr	r3, [pc, #228]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005598:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	4934      	ldr	r1, [pc, #208]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01e      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055b8:	4b2f      	ldr	r3, [pc, #188]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055be:	0e1b      	lsrs	r3, r3, #24
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	019a      	lsls	r2, r3, #6
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	071b      	lsls	r3, r3, #28
 80055d8:	4927      	ldr	r1, [pc, #156]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e0:	4b25      	ldr	r3, [pc, #148]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	4922      	ldr	r1, [pc, #136]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055f6:	4b21      	ldr	r3, [pc, #132]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fe fbac 	bl	8003d58 <HAL_GetTick>
 8005600:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005604:	f7fe fba8 	bl	8003d58 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0a4      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005616:	4b18      	ldr	r3, [pc, #96]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800561e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005622:	d1ef      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 808b 	beq.w	8005748 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	4a0f      	ldr	r2, [pc, #60]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005640:	6413      	str	r3, [r2, #64]	@ 0x40
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800564e:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a0b      	ldr	r2, [pc, #44]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005658:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800565a:	f7fe fb7d 	bl	8003d58 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005660:	e010      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005662:	f7fe fb79 	bl	8003d58 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d909      	bls.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e075      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005674:	42470068 	.word	0x42470068
 8005678:	40023800 	.word	0x40023800
 800567c:	42470070 	.word	0x42470070
 8005680:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005684:	4b38      	ldr	r3, [pc, #224]	@ (8005768 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0e8      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005690:	4b36      	ldr	r3, [pc, #216]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005698:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02f      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d028      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ae:	4b2f      	ldr	r3, [pc, #188]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056be:	4b2c      	ldr	r3, [pc, #176]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056c4:	4a29      	ldr	r2, [pc, #164]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ca:	4b28      	ldr	r3, [pc, #160]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d114      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056d6:	f7fe fb3f 	bl	8003d58 <HAL_GetTick>
 80056da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	e00a      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056de:	f7fe fb3b 	bl	8003d58 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e035      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f4:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0ee      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570c:	d10d      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800570e:	4b17      	ldr	r3, [pc, #92]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800571e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005722:	4912      	ldr	r1, [pc, #72]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005724:	4313      	orrs	r3, r2
 8005726:	608b      	str	r3, [r1, #8]
 8005728:	e005      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800572a:	4b10      	ldr	r3, [pc, #64]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	4a0f      	ldr	r2, [pc, #60]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005730:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005734:	6093      	str	r3, [r2, #8]
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005738:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005742:	490a      	ldr	r1, [pc, #40]	@ (800576c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005744:	4313      	orrs	r3, r2
 8005746:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800575a:	4b06      	ldr	r3, [pc, #24]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800575c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40007000 	.word	0x40007000
 800576c:	40023800 	.word	0x40023800
 8005770:	42470e40 	.word	0x42470e40
 8005774:	424711e0 	.word	0x424711e0

08005778 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e01c      	b.n	80057c4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	795b      	ldrb	r3, [r3, #5]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d105      	bne.n	80057a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fe f95a 	bl	8003a54 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0204 	orr.w	r2, r2, #4
 80057b4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e044      	b.n	8005870 <HAL_RNG_GenerateRandomNumber+0xa4>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	795b      	ldrb	r3, [r3, #5]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d133      	bne.n	800585e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057fc:	f7fe faac 	bl	8003d58 <HAL_GetTick>
 8005800:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005802:	e018      	b.n	8005836 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005804:	f7fe faa8 	bl	8003d58 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d911      	bls.n	8005836 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d00a      	beq.n	8005836 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e01c      	b.n	8005870 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d1df      	bne.n	8005804 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	715a      	strb	r2, [r3, #5]
 800585c:	e004      	b.n	8005868 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	711a      	strb	r2, [r3, #4]

  return status;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	330c      	adds	r3, #12
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ffa0 	bl	80057cc <HAL_RNG_GenerateRandomNumber>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	e000      	b.n	800589a <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8005898:	2300      	movs	r3, #0
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b082      	sub	sp, #8
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e07b      	b.n	80059ac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d108      	bne.n	80058ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058c4:	d009      	beq.n	80058da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	61da      	str	r2, [r3, #28]
 80058cc:	e005      	b.n	80058da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7fe f8cf 	bl	8003a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005910:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595e:	ea42 0103 	orr.w	r1, r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	0c1b      	lsrs	r3, r3, #16
 8005978:	f003 0104 	and.w	r1, r3, #4
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005980:	f003 0210 	and.w	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800599a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e01a      	b.n	80059fc <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fe f8a2 	bl	8003b28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a14:	f7fe f9a0 	bl	8003d58 <HAL_GetTick>
 8005a18:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d001      	beq.n	8005a2e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e12a      	b.n	8005c84 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_SPI_Transmit+0x36>
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e122      	b.n	8005c84 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_Transmit+0x48>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e11b      	b.n	8005c84 <HAL_SPI_Transmit+0x280>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2203      	movs	r2, #3
 8005a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a9a:	d10f      	bne.n	8005abc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b40      	cmp	r3, #64	@ 0x40
 8005ac8:	d007      	beq.n	8005ada <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae2:	d152      	bne.n	8005b8a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_Transmit+0xee>
 8005aec:	8b7b      	ldrh	r3, [r7, #26]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d145      	bne.n	8005b7e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af6:	881a      	ldrh	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b16:	e032      	b.n	8005b7e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d112      	bne.n	8005b4c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2a:	881a      	ldrh	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b36:	1c9a      	adds	r2, r3, #2
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b4a:	e018      	b.n	8005b7e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b4c:	f7fe f904 	bl	8003d58 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d803      	bhi.n	8005b64 <HAL_SPI_Transmit+0x160>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b62:	d102      	bne.n	8005b6a <HAL_SPI_Transmit+0x166>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e082      	b.n	8005c84 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1c7      	bne.n	8005b18 <HAL_SPI_Transmit+0x114>
 8005b88:	e053      	b.n	8005c32 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d002      	beq.n	8005b98 <HAL_SPI_Transmit+0x194>
 8005b92:	8b7b      	ldrh	r3, [r7, #26]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d147      	bne.n	8005c28 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bbe:	e033      	b.n	8005c28 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d113      	bne.n	8005bf6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bf4:	e018      	b.n	8005c28 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf6:	f7fe f8af 	bl	8003d58 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d803      	bhi.n	8005c0e <HAL_SPI_Transmit+0x20a>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d102      	bne.n	8005c14 <HAL_SPI_Transmit+0x210>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e02d      	b.n	8005c84 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1c6      	bne.n	8005bc0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f8be 	bl	8005db8 <SPI_EndRxTxTransaction>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e000      	b.n	8005c84 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005c82:	2300      	movs	r3, #0
  }
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c9a:	b2db      	uxtb	r3, r3
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cb8:	f7fe f84e 	bl	8003d58 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cc8:	f7fe f846 	bl	8003d58 <HAL_GetTick>
 8005ccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cce:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	015b      	lsls	r3, r3, #5
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cde:	e054      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d050      	beq.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce8:	f7fe f836 	bl	8003d58 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d13d      	bne.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d16:	d111      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d20:	d004      	beq.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2a:	d107      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d44:	d10f      	bne.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e017      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d19b      	bne.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000014 	.word	0x20000014

08005db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	2102      	movs	r1, #2
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff ff6a 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e032      	b.n	8005e50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dea:	4b1b      	ldr	r3, [pc, #108]	@ (8005e58 <SPI_EndRxTxTransaction+0xa0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	@ (8005e5c <SPI_EndRxTxTransaction+0xa4>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	0d5b      	lsrs	r3, r3, #21
 8005df6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e08:	d112      	bne.n	8005e30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	@ 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff47 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e00f      	b.n	8005e50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e46:	2b80      	cmp	r3, #128	@ 0x80
 8005e48:	d0f2      	beq.n	8005e30 <SPI_EndRxTxTransaction+0x78>
 8005e4a:	e000      	b.n	8005e4e <SPI_EndRxTxTransaction+0x96>
        break;
 8005e4c:	bf00      	nop
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000014 	.word	0x20000014
 8005e5c:	165e9f81 	.word	0x165e9f81

08005e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e041      	b.n	8005ef6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fd fe6c 	bl	8003b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f000 f89e 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d001      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e04e      	b.n	8005fb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a23      	ldr	r2, [pc, #140]	@ (8005fc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f42:	d01d      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1e      	ldr	r2, [pc, #120]	@ (8005fcc <HAL_TIM_Base_Start_IT+0xcc>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a19      	ldr	r2, [pc, #100]	@ (8005fd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x80>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a18      	ldr	r2, [pc, #96]	@ (8005fdc <HAL_TIM_Base_Start_IT+0xdc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d111      	bne.n	8005fa4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b06      	cmp	r3, #6
 8005f90:	d010      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa2:	e007      	b.n	8005fb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800
 8005fd0:	40000c00 	.word	0x40000c00
 8005fd4:	40010400 	.word	0x40010400
 8005fd8:	40014000 	.word	0x40014000
 8005fdc:	40001800 	.word	0x40001800

08005fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a46      	ldr	r2, [pc, #280]	@ (800610c <TIM_Base_SetConfig+0x12c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffe:	d00f      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a43      	ldr	r2, [pc, #268]	@ (8006110 <TIM_Base_SetConfig+0x130>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00b      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a42      	ldr	r2, [pc, #264]	@ (8006114 <TIM_Base_SetConfig+0x134>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d007      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a41      	ldr	r2, [pc, #260]	@ (8006118 <TIM_Base_SetConfig+0x138>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a40      	ldr	r2, [pc, #256]	@ (800611c <TIM_Base_SetConfig+0x13c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d108      	bne.n	8006032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a35      	ldr	r2, [pc, #212]	@ (800610c <TIM_Base_SetConfig+0x12c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02b      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006040:	d027      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a32      	ldr	r2, [pc, #200]	@ (8006110 <TIM_Base_SetConfig+0x130>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d023      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a31      	ldr	r2, [pc, #196]	@ (8006114 <TIM_Base_SetConfig+0x134>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01f      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a30      	ldr	r2, [pc, #192]	@ (8006118 <TIM_Base_SetConfig+0x138>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01b      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2f      	ldr	r2, [pc, #188]	@ (800611c <TIM_Base_SetConfig+0x13c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d017      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2e      	ldr	r2, [pc, #184]	@ (8006120 <TIM_Base_SetConfig+0x140>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a2d      	ldr	r2, [pc, #180]	@ (8006124 <TIM_Base_SetConfig+0x144>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a2c      	ldr	r2, [pc, #176]	@ (8006128 <TIM_Base_SetConfig+0x148>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a2b      	ldr	r2, [pc, #172]	@ (800612c <TIM_Base_SetConfig+0x14c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a2a      	ldr	r2, [pc, #168]	@ (8006130 <TIM_Base_SetConfig+0x150>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a29      	ldr	r2, [pc, #164]	@ (8006134 <TIM_Base_SetConfig+0x154>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a10      	ldr	r2, [pc, #64]	@ (800610c <TIM_Base_SetConfig+0x12c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_Base_SetConfig+0xf8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a12      	ldr	r2, [pc, #72]	@ (800611c <TIM_Base_SetConfig+0x13c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d103      	bne.n	80060e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	611a      	str	r2, [r3, #16]
  }
}
 80060fe:	bf00      	nop
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800
 800612c:	40001800 	.word	0x40001800
 8006130:	40001c00 	.word	0x40001c00
 8006134:	40002000 	.word	0x40002000

08006138 <memset>:
 8006138:	4402      	add	r2, r0
 800613a:	4603      	mov	r3, r0
 800613c:	4293      	cmp	r3, r2
 800613e:	d100      	bne.n	8006142 <memset+0xa>
 8006140:	4770      	bx	lr
 8006142:	f803 1b01 	strb.w	r1, [r3], #1
 8006146:	e7f9      	b.n	800613c <memset+0x4>

08006148 <__libc_init_array>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	4d0d      	ldr	r5, [pc, #52]	@ (8006180 <__libc_init_array+0x38>)
 800614c:	4c0d      	ldr	r4, [pc, #52]	@ (8006184 <__libc_init_array+0x3c>)
 800614e:	1b64      	subs	r4, r4, r5
 8006150:	10a4      	asrs	r4, r4, #2
 8006152:	2600      	movs	r6, #0
 8006154:	42a6      	cmp	r6, r4
 8006156:	d109      	bne.n	800616c <__libc_init_array+0x24>
 8006158:	4d0b      	ldr	r5, [pc, #44]	@ (8006188 <__libc_init_array+0x40>)
 800615a:	4c0c      	ldr	r4, [pc, #48]	@ (800618c <__libc_init_array+0x44>)
 800615c:	f000 f818 	bl	8006190 <_init>
 8006160:	1b64      	subs	r4, r4, r5
 8006162:	10a4      	asrs	r4, r4, #2
 8006164:	2600      	movs	r6, #0
 8006166:	42a6      	cmp	r6, r4
 8006168:	d105      	bne.n	8006176 <__libc_init_array+0x2e>
 800616a:	bd70      	pop	{r4, r5, r6, pc}
 800616c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006170:	4798      	blx	r3
 8006172:	3601      	adds	r6, #1
 8006174:	e7ee      	b.n	8006154 <__libc_init_array+0xc>
 8006176:	f855 3b04 	ldr.w	r3, [r5], #4
 800617a:	4798      	blx	r3
 800617c:	3601      	adds	r6, #1
 800617e:	e7f2      	b.n	8006166 <__libc_init_array+0x1e>
 8006180:	08007390 	.word	0x08007390
 8006184:	08007390 	.word	0x08007390
 8006188:	08007390 	.word	0x08007390
 800618c:	08007394 	.word	0x08007394

08006190 <_init>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr

0800619c <_fini>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr
