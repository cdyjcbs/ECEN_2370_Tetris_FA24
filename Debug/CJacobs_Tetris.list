
CJacobs_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a480  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  0800a630  0800a630  0000b630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b878  0800b878  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b878  0800b878  0000c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b880  0800b880  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b880  0800b880  0000c880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b884  0800b884  0000c884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b888  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00026098  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20026114  20026114  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014257  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000341d  00000000  00000000  00021303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00024720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff1  00000000  00000000  00025bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275ae  00000000  00000000  00026bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a78e  00000000  00000000  0004e15f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2dec  00000000  00000000  000688ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b6d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d38  00000000  00000000  0014b71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00151454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a618 	.word	0x0800a618

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800a618 	.word	0x0800a618

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#endif // COMPILE_TOUCH_FUNCTIONS

bool firstTouch = false;

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f005 fcf6 	bl	8005f74 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa98 	bl	8000abc <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa55 	bl	8000a3c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fc86 	bl	8000ea8 <LCD_Clear>
    // Draw welcome screen and await input to start game
    GameInit();
 800059c:	f000 fd56 	bl	800104c <GameInit>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a0:	f004 fa22 	bl	80049e8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <ApplicationInit+0x34>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005aa:	f000 f86f 	bl	800068c <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000098 	.word	0x20000098

080005b8 <Periph_Init>:
{
	visualDemo();
}

// Initialize Button for IRQ, RNG, and Timers 3 and 5, then start both timers.
void Periph_Init(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	buttonIRQInit();
 80005bc:	f000 f940 	bl	8000840 <buttonIRQInit>
	RNG_Init();
 80005c0:	f004 fa48 	bl	8004a54 <RNG_Init>
	timer3Init();
 80005c4:	f004 fabe 	bl	8004b44 <timer3Init>
	timer5Init();
 80005c8:	f004 fb06 	bl	8004bd8 <timer5Init>
	TIM3_Start();
 80005cc:	f004 fafa 	bl	8004bc4 <TIM3_Start>
	TIM5_Start();
 80005d0:	f004 fb42 	bl	8004c58 <TIM5_Start>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <EXTI0_IRQHandler>:

// IRQ Handler for User Button to Rotate Blocks
void EXTI0_IRQHandler(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005dc:	2006      	movs	r0, #6
 80005de:	f005 ff8c 	bl	80064fa <HAL_NVIC_DisableIRQ>
	addSchedulerEvent(ROTATE_BLOCK);
 80005e2:	2020      	movs	r0, #32
 80005e4:	f004 fa88 	bl	8004af8 <addSchedulerEvent>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80005e8:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <EXTI0_IRQHandler+0x20>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005ee:	2006      	movs	r0, #6
 80005f0:	f005 ff75 	bl	80064de <HAL_NVIC_EnableIRQ>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40013c00 	.word	0x40013c00

080005fc <TIM3_IRQHandler>:

// IRQ Handler for Timer 3 to drop blocks or end game
void TIM3_IRQHandler() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&TIM3_Config, TIM_FLAG_UPDATE)) {
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <TIM3_IRQHandler+0x64>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	2b01      	cmp	r3, #1
 800060e:	d122      	bne.n	8000656 <TIM3_IRQHandler+0x5a>
	        // Clear the update interrupt flag
	        __HAL_TIM_CLEAR_FLAG(&TIM3_Config, TIM_FLAG_UPDATE);
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <TIM3_IRQHandler+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f06f 0201 	mvn.w	r2, #1
 8000618:	611a      	str	r2, [r3, #16]

	        // Check if area below block is open or full with another block
	        int full = isFull();
 800061a:	f003 fd67 	bl	80040ec <isFull>
 800061e:	6078      	str	r0, [r7, #4]

	        // If it is not full, then schedule block to drop
	        if (full != 0){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <TIM3_IRQHandler+0x30>
	        	addSchedulerEvent(DROP_BLOCK);
 8000626:	2040      	movs	r0, #64	@ 0x40
 8000628:	f004 fa66 	bl	8004af8 <addSchedulerEvent>
	        }

	        // Update the top row and if top row is at top of screen Game Over
			if (full == 0){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d111      	bne.n	8000656 <TIM3_IRQHandler+0x5a>
				int top_row = updateTop();
 8000632:	f004 f847 	bl	80046c4 <updateTop>
 8000636:	6038      	str	r0, [r7, #0]
				if (top_row <= 1){
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2b01      	cmp	r3, #1
 800063c:	dc02      	bgt.n	8000644 <TIM3_IRQHandler+0x48>
					gameOver();
 800063e:	f000 feb3 	bl	80013a8 <gameOver>
					checkForTetris(top_row);
					addSchedulerEvent(NEW_BLOCK);
				}
			}
	 }
}
 8000642:	e008      	b.n	8000656 <TIM3_IRQHandler+0x5a>
				else if (top_row > 1) {
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	dd05      	ble.n	8000656 <TIM3_IRQHandler+0x5a>
					checkForTetris(top_row);
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f004 f880 	bl	8004750 <checkForTetris>
					addSchedulerEvent(NEW_BLOCK);
 8000650:	2010      	movs	r0, #16
 8000652:	f004 fa51 	bl	8004af8 <addSchedulerEvent>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20025e7c 	.word	0x20025e7c

08000664 <TIM5_IRQHandler>:

// IRQ Handler for Timer 5 to act as game timer
void TIM5_IRQHandler(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&TIM5_Config, TIM_FLAG_UPDATE)) {
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <TIM5_IRQHandler+0x24>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	2b01      	cmp	r3, #1
 8000674:	d106      	bne.n	8000684 <TIM5_IRQHandler+0x20>
		 // Clear the update interrupt flag
		 __HAL_TIM_CLEAR_FLAG(&TIM5_Config, TIM_FLAG_UPDATE);
 8000676:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <TIM5_IRQHandler+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f06f 0201 	mvn.w	r2, #1
 800067e:	611a      	str	r2, [r3, #16]
		 addSecond();
 8000680:	f004 f810 	bl	80046a4 <addSecond>
	 }
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20025ec4 	.word	0x20025ec4

0800068c <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006a6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80006aa:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	4a0e      	ldr	r2, [pc, #56]	@ (80006f8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006d6:	f005 ff51 	bl	800657c <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	2028      	movs	r0, #40	@ 0x28
 80006e0:	f005 fee1 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e4:	2028      	movs	r0, #40	@ 0x28
 80006e6:	f005 fefa 	bl	80064de <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006ea:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <LCDTouchScreenInterruptGPIOInit+0x74>)
 80006ec:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <LCDTouchScreenInterruptGPIOInit+0x78>)
 80006ee:	601a      	str	r2, [r3, #0]

}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020000 	.word	0x40020000
 8000700:	200000a0 	.word	0x200000a0
 8000704:	0600000f 	.word	0x0600000f

08000708 <EXTI15_10_IRQHandler>:

static uint8_t statusFlag;

// IRQ Handler for the Touch Screen
void EXTI15_10_IRQHandler()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800070e:	2028      	movs	r0, #40	@ 0x28
 8000710:	f005 fef3 	bl	80064fa <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]

	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 8000718:	2040      	movs	r0, #64	@ 0x40
 800071a:	f004 f97b 	bl	8004a14 <ReadRegisterFromTouchModule>
 800071e:	4603      	mov	r3, r0
 8000720:	71bb      	strb	r3, [r7, #6]
		if (ctrlReg & 0x80)
 8000722:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <EXTI15_10_IRQHandler+0x26>
		{
			isTouchDetected = true;
 800072a:	2301      	movs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
		}

	static uint32_t count;
	count = 0;
 800072e:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <EXTI15_10_IRQHandler+0x11c>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000734:	e006      	b.n	8000744 <EXTI15_10_IRQHandler+0x3c>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000736:	204c      	movs	r0, #76	@ 0x4c
 8000738:	f005 f989 	bl	8005a4e <STMPE811_Read>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b38      	ldr	r3, [pc, #224]	@ (8000824 <EXTI15_10_IRQHandler+0x11c>)
 8000742:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000744:	4b37      	ldr	r3, [pc, #220]	@ (8000824 <EXTI15_10_IRQHandler+0x11c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f4      	beq.n	8000736 <EXTI15_10_IRQHandler+0x2e>
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d02f      	beq.n	80007b2 <EXTI15_10_IRQHandler+0xaa>
	{
		// If it is the first touch, then this will trigger Game to Start
		if (!firstTouch){
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <EXTI15_10_IRQHandler+0x120>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	f083 0301 	eor.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d007      	beq.n	8000770 <EXTI15_10_IRQHandler+0x68>
			addSchedulerEvent(GAME_START);
 8000760:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000764:	f004 f9c8 	bl	8004af8 <addSchedulerEvent>
			firstTouch = true;
 8000768:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <EXTI15_10_IRQHandler+0x120>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e023      	b.n	80007b8 <EXTI15_10_IRQHandler+0xb0>
		}

		// Subsequent touches will schedule the block to move left or right depending on touch position
		else {
			printf("\nPressed");
 8000770:	482e      	ldr	r0, [pc, #184]	@ (800082c <EXTI15_10_IRQHandler+0x124>)
 8000772:	f009 f885 	bl	8009880 <iprintf>
			DetermineTouchPosition(&StaticTouchData);
 8000776:	482e      	ldr	r0, [pc, #184]	@ (8000830 <EXTI15_10_IRQHandler+0x128>)
 8000778:	f004 f941 	bl	80049fe <DetermineTouchPosition>

			/* Touch valid */
			if (StaticTouchData.x < 120 && canMoveLeft()) {
 800077c:	4b2c      	ldr	r3, [pc, #176]	@ (8000830 <EXTI15_10_IRQHandler+0x128>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	2b77      	cmp	r3, #119	@ 0x77
 8000782:	d808      	bhi.n	8000796 <EXTI15_10_IRQHandler+0x8e>
 8000784:	f003 f946 	bl	8003a14 <canMoveLeft>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d003      	beq.n	8000796 <EXTI15_10_IRQHandler+0x8e>
				addSchedulerEvent(MOVE_LEFT);
 800078e:	2080      	movs	r0, #128	@ 0x80
 8000790:	f004 f9b2 	bl	8004af8 <addSchedulerEvent>
 8000794:	e010      	b.n	80007b8 <EXTI15_10_IRQHandler+0xb0>
			}
			else if (StaticTouchData.x >= 120 && canMoveRight()){
 8000796:	4b26      	ldr	r3, [pc, #152]	@ (8000830 <EXTI15_10_IRQHandler+0x128>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	2b77      	cmp	r3, #119	@ 0x77
 800079c:	d90c      	bls.n	80007b8 <EXTI15_10_IRQHandler+0xb0>
 800079e:	f003 fc31 	bl	8004004 <canMoveRight>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d007      	beq.n	80007b8 <EXTI15_10_IRQHandler+0xb0>
				addSchedulerEvent(MOVE_RIGHT);
 80007a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80007ac:	f004 f9a4 	bl	8004af8 <addSchedulerEvent>
 80007b0:	e002      	b.n	80007b8 <EXTI15_10_IRQHandler+0xb0>
			}
		}
	}
	else{
		/* Touch not pressed */
		printf("\nNot pressed \n");
 80007b2:	4820      	ldr	r0, [pc, #128]	@ (8000834 <EXTI15_10_IRQHandler+0x12c>)
 80007b4:	f009 f8cc 	bl	8009950 <puts>
	}

// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f004 f92b 	bl	8004a14 <ReadRegisterFromTouchModule>
 80007be:	4603      	mov	r3, r0
 80007c0:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 80007c2:	2100      	movs	r1, #0
 80007c4:	200a      	movs	r0, #10
 80007c6:	f004 f933 	bl	8004a30 <WriteDataToTouchModule>

// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 80007ca:	200b      	movs	r0, #11
 80007cc:	f004 f922 	bl	8004a14 <ReadRegisterFromTouchModule>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <EXTI15_10_IRQHandler+0x130>)
 80007d6:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <EXTI15_10_IRQHandler+0x130>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	713b      	strb	r3, [r7, #4]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	4619      	mov	r1, r3
 80007e6:	200b      	movs	r0, #11
 80007e8:	f004 f922 	bl	8004a30 <WriteDataToTouchModule>

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80007ec:	2101      	movs	r1, #1
 80007ee:	204b      	movs	r0, #75	@ 0x4b
 80007f0:	f005 f93e 	bl	8005a70 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80007f4:	2100      	movs	r1, #0
 80007f6:	204b      	movs	r0, #75	@ 0x4b
 80007f8:	f005 f93a 	bl	8005a70 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80007fc:	797b      	ldrb	r3, [r7, #5]
 80007fe:	4619      	mov	r1, r3
 8000800:	200a      	movs	r0, #10
 8000802:	f004 f915 	bl	8004a30 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000806:	2103      	movs	r1, #3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <EXTI15_10_IRQHandler+0x134>)
 800080a:	f005 fe9f 	bl	800654c <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800080e:	2028      	movs	r0, #40	@ 0x28
 8000810:	f005 fe8d 	bl	800652e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000814:	2028      	movs	r0, #40	@ 0x28
 8000816:	f005 fe62 	bl	80064de <HAL_NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000ac 	.word	0x200000ac
 8000828:	200000a8 	.word	0x200000a8
 800082c:	0800a640 	.word	0x0800a640
 8000830:	20000098 	.word	0x20000098
 8000834:	0800a64c 	.word	0x0800a64c
 8000838:	200000a9 	.word	0x200000a9
 800083c:	200000a0 	.word	0x200000a0

08000840 <buttonIRQInit>:
	}
	return returnValue;
}

// Button initialization for Interrupt Mode
void buttonIRQInit(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef pinConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
	pinConfig.Pin = GPIO_PIN_0; //GPIO_PIN_0
 8000854:	2301      	movs	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
	pinConfig.Mode = GPIO_MODE_IT_FALLING;
 8000858:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800085c:	60bb      	str	r3, [r7, #8]
	pinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2302      	movs	r3, #2
 8000860:	613b      	str	r3, [r7, #16]
	pinConfig.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <buttonIRQInit+0x64>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a0d      	ldr	r2, [pc, #52]	@ (80008a4 <buttonIRQInit+0x64>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <buttonIRQInit+0x64>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &pinConfig);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	@ (80008a8 <buttonIRQInit+0x68>)
 8000888:	f005 fe78 	bl	800657c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2102      	movs	r1, #2
 8000890:	2006      	movs	r0, #6
 8000892:	f005 fe08 	bl	80064a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000896:	2006      	movs	r0, #6
 8000898:	f005 fe21 	bl	80064de <HAL_NVIC_EnableIRQ>
}
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000

080008ac <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	4a59      	ldr	r2, [pc, #356]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c2:	4b57      	ldr	r3, [pc, #348]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a52      	ldr	r2, [pc, #328]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b50      	ldr	r3, [pc, #320]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a4b      	ldr	r2, [pc, #300]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b49      	ldr	r3, [pc, #292]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b45      	ldr	r3, [pc, #276]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a44      	ldr	r2, [pc, #272]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b42      	ldr	r3, [pc, #264]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b3e      	ldr	r3, [pc, #248]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b3b      	ldr	r3, [pc, #236]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b37      	ldr	r3, [pc, #220]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a36      	ldr	r2, [pc, #216]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b30      	ldr	r3, [pc, #192]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a20 <LCD_GPIO_Init+0x174>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000976:	f641 0358 	movw	r3, #6232	@ 0x1858
 800097a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000984:	2302      	movs	r3, #2
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000988:	230e      	movs	r3, #14
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4824      	ldr	r0, [pc, #144]	@ (8000a24 <LCD_GPIO_Init+0x178>)
 8000994:	f005 fdf2 	bl	800657c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000998:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800099c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <LCD_GPIO_Init+0x17c>)
 80009a6:	f005 fde9 	bl	800657c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009aa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <LCD_GPIO_Init+0x180>)
 80009b8:	f005 fde0 	bl	800657c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009bc:	2348      	movs	r3, #72	@ 0x48
 80009be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481a      	ldr	r0, [pc, #104]	@ (8000a30 <LCD_GPIO_Init+0x184>)
 80009c8:	f005 fdd8 	bl	800657c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <LCD_GPIO_Init+0x188>)
 80009da:	f005 fdcf 	bl	800657c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009de:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009e2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <LCD_GPIO_Init+0x18c>)
 80009ec:	f005 fdc6 	bl	800657c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009f0:	2303      	movs	r3, #3
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80009f4:	2309      	movs	r3, #9
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <LCD_GPIO_Init+0x17c>)
 8000a00:	f005 fdbc 	bl	800657c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <LCD_GPIO_Init+0x18c>)
 8000a12:	f005 fdb3 	bl	800657c <HAL_GPIO_Init>
}
 8000a16:	bf00      	nop
 8000a18:	3730      	adds	r7, #48	@ 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40021400 	.word	0x40021400
 8000a38:	40021800 	.word	0x40021800

08000a3c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	@ 0x40
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a4a:	23f0      	movs	r3, #240	@ 0xf0
 8000a4c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a52:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a56:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a5c:	23ff      	movs	r3, #255	@ 0xff
 8000a5e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <LTCD_Layer_Init+0x78>)
 8000a76:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a78:	23f0      	movs	r3, #240	@ 0xf0
 8000a7a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a7c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a80:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <LTCD_Layer_Init+0x7c>)
 8000a9e:	f007 f933 	bl	8007d08 <HAL_LTDC_ConfigLayer>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000aa8:	f003 ff98 	bl	80049dc <LCD_Error_Handler>
	}
}
 8000aac:	bf00      	nop
 8000aae:	3740      	adds	r7, #64	@ 0x40
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000668 	.word	0x20000668
 8000ab8:	200000b0 	.word	0x200000b0

08000abc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b70 <LTCD__Init+0xb4>)
 8000ac4:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ac8:	2209      	movs	r2, #9
 8000aca:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ad4:	221d      	movs	r2, #29
 8000ad6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ada:	2203      	movs	r2, #3
 8000adc:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ae0:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <LTCD__Init+0xb0>)
 8000ae8:	f240 1243 	movw	r2, #323	@ 0x143
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <LTCD__Init+0xb0>)
 8000af0:	f240 1217 	movw	r2, #279	@ 0x117
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <LTCD__Init+0xb0>)
 8000af8:	f240 1247 	movw	r2, #327	@ 0x147
 8000afc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <LTCD__Init+0xb8>)
 8000b18:	2208      	movs	r2, #8
 8000b1a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <LTCD__Init+0xb8>)
 8000b1e:	22c0      	movs	r2, #192	@ 0xc0
 8000b20:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <LTCD__Init+0xb8>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <LTCD__Init+0xb8>)
 8000b2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b30:	4810      	ldr	r0, [pc, #64]	@ (8000b74 <LTCD__Init+0xb8>)
 8000b32:	f007 ff43 	bl	80089bc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b4e:	f7ff fead 	bl	80008ac <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <LTCD__Init+0xb0>)
 8000b54:	f007 f808 	bl	8007b68 <HAL_LTDC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b5e:	f003 ff3d 	bl	80049dc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b62:	f004 f883 	bl	8004c6c <ili9341_Init>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000b0 	.word	0x200000b0
 8000b70:	40016800 	.word	0x40016800
 8000b74:	20000158 	.word	0x20000158

08000b78 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	460b      	mov	r3, r1
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000b8a:	88ba      	ldrh	r2, [r7, #4]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	461a      	mov	r2, r3
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4905      	ldr	r1, [pc, #20]	@ (8000bb0 <LCD_Draw_Pixel+0x38>)
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000668 	.word	0x20000668

08000bb4 <LCD_Draw_Square_Fill_Border>:
    }
}

// Modification of Draw_Square_Fill to include a black border
void LCD_Draw_Square_Fill_Border(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	80bb      	strh	r3, [r7, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	807b      	strh	r3, [r7, #2]
	uint16_t x = Xpos*blockSize;
 8000bc6:	4b52      	ldr	r3, [pc, #328]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	88fa      	ldrh	r2, [r7, #6]
 8000bce:	fb12 f303 	smulbb	r3, r2, r3
 8000bd2:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	fb12 f303 	smulbb	r3, r2, r3
 8000be0:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000be2:	2301      	movs	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
 8000be6:	e087      	b.n	8000cf8 <LCD_Draw_Square_Fill_Border+0x144>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000be8:	2301      	movs	r3, #1
 8000bea:	81bb      	strh	r3, [r7, #12]
 8000bec:	e078      	b.n	8000ce0 <LCD_Draw_Square_Fill_Border+0x12c>
	        {
	            LCD_Draw_Pixel(i+x, j+y, color);
 8000bee:	89fa      	ldrh	r2, [r7, #14]
 8000bf0:	897b      	ldrh	r3, [r7, #10]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	b298      	uxth	r0, r3
 8000bf6:	89ba      	ldrh	r2, [r7, #12]
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f7ff ffb9 	bl	8000b78 <LCD_Draw_Pixel>

	            if (color != GameScreenColor){
 8000c06:	4b43      	ldr	r3, [pc, #268]	@ (8000d14 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d02c      	beq.n	8000c6a <LCD_Draw_Square_Fill_Border+0xb6>
					LCD_Draw_Vertical_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	8939      	ldrh	r1, [r7, #8]
 8000c18:	8978      	ldrh	r0, [r7, #10]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f000 f8f6 	bl	8000e0c <LCD_Draw_Vertical_Line>
					LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,LCD_COLOR_BLACK);
 8000c20:	4b3b      	ldr	r3, [pc, #236]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b298      	uxth	r0, r3
 8000c2c:	4b38      	ldr	r3, [pc, #224]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	8939      	ldrh	r1, [r7, #8]
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f000 f8e7 	bl	8000e0c <LCD_Draw_Vertical_Line>
					LCD_Draw_Horizontal_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000c3e:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	8939      	ldrh	r1, [r7, #8]
 8000c46:	8978      	ldrh	r0, [r7, #10]
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f000 f906 	bl	8000e5a <LCD_Draw_Horizontal_Line>
					LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,LCD_COLOR_BLACK);
 8000c4e:	4b30      	ldr	r3, [pc, #192]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	893b      	ldrh	r3, [r7, #8]
 8000c56:	4413      	add	r3, r2
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	8978      	ldrh	r0, [r7, #10]
 8000c62:	2300      	movs	r3, #0
 8000c64:	f000 f8f9 	bl	8000e5a <LCD_Draw_Horizontal_Line>
 8000c68:	e034      	b.n	8000cd4 <LCD_Draw_Square_Fill_Border+0x120>
	            }
	            else if (color == GameScreenColor){
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	887a      	ldrh	r2, [r7, #2]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d12f      	bne.n	8000cd4 <LCD_Draw_Square_Fill_Border+0x120>
					LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b26      	ldr	r3, [pc, #152]	@ (8000d14 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	8939      	ldrh	r1, [r7, #8]
 8000c80:	8978      	ldrh	r0, [r7, #10]
 8000c82:	f000 f8c3 	bl	8000e0c <LCD_Draw_Vertical_Line>
					LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	897b      	ldrh	r3, [r7, #10]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b298      	uxth	r0, r3
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	8939      	ldrh	r1, [r7, #8]
 8000ca2:	f000 f8b3 	bl	8000e0c <LCD_Draw_Vertical_Line>
					LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <LCD_Draw_Square_Fill_Border+0x160>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	8939      	ldrh	r1, [r7, #8]
 8000cb2:	8978      	ldrh	r0, [r7, #10]
 8000cb4:	f000 f8d1 	bl	8000e5a <LCD_Draw_Horizontal_Line>
					LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	893b      	ldrh	r3, [r7, #8]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <LCD_Draw_Square_Fill_Border+0x160>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	8978      	ldrh	r0, [r7, #10]
 8000cd0:	f000 f8c3 	bl	8000e5a <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000cd4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3301      	adds	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	81bb      	strh	r3, [r7, #12]
 8000ce0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dd80      	ble.n	8000bee <LCD_Draw_Square_Fill_Border+0x3a>
	for(int16_t i=1; i<=blockSize; i++)
 8000cec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	81fb      	strh	r3, [r7, #14]
 8000cf8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f77f af71 	ble.w	8000be8 <LCD_Draw_Square_Fill_Border+0x34>
	            }
	        }
	    }
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000004 	.word	0x20000004
 8000d14:	20000002 	.word	0x20000002

08000d18 <LCD_Erase_Square>:

// Erase drawn squares by re-drawing them and their borders as the color of the screen
void LCD_Erase_Square(uint16_t Xpos, uint16_t Ypos)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460a      	mov	r2, r1
 8000d22:	80fb      	strh	r3, [r7, #6]
 8000d24:	4613      	mov	r3, r2
 8000d26:	80bb      	strh	r3, [r7, #4]
	uint16_t x = Xpos*blockSize;
 8000d28:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	88fa      	ldrh	r2, [r7, #6]
 8000d30:	fb12 f303 	smulbb	r3, r2, r3
 8000d34:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000d36:	4b33      	ldr	r3, [pc, #204]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	fb12 f303 	smulbb	r3, r2, r3
 8000d42:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000d44:	2301      	movs	r3, #1
 8000d46:	81fb      	strh	r3, [r7, #14]
 8000d48:	e051      	b.n	8000dee <LCD_Erase_Square+0xd6>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	81bb      	strh	r3, [r7, #12]
 8000d4e:	e042      	b.n	8000dd6 <LCD_Erase_Square+0xbe>
	        {
	            LCD_Draw_Pixel(i+x, j+y, GameScreenColor);
 8000d50:	89fa      	ldrh	r2, [r7, #14]
 8000d52:	897b      	ldrh	r3, [r7, #10]
 8000d54:	4413      	add	r3, r2
 8000d56:	b298      	uxth	r0, r3
 8000d58:	89ba      	ldrh	r2, [r7, #12]
 8000d5a:	893b      	ldrh	r3, [r7, #8]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	4a29      	ldr	r2, [pc, #164]	@ (8000e08 <LCD_Erase_Square+0xf0>)
 8000d62:	8812      	ldrh	r2, [r2, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff ff07 	bl	8000b78 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <LCD_Erase_Square+0xf0>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	8939      	ldrh	r1, [r7, #8]
 8000d76:	8978      	ldrh	r0, [r7, #10]
 8000d78:	f000 f848 	bl	8000e0c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	4413      	add	r3, r2
 8000d86:	b298      	uxth	r0, r3
 8000d88:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	3301      	adds	r3, #1
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <LCD_Erase_Square+0xf0>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	8939      	ldrh	r1, [r7, #8]
 8000d98:	f000 f838 	bl	8000e0c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	b29a      	uxth	r2, r3
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <LCD_Erase_Square+0xf0>)
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	8939      	ldrh	r1, [r7, #8]
 8000da8:	8978      	ldrh	r0, [r7, #10]
 8000daa:	f000 f856 	bl	8000e5a <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	893b      	ldrh	r3, [r7, #8]
 8000db6:	4413      	add	r3, r2
 8000db8:	b299      	uxth	r1, r3
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <LCD_Erase_Square+0xf0>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	8978      	ldrh	r0, [r7, #10]
 8000dc6:	f000 f848 	bl	8000e5a <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000dca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	81bb      	strh	r3, [r7, #12]
 8000dd6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	ddb6      	ble.n	8000d50 <LCD_Erase_Square+0x38>
	for(int16_t i=1; i<=blockSize; i++)
 8000de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	81fb      	strh	r3, [r7, #14]
 8000dee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000df2:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <LCD_Erase_Square+0xec>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dda7      	ble.n	8000d4a <LCD_Erase_Square+0x32>
	        }
	    }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000002 	.word	0x20000002

08000e0c <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4604      	mov	r4, r0
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	80fb      	strh	r3, [r7, #6]
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80bb      	strh	r3, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	807b      	strh	r3, [r7, #2]
 8000e26:	4613      	mov	r3, r2
 8000e28:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	81fb      	strh	r3, [r7, #14]
 8000e2e:	e00b      	b.n	8000e48 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000e30:	89fa      	ldrh	r2, [r7, #14]
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	b299      	uxth	r1, r3
 8000e38:	883a      	ldrh	r2, [r7, #0]
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe9b 	bl	8000b78 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	3301      	adds	r3, #1
 8000e46:	81fb      	strh	r3, [r7, #14]
 8000e48:	89fa      	ldrh	r2, [r7, #14]
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d3ef      	bcc.n	8000e30 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}

08000e5a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e5a:	b590      	push	{r4, r7, lr}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4604      	mov	r4, r0
 8000e62:	4608      	mov	r0, r1
 8000e64:	4611      	mov	r1, r2
 8000e66:	461a      	mov	r2, r3
 8000e68:	4623      	mov	r3, r4
 8000e6a:	80fb      	strh	r3, [r7, #6]
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	80bb      	strh	r3, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	81fb      	strh	r3, [r7, #14]
 8000e7c:	e00b      	b.n	8000e96 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000e7e:	89fa      	ldrh	r2, [r7, #14]
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	883a      	ldrh	r2, [r7, #0]
 8000e88:	88b9      	ldrh	r1, [r7, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fe74 	bl	8000b78 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	3301      	adds	r3, #1
 8000e94:	81fb      	strh	r3, [r7, #14]
 8000e96:	89fa      	ldrh	r2, [r7, #14]
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d3ef      	bcc.n	8000e7e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd90      	pop	{r4, r7, pc}

08000ea8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10e      	bne.n	8000edc <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e007      	b.n	8000ed4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000ec4:	4908      	ldr	r1, [pc, #32]	@ (8000ee8 <LCD_Clear+0x40>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	88ba      	ldrh	r2, [r7, #4]
 8000eca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000eda:	d3f3      	bcc.n	8000ec4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	20000668 	.word	0x20000668

08000eec <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <LCD_SetTextColor+0x1c>)
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	8013      	strh	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000000 	.word	0x20000000

08000f0c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <LCD_SetFont+0x1c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000188 	.word	0x20000188

08000f2c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	603a      	str	r2, [r7, #0]
 8000f36:	80fb      	strh	r3, [r7, #6]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e04c      	b.n	8000fe4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	e03f      	b.n	8000fd0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	4a27      	ldr	r2, [pc, #156]	@ (8001000 <LCD_Draw_Char+0xd4>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	2280      	movs	r2, #128	@ 0x80
 8000f70:	409a      	lsls	r2, r3
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	fa42 f303 	asr.w	r3, r2, r3
 8000f78:	400b      	ands	r3, r1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d104      	bne.n	8000f88 <LCD_Draw_Char+0x5c>
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	2b0c      	cmp	r3, #12
 8000f86:	d920      	bls.n	8000fca <LCD_Draw_Char+0x9e>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	fa42 f303 	asr.w	r3, r2, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d104      	bne.n	8000fac <LCD_Draw_Char+0x80>
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	889b      	ldrh	r3, [r3, #4]
 8000fa8:	2b0c      	cmp	r3, #12
 8000faa:	d80e      	bhi.n	8000fca <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b298      	uxth	r0, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	88bb      	ldrh	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <LCD_Draw_Char+0xd8>)
 8000fc2:	8812      	ldrh	r2, [r2, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fdd7 	bl	8000b78 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	889b      	ldrh	r3, [r3, #4]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d3b8      	bcc.n	8000f50 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <LCD_Draw_Char+0xd0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	88db      	ldrh	r3, [r3, #6]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d3ab      	bcc.n	8000f4a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000188 	.word	0x20000188
 8001000:	aaaaaaab 	.word	0xaaaaaaab
 8001004:	20000000 	.word	0x20000000

08001008 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	460b      	mov	r3, r1
 8001014:	80bb      	strh	r3, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800101a:	78fb      	ldrb	r3, [r7, #3]
 800101c:	3b20      	subs	r3, #32
 800101e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <LCD_DisplayChar+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <LCD_DisplayChar+0x40>)
 800102a:	6809      	ldr	r1, [r1, #0]
 800102c:	88c9      	ldrh	r1, [r1, #6]
 800102e:	fb01 f303 	mul.w	r3, r1, r3
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	441a      	add	r2, r3
 8001036:	88b9      	ldrh	r1, [r7, #4]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff76 	bl	8000f2c <LCD_Draw_Char>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000188 	.word	0x20000188

0800104c <GameInit>:
//	blockOne();
}

// Function to draw Welcome Screen
void GameInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0

	// Initialize topRow to the bottom row
	for (int i = 0; i < 12; i++){
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	e007      	b.n	8001068 <GameInit+0x1c>
		topRow[i] = 15;
 8001058:	4a97      	ldr	r2, [pc, #604]	@ (80012b8 <GameInit+0x26c>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	210f      	movs	r1, #15
 800105e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 12; i++){
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3301      	adds	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b0b      	cmp	r3, #11
 800106c:	ddf4      	ble.n	8001058 <GameInit+0xc>
	}

	// Initialize the Obj_Color array to the GameScreenColor
	for (int j = 0; j < 16; j++){
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	e018      	b.n	80010a6 <GameInit+0x5a>
		for (int k = 0; k < 12; k++){
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	e00f      	b.n	800109a <GameInit+0x4e>
			Obj_Color[j][k] = GameScreenColor;
 800107a:	4b90      	ldr	r3, [pc, #576]	@ (80012bc <GameInit+0x270>)
 800107c:	8818      	ldrh	r0, [r3, #0]
 800107e:	4990      	ldr	r1, [pc, #576]	@ (80012c0 <GameInit+0x274>)
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4602      	mov	r2, r0
 8001090:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int k = 0; k < 12; k++){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0b      	cmp	r3, #11
 800109e:	ddec      	ble.n	800107a <GameInit+0x2e>
	for (int j = 0; j < 16; j++){
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3301      	adds	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	dde3      	ble.n	8001074 <GameInit+0x28>
		}
	}

	// Write welcome message in middle of screen
	LCD_Clear(0,GameScreenColor);
 80010ac:	4b83      	ldr	r3, [pc, #524]	@ (80012bc <GameInit+0x270>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	2000      	movs	r0, #0
 80010b4:	f7ff fef8 	bl	8000ea8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff17 	bl	8000eec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80010be:	4881      	ldr	r0, [pc, #516]	@ (80012c4 <GameInit+0x278>)
 80010c0:	f7ff ff24 	bl	8000f0c <LCD_SetFont>

	LCD_DisplayChar(80,130,'W');
 80010c4:	2257      	movs	r2, #87	@ 0x57
 80010c6:	2182      	movs	r1, #130	@ 0x82
 80010c8:	2050      	movs	r0, #80	@ 0x50
 80010ca:	f7ff ff9d 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(94,130,'e');
 80010ce:	2265      	movs	r2, #101	@ 0x65
 80010d0:	2182      	movs	r1, #130	@ 0x82
 80010d2:	205e      	movs	r0, #94	@ 0x5e
 80010d4:	f7ff ff98 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(104,130,'l');
 80010d8:	226c      	movs	r2, #108	@ 0x6c
 80010da:	2182      	movs	r1, #130	@ 0x82
 80010dc:	2068      	movs	r0, #104	@ 0x68
 80010de:	f7ff ff93 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(112,130,'c');
 80010e2:	2263      	movs	r2, #99	@ 0x63
 80010e4:	2182      	movs	r1, #130	@ 0x82
 80010e6:	2070      	movs	r0, #112	@ 0x70
 80010e8:	f7ff ff8e 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(124,130,'o');
 80010ec:	226f      	movs	r2, #111	@ 0x6f
 80010ee:	2182      	movs	r1, #130	@ 0x82
 80010f0:	207c      	movs	r0, #124	@ 0x7c
 80010f2:	f7ff ff89 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(140,130,'m');
 80010f6:	226d      	movs	r2, #109	@ 0x6d
 80010f8:	2182      	movs	r1, #130	@ 0x82
 80010fa:	208c      	movs	r0, #140	@ 0x8c
 80010fc:	f7ff ff84 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(155,130,'e');
 8001100:	2265      	movs	r2, #101	@ 0x65
 8001102:	2182      	movs	r1, #130	@ 0x82
 8001104:	209b      	movs	r0, #155	@ 0x9b
 8001106:	f7ff ff7f 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(110,155,'t');
 800110a:	2274      	movs	r2, #116	@ 0x74
 800110c:	219b      	movs	r1, #155	@ 0x9b
 800110e:	206e      	movs	r0, #110	@ 0x6e
 8001110:	f7ff ff7a 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(120,155,'o');
 8001114:	226f      	movs	r2, #111	@ 0x6f
 8001116:	219b      	movs	r1, #155	@ 0x9b
 8001118:	2078      	movs	r0, #120	@ 0x78
 800111a:	f7ff ff75 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(95,180,'T');
 800111e:	2254      	movs	r2, #84	@ 0x54
 8001120:	21b4      	movs	r1, #180	@ 0xb4
 8001122:	205f      	movs	r0, #95	@ 0x5f
 8001124:	f7ff ff70 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(105,180,'e');
 8001128:	2265      	movs	r2, #101	@ 0x65
 800112a:	21b4      	movs	r1, #180	@ 0xb4
 800112c:	2069      	movs	r0, #105	@ 0x69
 800112e:	f7ff ff6b 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(115,180,'t');
 8001132:	2274      	movs	r2, #116	@ 0x74
 8001134:	21b4      	movs	r1, #180	@ 0xb4
 8001136:	2073      	movs	r0, #115	@ 0x73
 8001138:	f7ff ff66 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(125,180,'r');
 800113c:	2272      	movs	r2, #114	@ 0x72
 800113e:	21b4      	movs	r1, #180	@ 0xb4
 8001140:	207d      	movs	r0, #125	@ 0x7d
 8001142:	f7ff ff61 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(132,180,'i');
 8001146:	2269      	movs	r2, #105	@ 0x69
 8001148:	21b4      	movs	r1, #180	@ 0xb4
 800114a:	2084      	movs	r0, #132	@ 0x84
 800114c:	f7ff ff5c 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(139,180,'s');
 8001150:	2273      	movs	r2, #115	@ 0x73
 8001152:	21b4      	movs	r1, #180	@ 0xb4
 8001154:	208b      	movs	r0, #139	@ 0x8b
 8001156:	f7ff ff57 	bl	8001008 <LCD_DisplayChar>

	// Display blocks on size 10 at top of Welcome Screen
	blockSize = 10;
 800115a:	4b5b      	ldr	r3, [pc, #364]	@ (80012c8 <GameInit+0x27c>)
 800115c:	220a      	movs	r2, #10
 800115e:	601a      	str	r2, [r3, #0]
	drawBlockOne(4.5,2.5,1);
 8001160:	2201      	movs	r2, #1
 8001162:	2102      	movs	r1, #2
 8001164:	2004      	movs	r0, #4
 8001166:	f000 fae5 	bl	8001734 <drawBlockOne>
	drawBlockTwo(9.5,2.5,1);
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	2009      	movs	r0, #9
 8001170:	f000 fbc6 	bl	8001900 <drawBlockTwo>
	drawBlockThree(13.5,2.5,1);
 8001174:	2201      	movs	r2, #1
 8001176:	2102      	movs	r1, #2
 8001178:	200d      	movs	r0, #13
 800117a:	f000 fe6b 	bl	8001e54 <drawBlockThree>
	drawBlockFour(17.5,2.5,1);
 800117e:	2201      	movs	r2, #1
 8001180:	2102      	movs	r1, #2
 8001182:	2011      	movs	r0, #17
 8001184:	f001 f920 	bl	80023c8 <drawBlockFour>
	drawBlockFive(6.5,5.5,1);
 8001188:	2201      	movs	r2, #1
 800118a:	2105      	movs	r1, #5
 800118c:	2006      	movs	r0, #6
 800118e:	f001 f9dd 	bl	800254c <drawBlockFive>
	drawBlockSix(10.5,5.5,1);
 8001192:	2201      	movs	r2, #1
 8001194:	2105      	movs	r1, #5
 8001196:	200a      	movs	r0, #10
 8001198:	f001 fb5a 	bl	8002850 <drawBlockSix>
	drawBlockSeven(14.5,5.5,1);
 800119c:	2201      	movs	r2, #1
 800119e:	2105      	movs	r1, #5
 80011a0:	200e      	movs	r0, #14
 80011a2:	f001 fe07 	bl	8002db4 <drawBlockSeven>

	// Display START message at bottom of screen
	LCD_DisplayChar(50,270,'T');
 80011a6:	2254      	movs	r2, #84	@ 0x54
 80011a8:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011ac:	2032      	movs	r0, #50	@ 0x32
 80011ae:	f7ff ff2b 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(62,270,'o');
 80011b2:	226f      	movs	r2, #111	@ 0x6f
 80011b4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011b8:	203e      	movs	r0, #62	@ 0x3e
 80011ba:	f7ff ff25 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(74,270,'u');
 80011be:	2275      	movs	r2, #117	@ 0x75
 80011c0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011c4:	204a      	movs	r0, #74	@ 0x4a
 80011c6:	f7ff ff1f 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(86,270,'c');
 80011ca:	2263      	movs	r2, #99	@ 0x63
 80011cc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011d0:	2056      	movs	r0, #86	@ 0x56
 80011d2:	f7ff ff19 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(97,270,'h');
 80011d6:	2268      	movs	r2, #104	@ 0x68
 80011d8:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011dc:	2061      	movs	r0, #97	@ 0x61
 80011de:	f7ff ff13 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(117,270,'s');
 80011e2:	2273      	movs	r2, #115	@ 0x73
 80011e4:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011e8:	2075      	movs	r0, #117	@ 0x75
 80011ea:	f7ff ff0d 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(128,270,'c');
 80011ee:	2263      	movs	r2, #99	@ 0x63
 80011f0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80011f4:	2080      	movs	r0, #128	@ 0x80
 80011f6:	f7ff ff07 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(139,270,'r');
 80011fa:	2272      	movs	r2, #114	@ 0x72
 80011fc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001200:	208b      	movs	r0, #139	@ 0x8b
 8001202:	f7ff ff01 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(148,270,'e');
 8001206:	2265      	movs	r2, #101	@ 0x65
 8001208:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800120c:	2094      	movs	r0, #148	@ 0x94
 800120e:	f7ff fefb 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(160,270,'e');
 8001212:	2265      	movs	r2, #101	@ 0x65
 8001214:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001218:	20a0      	movs	r0, #160	@ 0xa0
 800121a:	f7ff fef5 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(172,270,'n');
 800121e:	226e      	movs	r2, #110	@ 0x6e
 8001220:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8001224:	20ac      	movs	r0, #172	@ 0xac
 8001226:	f7ff feef 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(40,295,'t');
 800122a:	2274      	movs	r2, #116	@ 0x74
 800122c:	f240 1127 	movw	r1, #295	@ 0x127
 8001230:	2028      	movs	r0, #40	@ 0x28
 8001232:	f7ff fee9 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(50,295,'o');
 8001236:	226f      	movs	r2, #111	@ 0x6f
 8001238:	f240 1127 	movw	r1, #295	@ 0x127
 800123c:	2032      	movs	r0, #50	@ 0x32
 800123e:	f7ff fee3 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(72,295,'S');
 8001242:	2253      	movs	r2, #83	@ 0x53
 8001244:	f240 1127 	movw	r1, #295	@ 0x127
 8001248:	2048      	movs	r0, #72	@ 0x48
 800124a:	f7ff fedd 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(87,295,'T');
 800124e:	2254      	movs	r2, #84	@ 0x54
 8001250:	f240 1127 	movw	r1, #295	@ 0x127
 8001254:	2057      	movs	r0, #87	@ 0x57
 8001256:	f7ff fed7 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(101,295,'A');
 800125a:	2241      	movs	r2, #65	@ 0x41
 800125c:	f240 1127 	movw	r1, #295	@ 0x127
 8001260:	2065      	movs	r0, #101	@ 0x65
 8001262:	f7ff fed1 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(117,295,'R');
 8001266:	2252      	movs	r2, #82	@ 0x52
 8001268:	f240 1127 	movw	r1, #295	@ 0x127
 800126c:	2075      	movs	r0, #117	@ 0x75
 800126e:	f7ff fecb 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(132,295,'T');
 8001272:	2254      	movs	r2, #84	@ 0x54
 8001274:	f240 1127 	movw	r1, #295	@ 0x127
 8001278:	2084      	movs	r0, #132	@ 0x84
 800127a:	f7ff fec5 	bl	8001008 <LCD_DisplayChar>

	LCD_DisplayChar(149,295,'g');
 800127e:	2267      	movs	r2, #103	@ 0x67
 8001280:	f240 1127 	movw	r1, #295	@ 0x127
 8001284:	2095      	movs	r0, #149	@ 0x95
 8001286:	f7ff febf 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(161,295,'a');
 800128a:	2261      	movs	r2, #97	@ 0x61
 800128c:	f240 1127 	movw	r1, #295	@ 0x127
 8001290:	20a1      	movs	r0, #161	@ 0xa1
 8001292:	f7ff feb9 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(175,295,'m');
 8001296:	226d      	movs	r2, #109	@ 0x6d
 8001298:	f240 1127 	movw	r1, #295	@ 0x127
 800129c:	20af      	movs	r0, #175	@ 0xaf
 800129e:	f7ff feb3 	bl	8001008 <LCD_DisplayChar>
	LCD_DisplayChar(189,295,'e');
 80012a2:	2265      	movs	r2, #101	@ 0x65
 80012a4:	f240 1127 	movw	r1, #295	@ 0x127
 80012a8:	20bd      	movs	r0, #189	@ 0xbd
 80012aa:	f7ff fead 	bl	8001008 <LCD_DisplayChar>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000060c 	.word	0x2000060c
 80012bc:	20000002 	.word	0x20000002
 80012c0:	2000018c 	.word	0x2000018c
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000004 	.word	0x20000004

080012cc <gameStart>:

// Function to draw game screen and first block
void gameStart(){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
	screenReset();
 80012d2:	f000 f82f 	bl	8001334 <screenReset>
	HAL_Delay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012da:	f004 ffa3 	bl	8006224 <HAL_Delay>

	blockSize = 20;
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <gameStart+0x5c>)
 80012e0:	2214      	movs	r2, #20
 80012e2:	601a      	str	r2, [r3, #0]
	LCD_Clear(0,GameScreenColor);
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <gameStart+0x60>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fddc 	bl	8000ea8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80012f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012f4:	f7ff fdfa 	bl	8000eec <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80012f8:	480d      	ldr	r0, [pc, #52]	@ (8001330 <gameStart+0x64>)
 80012fa:	f7ff fe07 	bl	8000f0c <LCD_SetFont>

	drawBottomBorder();
 80012fe:	f001 fedb 	bl	80030b8 <drawBottomBorder>
	uint32_t randBlock = GetRandomBlock();
 8001302:	f003 fbcd 	bl	8004aa0 <GetRandomBlock>
 8001306:	6078      	str	r0, [r7, #4]
	updateCurrentBlock(randBlock, 5, 1, 1);	drawCurrentBlock();
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	b298      	uxth	r0, r3
 800130c:	2301      	movs	r3, #1
 800130e:	2201      	movs	r2, #1
 8001310:	2105      	movs	r1, #5
 8001312:	f002 f857 	bl	80033c4 <updateCurrentBlock>
 8001316:	f001 ffad 	bl	8003274 <drawCurrentBlock>
	HAL_Delay(100);
 800131a:	2064      	movs	r0, #100	@ 0x64
 800131c:	f004 ff82 	bl	8006224 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000004 	.word	0x20000004
 800132c:	20000002 	.word	0x20000002
 8001330:	20000008 	.word	0x20000008

08001334 <screenReset>:

// Function to reset Obj_Color array to GameScreenColor and LCD_Screen array to 0
void screenReset(){
 8001334:	b490      	push	{r4, r7}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 16; i++){
 800133a:	2300      	movs	r3, #0
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	e023      	b.n	8001388 <screenReset+0x54>
		for (uint16_t j = 0; j < 12; j++){
 8001340:	2300      	movs	r3, #0
 8001342:	80bb      	strh	r3, [r7, #4]
 8001344:	e01a      	b.n	800137c <screenReset+0x48>
			Obj_Color[i][j] = GameScreenColor;
 8001346:	88fa      	ldrh	r2, [r7, #6]
 8001348:	88b9      	ldrh	r1, [r7, #4]
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <screenReset+0x68>)
 800134c:	881c      	ldrh	r4, [r3, #0]
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <screenReset+0x6c>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	4622      	mov	r2, r4
 800135c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Screen[i][j] = 0;
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	88b9      	ldrh	r1, [r7, #4]
 8001364:	480f      	ldr	r0, [pc, #60]	@ (80013a4 <screenReset+0x70>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	2200      	movs	r2, #0
 8001372:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (uint16_t j = 0; j < 12; j++){
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	80bb      	strh	r3, [r7, #4]
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	2b0b      	cmp	r3, #11
 8001380:	d9e1      	bls.n	8001346 <screenReset+0x12>
	for (uint16_t i = 0; i < 16; i++){
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	3301      	adds	r3, #1
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	d9d8      	bls.n	8001340 <screenReset+0xc>
		}
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bc90      	pop	{r4, r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000002 	.word	0x20000002
 80013a0:	2000018c 	.word	0x2000018c
 80013a4:	2000030c 	.word	0x2000030c

080013a8 <gameOver>:

// Game over screen displaying game time and lines cleared
void gameOver(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
		totalGameTime();
 80013ac:	f000 f952 	bl	8001654 <totalGameTime>
		LCD_Clear(0,LCD_COLOR_BLACK);
 80013b0:	2100      	movs	r1, #0
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fd78 	bl	8000ea8 <LCD_Clear>
		LCD_SetTextColor(LCD_COLOR_RED);
 80013b8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80013bc:	f7ff fd96 	bl	8000eec <LCD_SetTextColor>
		LCD_SetFont(&Font16x24);
 80013c0:	48a1      	ldr	r0, [pc, #644]	@ (8001648 <gameOver+0x2a0>)
 80013c2:	f7ff fda3 	bl	8000f0c <LCD_SetFont>

		LCD_DisplayChar(55,20,'G');
 80013c6:	2247      	movs	r2, #71	@ 0x47
 80013c8:	2114      	movs	r1, #20
 80013ca:	2037      	movs	r0, #55	@ 0x37
 80013cc:	f7ff fe1c 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(71,20,'a');
 80013d0:	2261      	movs	r2, #97	@ 0x61
 80013d2:	2114      	movs	r1, #20
 80013d4:	2047      	movs	r0, #71	@ 0x47
 80013d6:	f7ff fe17 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(85,20,'m');
 80013da:	226d      	movs	r2, #109	@ 0x6d
 80013dc:	2114      	movs	r1, #20
 80013de:	2055      	movs	r0, #85	@ 0x55
 80013e0:	f7ff fe12 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(100,20,'e');
 80013e4:	2265      	movs	r2, #101	@ 0x65
 80013e6:	2114      	movs	r1, #20
 80013e8:	2064      	movs	r0, #100	@ 0x64
 80013ea:	f7ff fe0d 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(120,20,'O');
 80013ee:	224f      	movs	r2, #79	@ 0x4f
 80013f0:	2114      	movs	r1, #20
 80013f2:	2078      	movs	r0, #120	@ 0x78
 80013f4:	f7ff fe08 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(137,20,'v');
 80013f8:	2276      	movs	r2, #118	@ 0x76
 80013fa:	2114      	movs	r1, #20
 80013fc:	2089      	movs	r0, #137	@ 0x89
 80013fe:	f7ff fe03 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(150,20,'e');
 8001402:	2265      	movs	r2, #101	@ 0x65
 8001404:	2114      	movs	r1, #20
 8001406:	2096      	movs	r0, #150	@ 0x96
 8001408:	f7ff fdfe 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(160,20,'r');
 800140c:	2272      	movs	r2, #114	@ 0x72
 800140e:	2114      	movs	r1, #20
 8001410:	20a0      	movs	r0, #160	@ 0xa0
 8001412:	f7ff fdf9 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(167,20,'!');
 8001416:	2221      	movs	r2, #33	@ 0x21
 8001418:	2114      	movs	r1, #20
 800141a:	20a7      	movs	r0, #167	@ 0xa7
 800141c:	f7ff fdf4 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(172,20,'!');
 8001420:	2221      	movs	r2, #33	@ 0x21
 8001422:	2114      	movs	r1, #20
 8001424:	20ac      	movs	r0, #172	@ 0xac
 8001426:	f7ff fdef 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(177,20,'!');
 800142a:	2221      	movs	r2, #33	@ 0x21
 800142c:	2114      	movs	r1, #20
 800142e:	20b1      	movs	r0, #177	@ 0xb1
 8001430:	f7ff fdea 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(55,50,'G');
 8001434:	2247      	movs	r2, #71	@ 0x47
 8001436:	2132      	movs	r1, #50	@ 0x32
 8001438:	2037      	movs	r0, #55	@ 0x37
 800143a:	f7ff fde5 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(71,50,'a');
 800143e:	2261      	movs	r2, #97	@ 0x61
 8001440:	2132      	movs	r1, #50	@ 0x32
 8001442:	2047      	movs	r0, #71	@ 0x47
 8001444:	f7ff fde0 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(85,50,'m');
 8001448:	226d      	movs	r2, #109	@ 0x6d
 800144a:	2132      	movs	r1, #50	@ 0x32
 800144c:	2055      	movs	r0, #85	@ 0x55
 800144e:	f7ff fddb 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(100,50,'e');
 8001452:	2265      	movs	r2, #101	@ 0x65
 8001454:	2132      	movs	r1, #50	@ 0x32
 8001456:	2064      	movs	r0, #100	@ 0x64
 8001458:	f7ff fdd6 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(120,50,'T');
 800145c:	2254      	movs	r2, #84	@ 0x54
 800145e:	2132      	movs	r1, #50	@ 0x32
 8001460:	2078      	movs	r0, #120	@ 0x78
 8001462:	f7ff fdd1 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(132,50,'i');
 8001466:	2269      	movs	r2, #105	@ 0x69
 8001468:	2132      	movs	r1, #50	@ 0x32
 800146a:	2084      	movs	r0, #132	@ 0x84
 800146c:	f7ff fdcc 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(142,50,'m');
 8001470:	226d      	movs	r2, #109	@ 0x6d
 8001472:	2132      	movs	r1, #50	@ 0x32
 8001474:	208e      	movs	r0, #142	@ 0x8e
 8001476:	f7ff fdc7 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(157,50,'e');
 800147a:	2265      	movs	r2, #101	@ 0x65
 800147c:	2132      	movs	r1, #50	@ 0x32
 800147e:	209d      	movs	r0, #157	@ 0x9d
 8001480:	f7ff fdc2 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(167,50,':');
 8001484:	223a      	movs	r2, #58	@ 0x3a
 8001486:	2132      	movs	r1, #50	@ 0x32
 8001488:	20a7      	movs	r0, #167	@ 0xa7
 800148a:	f7ff fdbd 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(95,80,(finalGameTime[0] + '0'));
 800148e:	4b6f      	ldr	r3, [pc, #444]	@ (800164c <gameOver+0x2a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3330      	adds	r3, #48	@ 0x30
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	2150      	movs	r1, #80	@ 0x50
 800149c:	205f      	movs	r0, #95	@ 0x5f
 800149e:	f7ff fdb3 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(105,80,':');
 80014a2:	223a      	movs	r2, #58	@ 0x3a
 80014a4:	2150      	movs	r1, #80	@ 0x50
 80014a6:	2069      	movs	r0, #105	@ 0x69
 80014a8:	f7ff fdae 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(115,80,(finalGameTime[1] + '0'));
 80014ac:	4b67      	ldr	r3, [pc, #412]	@ (800164c <gameOver+0x2a4>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3330      	adds	r3, #48	@ 0x30
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	2150      	movs	r1, #80	@ 0x50
 80014ba:	2073      	movs	r0, #115	@ 0x73
 80014bc:	f7ff fda4 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(128,80,(finalGameTime[2] + '0'));
 80014c0:	4b62      	ldr	r3, [pc, #392]	@ (800164c <gameOver+0x2a4>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3330      	adds	r3, #48	@ 0x30
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	2150      	movs	r1, #80	@ 0x50
 80014ce:	2080      	movs	r0, #128	@ 0x80
 80014d0:	f7ff fd9a 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(82,145,'S');
 80014d4:	2253      	movs	r2, #83	@ 0x53
 80014d6:	2191      	movs	r1, #145	@ 0x91
 80014d8:	2052      	movs	r0, #82	@ 0x52
 80014da:	f7ff fd95 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(97,145,'i');
 80014de:	2269      	movs	r2, #105	@ 0x69
 80014e0:	2191      	movs	r1, #145	@ 0x91
 80014e2:	2061      	movs	r0, #97	@ 0x61
 80014e4:	f7ff fd90 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(108,145,'n');
 80014e8:	226e      	movs	r2, #110	@ 0x6e
 80014ea:	2191      	movs	r1, #145	@ 0x91
 80014ec:	206c      	movs	r0, #108	@ 0x6c
 80014ee:	f7ff fd8b 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(121,145,'g');
 80014f2:	2267      	movs	r2, #103	@ 0x67
 80014f4:	2191      	movs	r1, #145	@ 0x91
 80014f6:	2079      	movs	r0, #121	@ 0x79
 80014f8:	f7ff fd86 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(131,145,'l');
 80014fc:	226c      	movs	r2, #108	@ 0x6c
 80014fe:	2191      	movs	r1, #145	@ 0x91
 8001500:	2083      	movs	r0, #131	@ 0x83
 8001502:	f7ff fd81 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(141,145,'e');
 8001506:	2265      	movs	r2, #101	@ 0x65
 8001508:	2191      	movs	r1, #145	@ 0x91
 800150a:	208d      	movs	r0, #141	@ 0x8d
 800150c:	f7ff fd7c 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(151,145,':');
 8001510:	223a      	movs	r2, #58	@ 0x3a
 8001512:	2191      	movs	r1, #145	@ 0x91
 8001514:	2097      	movs	r0, #151	@ 0x97
 8001516:	f7ff fd77 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(163,146,(result[1] + '0'));
 800151a:	4b4d      	ldr	r3, [pc, #308]	@ (8001650 <gameOver+0x2a8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3330      	adds	r3, #48	@ 0x30
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	2192      	movs	r1, #146	@ 0x92
 8001528:	20a3      	movs	r0, #163	@ 0xa3
 800152a:	f7ff fd6d 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(82,170,'D');
 800152e:	2244      	movs	r2, #68	@ 0x44
 8001530:	21aa      	movs	r1, #170	@ 0xaa
 8001532:	2052      	movs	r0, #82	@ 0x52
 8001534:	f7ff fd68 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(97,170,'o');
 8001538:	226f      	movs	r2, #111	@ 0x6f
 800153a:	21aa      	movs	r1, #170	@ 0xaa
 800153c:	2061      	movs	r0, #97	@ 0x61
 800153e:	f7ff fd63 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(108,170,'u');
 8001542:	2275      	movs	r2, #117	@ 0x75
 8001544:	21aa      	movs	r1, #170	@ 0xaa
 8001546:	206c      	movs	r0, #108	@ 0x6c
 8001548:	f7ff fd5e 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(121,170,'b');
 800154c:	2262      	movs	r2, #98	@ 0x62
 800154e:	21aa      	movs	r1, #170	@ 0xaa
 8001550:	2079      	movs	r0, #121	@ 0x79
 8001552:	f7ff fd59 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(131,170,'l');
 8001556:	226c      	movs	r2, #108	@ 0x6c
 8001558:	21aa      	movs	r1, #170	@ 0xaa
 800155a:	2083      	movs	r0, #131	@ 0x83
 800155c:	f7ff fd54 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(141,170,'e');
 8001560:	2265      	movs	r2, #101	@ 0x65
 8001562:	21aa      	movs	r1, #170	@ 0xaa
 8001564:	208d      	movs	r0, #141	@ 0x8d
 8001566:	f7ff fd4f 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(151,170,':');
 800156a:	223a      	movs	r2, #58	@ 0x3a
 800156c:	21aa      	movs	r1, #170	@ 0xaa
 800156e:	2097      	movs	r0, #151	@ 0x97
 8001570:	f7ff fd4a 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(163,171,(result[2] + '0'));
 8001574:	4b36      	ldr	r3, [pc, #216]	@ (8001650 <gameOver+0x2a8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3330      	adds	r3, #48	@ 0x30
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	21ab      	movs	r1, #171	@ 0xab
 8001582:	20a3      	movs	r0, #163	@ 0xa3
 8001584:	f7ff fd40 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(82,195,'T');
 8001588:	2254      	movs	r2, #84	@ 0x54
 800158a:	21c3      	movs	r1, #195	@ 0xc3
 800158c:	2052      	movs	r0, #82	@ 0x52
 800158e:	f7ff fd3b 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(97,195,'r');
 8001592:	2272      	movs	r2, #114	@ 0x72
 8001594:	21c3      	movs	r1, #195	@ 0xc3
 8001596:	2061      	movs	r0, #97	@ 0x61
 8001598:	f7ff fd36 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(108,195,'i');
 800159c:	2269      	movs	r2, #105	@ 0x69
 800159e:	21c3      	movs	r1, #195	@ 0xc3
 80015a0:	206c      	movs	r0, #108	@ 0x6c
 80015a2:	f7ff fd31 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(119,195,'p');
 80015a6:	2270      	movs	r2, #112	@ 0x70
 80015a8:	21c3      	movs	r1, #195	@ 0xc3
 80015aa:	2077      	movs	r0, #119	@ 0x77
 80015ac:	f7ff fd2c 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(131,195,'l');
 80015b0:	226c      	movs	r2, #108	@ 0x6c
 80015b2:	21c3      	movs	r1, #195	@ 0xc3
 80015b4:	2083      	movs	r0, #131	@ 0x83
 80015b6:	f7ff fd27 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(141,195,'e');
 80015ba:	2265      	movs	r2, #101	@ 0x65
 80015bc:	21c3      	movs	r1, #195	@ 0xc3
 80015be:	208d      	movs	r0, #141	@ 0x8d
 80015c0:	f7ff fd22 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(151,195,':');
 80015c4:	223a      	movs	r2, #58	@ 0x3a
 80015c6:	21c3      	movs	r1, #195	@ 0xc3
 80015c8:	2097      	movs	r0, #151	@ 0x97
 80015ca:	f7ff fd1d 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(163,196,(result[3] + '0'));
 80015ce:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <gameOver+0x2a8>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	3330      	adds	r3, #48	@ 0x30
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	21c4      	movs	r1, #196	@ 0xc4
 80015dc:	20a3      	movs	r0, #163	@ 0xa3
 80015de:	f7ff fd13 	bl	8001008 <LCD_DisplayChar>

		LCD_DisplayChar(82,220,'T');
 80015e2:	2254      	movs	r2, #84	@ 0x54
 80015e4:	21dc      	movs	r1, #220	@ 0xdc
 80015e6:	2052      	movs	r0, #82	@ 0x52
 80015e8:	f7ff fd0e 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(97,220,'e');
 80015ec:	2265      	movs	r2, #101	@ 0x65
 80015ee:	21dc      	movs	r1, #220	@ 0xdc
 80015f0:	2061      	movs	r0, #97	@ 0x61
 80015f2:	f7ff fd09 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(108,220,'t');
 80015f6:	2274      	movs	r2, #116	@ 0x74
 80015f8:	21dc      	movs	r1, #220	@ 0xdc
 80015fa:	206c      	movs	r0, #108	@ 0x6c
 80015fc:	f7ff fd04 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(119,220,'r');
 8001600:	2272      	movs	r2, #114	@ 0x72
 8001602:	21dc      	movs	r1, #220	@ 0xdc
 8001604:	2077      	movs	r0, #119	@ 0x77
 8001606:	f7ff fcff 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(131,220,'i');
 800160a:	2269      	movs	r2, #105	@ 0x69
 800160c:	21dc      	movs	r1, #220	@ 0xdc
 800160e:	2083      	movs	r0, #131	@ 0x83
 8001610:	f7ff fcfa 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(141,220,'s');
 8001614:	2273      	movs	r2, #115	@ 0x73
 8001616:	21dc      	movs	r1, #220	@ 0xdc
 8001618:	208d      	movs	r0, #141	@ 0x8d
 800161a:	f7ff fcf5 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(151,220,':');
 800161e:	223a      	movs	r2, #58	@ 0x3a
 8001620:	21dc      	movs	r1, #220	@ 0xdc
 8001622:	2097      	movs	r0, #151	@ 0x97
 8001624:	f7ff fcf0 	bl	8001008 <LCD_DisplayChar>
		LCD_DisplayChar(163,221,(result[4] + '0'));
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <gameOver+0x2a8>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	3330      	adds	r3, #48	@ 0x30
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	21dd      	movs	r1, #221	@ 0xdd
 8001636:	20a3      	movs	r0, #163	@ 0xa3
 8001638:	f7ff fce6 	bl	8001008 <LCD_DisplayChar>
		HAL_Delay(1000);
 800163c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001640:	f004 fdf0 	bl	8006224 <HAL_Delay>
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000008 	.word	0x20000008
 800164c:	20000654 	.word	0x20000654
 8001650:	2000063c 	.word	0x2000063c

08001654 <totalGameTime>:

// Break total game time into minutes, 10's seconds, and 1's seconds
void totalGameTime(){
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
	uint16_t endGameTime = gameTime;
 800165a:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <totalGameTime+0xd0>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	82fb      	strh	r3, [r7, #22]
	if (endGameTime < 60){
 8001660:	8afb      	ldrh	r3, [r7, #22]
 8001662:	2b3b      	cmp	r3, #59	@ 0x3b
 8001664:	d824      	bhi.n	80016b0 <totalGameTime+0x5c>
		int firstDigit = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
		finalGameTime[0] = firstDigit;
 800166a:	4a2f      	ldr	r2, [pc, #188]	@ (8001728 <totalGameTime+0xd4>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	6013      	str	r3, [r2, #0]

		int secondDigit = (int)endGameTime;
 8001670:	8afb      	ldrh	r3, [r7, #22]
 8001672:	607b      	str	r3, [r7, #4]
		secondDigit = secondDigit/10;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a2d      	ldr	r2, [pc, #180]	@ (800172c <totalGameTime+0xd8>)
 8001678:	fb82 1203 	smull	r1, r2, r2, r3
 800167c:	1092      	asrs	r2, r2, #2
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	607b      	str	r3, [r7, #4]
		finalGameTime[1] = secondDigit;
 8001684:	4a28      	ldr	r2, [pc, #160]	@ (8001728 <totalGameTime+0xd4>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6053      	str	r3, [r2, #4]

		int thirdDigit = (int)endGameTime;
 800168a:	8afb      	ldrh	r3, [r7, #22]
 800168c:	603b      	str	r3, [r7, #0]
		thirdDigit = thirdDigit % 10;
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4b26      	ldr	r3, [pc, #152]	@ (800172c <totalGameTime+0xd8>)
 8001692:	fb83 1302 	smull	r1, r3, r3, r2
 8001696:	1099      	asrs	r1, r3, #2
 8001698:	17d3      	asrs	r3, r2, #31
 800169a:	1ac9      	subs	r1, r1, r3
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	603b      	str	r3, [r7, #0]
		finalGameTime[2] = thirdDigit;
 80016a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <totalGameTime+0xd4>)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	6093      	str	r3, [r2, #8]

		thirdDigit = thirdDigit % 10;
		finalGameTime[2] = thirdDigit;
	}

}
 80016ae:	e032      	b.n	8001716 <totalGameTime+0xc2>
	else if (endGameTime >= 60){
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80016b4:	d92f      	bls.n	8001716 <totalGameTime+0xc2>
		uint16_t firstDigit = endGameTime;
 80016b6:	8afb      	ldrh	r3, [r7, #22]
 80016b8:	82bb      	strh	r3, [r7, #20]
		firstDigit = firstDigit/60;
 80016ba:	8abb      	ldrh	r3, [r7, #20]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001730 <totalGameTime+0xdc>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	82bb      	strh	r3, [r7, #20]
		finalGameTime[0] = firstDigit;
 80016c6:	8abb      	ldrh	r3, [r7, #20]
 80016c8:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <totalGameTime+0xd4>)
 80016ca:	6013      	str	r3, [r2, #0]
		int secondDigit = endGameTime-(firstDigit*60);
 80016cc:	8af9      	ldrh	r1, [r7, #22]
 80016ce:	8aba      	ldrh	r2, [r7, #20]
 80016d0:	4613      	mov	r3, r2
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	613b      	str	r3, [r7, #16]
		int thirdDigit = secondDigit;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	60fb      	str	r3, [r7, #12]
		secondDigit = secondDigit/10;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4a12      	ldr	r2, [pc, #72]	@ (800172c <totalGameTime+0xd8>)
 80016e4:	fb82 1203 	smull	r1, r2, r2, r3
 80016e8:	1092      	asrs	r2, r2, #2
 80016ea:	17db      	asrs	r3, r3, #31
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	613b      	str	r3, [r7, #16]
		finalGameTime[1] = secondDigit;
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <totalGameTime+0xd4>)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	6053      	str	r3, [r2, #4]
		thirdDigit = thirdDigit % 10;
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <totalGameTime+0xd8>)
 80016fa:	fb83 1302 	smull	r1, r3, r3, r2
 80016fe:	1099      	asrs	r1, r3, #2
 8001700:	17d3      	asrs	r3, r2, #31
 8001702:	1ac9      	subs	r1, r1, r3
 8001704:	460b      	mov	r3, r1
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]
		finalGameTime[2] = thirdDigit;
 8001710:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <totalGameTime+0xd4>)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6093      	str	r3, [r2, #8]
}
 8001716:	bf00      	nop
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000650 	.word	0x20000650
 8001728:	20000654 	.word	0x20000654
 800172c:	66666667 	.word	0x66666667
 8001730:	88888889 	.word	0x88888889

08001734 <drawBlockOne>:

// Draw Block One at X, Y, and in given orientation
void drawBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	80fb      	strh	r3, [r7, #6]
 800173e:	460b      	mov	r3, r1
 8001740:	80bb      	strh	r3, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d002      	beq.n	8001752 <drawBlockOne+0x1e>
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d129      	bne.n	80017a6 <drawBlockOne+0x72>
		for (int i = Xpos; i < (Xpos+4); i++){
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e021      	b.n	800179c <drawBlockOne+0x68>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_CYAN);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	88b9      	ldrh	r1, [r7, #4]
 800175e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fa26 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001768:	88ba      	ldrh	r2, [r7, #4]
 800176a:	4929      	ldr	r1, [pc, #164]	@ (8001810 <drawBlockOne+0xdc>)
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	2201      	movs	r2, #1
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_CYAN;
 800177e:	88ba      	ldrh	r2, [r7, #4]
 8001780:	4924      	ldr	r1, [pc, #144]	@ (8001814 <drawBlockOne+0xe0>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001792:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	3303      	adds	r3, #3
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	ddd8      	ble.n	8001758 <drawBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d002      	beq.n	80017b2 <drawBlockOne+0x7e>
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d12a      	bne.n	8001808 <drawBlockOne+0xd4>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	e021      	b.n	80017fe <drawBlockOne+0xca>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_CYAN);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	b299      	uxth	r1, r3
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff f9f5 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 80017ca:	88f9      	ldrh	r1, [r7, #6]
 80017cc:	4810      	ldr	r0, [pc, #64]	@ (8001810 <drawBlockOne+0xdc>)
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	2201      	movs	r2, #1
 80017dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_CYAN;
 80017e0:	88f9      	ldrh	r1, [r7, #6]
 80017e2:	480c      	ldr	r0, [pc, #48]	@ (8001814 <drawBlockOne+0xe0>)
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017f4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	88bb      	ldrh	r3, [r7, #4]
 8001800:	3302      	adds	r3, #2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	ddd8      	ble.n	80017ba <drawBlockOne+0x86>
		}
	}
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000030c 	.word	0x2000030c
 8001814:	2000018c 	.word	0x2000018c

08001818 <eraseBlockOne>:

// Erase Block One at X, Y, and in given orientation
void eraseBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d002      	beq.n	8001836 <eraseBlockOne+0x1e>
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d129      	bne.n	800188a <eraseBlockOne+0x72>
		for (int i = Xpos; i < (Xpos+4); i++){
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e021      	b.n	8001880 <eraseBlockOne+0x68>
			LCD_Erase_Square(i, Ypos);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	b29b      	uxth	r3, r3
 8001840:	88ba      	ldrh	r2, [r7, #4]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fa67 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 800184a:	88ba      	ldrh	r2, [r7, #4]
 800184c:	4929      	ldr	r1, [pc, #164]	@ (80018f4 <eraseBlockOne+0xdc>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001860:	88ba      	ldrh	r2, [r7, #4]
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <eraseBlockOne+0xe0>)
 8001864:	8818      	ldrh	r0, [r3, #0]
 8001866:	4925      	ldr	r1, [pc, #148]	@ (80018fc <eraseBlockOne+0xe4>)
 8001868:	4613      	mov	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	4602      	mov	r2, r0
 8001876:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	3303      	adds	r3, #3
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	ddd8      	ble.n	800183c <eraseBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d002      	beq.n	8001896 <eraseBlockOne+0x7e>
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d12a      	bne.n	80018ec <eraseBlockOne+0xd4>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	3b01      	subs	r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	e021      	b.n	80018e2 <eraseBlockOne+0xca>
			LCD_Erase_Square(Xpos, i);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa36 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 80018ac:	88f9      	ldrh	r1, [r7, #6]
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <eraseBlockOne+0xdc>)
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = GameScreenColor;
 80018c2:	88f9      	ldrh	r1, [r7, #6]
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <eraseBlockOne+0xe0>)
 80018c6:	881c      	ldrh	r4, [r3, #0]
 80018c8:	480c      	ldr	r0, [pc, #48]	@ (80018fc <eraseBlockOne+0xe4>)
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	4622      	mov	r2, r4
 80018d8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3301      	adds	r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	3302      	adds	r3, #2
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	ddd8      	ble.n	800189e <eraseBlockOne+0x86>
		}
	}
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}
 80018f4:	2000030c 	.word	0x2000030c
 80018f8:	20000002 	.word	0x20000002
 80018fc:	2000018c 	.word	0x2000018c

08001900 <drawBlockTwo>:

// Draw Block Two at X, Y, and in given orientation
void drawBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	460b      	mov	r3, r1
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d147      	bne.n	80019a8 <drawBlockTwo+0xa8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e01f      	b.n	800195e <drawBlockTwo+0x5e>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	b29b      	uxth	r3, r3
 8001922:	88b9      	ldrh	r1, [r7, #4]
 8001924:	221f      	movs	r2, #31
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f944 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	4998      	ldr	r1, [pc, #608]	@ (8001b90 <drawBlockTwo+0x290>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	4413      	add	r3, r2
 800193c:	2201      	movs	r2, #1
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_BLUE;
 8001942:	88ba      	ldrh	r2, [r7, #4]
 8001944:	4993      	ldr	r1, [pc, #588]	@ (8001b94 <drawBlockTwo+0x294>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4413      	add	r3, r2
 8001952:	221f      	movs	r2, #31
 8001954:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	3302      	adds	r3, #2
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	ddda      	ble.n	800191e <drawBlockTwo+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_BLUE);
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	b299      	uxth	r1, r3
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	221f      	movs	r2, #31
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f91e 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	88f9      	ldrh	r1, [r7, #6]
 800197e:	4884      	ldr	r0, [pc, #528]	@ (8001b90 <drawBlockTwo+0x290>)
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	2201      	movs	r2, #1
 800198c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_BLUE;
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	88f9      	ldrh	r1, [r7, #6]
 8001996:	487f      	ldr	r0, [pc, #508]	@ (8001b94 <drawBlockTwo+0x294>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	221f      	movs	r2, #31
 80019a4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d14c      	bne.n	8001a48 <drawBlockTwo+0x148>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80019ae:	88bb      	ldrh	r3, [r7, #4]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	e01f      	b.n	80019f6 <drawBlockTwo+0xf6>
				LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_BLUE);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	b299      	uxth	r1, r3
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	221f      	movs	r2, #31
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f8f8 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[i][Xpos] = 1;
 80019c4:	88f9      	ldrh	r1, [r7, #6]
 80019c6:	4872      	ldr	r0, [pc, #456]	@ (8001b90 <drawBlockTwo+0x290>)
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	2201      	movs	r2, #1
 80019d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = LCD_COLOR_BLUE;
 80019da:	88f9      	ldrh	r1, [r7, #6]
 80019dc:	486d      	ldr	r0, [pc, #436]	@ (8001b94 <drawBlockTwo+0x294>)
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	221f      	movs	r2, #31
 80019ec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	3301      	adds	r3, #1
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	88bb      	ldrh	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	ddda      	ble.n	80019b6 <drawBlockTwo+0xb6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+1,Ypos-1,LCD_COLOR_BLUE);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b298      	uxth	r0, r3
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f8d0 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][Xpos+1] = 1;
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	485c      	ldr	r0, [pc, #368]	@ (8001b90 <drawBlockTwo+0x290>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][Xpos+1] = LCD_COLOR_BLUE;
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	1c59      	adds	r1, r3, #1
 8001a36:	4857      	ldr	r0, [pc, #348]	@ (8001b94 <drawBlockTwo+0x294>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	221f      	movs	r2, #31
 8001a44:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d14b      	bne.n	8001ae6 <drawBlockTwo+0x1e6>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e01f      	b.n	8001a94 <drawBlockTwo+0x194>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	88b9      	ldrh	r1, [r7, #4]
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f8a9 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001a62:	88ba      	ldrh	r2, [r7, #4]
 8001a64:	494a      	ldr	r1, [pc, #296]	@ (8001b90 <drawBlockTwo+0x290>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	2201      	movs	r2, #1
 8001a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_BLUE;
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	4946      	ldr	r1, [pc, #280]	@ (8001b94 <drawBlockTwo+0x294>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	221f      	movs	r2, #31
 8001a8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	3302      	adds	r3, #2
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	ddda      	ble.n	8001a54 <drawBlockTwo+0x154>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_BLUE);
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	b298      	uxth	r0, r3
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	221f      	movs	r2, #31
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f881 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos+2] = 1;
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	1c99      	adds	r1, r3, #2
 8001aba:	4835      	ldr	r0, [pc, #212]	@ (8001b90 <drawBlockTwo+0x290>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+2] = LCD_COLOR_BLUE;
 8001acc:	88bb      	ldrh	r3, [r7, #4]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	1c99      	adds	r1, r3, #2
 8001ad4:	482f      	ldr	r0, [pc, #188]	@ (8001b94 <drawBlockTwo+0x294>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d14c      	bne.n	8001b86 <drawBlockTwo+0x286>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001aec:	88bb      	ldrh	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	e023      	b.n	8001b3c <drawBlockTwo+0x23c>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	b291      	uxth	r1, r2
 8001afe:	221f      	movs	r2, #31
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f857 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	4821      	ldr	r0, [pc, #132]	@ (8001b90 <drawBlockTwo+0x290>)
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_BLUE;
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	1c59      	adds	r1, r3, #1
 8001b22:	481c      	ldr	r0, [pc, #112]	@ (8001b94 <drawBlockTwo+0x294>)
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	221f      	movs	r2, #31
 8001b32:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	ddd6      	ble.n	8001af4 <drawBlockTwo+0x1f4>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_BLUE);
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b299      	uxth	r1, r3
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	221f      	movs	r2, #31
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f82f 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	88f9      	ldrh	r1, [r7, #6]
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <drawBlockTwo+0x290>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_BLUE;
 8001b6e:	88bb      	ldrh	r3, [r7, #4]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	88f9      	ldrh	r1, [r7, #6]
 8001b74:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <drawBlockTwo+0x294>)
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	221f      	movs	r2, #31
 8001b82:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000030c 	.word	0x2000030c
 8001b94:	2000018c 	.word	0x2000018c

08001b98 <eraseBlockTwo>:

// Erase Block Two at X, Y, and in given orientation
void eraseBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	80bb      	strh	r3, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d14b      	bne.n	8001c48 <eraseBlockTwo+0xb0>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e021      	b.n	8001bfa <eraseBlockTwo+0x62>
			LCD_Erase_Square(i,Ypos);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f8aa 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001bc4:	88ba      	ldrh	r2, [r7, #4]
 8001bc6:	49a0      	ldr	r1, [pc, #640]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001bda:	88ba      	ldrh	r2, [r7, #4]
 8001bdc:	4b9b      	ldr	r3, [pc, #620]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001bde:	8818      	ldrh	r0, [r3, #0]
 8001be0:	499b      	ldr	r1, [pc, #620]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4413      	add	r3, r2
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	ddd8      	ble.n	8001bb6 <eraseBlockTwo+0x1e>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001c04:	88bb      	ldrh	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f882 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 8001c14:	88bb      	ldrh	r3, [r7, #4]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	88f9      	ldrh	r1, [r7, #6]
 8001c1a:	488b      	ldr	r0, [pc, #556]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	2200      	movs	r2, #0
 8001c28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = GameScreenColor;
 8001c2c:	88bb      	ldrh	r3, [r7, #4]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	88f9      	ldrh	r1, [r7, #6]
 8001c32:	4b86      	ldr	r3, [pc, #536]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001c34:	881c      	ldrh	r4, [r3, #0]
 8001c36:	4886      	ldr	r0, [pc, #536]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	4622      	mov	r2, r4
 8001c44:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001c48:	887b      	ldrh	r3, [r7, #2]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d150      	bne.n	8001cf0 <eraseBlockTwo+0x158>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e021      	b.n	8001c9a <eraseBlockTwo+0x102>
				LCD_Erase_Square(Xpos,i);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f85a 	bl	8000d18 <LCD_Erase_Square>
				LCD_Screen[i][Xpos] = 0;
 8001c64:	88f9      	ldrh	r1, [r7, #6]
 8001c66:	4878      	ldr	r0, [pc, #480]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	2200      	movs	r2, #0
 8001c76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = GameScreenColor;
 8001c7a:	88f9      	ldrh	r1, [r7, #6]
 8001c7c:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001c7e:	881c      	ldrh	r4, [r3, #0]
 8001c80:	4873      	ldr	r0, [pc, #460]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	4622      	mov	r2, r4
 8001c90:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	3301      	adds	r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	ddd8      	ble.n	8001c56 <eraseBlockTwo+0xbe>
			}
			LCD_Erase_Square(Xpos+1,Ypos-1);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff f830 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos-1][Xpos+1] = 0;
 8001cb8:	88bb      	ldrh	r3, [r7, #4]
 8001cba:	1e5a      	subs	r2, r3, #1
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	1c59      	adds	r1, r3, #1
 8001cc0:	4861      	ldr	r0, [pc, #388]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][Xpos+1] = GameScreenColor;
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	1c59      	adds	r1, r3, #1
 8001cda:	4b5c      	ldr	r3, [pc, #368]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001cdc:	881c      	ldrh	r4, [r3, #0]
 8001cde:	485c      	ldr	r0, [pc, #368]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	4622      	mov	r2, r4
 8001cec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d14f      	bne.n	8001d96 <eraseBlockTwo+0x1fe>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e021      	b.n	8001d40 <eraseBlockTwo+0x1a8>
			LCD_Erase_Square(i,Ypos);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	88ba      	ldrh	r2, [r7, #4]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f807 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001d0a:	88ba      	ldrh	r2, [r7, #4]
 8001d0c:	494e      	ldr	r1, [pc, #312]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001d20:	88ba      	ldrh	r2, [r7, #4]
 8001d22:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001d24:	8818      	ldrh	r0, [r3, #0]
 8001d26:	494a      	ldr	r1, [pc, #296]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	4602      	mov	r2, r0
 8001d36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	3302      	adds	r3, #2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	ddd8      	ble.n	8001cfc <eraseBlockTwo+0x164>
		}
		LCD_Erase_Square(Xpos+2,Ypos+1);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f7fe ffdd 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos+2] = 0;
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	1c99      	adds	r1, r3, #2
 8001d66:	4838      	ldr	r0, [pc, #224]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	2200      	movs	r2, #0
 8001d74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+2] = GameScreenColor;
 8001d78:	88bb      	ldrh	r3, [r7, #4]
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	1c99      	adds	r1, r3, #2
 8001d80:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001d82:	881c      	ldrh	r4, [r3, #0]
 8001d84:	4832      	ldr	r0, [pc, #200]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	4622      	mov	r2, r4
 8001d92:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d150      	bne.n	8001e3e <eraseBlockTwo+0x2a6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001d9c:	88bb      	ldrh	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	e025      	b.n	8001df0 <eraseBlockTwo+0x258>
			LCD_Erase_Square(Xpos+1,i);
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	3301      	adds	r3, #1
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	b292      	uxth	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ffb1 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	4823      	ldr	r0, [pc, #140]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	1c59      	adds	r1, r3, #1
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001dd4:	881c      	ldrh	r4, [r3, #0]
 8001dd6:	481e      	ldr	r0, [pc, #120]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	4622      	mov	r2, r4
 8001de6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3301      	adds	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	3301      	adds	r3, #1
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	ddd4      	ble.n	8001da4 <eraseBlockTwo+0x20c>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ff87 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	88f9      	ldrh	r1, [r7, #6]
 8001e10:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <eraseBlockTwo+0x2b0>)
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = GameScreenColor;
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	88f9      	ldrh	r1, [r7, #6]
 8001e28:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <eraseBlockTwo+0x2b4>)
 8001e2a:	881c      	ldrh	r4, [r3, #0]
 8001e2c:	4808      	ldr	r0, [pc, #32]	@ (8001e50 <eraseBlockTwo+0x2b8>)
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	4622      	mov	r2, r4
 8001e3a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000030c 	.word	0x2000030c
 8001e4c:	20000002 	.word	0x20000002
 8001e50:	2000018c 	.word	0x2000018c

08001e54 <drawBlockThree>:

// Draw Block Three at X, Y, and in given orientation
void drawBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	80bb      	strh	r3, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d14f      	bne.n	8001f0c <drawBlockThree+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e021      	b.n	8001eb6 <drawBlockThree+0x62>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	88b9      	ldrh	r1, [r7, #4]
 8001e78:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fe99 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001e82:	88ba      	ldrh	r2, [r7, #4]
 8001e84:	499f      	ldr	r1, [pc, #636]	@ (8002104 <drawBlockThree+0x2b0>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4413      	add	r3, r2
 8001e92:	2201      	movs	r2, #1
 8001e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_ORANGE;
 8001e98:	88ba      	ldrh	r2, [r7, #4]
 8001e9a:	499b      	ldr	r1, [pc, #620]	@ (8002108 <drawBlockThree+0x2b4>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001eac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	ddd8      	ble.n	8001e72 <drawBlockThree+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_ORANGE);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	b298      	uxth	r0, r3
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe6f 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos+2] = 1;
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	1c99      	adds	r1, r3, #2
 8001ede:	4889      	ldr	r0, [pc, #548]	@ (8002104 <drawBlockThree+0x2b0>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	2201      	movs	r2, #1
 8001eec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+2] = LCD_COLOR_ORANGE;
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	1e5a      	subs	r2, r3, #1
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	1c99      	adds	r1, r3, #2
 8001ef8:	4883      	ldr	r0, [pc, #524]	@ (8002108 <drawBlockThree+0x2b4>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001f08:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d150      	bne.n	8001fb4 <drawBlockThree+0x160>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001f12:	88bb      	ldrh	r3, [r7, #4]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e021      	b.n	8001f5e <drawBlockThree+0x10a>
				LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_ORANGE);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fe45 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[i][Xpos] = 1;
 8001f2a:	88f9      	ldrh	r1, [r7, #6]
 8001f2c:	4875      	ldr	r0, [pc, #468]	@ (8002104 <drawBlockThree+0x2b0>)
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = LCD_COLOR_ORANGE;
 8001f40:	88f9      	ldrh	r1, [r7, #6]
 8001f42:	4871      	ldr	r0, [pc, #452]	@ (8002108 <drawBlockThree+0x2b4>)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001f54:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	88bb      	ldrh	r3, [r7, #4]
 8001f60:	3301      	adds	r3, #1
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	ddd8      	ble.n	8001f1a <drawBlockThree+0xc6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+1,Ypos+1,LCD_COLOR_ORANGE);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b298      	uxth	r0, r3
 8001f6e:	88bb      	ldrh	r3, [r7, #4]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fe1b 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos+1][Xpos+1] = 1;
 8001f7e:	88bb      	ldrh	r3, [r7, #4]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	1c59      	adds	r1, r3, #1
 8001f86:	485f      	ldr	r0, [pc, #380]	@ (8002104 <drawBlockThree+0x2b0>)
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	2201      	movs	r2, #1
 8001f94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos+1][Xpos+1] = LCD_COLOR_ORANGE;
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	1c59      	adds	r1, r3, #1
 8001fa0:	4859      	ldr	r0, [pc, #356]	@ (8002108 <drawBlockThree+0x2b4>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001fb0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d14b      	bne.n	8002052 <drawBlockThree+0x1fe>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e021      	b.n	8002004 <drawBlockThree+0x1b0>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	88b9      	ldrh	r1, [r7, #4]
 8001fc6:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fdf2 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001fd0:	88ba      	ldrh	r2, [r7, #4]
 8001fd2:	494c      	ldr	r1, [pc, #304]	@ (8002104 <drawBlockThree+0x2b0>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_ORANGE;
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	4947      	ldr	r1, [pc, #284]	@ (8002108 <drawBlockThree+0x2b4>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001ffa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3301      	adds	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	3302      	adds	r3, #2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	429a      	cmp	r2, r3
 800200c:	ddd8      	ble.n	8001fc0 <drawBlockThree+0x16c>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_ORANGE);
 800200e:	88bb      	ldrh	r3, [r7, #4]
 8002010:	3301      	adds	r3, #1
 8002012:	b299      	uxth	r1, r3
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fdca 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 8002020:	88bb      	ldrh	r3, [r7, #4]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	88f9      	ldrh	r1, [r7, #6]
 8002026:	4837      	ldr	r0, [pc, #220]	@ (8002104 <drawBlockThree+0x2b0>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	2201      	movs	r2, #1
 8002034:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_ORANGE;
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	88f9      	ldrh	r1, [r7, #6]
 800203e:	4832      	ldr	r0, [pc, #200]	@ (8002108 <drawBlockThree+0x2b4>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800204e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d150      	bne.n	80020fa <drawBlockThree+0x2a6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002058:	88bb      	ldrh	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	e025      	b.n	80020ac <drawBlockThree+0x258>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	3301      	adds	r3, #1
 8002064:	b29b      	uxth	r3, r3
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	b291      	uxth	r1, r2
 800206a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fda0 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	1c59      	adds	r1, r3, #1
 8002078:	4822      	ldr	r0, [pc, #136]	@ (8002104 <drawBlockThree+0x2b0>)
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	2201      	movs	r2, #1
 8002088:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_ORANGE;
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	481d      	ldr	r0, [pc, #116]	@ (8002108 <drawBlockThree+0x2b4>)
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80020a2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	88bb      	ldrh	r3, [r7, #4]
 80020ae:	3301      	adds	r3, #1
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	ddd4      	ble.n	8002060 <drawBlockThree+0x20c>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_ORANGE);
 80020b6:	88bb      	ldrh	r3, [r7, #4]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b299      	uxth	r1, r3
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fd76 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	1e5a      	subs	r2, r3, #1
 80020cc:	88f9      	ldrh	r1, [r7, #6]
 80020ce:	480d      	ldr	r0, [pc, #52]	@ (8002104 <drawBlockThree+0x2b0>)
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	2201      	movs	r2, #1
 80020dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_ORANGE;
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	88f9      	ldrh	r1, [r7, #6]
 80020e6:	4808      	ldr	r0, [pc, #32]	@ (8002108 <drawBlockThree+0x2b4>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80020f6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000030c 	.word	0x2000030c
 8002108:	2000018c 	.word	0x2000018c

0800210c <eraseBlockThree>:

// Erase Block Three at X, Y, and in given orientation
void eraseBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
 8002116:	460b      	mov	r3, r1
 8002118:	80bb      	strh	r3, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d14f      	bne.n	80021c4 <eraseBlockThree+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002124:	88fb      	ldrh	r3, [r7, #6]
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e021      	b.n	800216e <eraseBlockThree+0x62>
			LCD_Erase_Square(i,Ypos);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	b29b      	uxth	r3, r3
 800212e:	88ba      	ldrh	r2, [r7, #4]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fdf0 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002138:	88ba      	ldrh	r2, [r7, #4]
 800213a:	49a0      	ldr	r1, [pc, #640]	@ (80023bc <eraseBlockThree+0x2b0>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4413      	add	r3, r2
 8002148:	2200      	movs	r2, #0
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 800214e:	88ba      	ldrh	r2, [r7, #4]
 8002150:	4b9b      	ldr	r3, [pc, #620]	@ (80023c0 <eraseBlockThree+0x2b4>)
 8002152:	8818      	ldrh	r0, [r3, #0]
 8002154:	499b      	ldr	r1, [pc, #620]	@ (80023c4 <eraseBlockThree+0x2b8>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4413      	add	r3, r2
 8002162:	4602      	mov	r2, r0
 8002164:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	3302      	adds	r3, #2
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	ddd8      	ble.n	800212a <eraseBlockThree+0x1e>
		}
		LCD_Erase_Square(Xpos+2,Ypos-1);
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	3302      	adds	r3, #2
 800217c:	b29a      	uxth	r2, r3
 800217e:	88bb      	ldrh	r3, [r7, #4]
 8002180:	3b01      	subs	r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	4610      	mov	r0, r2
 8002188:	f7fe fdc6 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos+2] = 0;
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	1e5a      	subs	r2, r3, #1
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	1c99      	adds	r1, r3, #2
 8002194:	4889      	ldr	r0, [pc, #548]	@ (80023bc <eraseBlockThree+0x2b0>)
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	2200      	movs	r2, #0
 80021a2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+2] = GameScreenColor;
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	1c99      	adds	r1, r3, #2
 80021ae:	4b84      	ldr	r3, [pc, #528]	@ (80023c0 <eraseBlockThree+0x2b4>)
 80021b0:	881c      	ldrh	r4, [r3, #0]
 80021b2:	4884      	ldr	r0, [pc, #528]	@ (80023c4 <eraseBlockThree+0x2b8>)
 80021b4:	4613      	mov	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	4622      	mov	r2, r4
 80021c0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d150      	bne.n	800226c <eraseBlockThree+0x160>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80021ca:	88bb      	ldrh	r3, [r7, #4]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	e021      	b.n	8002216 <eraseBlockThree+0x10a>
				LCD_Erase_Square(Xpos,i);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fd9c 	bl	8000d18 <LCD_Erase_Square>
				LCD_Screen[i][Xpos] = 0;
 80021e0:	88f9      	ldrh	r1, [r7, #6]
 80021e2:	4876      	ldr	r0, [pc, #472]	@ (80023bc <eraseBlockThree+0x2b0>)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = GameScreenColor;
 80021f6:	88f9      	ldrh	r1, [r7, #6]
 80021f8:	4b71      	ldr	r3, [pc, #452]	@ (80023c0 <eraseBlockThree+0x2b4>)
 80021fa:	881c      	ldrh	r4, [r3, #0]
 80021fc:	4871      	ldr	r0, [pc, #452]	@ (80023c4 <eraseBlockThree+0x2b8>)
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	4622      	mov	r2, r4
 800220c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	3301      	adds	r3, #1
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	3301      	adds	r3, #1
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	429a      	cmp	r2, r3
 800221e:	ddd8      	ble.n	80021d2 <eraseBlockThree+0xc6>
			}
			LCD_Erase_Square(Xpos+1,Ypos+1);
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	3301      	adds	r3, #1
 8002224:	b29a      	uxth	r2, r3
 8002226:	88bb      	ldrh	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f7fe fd72 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos+1][Xpos+1] = 0;
 8002234:	88bb      	ldrh	r3, [r7, #4]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	1c59      	adds	r1, r3, #1
 800223c:	485f      	ldr	r0, [pc, #380]	@ (80023bc <eraseBlockThree+0x2b0>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	2200      	movs	r2, #0
 800224a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos+1][Xpos+1] = GameScreenColor;
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	1c59      	adds	r1, r3, #1
 8002256:	4b5a      	ldr	r3, [pc, #360]	@ (80023c0 <eraseBlockThree+0x2b4>)
 8002258:	881c      	ldrh	r4, [r3, #0]
 800225a:	485a      	ldr	r0, [pc, #360]	@ (80023c4 <eraseBlockThree+0x2b8>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	4622      	mov	r2, r4
 8002268:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d14b      	bne.n	800230a <eraseBlockThree+0x1fe>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e021      	b.n	80022bc <eraseBlockThree+0x1b0>
			LCD_Erase_Square(i,Ypos);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	b29b      	uxth	r3, r3
 800227c:	88ba      	ldrh	r2, [r7, #4]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fd49 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002286:	88ba      	ldrh	r2, [r7, #4]
 8002288:	494c      	ldr	r1, [pc, #304]	@ (80023bc <eraseBlockThree+0x2b0>)
 800228a:	4613      	mov	r3, r2
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	2200      	movs	r2, #0
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <eraseBlockThree+0x2b4>)
 80022a0:	8818      	ldrh	r0, [r3, #0]
 80022a2:	4948      	ldr	r1, [pc, #288]	@ (80023c4 <eraseBlockThree+0x2b8>)
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	4602      	mov	r2, r0
 80022b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	3302      	adds	r3, #2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	ddd8      	ble.n	8002278 <eraseBlockThree+0x16c>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	3301      	adds	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fd21 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	88f9      	ldrh	r1, [r7, #6]
 80022dc:	4837      	ldr	r0, [pc, #220]	@ (80023bc <eraseBlockThree+0x2b0>)
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = GameScreenColor;
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	88f9      	ldrh	r1, [r7, #6]
 80022f4:	4b32      	ldr	r3, [pc, #200]	@ (80023c0 <eraseBlockThree+0x2b4>)
 80022f6:	881c      	ldrh	r4, [r3, #0]
 80022f8:	4832      	ldr	r0, [pc, #200]	@ (80023c4 <eraseBlockThree+0x2b8>)
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	4622      	mov	r2, r4
 8002306:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 800230a:	887b      	ldrh	r3, [r7, #2]
 800230c:	2b04      	cmp	r3, #4
 800230e:	d150      	bne.n	80023b2 <eraseBlockThree+0x2a6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	3b01      	subs	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	e025      	b.n	8002364 <eraseBlockThree+0x258>
			LCD_Erase_Square(Xpos+1,i);
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	3301      	adds	r3, #1
 800231c:	b29b      	uxth	r3, r3
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	b292      	uxth	r2, r2
 8002322:	4611      	mov	r1, r2
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fcf7 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	1c59      	adds	r1, r3, #1
 800232e:	4823      	ldr	r0, [pc, #140]	@ (80023bc <eraseBlockThree+0x2b0>)
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	2200      	movs	r2, #0
 800233e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	1c59      	adds	r1, r3, #1
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <eraseBlockThree+0x2b4>)
 8002348:	881c      	ldrh	r4, [r3, #0]
 800234a:	481e      	ldr	r0, [pc, #120]	@ (80023c4 <eraseBlockThree+0x2b8>)
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	4622      	mov	r2, r4
 800235a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3301      	adds	r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	88bb      	ldrh	r3, [r7, #4]
 8002366:	3301      	adds	r3, #1
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	429a      	cmp	r2, r3
 800236c:	ddd4      	ble.n	8002318 <eraseBlockThree+0x20c>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 800236e:	88bb      	ldrh	r3, [r7, #4]
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4611      	mov	r1, r2
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe fccd 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 800237e:	88bb      	ldrh	r3, [r7, #4]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	88f9      	ldrh	r1, [r7, #6]
 8002384:	480d      	ldr	r0, [pc, #52]	@ (80023bc <eraseBlockThree+0x2b0>)
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	2200      	movs	r2, #0
 8002392:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = GameScreenColor;
 8002396:	88bb      	ldrh	r3, [r7, #4]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	88f9      	ldrh	r1, [r7, #6]
 800239c:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <eraseBlockThree+0x2b4>)
 800239e:	881c      	ldrh	r4, [r3, #0]
 80023a0:	4808      	ldr	r0, [pc, #32]	@ (80023c4 <eraseBlockThree+0x2b8>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	4622      	mov	r2, r4
 80023ae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000030c 	.word	0x2000030c
 80023c0:	20000002 	.word	0x20000002
 80023c4:	2000018c 	.word	0x2000018c

080023c8 <drawBlockFour>:

// Draw Block Four at X, Y, and in given orientation
void drawBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
 80023d2:	460b      	mov	r3, r1
 80023d4:	80bb      	strh	r3, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e044      	b.n	800246a <drawBlockFour+0xa2>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_YELLOW);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	88b9      	ldrh	r1, [r7, #4]
 80023e6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fbe2 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80023f0:	88ba      	ldrh	r2, [r7, #4]
 80023f2:	4923      	ldr	r1, [pc, #140]	@ (8002480 <drawBlockFour+0xb8>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	2201      	movs	r2, #1
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_YELLOW;
 8002406:	88ba      	ldrh	r2, [r7, #4]
 8002408:	491e      	ldr	r1, [pc, #120]	@ (8002484 <drawBlockFour+0xbc>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800241a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_YELLOW);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	b298      	uxth	r0, r3
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	3b01      	subs	r3, #1
 8002426:	b29b      	uxth	r3, r3
 8002428:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800242c:	4619      	mov	r1, r3
 800242e:	f7fe fbc1 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i] = 1;
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	4912      	ldr	r1, [pc, #72]	@ (8002480 <drawBlockFour+0xb8>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	2201      	movs	r2, #1
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = LCD_COLOR_YELLOW;
 800244a:	88bb      	ldrh	r3, [r7, #4]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	490d      	ldr	r1, [pc, #52]	@ (8002484 <drawBlockFour+0xbc>)
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4413      	add	r3, r2
 800245c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002460:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	3301      	adds	r3, #1
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	ddb5      	ble.n	80023e0 <drawBlockFour+0x18>
		}
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	2000030c 	.word	0x2000030c
 8002484:	2000018c 	.word	0x2000018c

08002488 <eraseBlockFour>:

// Erase Block Four at X, Y, and in given orientation
void eraseBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
 8002492:	460b      	mov	r3, r1
 8002494:	80bb      	strh	r3, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e044      	b.n	800252a <eraseBlockFour+0xa2>
			LCD_Erase_Square(i,Ypos);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	88ba      	ldrh	r2, [r7, #4]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fc35 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80024ae:	88ba      	ldrh	r2, [r7, #4]
 80024b0:	4923      	ldr	r1, [pc, #140]	@ (8002540 <eraseBlockFour+0xb8>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4413      	add	r3, r2
 80024be:	2200      	movs	r2, #0
 80024c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 80024c4:	88ba      	ldrh	r2, [r7, #4]
 80024c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <eraseBlockFour+0xbc>)
 80024c8:	8818      	ldrh	r0, [r3, #0]
 80024ca:	491f      	ldr	r1, [pc, #124]	@ (8002548 <eraseBlockFour+0xc0>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	4602      	mov	r2, r0
 80024da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i,Ypos-1);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f7fe fc14 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i] = 0;
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	4912      	ldr	r1, [pc, #72]	@ (8002540 <eraseBlockFour+0xb8>)
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	2200      	movs	r2, #0
 8002504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = GameScreenColor;
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	1e5a      	subs	r2, r3, #1
 800250c:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <eraseBlockFour+0xbc>)
 800250e:	8818      	ldrh	r0, [r3, #0]
 8002510:	490d      	ldr	r1, [pc, #52]	@ (8002548 <eraseBlockFour+0xc0>)
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4413      	add	r3, r2
 800251e:	4602      	mov	r2, r0
 8002520:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	3301      	adds	r3, #1
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	ddb5      	ble.n	80024a0 <eraseBlockFour+0x18>
		}
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000030c 	.word	0x2000030c
 8002544:	20000002 	.word	0x20000002
 8002548:	2000018c 	.word	0x2000018c

0800254c <drawBlockFive>:

// Draw Block Five at X, Y, and in given orientation
void drawBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
 8002556:	460b      	mov	r3, r1
 8002558:	80bb      	strh	r3, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d002      	beq.n	800256a <drawBlockFive+0x1e>
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d150      	bne.n	800260c <drawBlockFive+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	e048      	b.n	8002602 <drawBlockFive+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_GREEN);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	b29b      	uxth	r3, r3
 8002574:	88b9      	ldrh	r1, [r7, #4]
 8002576:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fb1a 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8002580:	88ba      	ldrh	r2, [r7, #4]
 8002582:	4950      	ldr	r1, [pc, #320]	@ (80026c4 <drawBlockFive+0x178>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	2201      	movs	r2, #1
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_GREEN;
 8002596:	88ba      	ldrh	r2, [r7, #4]
 8002598:	494b      	ldr	r1, [pc, #300]	@ (80026c8 <drawBlockFive+0x17c>)
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4413      	add	r3, r2
 80025a6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80025aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i+1,Ypos-1,LCD_COLOR_GREEN);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	b298      	uxth	r0, r3
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe faf7 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i+1] = 1;
 80025c6:	88bb      	ldrh	r3, [r7, #4]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1c59      	adds	r1, r3, #1
 80025ce:	483d      	ldr	r0, [pc, #244]	@ (80026c4 <drawBlockFive+0x178>)
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	2201      	movs	r2, #1
 80025dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i+1] = LCD_COLOR_GREEN;
 80025e0:	88bb      	ldrh	r3, [r7, #4]
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1c59      	adds	r1, r3, #1
 80025e8:	4837      	ldr	r0, [pc, #220]	@ (80026c8 <drawBlockFive+0x17c>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80025f8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	3301      	adds	r3, #1
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	ddb1      	ble.n	8002570 <drawBlockFive+0x24>
	// Y-1			1	1
	//   Y	    1	1
	// Y+1
	// Y+2
	//	   X-1  X  X+1  X+2
	if (orientation == 2 || orientation == 4){
 800260c:	887b      	ldrh	r3, [r7, #2]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d002      	beq.n	8002618 <drawBlockFive+0xcc>
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d150      	bne.n	80026ba <drawBlockFive+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002618:	88bb      	ldrh	r3, [r7, #4]
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	e048      	b.n	80026b0 <drawBlockFive+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i-1,LCD_COLOR_GREEN);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b299      	uxth	r1, r3
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fac1 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Xpos] = 1;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	88f9      	ldrh	r1, [r7, #6]
 8002638:	4822      	ldr	r0, [pc, #136]	@ (80026c4 <drawBlockFive+0x178>)
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	2201      	movs	r2, #1
 8002646:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos] = LCD_COLOR_GREEN;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	88f9      	ldrh	r1, [r7, #6]
 8002650:	481d      	ldr	r0, [pc, #116]	@ (80026c8 <drawBlockFive+0x17c>)
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002660:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_GREEN);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	3301      	adds	r3, #1
 8002668:	b29b      	uxth	r3, r3
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	b291      	uxth	r1, r2
 800266e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fa9e 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	4811      	ldr	r0, [pc, #68]	@ (80026c4 <drawBlockFive+0x178>)
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	2201      	movs	r2, #1
 800268c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_GREEN;
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <drawBlockFive+0x17c>)
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80026a6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	3301      	adds	r3, #1
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	ddb1      	ble.n	800261e <drawBlockFive+0xd2>
	// Y-1		1
	//   Y	    1	1
	// Y+1			1
	// Y+2
	//	   X-1  X  X+1  X+2
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000030c 	.word	0x2000030c
 80026c8:	2000018c 	.word	0x2000018c

080026cc <eraseBlockFive>:

// Erase Block Five at X, Y, and in given orientation
void eraseBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
 80026d6:	460b      	mov	r3, r1
 80026d8:	80bb      	strh	r3, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d002      	beq.n	80026ea <eraseBlockFive+0x1e>
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d150      	bne.n	800278c <eraseBlockFive+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e048      	b.n	8002782 <eraseBlockFive+0xb6>
			LCD_Erase_Square(i,Ypos);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	88ba      	ldrh	r2, [r7, #4]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fb0d 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80026fe:	88ba      	ldrh	r2, [r7, #4]
 8002700:	4950      	ldr	r1, [pc, #320]	@ (8002844 <eraseBlockFive+0x178>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	2200      	movs	r2, #0
 8002710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8002714:	88ba      	ldrh	r2, [r7, #4]
 8002716:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <eraseBlockFive+0x17c>)
 8002718:	8818      	ldrh	r0, [r3, #0]
 800271a:	494c      	ldr	r1, [pc, #304]	@ (800284c <eraseBlockFive+0x180>)
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	4602      	mov	r2, r0
 800272a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i+1,Ypos-1);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	b29b      	uxth	r3, r3
 8002732:	3301      	adds	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	88bb      	ldrh	r3, [r7, #4]
 8002738:	3b01      	subs	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f7fe faea 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i+1] = 0;
 8002744:	88bb      	ldrh	r3, [r7, #4]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1c59      	adds	r1, r3, #1
 800274c:	483d      	ldr	r0, [pc, #244]	@ (8002844 <eraseBlockFive+0x178>)
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	2200      	movs	r2, #0
 800275a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i+1] = GameScreenColor;
 800275e:	88bb      	ldrh	r3, [r7, #4]
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1c59      	adds	r1, r3, #1
 8002766:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <eraseBlockFive+0x17c>)
 8002768:	881c      	ldrh	r4, [r3, #0]
 800276a:	4838      	ldr	r0, [pc, #224]	@ (800284c <eraseBlockFive+0x180>)
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	4622      	mov	r2, r4
 8002778:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	3301      	adds	r3, #1
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	429a      	cmp	r2, r3
 800278a:	ddb1      	ble.n	80026f0 <eraseBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d002      	beq.n	8002798 <eraseBlockFive+0xcc>
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	2b04      	cmp	r3, #4
 8002796:	d150      	bne.n	800283a <eraseBlockFive+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002798:	88bb      	ldrh	r3, [r7, #4]
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	e048      	b.n	8002830 <eraseBlockFive+0x164>
			LCD_Erase_Square(Xpos,i-1);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fab4 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i-1][Xpos] = 0;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	88f9      	ldrh	r1, [r7, #6]
 80027b6:	4823      	ldr	r0, [pc, #140]	@ (8002844 <eraseBlockFive+0x178>)
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	2200      	movs	r2, #0
 80027c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos] = GameScreenColor;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	88f9      	ldrh	r1, [r7, #6]
 80027ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002848 <eraseBlockFive+0x17c>)
 80027d0:	881c      	ldrh	r4, [r3, #0]
 80027d2:	481e      	ldr	r0, [pc, #120]	@ (800284c <eraseBlockFive+0x180>)
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	4622      	mov	r2, r4
 80027e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i);
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	b292      	uxth	r2, r2
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fa91 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	1c59      	adds	r1, r3, #1
 80027fa:	4812      	ldr	r0, [pc, #72]	@ (8002844 <eraseBlockFive+0x178>)
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	2200      	movs	r2, #0
 800280a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	1c59      	adds	r1, r3, #1
 8002812:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <eraseBlockFive+0x17c>)
 8002814:	881c      	ldrh	r4, [r3, #0]
 8002816:	480d      	ldr	r0, [pc, #52]	@ (800284c <eraseBlockFive+0x180>)
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	4622      	mov	r2, r4
 8002826:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	88bb      	ldrh	r3, [r7, #4]
 8002832:	3301      	adds	r3, #1
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	ddb1      	ble.n	800279e <eraseBlockFive+0xd2>
		}
	}
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	bf00      	nop
 8002844:	2000030c 	.word	0x2000030c
 8002848:	20000002 	.word	0x20000002
 800284c:	2000018c 	.word	0x2000018c

08002850 <drawBlockSix>:

// Draw Block Six at X, Y, and in given orientation
void drawBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	80fb      	strh	r3, [r7, #6]
 800285a:	460b      	mov	r3, r1
 800285c:	80bb      	strh	r3, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8002862:	887b      	ldrh	r3, [r7, #2]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d14f      	bne.n	8002908 <drawBlockSix+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	e021      	b.n	80028b2 <drawBlockSix+0x62>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	b29b      	uxth	r3, r3
 8002872:	88b9      	ldrh	r1, [r7, #4]
 8002874:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe f99b 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 800287e:	88ba      	ldrh	r2, [r7, #4]
 8002880:	499d      	ldr	r1, [pc, #628]	@ (8002af8 <drawBlockSix+0x2a8>)
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4413      	add	r3, r2
 800288e:	2201      	movs	r2, #1
 8002890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_MAGENTA;
 8002894:	88ba      	ldrh	r2, [r7, #4]
 8002896:	4999      	ldr	r1, [pc, #612]	@ (8002afc <drawBlockSix+0x2ac>)
 8002898:	4613      	mov	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4413      	add	r3, r2
 80028a4:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80028a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3301      	adds	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	3302      	adds	r3, #2
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	ddd8      	ble.n	800286e <drawBlockSix+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos-1,LCD_COLOR_MAGENTA);
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	3301      	adds	r3, #1
 80028c0:	b298      	uxth	r0, r3
 80028c2:	88bb      	ldrh	r3, [r7, #4]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f971 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos+1] = 1;
 80028d2:	88bb      	ldrh	r3, [r7, #4]
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	1c59      	adds	r1, r3, #1
 80028da:	4887      	ldr	r0, [pc, #540]	@ (8002af8 <drawBlockSix+0x2a8>)
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	2201      	movs	r2, #1
 80028e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+1] = LCD_COLOR_MAGENTA;
 80028ec:	88bb      	ldrh	r3, [r7, #4]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	4881      	ldr	r0, [pc, #516]	@ (8002afc <drawBlockSix+0x2ac>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002904:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d14f      	bne.n	80029ae <drawBlockSix+0x15e>
		for (int i = Xpos; i < (Xpos+3); i++){
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e021      	b.n	8002958 <drawBlockSix+0x108>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	b29b      	uxth	r3, r3
 8002918:	88b9      	ldrh	r1, [r7, #4]
 800291a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe f948 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8002924:	88ba      	ldrh	r2, [r7, #4]
 8002926:	4974      	ldr	r1, [pc, #464]	@ (8002af8 <drawBlockSix+0x2a8>)
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	2201      	movs	r2, #1
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_MAGENTA;
 800293a:	88ba      	ldrh	r2, [r7, #4]
 800293c:	496f      	ldr	r1, [pc, #444]	@ (8002afc <drawBlockSix+0x2ac>)
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4413      	add	r3, r2
 800294a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800294e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	3301      	adds	r3, #1
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	3302      	adds	r3, #2
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	429a      	cmp	r2, r3
 8002960:	ddd8      	ble.n	8002914 <drawBlockSix+0xc4>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos+1,LCD_COLOR_MAGENTA);
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	3301      	adds	r3, #1
 8002966:	b298      	uxth	r0, r3
 8002968:	88bb      	ldrh	r3, [r7, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f91e 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos+1] = 1;
 8002978:	88bb      	ldrh	r3, [r7, #4]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	1c59      	adds	r1, r3, #1
 8002980:	485d      	ldr	r0, [pc, #372]	@ (8002af8 <drawBlockSix+0x2a8>)
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	2201      	movs	r2, #1
 800298e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+1] = LCD_COLOR_MAGENTA;
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	1c59      	adds	r1, r3, #1
 800299a:	4858      	ldr	r0, [pc, #352]	@ (8002afc <drawBlockSix+0x2ac>)
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80029aa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80029ae:	887b      	ldrh	r3, [r7, #2]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d14c      	bne.n	8002a4e <drawBlockSix+0x1fe>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e021      	b.n	8002a00 <drawBlockSix+0x1b0>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	b299      	uxth	r1, r3
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f8f4 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 80029cc:	88f9      	ldrh	r1, [r7, #6]
 80029ce:	484a      	ldr	r0, [pc, #296]	@ (8002af8 <drawBlockSix+0x2a8>)
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	2201      	movs	r2, #1
 80029de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_MAGENTA;
 80029e2:	88f9      	ldrh	r1, [r7, #6]
 80029e4:	4845      	ldr	r0, [pc, #276]	@ (8002afc <drawBlockSix+0x2ac>)
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80029f6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	3301      	adds	r3, #1
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	ddd8      	ble.n	80029bc <drawBlockSix+0x16c>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos,LCD_COLOR_MAGENTA);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	88b9      	ldrh	r1, [r7, #4]
 8002a12:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f8cc 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos][Xpos+1] = 1;
 8002a1c:	88ba      	ldrh	r2, [r7, #4]
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	1c59      	adds	r1, r3, #1
 8002a22:	4835      	ldr	r0, [pc, #212]	@ (8002af8 <drawBlockSix+0x2a8>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos+1] = LCD_COLOR_MAGENTA;
 8002a34:	88ba      	ldrh	r2, [r7, #4]
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	1c59      	adds	r1, r3, #1
 8002a3a:	4830      	ldr	r0, [pc, #192]	@ (8002afc <drawBlockSix+0x2ac>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002a4a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d14c      	bne.n	8002aee <drawBlockSix+0x29e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002a54:	88bb      	ldrh	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	e025      	b.n	8002aa8 <drawBlockSix+0x258>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_MAGENTA);
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	b291      	uxth	r1, r2
 8002a66:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe f8a2 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	4820      	ldr	r0, [pc, #128]	@ (8002af8 <drawBlockSix+0x2a8>)
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	2201      	movs	r2, #1
 8002a84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_MAGENTA;
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	481b      	ldr	r0, [pc, #108]	@ (8002afc <drawBlockSix+0x2ac>)
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002a9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	88bb      	ldrh	r3, [r7, #4]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	ddd4      	ble.n	8002a5c <drawBlockSix+0x20c>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos,LCD_COLOR_MAGENTA);
 8002ab2:	88b9      	ldrh	r1, [r7, #4]
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f87a 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos][Xpos] = 1;
 8002ac0:	88ba      	ldrh	r2, [r7, #4]
 8002ac2:	88f9      	ldrh	r1, [r7, #6]
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <drawBlockSix+0x2a8>)
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos] = LCD_COLOR_MAGENTA;
 8002ad6:	88ba      	ldrh	r2, [r7, #4]
 8002ad8:	88f9      	ldrh	r1, [r7, #6]
 8002ada:	4808      	ldr	r0, [pc, #32]	@ (8002afc <drawBlockSix+0x2ac>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002aea:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8002aee:	bf00      	nop
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000030c 	.word	0x2000030c
 8002afc:	2000018c 	.word	0x2000018c

08002b00 <eraseBlockSix>:

// Erase Block Six at X, Y, and in given orientation
void eraseBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	80bb      	strh	r3, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d14f      	bne.n	8002bb8 <eraseBlockSix+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e021      	b.n	8002b62 <eraseBlockSix+0x62>
			LCD_Erase_Square(i,Ypos);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	88ba      	ldrh	r2, [r7, #4]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe f8f6 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002b2c:	88ba      	ldrh	r2, [r7, #4]
 8002b2e:	499e      	ldr	r1, [pc, #632]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8002b42:	88ba      	ldrh	r2, [r7, #4]
 8002b44:	4b99      	ldr	r3, [pc, #612]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002b46:	8818      	ldrh	r0, [r3, #0]
 8002b48:	4999      	ldr	r1, [pc, #612]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4413      	add	r3, r2
 8002b56:	4602      	mov	r2, r0
 8002b58:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	3302      	adds	r3, #2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	ddd8      	ble.n	8002b1e <eraseBlockSix+0x1e>
		}
		LCD_Erase_Square(Xpos+1,Ypos-1);
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	88bb      	ldrh	r3, [r7, #4]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7fe f8cc 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos+1] = 0;
 8002b80:	88bb      	ldrh	r3, [r7, #4]
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	4887      	ldr	r0, [pc, #540]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	2200      	movs	r2, #0
 8002b96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+1] = GameScreenColor;
 8002b9a:	88bb      	ldrh	r3, [r7, #4]
 8002b9c:	1e5a      	subs	r2, r3, #1
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	1c59      	adds	r1, r3, #1
 8002ba2:	4b82      	ldr	r3, [pc, #520]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002ba4:	881c      	ldrh	r4, [r3, #0]
 8002ba6:	4882      	ldr	r0, [pc, #520]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d14f      	bne.n	8002c5e <eraseBlockSix+0x15e>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e021      	b.n	8002c08 <eraseBlockSix+0x108>
			LCD_Erase_Square(i,Ypos);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	88ba      	ldrh	r2, [r7, #4]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f8a3 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002bd2:	88ba      	ldrh	r2, [r7, #4]
 8002bd4:	4974      	ldr	r1, [pc, #464]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	2200      	movs	r2, #0
 8002be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8002be8:	88ba      	ldrh	r2, [r7, #4]
 8002bea:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002bec:	8818      	ldrh	r0, [r3, #0]
 8002bee:	4970      	ldr	r1, [pc, #448]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	3301      	adds	r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	ddd8      	ble.n	8002bc4 <eraseBlockSix+0xc4>
		}
		LCD_Erase_Square(Xpos+1,Ypos+1);
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	88bb      	ldrh	r3, [r7, #4]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f7fe f879 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos+1] = 0;
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	485e      	ldr	r0, [pc, #376]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+1] = GameScreenColor;
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	4b58      	ldr	r3, [pc, #352]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002c4a:	881c      	ldrh	r4, [r3, #0]
 8002c4c:	4858      	ldr	r0, [pc, #352]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	4622      	mov	r2, r4
 8002c5a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d14c      	bne.n	8002cfe <eraseBlockSix+0x1fe>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002c64:	88bb      	ldrh	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e021      	b.n	8002cb0 <eraseBlockSix+0x1b0>
			LCD_Erase_Square(Xpos,i);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe f84f 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8002c7a:	88f9      	ldrh	r1, [r7, #6]
 8002c7c:	484a      	ldr	r0, [pc, #296]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = GameScreenColor;
 8002c90:	88f9      	ldrh	r1, [r7, #6]
 8002c92:	4b46      	ldr	r3, [pc, #280]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002c94:	881c      	ldrh	r4, [r3, #0]
 8002c96:	4846      	ldr	r0, [pc, #280]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	ddd8      	ble.n	8002c6c <eraseBlockSix+0x16c>
		}
		LCD_Erase_Square(Xpos+1,Ypos);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	88ba      	ldrh	r2, [r7, #4]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f827 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos][Xpos+1] = 0;
 8002cca:	88ba      	ldrh	r2, [r7, #4]
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	1c59      	adds	r1, r3, #1
 8002cd0:	4835      	ldr	r0, [pc, #212]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos+1] = GameScreenColor;
 8002ce2:	88ba      	ldrh	r2, [r7, #4]
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	1c59      	adds	r1, r3, #1
 8002ce8:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002cea:	881c      	ldrh	r4, [r3, #0]
 8002cec:	4830      	ldr	r0, [pc, #192]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d14c      	bne.n	8002d9e <eraseBlockSix+0x29e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002d04:	88bb      	ldrh	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	e025      	b.n	8002d58 <eraseBlockSix+0x258>
			LCD_Erase_Square(Xpos+1,i);
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	b292      	uxth	r2, r2
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fffd 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	4821      	ldr	r0, [pc, #132]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	2200      	movs	r2, #0
 8002d32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	1c59      	adds	r1, r3, #1
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002d3c:	881c      	ldrh	r4, [r3, #0]
 8002d3e:	481c      	ldr	r0, [pc, #112]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	4622      	mov	r2, r4
 8002d4e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	88bb      	ldrh	r3, [r7, #4]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	ddd4      	ble.n	8002d0c <eraseBlockSix+0x20c>
		}
		LCD_Erase_Square(Xpos,Ypos);
 8002d62:	88ba      	ldrh	r2, [r7, #4]
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd ffd5 	bl	8000d18 <LCD_Erase_Square>
		LCD_Screen[Ypos][Xpos] = 0;
 8002d6e:	88ba      	ldrh	r2, [r7, #4]
 8002d70:	88f9      	ldrh	r1, [r7, #6]
 8002d72:	480d      	ldr	r0, [pc, #52]	@ (8002da8 <eraseBlockSix+0x2a8>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos] = GameScreenColor;
 8002d84:	88ba      	ldrh	r2, [r7, #4]
 8002d86:	88f9      	ldrh	r1, [r7, #6]
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <eraseBlockSix+0x2ac>)
 8002d8a:	881c      	ldrh	r4, [r3, #0]
 8002d8c:	4808      	ldr	r0, [pc, #32]	@ (8002db0 <eraseBlockSix+0x2b0>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	4622      	mov	r2, r4
 8002d9a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2000030c 	.word	0x2000030c
 8002dac:	20000002 	.word	0x20000002
 8002db0:	2000018c 	.word	0x2000018c

08002db4 <drawBlockSeven>:

// Draw Block Seven at X, Y, and in given orientation
void drawBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	80fb      	strh	r3, [r7, #6]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	80bb      	strh	r3, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d002      	beq.n	8002dd2 <drawBlockSeven+0x1e>
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d150      	bne.n	8002e74 <drawBlockSeven+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	e048      	b.n	8002e6a <drawBlockSeven+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_RED);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	88bb      	ldrh	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002de6:	4619      	mov	r1, r3
 8002de8:	f7fd fee4 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i] = 1;
 8002dec:	88bb      	ldrh	r3, [r7, #4]
 8002dee:	1e5a      	subs	r2, r3, #1
 8002df0:	494e      	ldr	r1, [pc, #312]	@ (8002f2c <drawBlockSeven+0x178>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = LCD_COLOR_RED;
 8002e04:	88bb      	ldrh	r3, [r7, #4]
 8002e06:	1e5a      	subs	r2, r3, #1
 8002e08:	4949      	ldr	r1, [pc, #292]	@ (8002f30 <drawBlockSeven+0x17c>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002e1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i+1,Ypos,LCD_COLOR_RED);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3301      	adds	r3, #1
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	88b9      	ldrh	r1, [r7, #4]
 8002e28:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fec1 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i+1] = 1;
 8002e32:	88ba      	ldrh	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	483c      	ldr	r0, [pc, #240]	@ (8002f2c <drawBlockSeven+0x178>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	2201      	movs	r2, #1
 8002e46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos][i+1] = LCD_COLOR_RED;
 8002e4a:	88ba      	ldrh	r2, [r7, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	4837      	ldr	r0, [pc, #220]	@ (8002f30 <drawBlockSeven+0x17c>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002e60:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	ddb1      	ble.n	8002dd8 <drawBlockSeven+0x24>
	// Y-1		1	1
	//   Y	    	1	1
	// Y+1
	// Y+2
	//	   X-1  X  X+1  X+2
	if (orientation == 2 || orientation == 4){
 8002e74:	887b      	ldrh	r3, [r7, #2]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d002      	beq.n	8002e80 <drawBlockSeven+0xcc>
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d150      	bne.n	8002f22 <drawBlockSeven+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002e80:	88bb      	ldrh	r3, [r7, #4]
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	e048      	b.n	8002f18 <drawBlockSeven+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_RED);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	b299      	uxth	r1, r3
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fd fe8f 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 8002e96:	88f9      	ldrh	r1, [r7, #6]
 8002e98:	4824      	ldr	r0, [pc, #144]	@ (8002f2c <drawBlockSeven+0x178>)
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_RED;
 8002eac:	88f9      	ldrh	r1, [r7, #6]
 8002eae:	4820      	ldr	r0, [pc, #128]	@ (8002f30 <drawBlockSeven+0x17c>)
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002ec0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i-1,LCD_COLOR_RED);
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	b298      	uxth	r0, r3
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fd fe6c 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Xpos+1] = 1;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	1e5a      	subs	r2, r3, #1
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	1c59      	adds	r1, r3, #1
 8002ee4:	4811      	ldr	r0, [pc, #68]	@ (8002f2c <drawBlockSeven+0x178>)
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos+1] = LCD_COLOR_RED;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1e5a      	subs	r2, r3, #1
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	1c59      	adds	r1, r3, #1
 8002efe:	480c      	ldr	r0, [pc, #48]	@ (8002f30 <drawBlockSeven+0x17c>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002f0e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	88bb      	ldrh	r3, [r7, #4]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	ddb1      	ble.n	8002e86 <drawBlockSeven+0xd2>
//   Y	    1	1
// Y+1		1
// Y+2
//	   X-1  X  X+1  X+2
	}
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000030c 	.word	0x2000030c
 8002f30:	2000018c 	.word	0x2000018c

08002f34 <eraseBlockSeven>:

// Erase Block Seven at X, Y, and in given orientation
void eraseBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	80fb      	strh	r3, [r7, #6]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	80bb      	strh	r3, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d002      	beq.n	8002f52 <eraseBlockSeven+0x1e>
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d150      	bne.n	8002ff4 <eraseBlockSeven+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e048      	b.n	8002fea <eraseBlockSeven+0xb6>
			LCD_Erase_Square(i,Ypos-1);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f7fd fed7 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i] = 0;
 8002f6a:	88bb      	ldrh	r3, [r7, #4]
 8002f6c:	1e5a      	subs	r2, r3, #1
 8002f6e:	494f      	ldr	r1, [pc, #316]	@ (80030ac <eraseBlockSeven+0x178>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = GameScreenColor;
 8002f82:	88bb      	ldrh	r3, [r7, #4]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	4b4a      	ldr	r3, [pc, #296]	@ (80030b0 <eraseBlockSeven+0x17c>)
 8002f88:	8818      	ldrh	r0, [r3, #0]
 8002f8a:	494a      	ldr	r1, [pc, #296]	@ (80030b4 <eraseBlockSeven+0x180>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i+1,Ypos);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	88ba      	ldrh	r2, [r7, #4]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd feb4 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[Ypos][i+1] = 0;
 8002fb0:	88ba      	ldrh	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	483d      	ldr	r0, [pc, #244]	@ (80030ac <eraseBlockSeven+0x178>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos][i+1] = GameScreenColor;
 8002fc8:	88ba      	ldrh	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1c59      	adds	r1, r3, #1
 8002fce:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <eraseBlockSeven+0x17c>)
 8002fd0:	881c      	ldrh	r4, [r3, #0]
 8002fd2:	4838      	ldr	r0, [pc, #224]	@ (80030b4 <eraseBlockSeven+0x180>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	4622      	mov	r2, r4
 8002fe0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	3301      	adds	r3, #1
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	ddb1      	ble.n	8002f58 <eraseBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d002      	beq.n	8003000 <eraseBlockSeven+0xcc>
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d150      	bne.n	80030a2 <eraseBlockSeven+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8003000:	88bb      	ldrh	r3, [r7, #4]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	e048      	b.n	8003098 <eraseBlockSeven+0x164>
			LCD_Erase_Square(Xpos,i);
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	b29a      	uxth	r2, r3
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fe82 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8003014:	88f9      	ldrh	r1, [r7, #6]
 8003016:	4825      	ldr	r0, [pc, #148]	@ (80030ac <eraseBlockSeven+0x178>)
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	2200      	movs	r2, #0
 8003026:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = GameScreenColor;
 800302a:	88f9      	ldrh	r1, [r7, #6]
 800302c:	4b20      	ldr	r3, [pc, #128]	@ (80030b0 <eraseBlockSeven+0x17c>)
 800302e:	881c      	ldrh	r4, [r3, #0]
 8003030:	4820      	ldr	r0, [pc, #128]	@ (80030b4 <eraseBlockSeven+0x180>)
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	4622      	mov	r2, r4
 8003040:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i-1);
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	3301      	adds	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29b      	uxth	r3, r3
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7fd fe5f 	bl	8000d18 <LCD_Erase_Square>
			LCD_Screen[i-1][Xpos+1] = 0;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	1c59      	adds	r1, r3, #1
 8003062:	4812      	ldr	r0, [pc, #72]	@ (80030ac <eraseBlockSeven+0x178>)
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	2200      	movs	r2, #0
 8003070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos+1] = GameScreenColor;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	1c59      	adds	r1, r3, #1
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <eraseBlockSeven+0x17c>)
 800307e:	881c      	ldrh	r4, [r3, #0]
 8003080:	480c      	ldr	r0, [pc, #48]	@ (80030b4 <eraseBlockSeven+0x180>)
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	4622      	mov	r2, r4
 800308e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3301      	adds	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	88bb      	ldrh	r3, [r7, #4]
 800309a:	3301      	adds	r3, #1
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	ddb1      	ble.n	8003006 <eraseBlockSeven+0xd2>
		}
	}
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2000030c 	.word	0x2000030c
 80030b0:	20000002 	.word	0x20000002
 80030b4:	2000018c 	.word	0x2000018c

080030b8 <drawBottomBorder>:

// Draw a black bottom border at bottom of screen
void drawBottomBorder(){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 12; i++){
 80030be:	2300      	movs	r3, #0
 80030c0:	80fb      	strh	r3, [r7, #6]
 80030c2:	e014      	b.n	80030ee <drawBottomBorder+0x36>
		LCD_Draw_Square_Fill_Border(i, 15, LCD_COLOR_BLACK);
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	2200      	movs	r2, #0
 80030c8:	210f      	movs	r1, #15
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fd72 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[15][i] = 1;
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <drawBottomBorder+0x4c>)
 80030d4:	33b4      	adds	r3, #180	@ 0xb4
 80030d6:	2101      	movs	r1, #1
 80030d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Obj_Color[15][i] = LCD_COLOR_BLACK;
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <drawBottomBorder+0x50>)
 80030e0:	33b4      	adds	r3, #180	@ 0xb4
 80030e2:	2100      	movs	r1, #0
 80030e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < 12; i++){
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	3301      	adds	r3, #1
 80030ec:	80fb      	strh	r3, [r7, #6]
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	2b0b      	cmp	r3, #11
 80030f2:	d9e7      	bls.n	80030c4 <drawBottomBorder+0xc>
	}
	HAL_Delay(1000);
 80030f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030f8:	f003 f894 	bl	8006224 <HAL_Delay>
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000030c 	.word	0x2000030c
 8003108:	2000018c 	.word	0x2000018c

0800310c <rotateBlock>:

// Erase block in current orientation and redraw in new orientation
void rotateBlock(){
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8003112:	4b57      	ldr	r3, [pc, #348]	@ (8003270 <rotateBlock+0x164>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpos = CurrentBlock[1];
 8003118:	4b55      	ldr	r3, [pc, #340]	@ (8003270 <rotateBlock+0x164>)
 800311a:	885b      	ldrh	r3, [r3, #2]
 800311c:	817b      	strh	r3, [r7, #10]
	uint16_t Ypos = CurrentBlock[2];
 800311e:	4b54      	ldr	r3, [pc, #336]	@ (8003270 <rotateBlock+0x164>)
 8003120:	889b      	ldrh	r3, [r3, #4]
 8003122:	813b      	strh	r3, [r7, #8]
	uint16_t OrgOrientation = CurrentBlock[3];
 8003124:	4b52      	ldr	r3, [pc, #328]	@ (8003270 <rotateBlock+0x164>)
 8003126:	88db      	ldrh	r3, [r3, #6]
 8003128:	80fb      	strh	r3, [r7, #6]
	uint16_t NewOrientation;
	if (OrgOrientation < 4){
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d803      	bhi.n	8003138 <rotateBlock+0x2c>
		NewOrientation = OrgOrientation + 1;
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	3301      	adds	r3, #1
 8003134:	81fb      	strh	r3, [r7, #14]
 8003136:	e004      	b.n	8003142 <rotateBlock+0x36>
	}
	else if (OrgOrientation >= 4){
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d901      	bls.n	8003142 <rotateBlock+0x36>
		NewOrientation = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	81fb      	strh	r3, [r7, #14]
	}

	if (BlockNum == 1){
 8003142:	89bb      	ldrh	r3, [r7, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d111      	bne.n	800316c <rotateBlock+0x60>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	8939      	ldrh	r1, [r7, #8]
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fb62 	bl	8001818 <eraseBlockOne>
		drawBlockOne(Xpos, Ypos, NewOrientation);
 8003154:	89fa      	ldrh	r2, [r7, #14]
 8003156:	8939      	ldrh	r1, [r7, #8]
 8003158:	897b      	ldrh	r3, [r7, #10]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe faea 	bl	8001734 <drawBlockOne>
		updateCurrentBlock(1, Xpos, Ypos, NewOrientation);
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	893a      	ldrh	r2, [r7, #8]
 8003164:	8979      	ldrh	r1, [r7, #10]
 8003166:	2001      	movs	r0, #1
 8003168:	f000 f92c 	bl	80033c4 <updateCurrentBlock>
	}
	if (BlockNum == 2){
 800316c:	89bb      	ldrh	r3, [r7, #12]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d111      	bne.n	8003196 <rotateBlock+0x8a>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	8939      	ldrh	r1, [r7, #8]
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe fd0d 	bl	8001b98 <eraseBlockTwo>
		drawBlockTwo(Xpos, Ypos, NewOrientation);
 800317e:	89fa      	ldrh	r2, [r7, #14]
 8003180:	8939      	ldrh	r1, [r7, #8]
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe fbbb 	bl	8001900 <drawBlockTwo>
		updateCurrentBlock(2, Xpos, Ypos, NewOrientation);
 800318a:	89fb      	ldrh	r3, [r7, #14]
 800318c:	893a      	ldrh	r2, [r7, #8]
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	2002      	movs	r0, #2
 8003192:	f000 f917 	bl	80033c4 <updateCurrentBlock>
		}
	if (BlockNum == 3){
 8003196:	89bb      	ldrh	r3, [r7, #12]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d111      	bne.n	80031c0 <rotateBlock+0xb4>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 800319c:	88fa      	ldrh	r2, [r7, #6]
 800319e:	8939      	ldrh	r1, [r7, #8]
 80031a0:	897b      	ldrh	r3, [r7, #10]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe ffb2 	bl	800210c <eraseBlockThree>
		drawBlockThree(Xpos, Ypos, NewOrientation);
 80031a8:	89fa      	ldrh	r2, [r7, #14]
 80031aa:	8939      	ldrh	r1, [r7, #8]
 80031ac:	897b      	ldrh	r3, [r7, #10]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fe50 	bl	8001e54 <drawBlockThree>
		updateCurrentBlock(3, Xpos, Ypos, NewOrientation);
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	893a      	ldrh	r2, [r7, #8]
 80031b8:	8979      	ldrh	r1, [r7, #10]
 80031ba:	2003      	movs	r0, #3
 80031bc:	f000 f902 	bl	80033c4 <updateCurrentBlock>
		}
	if (BlockNum == 4){
 80031c0:	89bb      	ldrh	r3, [r7, #12]
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d111      	bne.n	80031ea <rotateBlock+0xde>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	8939      	ldrh	r1, [r7, #8]
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff f95b 	bl	8002488 <eraseBlockFour>
		drawBlockFour(Xpos, Ypos, NewOrientation);
 80031d2:	89fa      	ldrh	r2, [r7, #14]
 80031d4:	8939      	ldrh	r1, [r7, #8]
 80031d6:	897b      	ldrh	r3, [r7, #10]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f8f5 	bl	80023c8 <drawBlockFour>
		updateCurrentBlock(4, Xpos, Ypos, NewOrientation);
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	893a      	ldrh	r2, [r7, #8]
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	2004      	movs	r0, #4
 80031e6:	f000 f8ed 	bl	80033c4 <updateCurrentBlock>
		}
	if (BlockNum == 5){
 80031ea:	89bb      	ldrh	r3, [r7, #12]
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d111      	bne.n	8003214 <rotateBlock+0x108>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	8939      	ldrh	r1, [r7, #8]
 80031f4:	897b      	ldrh	r3, [r7, #10]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fa68 	bl	80026cc <eraseBlockFive>
		drawBlockFive(Xpos, Ypos, NewOrientation);
 80031fc:	89fa      	ldrh	r2, [r7, #14]
 80031fe:	8939      	ldrh	r1, [r7, #8]
 8003200:	897b      	ldrh	r3, [r7, #10]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f9a2 	bl	800254c <drawBlockFive>
		updateCurrentBlock(5, Xpos, Ypos, NewOrientation);
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	893a      	ldrh	r2, [r7, #8]
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	2005      	movs	r0, #5
 8003210:	f000 f8d8 	bl	80033c4 <updateCurrentBlock>
		}
	if (BlockNum == 6){
 8003214:	89bb      	ldrh	r3, [r7, #12]
 8003216:	2b06      	cmp	r3, #6
 8003218:	d111      	bne.n	800323e <rotateBlock+0x132>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	8939      	ldrh	r1, [r7, #8]
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fc6d 	bl	8002b00 <eraseBlockSix>
		drawBlockSix(Xpos, Ypos, NewOrientation);
 8003226:	89fa      	ldrh	r2, [r7, #14]
 8003228:	8939      	ldrh	r1, [r7, #8]
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fb0f 	bl	8002850 <drawBlockSix>
		updateCurrentBlock(6, Xpos, Ypos, NewOrientation);
 8003232:	89fb      	ldrh	r3, [r7, #14]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	8979      	ldrh	r1, [r7, #10]
 8003238:	2006      	movs	r0, #6
 800323a:	f000 f8c3 	bl	80033c4 <updateCurrentBlock>
		}
	if (BlockNum == 7){
 800323e:	89bb      	ldrh	r3, [r7, #12]
 8003240:	2b07      	cmp	r3, #7
 8003242:	d111      	bne.n	8003268 <rotateBlock+0x15c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	8939      	ldrh	r1, [r7, #8]
 8003248:	897b      	ldrh	r3, [r7, #10]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fe72 	bl	8002f34 <eraseBlockSeven>
		drawBlockSeven(Xpos, Ypos, NewOrientation);
 8003250:	89fa      	ldrh	r2, [r7, #14]
 8003252:	8939      	ldrh	r1, [r7, #8]
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff fdac 	bl	8002db4 <drawBlockSeven>
		updateCurrentBlock(7, Xpos, Ypos, NewOrientation);
 800325c:	89fb      	ldrh	r3, [r7, #14]
 800325e:	893a      	ldrh	r2, [r7, #8]
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	2007      	movs	r0, #7
 8003264:	f000 f8ae 	bl	80033c4 <updateCurrentBlock>
		}
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000660 	.word	0x20000660

08003274 <drawCurrentBlock>:
	CurrentBlock[3] = OrgOrientation;
	return full;
}

// Draw the block based on values in CurrentBlock array
void drawCurrentBlock(){
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 800327a:	4b27      	ldr	r3, [pc, #156]	@ (8003318 <drawCurrentBlock+0xa4>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <drawCurrentBlock+0xa4>)
 8003282:	885b      	ldrh	r3, [r3, #2]
 8003284:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <drawCurrentBlock+0xa4>)
 8003288:	889b      	ldrh	r3, [r3, #4]
 800328a:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 800328c:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <drawCurrentBlock+0xa4>)
 800328e:	88db      	ldrh	r3, [r3, #6]
 8003290:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d105      	bne.n	80032a4 <drawCurrentBlock+0x30>
		drawBlockOne(Xpos, Ypos, OrgOrientation);
 8003298:	883a      	ldrh	r2, [r7, #0]
 800329a:	8879      	ldrh	r1, [r7, #2]
 800329c:	88bb      	ldrh	r3, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fa48 	bl	8001734 <drawBlockOne>
	}
	if (BlockNum == 2){
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d105      	bne.n	80032b6 <drawCurrentBlock+0x42>
		drawBlockTwo(Xpos, Ypos, OrgOrientation);
 80032aa:	883a      	ldrh	r2, [r7, #0]
 80032ac:	8879      	ldrh	r1, [r7, #2]
 80032ae:	88bb      	ldrh	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fb25 	bl	8001900 <drawBlockTwo>
	}
	if (BlockNum == 3){
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d105      	bne.n	80032c8 <drawCurrentBlock+0x54>
		drawBlockThree(Xpos, Ypos, OrgOrientation);
 80032bc:	883a      	ldrh	r2, [r7, #0]
 80032be:	8879      	ldrh	r1, [r7, #2]
 80032c0:	88bb      	ldrh	r3, [r7, #4]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fdc6 	bl	8001e54 <drawBlockThree>
	}
	if (BlockNum == 4){
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d105      	bne.n	80032da <drawCurrentBlock+0x66>
		drawBlockFour(Xpos, Ypos, OrgOrientation);
 80032ce:	883a      	ldrh	r2, [r7, #0]
 80032d0:	8879      	ldrh	r1, [r7, #2]
 80032d2:	88bb      	ldrh	r3, [r7, #4]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff f877 	bl	80023c8 <drawBlockFour>
	}
	if (BlockNum == 5){
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d105      	bne.n	80032ec <drawCurrentBlock+0x78>
		drawBlockFive(Xpos, Ypos, OrgOrientation);
 80032e0:	883a      	ldrh	r2, [r7, #0]
 80032e2:	8879      	ldrh	r1, [r7, #2]
 80032e4:	88bb      	ldrh	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff f930 	bl	800254c <drawBlockFive>
	}
	if (BlockNum == 6){
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d105      	bne.n	80032fe <drawCurrentBlock+0x8a>
		drawBlockSix(Xpos, Ypos, OrgOrientation);
 80032f2:	883a      	ldrh	r2, [r7, #0]
 80032f4:	8879      	ldrh	r1, [r7, #2]
 80032f6:	88bb      	ldrh	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff faa9 	bl	8002850 <drawBlockSix>
	}
	if (BlockNum == 7){
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b07      	cmp	r3, #7
 8003302:	d105      	bne.n	8003310 <drawCurrentBlock+0x9c>
		drawBlockSeven(Xpos, Ypos, OrgOrientation);
 8003304:	883a      	ldrh	r2, [r7, #0]
 8003306:	8879      	ldrh	r1, [r7, #2]
 8003308:	88bb      	ldrh	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fd52 	bl	8002db4 <drawBlockSeven>
	}
}
 8003310:	bf00      	nop
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000660 	.word	0x20000660

0800331c <eraseCurrentBlock>:

// Erase the block based on values in CurrentBlock array
void eraseCurrentBlock(){
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8003322:	4b27      	ldr	r3, [pc, #156]	@ (80033c0 <eraseCurrentBlock+0xa4>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <eraseCurrentBlock+0xa4>)
 800332a:	885b      	ldrh	r3, [r3, #2]
 800332c:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 800332e:	4b24      	ldr	r3, [pc, #144]	@ (80033c0 <eraseCurrentBlock+0xa4>)
 8003330:	889b      	ldrh	r3, [r3, #4]
 8003332:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 8003334:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <eraseCurrentBlock+0xa4>)
 8003336:	88db      	ldrh	r3, [r3, #6]
 8003338:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 800333a:	88fb      	ldrh	r3, [r7, #6]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <eraseCurrentBlock+0x30>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 8003340:	883a      	ldrh	r2, [r7, #0]
 8003342:	8879      	ldrh	r1, [r7, #2]
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fa66 	bl	8001818 <eraseBlockOne>
	}
	if (BlockNum == 2){
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d105      	bne.n	800335e <eraseCurrentBlock+0x42>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 8003352:	883a      	ldrh	r2, [r7, #0]
 8003354:	8879      	ldrh	r1, [r7, #2]
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fe fc1d 	bl	8001b98 <eraseBlockTwo>
	}
	if (BlockNum == 3){
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d105      	bne.n	8003370 <eraseCurrentBlock+0x54>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8003364:	883a      	ldrh	r2, [r7, #0]
 8003366:	8879      	ldrh	r1, [r7, #2]
 8003368:	88bb      	ldrh	r3, [r7, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fece 	bl	800210c <eraseBlockThree>
	}
	if (BlockNum == 4){
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b04      	cmp	r3, #4
 8003374:	d105      	bne.n	8003382 <eraseCurrentBlock+0x66>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 8003376:	883a      	ldrh	r2, [r7, #0]
 8003378:	8879      	ldrh	r1, [r7, #2]
 800337a:	88bb      	ldrh	r3, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f883 	bl	8002488 <eraseBlockFour>
	}
	if (BlockNum == 5){
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	2b05      	cmp	r3, #5
 8003386:	d105      	bne.n	8003394 <eraseCurrentBlock+0x78>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 8003388:	883a      	ldrh	r2, [r7, #0]
 800338a:	8879      	ldrh	r1, [r7, #2]
 800338c:	88bb      	ldrh	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f99c 	bl	80026cc <eraseBlockFive>
	}
	if (BlockNum == 6){
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2b06      	cmp	r3, #6
 8003398:	d105      	bne.n	80033a6 <eraseCurrentBlock+0x8a>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 800339a:	883a      	ldrh	r2, [r7, #0]
 800339c:	8879      	ldrh	r1, [r7, #2]
 800339e:	88bb      	ldrh	r3, [r7, #4]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fbad 	bl	8002b00 <eraseBlockSix>
	}
	if (BlockNum == 7){
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d105      	bne.n	80033b8 <eraseCurrentBlock+0x9c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 80033ac:	883a      	ldrh	r2, [r7, #0]
 80033ae:	8879      	ldrh	r1, [r7, #2]
 80033b0:	88bb      	ldrh	r3, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fdbe 	bl	8002f34 <eraseBlockSeven>
	}
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000660 	.word	0x20000660

080033c4 <updateCurrentBlock>:

// Update the values in CurrentBlock array
void updateCurrentBlock(uint16_t BlockNum, uint16_t Xpos, uint16_t Ypos, uint16_t Orientation){
 80033c4:	b490      	push	{r4, r7}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4623      	mov	r3, r4
 80033d4:	80fb      	strh	r3, [r7, #6]
 80033d6:	4603      	mov	r3, r0
 80033d8:	80bb      	strh	r3, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	807b      	strh	r3, [r7, #2]
 80033de:	4613      	mov	r3, r2
 80033e0:	803b      	strh	r3, [r7, #0]
	CurrentBlock[0] = BlockNum;
 80033e2:	4a08      	ldr	r2, [pc, #32]	@ (8003404 <updateCurrentBlock+0x40>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	8013      	strh	r3, [r2, #0]
	CurrentBlock[1] = Xpos;
 80033e8:	4a06      	ldr	r2, [pc, #24]	@ (8003404 <updateCurrentBlock+0x40>)
 80033ea:	88bb      	ldrh	r3, [r7, #4]
 80033ec:	8053      	strh	r3, [r2, #2]
	CurrentBlock[2] = Ypos;
 80033ee:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <updateCurrentBlock+0x40>)
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	8093      	strh	r3, [r2, #4]
	CurrentBlock[3] = Orientation;
 80033f4:	4a03      	ldr	r2, [pc, #12]	@ (8003404 <updateCurrentBlock+0x40>)
 80033f6:	883b      	ldrh	r3, [r7, #0]
 80033f8:	80d3      	strh	r3, [r2, #6]
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc90      	pop	{r4, r7}
 8003402:	4770      	bx	lr
 8003404:	20000660 	.word	0x20000660

08003408 <updateYpos>:
uint16_t getCurrentYpos(){
	return CurrentBlock[2];
}

// Update the Y position of current block
uint16_t updateYpos(){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	CurrentBlock[2] += 1;
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <updateYpos+0x20>)
 800340e:	889b      	ldrh	r3, [r3, #4]
 8003410:	3301      	adds	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <updateYpos+0x20>)
 8003416:	809a      	strh	r2, [r3, #4]
	return CurrentBlock[2];
 8003418:	4b03      	ldr	r3, [pc, #12]	@ (8003428 <updateYpos+0x20>)
 800341a:	889b      	ldrh	r3, [r3, #4]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000660 	.word	0x20000660

0800342c <updateXpos>:

// Update the X position of current block
void updateXpos(int dir){
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	if (dir == 1){
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <updateXpos+0x1a>
		CurrentBlock[1] -= 1;
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <updateXpos+0x38>)
 800343c:	885b      	ldrh	r3, [r3, #2]
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <updateXpos+0x38>)
 8003444:	805a      	strh	r2, [r3, #2]
	}
	if (dir == 2){
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d105      	bne.n	8003458 <updateXpos+0x2c>
		CurrentBlock[1] += 1;
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <updateXpos+0x38>)
 800344e:	885b      	ldrh	r3, [r3, #2]
 8003450:	3301      	adds	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <updateXpos+0x38>)
 8003456:	805a      	strh	r2, [r3, #2]
	}
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000660 	.word	0x20000660

08003468 <isLeftFull>:

// Function to see if space to left of block is full
int isLeftFull(){
 8003468:	b480      	push	{r7}
 800346a:	b08d      	sub	sp, #52	@ 0x34
 800346c:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 800346e:	4b9d      	ldr	r3, [pc, #628]	@ (80036e4 <isLeftFull+0x27c>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003474:	4b9b      	ldr	r3, [pc, #620]	@ (80036e4 <isLeftFull+0x27c>)
 8003476:	885b      	ldrh	r3, [r3, #2]
 8003478:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 800347a:	4b9a      	ldr	r3, [pc, #616]	@ (80036e4 <isLeftFull+0x27c>)
 800347c:	889b      	ldrh	r3, [r3, #4]
 800347e:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8003480:	4b98      	ldr	r3, [pc, #608]	@ (80036e4 <isLeftFull+0x27c>)
 8003482:	88db      	ldrh	r3, [r3, #6]
 8003484:	803b      	strh	r3, [r7, #0]

	if (Xpos-1 >= 0){
 8003486:	88bb      	ldrh	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 82ba 	beq.w	8003a02 <isLeftFull+0x59a>
		if (BlockNum == 1){
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d135      	bne.n	8003500 <isLeftFull+0x98>
			if (Orientation == 1 || Orientation == 3){
 8003494:	883b      	ldrh	r3, [r7, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d002      	beq.n	80034a0 <isLeftFull+0x38>
 800349a:	883b      	ldrh	r3, [r7, #0]
 800349c:	2b03      	cmp	r3, #3
 800349e:	d10e      	bne.n	80034be <isLeftFull+0x56>
				if (LCD_Screen[Ypos][Xpos-1] == 1){
 80034a0:	887a      	ldrh	r2, [r7, #2]
 80034a2:	88bb      	ldrh	r3, [r7, #4]
 80034a4:	1e59      	subs	r1, r3, #1
 80034a6:	4890      	ldr	r0, [pc, #576]	@ (80036e8 <isLeftFull+0x280>)
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <isLeftFull+0x56>
					return 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e2a2      	b.n	8003a04 <isLeftFull+0x59c>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 80034be:	883b      	ldrh	r3, [r7, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d002      	beq.n	80034ca <isLeftFull+0x62>
 80034c4:	883b      	ldrh	r3, [r7, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d11a      	bne.n	8003500 <isLeftFull+0x98>
				for (int i = Ypos-1; i < Ypos+3; i++){
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034d0:	e011      	b.n	80034f6 <isLeftFull+0x8e>
					if (LCD_Screen[i][Xpos-1] == 1){
 80034d2:	88bb      	ldrh	r3, [r7, #4]
 80034d4:	1e59      	subs	r1, r3, #1
 80034d6:	4884      	ldr	r0, [pc, #528]	@ (80036e8 <isLeftFull+0x280>)
 80034d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <isLeftFull+0x88>
						return 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e289      	b.n	8003a04 <isLeftFull+0x59c>
				for (int i = Ypos-1; i < Ypos+3; i++){
 80034f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f2:	3301      	adds	r3, #1
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f6:	887b      	ldrh	r3, [r7, #2]
 80034f8:	3302      	adds	r3, #2
 80034fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	dde8      	ble.n	80034d2 <isLeftFull+0x6a>
					}
				}
			}
		}

	if (BlockNum == 2){
 8003500:	88fb      	ldrh	r3, [r7, #6]
 8003502:	2b02      	cmp	r3, #2
 8003504:	f040 8087 	bne.w	8003616 <isLeftFull+0x1ae>
		if (Orientation == 1){
 8003508:	883b      	ldrh	r3, [r7, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d119      	bne.n	8003542 <isLeftFull+0xda>
			for (int i = Ypos-1; i < Ypos+1; i++){
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	3b01      	subs	r3, #1
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003514:	e011      	b.n	800353a <isLeftFull+0xd2>
				if (LCD_Screen[i][Xpos-1] == 1){
 8003516:	88bb      	ldrh	r3, [r7, #4]
 8003518:	1e59      	subs	r1, r3, #1
 800351a:	4873      	ldr	r0, [pc, #460]	@ (80036e8 <isLeftFull+0x280>)
 800351c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <isLeftFull+0xcc>
					return 0;
 8003530:	2300      	movs	r3, #0
 8003532:	e267      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos-1; i < Ypos+1; i++){
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	3301      	adds	r3, #1
 8003538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800353a:	887b      	ldrh	r3, [r7, #2]
 800353c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800353e:	429a      	cmp	r2, r3
 8003540:	dde9      	ble.n	8003516 <isLeftFull+0xae>
				}
			}
		}
		if (Orientation == 2){
 8003542:	883b      	ldrh	r3, [r7, #0]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d11a      	bne.n	800357e <isLeftFull+0x116>
			for (int i = Ypos-1; i < Ypos+2; i++){
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	3b01      	subs	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	e011      	b.n	8003574 <isLeftFull+0x10c>
				if (LCD_Screen[i][Xpos-1] == 1){
 8003550:	88bb      	ldrh	r3, [r7, #4]
 8003552:	1e59      	subs	r1, r3, #1
 8003554:	4864      	ldr	r0, [pc, #400]	@ (80036e8 <isLeftFull+0x280>)
 8003556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <isLeftFull+0x106>
					return 0;
 800356a:	2300      	movs	r3, #0
 800356c:	e24a      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos-1; i < Ypos+2; i++){
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	3301      	adds	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	3301      	adds	r3, #1
 8003578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357a:	429a      	cmp	r2, r3
 800357c:	dde8      	ble.n	8003550 <isLeftFull+0xe8>
				}
			}
		}
		if (Orientation == 3){
 800357e:	883b      	ldrh	r3, [r7, #0]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d11c      	bne.n	80035be <isLeftFull+0x156>
			if (LCD_Screen[Ypos][Xpos-1] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1){
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	88bb      	ldrh	r3, [r7, #4]
 8003588:	1e59      	subs	r1, r3, #1
 800358a:	4857      	ldr	r0, [pc, #348]	@ (80036e8 <isLeftFull+0x280>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d00d      	beq.n	80035ba <isLeftFull+0x152>
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	88bb      	ldrh	r3, [r7, #4]
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	4850      	ldr	r0, [pc, #320]	@ (80036e8 <isLeftFull+0x280>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <isLeftFull+0x156>
					return 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e222      	b.n	8003a04 <isLeftFull+0x59c>
				}
			}
		if (Orientation == 4){
 80035be:	883b      	ldrh	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d128      	bne.n	8003616 <isLeftFull+0x1ae>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	623b      	str	r3, [r7, #32]
 80035ca:	e010      	b.n	80035ee <isLeftFull+0x186>
				if (LCD_Screen[i][Xpos] == 1){
 80035cc:	88b9      	ldrh	r1, [r7, #4]
 80035ce:	4846      	ldr	r0, [pc, #280]	@ (80036e8 <isLeftFull+0x280>)
 80035d0:	6a3a      	ldr	r2, [r7, #32]
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <isLeftFull+0x180>
					return 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e20d      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	3301      	adds	r3, #1
 80035ec:	623b      	str	r3, [r7, #32]
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	ddea      	ble.n	80035cc <isLeftFull+0x164>
				}
			}
			if (LCD_Screen[Ypos+1][Xpos-1] == 1){
 80035f6:	887b      	ldrh	r3, [r7, #2]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	88bb      	ldrh	r3, [r7, #4]
 80035fc:	1e59      	subs	r1, r3, #1
 80035fe:	483a      	ldr	r0, [pc, #232]	@ (80036e8 <isLeftFull+0x280>)
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <isLeftFull+0x1ae>
				return 0;
 8003612:	2300      	movs	r3, #0
 8003614:	e1f6      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
	}

	if (BlockNum == 3){
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b03      	cmp	r3, #3
 800361a:	f040 808d 	bne.w	8003738 <isLeftFull+0x2d0>
		if (Orientation == 1){
 800361e:	883b      	ldrh	r3, [r7, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d11e      	bne.n	8003662 <isLeftFull+0x1fa>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 8003624:	887a      	ldrh	r2, [r7, #2]
 8003626:	88bb      	ldrh	r3, [r7, #4]
 8003628:	1e59      	subs	r1, r3, #1
 800362a:	482f      	ldr	r0, [pc, #188]	@ (80036e8 <isLeftFull+0x280>)
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <isLeftFull+0x1da>
				return 0;
 800363e:	2300      	movs	r3, #0
 8003640:	e1e0      	b.n	8003a04 <isLeftFull+0x59c>
			}
			if (LCD_Screen[Ypos-1][Xpos+1] == 1){
 8003642:	887b      	ldrh	r3, [r7, #2]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	1c59      	adds	r1, r3, #1
 800364a:	4827      	ldr	r0, [pc, #156]	@ (80036e8 <isLeftFull+0x280>)
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <isLeftFull+0x1fa>
				return 0;
 800365e:	2300      	movs	r3, #0
 8003660:	e1d0      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
		if (Orientation == 2){
 8003662:	883b      	ldrh	r3, [r7, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d119      	bne.n	800369c <isLeftFull+0x234>
			for (int i = Ypos-1; i < Ypos+1; i++){
 8003668:	887b      	ldrh	r3, [r7, #2]
 800366a:	3b01      	subs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	e011      	b.n	8003694 <isLeftFull+0x22c>
				if (LCD_Screen[i][Xpos-1] == 1){
 8003670:	88bb      	ldrh	r3, [r7, #4]
 8003672:	1e59      	subs	r1, r3, #1
 8003674:	481c      	ldr	r0, [pc, #112]	@ (80036e8 <isLeftFull+0x280>)
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <isLeftFull+0x226>
					return 0;
 800368a:	2300      	movs	r3, #0
 800368c:	e1ba      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos-1; i < Ypos+1; i++){
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3301      	adds	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	429a      	cmp	r2, r3
 800369a:	dde9      	ble.n	8003670 <isLeftFull+0x208>
				}
			}
		}
		if (Orientation == 3){
 800369c:	883b      	ldrh	r3, [r7, #0]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d119      	bne.n	80036d6 <isLeftFull+0x26e>
			for (int i = Ypos; i < Ypos+2; i++){
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e011      	b.n	80036cc <isLeftFull+0x264>
				if (LCD_Screen[i][Xpos-1] == 1){
 80036a8:	88bb      	ldrh	r3, [r7, #4]
 80036aa:	1e59      	subs	r1, r3, #1
 80036ac:	480e      	ldr	r0, [pc, #56]	@ (80036e8 <isLeftFull+0x280>)
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <isLeftFull+0x25e>
					return 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e19e      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos; i < Ypos+2; i++){
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	3301      	adds	r3, #1
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	dde8      	ble.n	80036a8 <isLeftFull+0x240>
				}
			}
		}
		if (Orientation == 4){
 80036d6:	883b      	ldrh	r3, [r7, #0]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d12d      	bne.n	8003738 <isLeftFull+0x2d0>
			for (int i = Ypos; i < Ypos+2; i++){
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e015      	b.n	800370e <isLeftFull+0x2a6>
 80036e2:	bf00      	nop
 80036e4:	20000660 	.word	0x20000660
 80036e8:	2000030c 	.word	0x2000030c
				if (LCD_Screen[i][Xpos] == 1){
 80036ec:	88b9      	ldrh	r1, [r7, #4]
 80036ee:	48a5      	ldr	r0, [pc, #660]	@ (8003984 <isLeftFull+0x51c>)
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <isLeftFull+0x2a0>
					return 0;
 8003704:	2300      	movs	r3, #0
 8003706:	e17d      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos; i < Ypos+2; i++){
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3301      	adds	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	3301      	adds	r3, #1
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	dde9      	ble.n	80036ec <isLeftFull+0x284>
				}
			}
			if (LCD_Screen[Ypos-1][Xpos-1] == 1){
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	1e5a      	subs	r2, r3, #1
 800371c:	88bb      	ldrh	r3, [r7, #4]
 800371e:	1e59      	subs	r1, r3, #1
 8003720:	4898      	ldr	r0, [pc, #608]	@ (8003984 <isLeftFull+0x51c>)
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <isLeftFull+0x2d0>
				return 0;
 8003734:	2300      	movs	r3, #0
 8003736:	e165      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
	}

	if (BlockNum == 4){
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	2b04      	cmp	r3, #4
 800373c:	d11e      	bne.n	800377c <isLeftFull+0x314>
		if (LCD_Screen[Ypos][Xpos-1] == 1){
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	88bb      	ldrh	r3, [r7, #4]
 8003742:	1e59      	subs	r1, r3, #1
 8003744:	488f      	ldr	r0, [pc, #572]	@ (8003984 <isLeftFull+0x51c>)
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <isLeftFull+0x2f4>
			return 0;
 8003758:	2300      	movs	r3, #0
 800375a:	e153      	b.n	8003a04 <isLeftFull+0x59c>
		}
		if (LCD_Screen[Ypos-1][Xpos-1] == 1){
 800375c:	887b      	ldrh	r3, [r7, #2]
 800375e:	1e5a      	subs	r2, r3, #1
 8003760:	88bb      	ldrh	r3, [r7, #4]
 8003762:	1e59      	subs	r1, r3, #1
 8003764:	4887      	ldr	r0, [pc, #540]	@ (8003984 <isLeftFull+0x51c>)
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <isLeftFull+0x314>
			return 0;
 8003778:	2300      	movs	r3, #0
 800377a:	e143      	b.n	8003a04 <isLeftFull+0x59c>
		}
	}

	if (BlockNum == 5){
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d152      	bne.n	8003828 <isLeftFull+0x3c0>
		if (Orientation == 1 || Orientation == 3){
 8003782:	883b      	ldrh	r3, [r7, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d002      	beq.n	800378e <isLeftFull+0x326>
 8003788:	883b      	ldrh	r3, [r7, #0]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d11d      	bne.n	80037ca <isLeftFull+0x362>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	88bb      	ldrh	r3, [r7, #4]
 8003792:	1e59      	subs	r1, r3, #1
 8003794:	487b      	ldr	r0, [pc, #492]	@ (8003984 <isLeftFull+0x51c>)
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <isLeftFull+0x344>
				return 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e12b      	b.n	8003a04 <isLeftFull+0x59c>
			}
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	1e5a      	subs	r2, r3, #1
 80037b0:	88b9      	ldrh	r1, [r7, #4]
 80037b2:	4874      	ldr	r0, [pc, #464]	@ (8003984 <isLeftFull+0x51c>)
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <isLeftFull+0x362>
				return 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e11c      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 80037ca:	883b      	ldrh	r3, [r7, #0]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d002      	beq.n	80037d6 <isLeftFull+0x36e>
 80037d0:	883b      	ldrh	r3, [r7, #0]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d128      	bne.n	8003828 <isLeftFull+0x3c0>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	3b01      	subs	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e011      	b.n	8003802 <isLeftFull+0x39a>
				if (LCD_Screen[i][Xpos-1] == 1){
 80037de:	88bb      	ldrh	r3, [r7, #4]
 80037e0:	1e59      	subs	r1, r3, #1
 80037e2:	4868      	ldr	r0, [pc, #416]	@ (8003984 <isLeftFull+0x51c>)
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <isLeftFull+0x394>
					return 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e103      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	3301      	adds	r3, #1
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	429a      	cmp	r2, r3
 8003808:	dde9      	ble.n	80037de <isLeftFull+0x376>
				}
			}
			if (LCD_Screen[Ypos+1][Xpos] == 1){
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	88b9      	ldrh	r1, [r7, #4]
 8003810:	485c      	ldr	r0, [pc, #368]	@ (8003984 <isLeftFull+0x51c>)
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <isLeftFull+0x3c0>
				return 0;
 8003824:	2300      	movs	r3, #0
 8003826:	e0ed      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
	}

	if (BlockNum == 6){
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	2b06      	cmp	r3, #6
 800382c:	f040 8090 	bne.w	8003950 <isLeftFull+0x4e8>
		if (Orientation == 1){
 8003830:	883b      	ldrh	r3, [r7, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d11d      	bne.n	8003872 <isLeftFull+0x40a>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	88bb      	ldrh	r3, [r7, #4]
 800383a:	1e59      	subs	r1, r3, #1
 800383c:	4851      	ldr	r0, [pc, #324]	@ (8003984 <isLeftFull+0x51c>)
 800383e:	4613      	mov	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <isLeftFull+0x3ec>
				return 0;
 8003850:	2300      	movs	r3, #0
 8003852:	e0d7      	b.n	8003a04 <isLeftFull+0x59c>
			}
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	1e5a      	subs	r2, r3, #1
 8003858:	88b9      	ldrh	r1, [r7, #4]
 800385a:	484a      	ldr	r0, [pc, #296]	@ (8003984 <isLeftFull+0x51c>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <isLeftFull+0x40a>
				return 0;
 800386e:	2300      	movs	r3, #0
 8003870:	e0c8      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
		if (Orientation == 2){
 8003872:	883b      	ldrh	r3, [r7, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11a      	bne.n	80038ae <isLeftFull+0x446>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	3b01      	subs	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e011      	b.n	80038a4 <isLeftFull+0x43c>
				if (LCD_Screen[i][Xpos-1] == 1){
 8003880:	88bb      	ldrh	r3, [r7, #4]
 8003882:	1e59      	subs	r1, r3, #1
 8003884:	483f      	ldr	r0, [pc, #252]	@ (8003984 <isLeftFull+0x51c>)
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <isLeftFull+0x436>
					return 0;
 800389a:	2300      	movs	r3, #0
 800389c:	e0b2      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	3301      	adds	r3, #1
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	dde8      	ble.n	8003880 <isLeftFull+0x418>
				}
			}
		}
		if (Orientation == 3){
 80038ae:	883b      	ldrh	r3, [r7, #0]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d11d      	bne.n	80038f0 <isLeftFull+0x488>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 80038b4:	887a      	ldrh	r2, [r7, #2]
 80038b6:	88bb      	ldrh	r3, [r7, #4]
 80038b8:	1e59      	subs	r1, r3, #1
 80038ba:	4832      	ldr	r0, [pc, #200]	@ (8003984 <isLeftFull+0x51c>)
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <isLeftFull+0x46a>
				return 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e098      	b.n	8003a04 <isLeftFull+0x59c>
			}
			if (LCD_Screen[Ypos+1][Xpos] == 1){
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	88b9      	ldrh	r1, [r7, #4]
 80038d8:	482a      	ldr	r0, [pc, #168]	@ (8003984 <isLeftFull+0x51c>)
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <isLeftFull+0x488>
				return 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e089      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
		if (Orientation == 4){
 80038f0:	883b      	ldrh	r3, [r7, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d12c      	bne.n	8003950 <isLeftFull+0x4e8>
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	1e5a      	subs	r2, r3, #1
 80038fa:	88b9      	ldrh	r1, [r7, #4]
 80038fc:	4821      	ldr	r0, [pc, #132]	@ (8003984 <isLeftFull+0x51c>)
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <isLeftFull+0x4ac>
				return 0;
 8003910:	2300      	movs	r3, #0
 8003912:	e077      	b.n	8003a04 <isLeftFull+0x59c>
			}
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 8003914:	887a      	ldrh	r2, [r7, #2]
 8003916:	88bb      	ldrh	r3, [r7, #4]
 8003918:	1e59      	subs	r1, r3, #1
 800391a:	481a      	ldr	r0, [pc, #104]	@ (8003984 <isLeftFull+0x51c>)
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <isLeftFull+0x4ca>
				return 0;
 800392e:	2300      	movs	r3, #0
 8003930:	e068      	b.n	8003a04 <isLeftFull+0x59c>
			}
			if (LCD_Screen[Ypos+1][Xpos] == 1){
 8003932:	887b      	ldrh	r3, [r7, #2]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	88b9      	ldrh	r1, [r7, #4]
 8003938:	4812      	ldr	r0, [pc, #72]	@ (8003984 <isLeftFull+0x51c>)
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <isLeftFull+0x4e8>
				return 0;
 800394c:	2300      	movs	r3, #0
 800394e:	e059      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
		}

	if (BlockNum == 7){
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	2b07      	cmp	r3, #7
 8003954:	d155      	bne.n	8003a02 <isLeftFull+0x59a>
		if (Orientation == 1 || Orientation == 3){
 8003956:	883b      	ldrh	r3, [r7, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <isLeftFull+0x4fa>
 800395c:	883b      	ldrh	r3, [r7, #0]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d120      	bne.n	80039a4 <isLeftFull+0x53c>
			if (LCD_Screen[Ypos-1][Xpos-1] == 1){
 8003962:	887b      	ldrh	r3, [r7, #2]
 8003964:	1e5a      	subs	r2, r3, #1
 8003966:	88bb      	ldrh	r3, [r7, #4]
 8003968:	1e59      	subs	r1, r3, #1
 800396a:	4806      	ldr	r0, [pc, #24]	@ (8003984 <isLeftFull+0x51c>)
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d104      	bne.n	8003988 <isLeftFull+0x520>
				return 0;
 800397e:	2300      	movs	r3, #0
 8003980:	e040      	b.n	8003a04 <isLeftFull+0x59c>
 8003982:	bf00      	nop
 8003984:	2000030c 	.word	0x2000030c
			}
			if (LCD_Screen[Ypos][Xpos] == 1){
 8003988:	887a      	ldrh	r2, [r7, #2]
 800398a:	88b9      	ldrh	r1, [r7, #4]
 800398c:	4820      	ldr	r0, [pc, #128]	@ (8003a10 <isLeftFull+0x5a8>)
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <isLeftFull+0x53c>
				return 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e02f      	b.n	8003a04 <isLeftFull+0x59c>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 80039a4:	883b      	ldrh	r3, [r7, #0]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d002      	beq.n	80039b0 <isLeftFull+0x548>
 80039aa:	883b      	ldrh	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d128      	bne.n	8003a02 <isLeftFull+0x59a>
			for (int i = Ypos; i < Ypos+2; i++){
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	e011      	b.n	80039da <isLeftFull+0x572>
				if (LCD_Screen[i][Xpos-1] == 1){
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	1e59      	subs	r1, r3, #1
 80039ba:	4815      	ldr	r0, [pc, #84]	@ (8003a10 <isLeftFull+0x5a8>)
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <isLeftFull+0x56c>
					return 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e017      	b.n	8003a04 <isLeftFull+0x59c>
			for (int i = Ypos; i < Ypos+2; i++){
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	3301      	adds	r3, #1
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dde8      	ble.n	80039b6 <isLeftFull+0x54e>
				}
			}
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	1e5a      	subs	r2, r3, #1
 80039e8:	88b9      	ldrh	r1, [r7, #4]
 80039ea:	4809      	ldr	r0, [pc, #36]	@ (8003a10 <isLeftFull+0x5a8>)
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <isLeftFull+0x59a>
				return 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <isLeftFull+0x59c>
			}
	}
	}
	}
	return 1;
 8003a02:	2301      	movs	r3, #1
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3734      	adds	r7, #52	@ 0x34
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	2000030c 	.word	0x2000030c

08003a14 <canMoveLeft>:

// Function to determine if block can move left if left is not full & Xpos is greater than 0
int canMoveLeft(){
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
//	uint16_t BlockNum = CurrentBlock[0];
	uint16_t Xpos = CurrentBlock[1];
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <canMoveLeft+0x30>)
 8003a1c:	885b      	ldrh	r3, [r3, #2]
 8003a1e:	80fb      	strh	r3, [r7, #6]
//		if (Xpos > 0){
//			return 1;
//		}
//	}

	if (Xpos > 0){
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <canMoveLeft+0x24>
		if (isLeftFull() == 1){
 8003a26:	f7ff fd1f 	bl	8003468 <isLeftFull>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <canMoveLeft+0x20>
			return 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e002      	b.n	8003a3a <canMoveLeft+0x26>
		}
		else return 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <canMoveLeft+0x26>
	}
	return 0;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000660 	.word	0x20000660

08003a48 <isRightFull>:

// Function to see if space to right of block is full
int isRightFull(){
 8003a48:	b480      	push	{r7}
 8003a4a:	b08b      	sub	sp, #44	@ 0x2c
 8003a4c:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8003a4e:	4b9e      	ldr	r3, [pc, #632]	@ (8003cc8 <isRightFull+0x280>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003a54:	4b9c      	ldr	r3, [pc, #624]	@ (8003cc8 <isRightFull+0x280>)
 8003a56:	885b      	ldrh	r3, [r3, #2]
 8003a58:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8003a5a:	4b9b      	ldr	r3, [pc, #620]	@ (8003cc8 <isRightFull+0x280>)
 8003a5c:	889b      	ldrh	r3, [r3, #4]
 8003a5e:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8003a60:	4b99      	ldr	r3, [pc, #612]	@ (8003cc8 <isRightFull+0x280>)
 8003a62:	88db      	ldrh	r3, [r3, #6]
 8003a64:	803b      	strh	r3, [r7, #0]

//	if (Xpos+1 <= 11){
		if (BlockNum == 1){
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d135      	bne.n	8003ad8 <isRightFull+0x90>
			if (Orientation == 1 || Orientation == 3){
 8003a6c:	883b      	ldrh	r3, [r7, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d002      	beq.n	8003a78 <isRightFull+0x30>
 8003a72:	883b      	ldrh	r3, [r7, #0]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d10e      	bne.n	8003a96 <isRightFull+0x4e>
				if (LCD_Screen[Ypos][Xpos+4] == 1){
 8003a78:	887a      	ldrh	r2, [r7, #2]
 8003a7a:	88bb      	ldrh	r3, [r7, #4]
 8003a7c:	1d19      	adds	r1, r3, #4
 8003a7e:	4893      	ldr	r0, [pc, #588]	@ (8003ccc <isRightFull+0x284>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <isRightFull+0x4e>
					return 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	e2ad      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003a96:	883b      	ldrh	r3, [r7, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d002      	beq.n	8003aa2 <isRightFull+0x5a>
 8003a9c:	883b      	ldrh	r3, [r7, #0]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d11a      	bne.n	8003ad8 <isRightFull+0x90>
				for (int i = Ypos-1; i<Ypos+3; i++){
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa8:	e011      	b.n	8003ace <isRightFull+0x86>
					if (LCD_Screen[i][Xpos+1] == 1){
 8003aaa:	88bb      	ldrh	r3, [r7, #4]
 8003aac:	1c59      	adds	r1, r3, #1
 8003aae:	4887      	ldr	r0, [pc, #540]	@ (8003ccc <isRightFull+0x284>)
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <isRightFull+0x80>
						return 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e294      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos-1; i<Ypos+3; i++){
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	3301      	adds	r3, #1
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ace:	887b      	ldrh	r3, [r7, #2]
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dde8      	ble.n	8003aaa <isRightFull+0x62>
					}
				}
			}
		}

		if (BlockNum == 2){
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	f040 808f 	bne.w	8003bfe <isRightFull+0x1b6>
			if (Orientation == 1){
 8003ae0:	883b      	ldrh	r3, [r7, #0]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d11e      	bne.n	8003b24 <isRightFull+0xdc>
				if (LCD_Screen[Ypos-1][Xpos+1] == 1){
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	1e5a      	subs	r2, r3, #1
 8003aea:	88bb      	ldrh	r3, [r7, #4]
 8003aec:	1c59      	adds	r1, r3, #1
 8003aee:	4877      	ldr	r0, [pc, #476]	@ (8003ccc <isRightFull+0x284>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <isRightFull+0xbe>
					return 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e275      	b.n	8003ff2 <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	88bb      	ldrh	r3, [r7, #4]
 8003b0a:	1cd9      	adds	r1, r3, #3
 8003b0c:	486f      	ldr	r0, [pc, #444]	@ (8003ccc <isRightFull+0x284>)
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <isRightFull+0xdc>
					return 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e266      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2){
 8003b24:	883b      	ldrh	r3, [r7, #0]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d129      	bne.n	8003b7e <isRightFull+0x136>
				for (int i = Ypos; i < Ypos+2; i++){
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	e011      	b.n	8003b54 <isRightFull+0x10c>
					if (LCD_Screen[i][Xpos+1] == 1){
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	4865      	ldr	r0, [pc, #404]	@ (8003ccc <isRightFull+0x284>)
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <isRightFull+0x106>
						return 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e251      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos; i < Ypos+2; i++){
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	3301      	adds	r3, #1
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	3301      	adds	r3, #1
 8003b58:	6a3a      	ldr	r2, [r7, #32]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	dde8      	ble.n	8003b30 <isRightFull+0xe8>
					}
				}
				if (LCD_Screen[Ypos-1][Xpos+2] == 1){
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	88bb      	ldrh	r3, [r7, #4]
 8003b64:	1c99      	adds	r1, r3, #2
 8003b66:	4859      	ldr	r0, [pc, #356]	@ (8003ccc <isRightFull+0x284>)
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <isRightFull+0x136>
					return 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e239      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 3){
 8003b7e:	883b      	ldrh	r3, [r7, #0]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d11e      	bne.n	8003bc2 <isRightFull+0x17a>
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 8003b84:	887a      	ldrh	r2, [r7, #2]
 8003b86:	88bb      	ldrh	r3, [r7, #4]
 8003b88:	1cd9      	adds	r1, r3, #3
 8003b8a:	4850      	ldr	r0, [pc, #320]	@ (8003ccc <isRightFull+0x284>)
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <isRightFull+0x15a>
					return 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e227      	b.n	8003ff2 <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos+1][Xpos+3] == 1){
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	88bb      	ldrh	r3, [r7, #4]
 8003ba8:	1cd9      	adds	r1, r3, #3
 8003baa:	4848      	ldr	r0, [pc, #288]	@ (8003ccc <isRightFull+0x284>)
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <isRightFull+0x17a>
					return 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e217      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 4){
 8003bc2:	883b      	ldrh	r3, [r7, #0]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d11a      	bne.n	8003bfe <isRightFull+0x1b6>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 8003bc8:	887b      	ldrh	r3, [r7, #2]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e011      	b.n	8003bf4 <isRightFull+0x1ac>
					if (LCD_Screen[i][Xpos+2] == 1){
 8003bd0:	88bb      	ldrh	r3, [r7, #4]
 8003bd2:	1c99      	adds	r1, r3, #2
 8003bd4:	483d      	ldr	r0, [pc, #244]	@ (8003ccc <isRightFull+0x284>)
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <isRightFull+0x1a6>
						return 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e201      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	887b      	ldrh	r3, [r7, #2]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	dde8      	ble.n	8003bd0 <isRightFull+0x188>
					}
				}
			}
		}

		if (BlockNum == 3){
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	f040 8093 	bne.w	8003d2c <isRightFull+0x2e4>
			if (Orientation == 1){
 8003c06:	883b      	ldrh	r3, [r7, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d11e      	bne.n	8003c4a <isRightFull+0x202>
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	88bb      	ldrh	r3, [r7, #4]
 8003c10:	1cd9      	adds	r1, r3, #3
 8003c12:	482e      	ldr	r0, [pc, #184]	@ (8003ccc <isRightFull+0x284>)
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <isRightFull+0x1e2>
					return 0;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e1e3      	b.n	8003ff2 <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos-1][Xpos+3] == 1){
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	88bb      	ldrh	r3, [r7, #4]
 8003c30:	1cd9      	adds	r1, r3, #3
 8003c32:	4826      	ldr	r0, [pc, #152]	@ (8003ccc <isRightFull+0x284>)
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <isRightFull+0x202>
					return 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e1d3      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2){
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d129      	bne.n	8003ca4 <isRightFull+0x25c>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e011      	b.n	8003c7c <isRightFull+0x234>
					if (LCD_Screen[i][Xpos+1] == 1){
 8003c58:	88bb      	ldrh	r3, [r7, #4]
 8003c5a:	1c59      	adds	r1, r3, #1
 8003c5c:	481b      	ldr	r0, [pc, #108]	@ (8003ccc <isRightFull+0x284>)
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <isRightFull+0x22e>
						return 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e1bd      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	887b      	ldrh	r3, [r7, #2]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	dde9      	ble.n	8003c58 <isRightFull+0x210>
					}
				}
				if (LCD_Screen[Ypos+1][Xpos+2] == 1){
 8003c84:	887b      	ldrh	r3, [r7, #2]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	88bb      	ldrh	r3, [r7, #4]
 8003c8a:	1c99      	adds	r1, r3, #2
 8003c8c:	480f      	ldr	r0, [pc, #60]	@ (8003ccc <isRightFull+0x284>)
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <isRightFull+0x25c>
					return 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e1a6      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 3){
 8003ca4:	883b      	ldrh	r3, [r7, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d122      	bne.n	8003cf0 <isRightFull+0x2a8>
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	88bb      	ldrh	r3, [r7, #4]
 8003cae:	1cd9      	adds	r1, r3, #3
 8003cb0:	4806      	ldr	r0, [pc, #24]	@ (8003ccc <isRightFull+0x284>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <isRightFull+0x288>
					return 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e194      	b.n	8003ff2 <isRightFull+0x5aa>
 8003cc8:	20000660 	.word	0x20000660
 8003ccc:	2000030c 	.word	0x2000030c
				}
				if (LCD_Screen[Ypos+1][Xpos+1] == 1){
 8003cd0:	887b      	ldrh	r3, [r7, #2]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	88bb      	ldrh	r3, [r7, #4]
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	4895      	ldr	r0, [pc, #596]	@ (8003f30 <isRightFull+0x4e8>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <isRightFull+0x2a8>
					return 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e180      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 4){
 8003cf0:	883b      	ldrh	r3, [r7, #0]
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d11a      	bne.n	8003d2c <isRightFull+0x2e4>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e011      	b.n	8003d22 <isRightFull+0x2da>
					if (LCD_Screen[i][Xpos+2] == 1){
 8003cfe:	88bb      	ldrh	r3, [r7, #4]
 8003d00:	1c99      	adds	r1, r3, #2
 8003d02:	488b      	ldr	r0, [pc, #556]	@ (8003f30 <isRightFull+0x4e8>)
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <isRightFull+0x2d4>
						return 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e16a      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	887b      	ldrh	r3, [r7, #2]
 8003d24:	3301      	adds	r3, #1
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	dde8      	ble.n	8003cfe <isRightFull+0x2b6>
					}
				}
			}
		}

		if (BlockNum == 4){
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d11e      	bne.n	8003d70 <isRightFull+0x328>
			if (LCD_Screen[Ypos][Xpos+2] == 1){
 8003d32:	887a      	ldrh	r2, [r7, #2]
 8003d34:	88bb      	ldrh	r3, [r7, #4]
 8003d36:	1c99      	adds	r1, r3, #2
 8003d38:	487d      	ldr	r0, [pc, #500]	@ (8003f30 <isRightFull+0x4e8>)
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <isRightFull+0x308>
				return 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e150      	b.n	8003ff2 <isRightFull+0x5aa>
			}
			if (LCD_Screen[Ypos-1][Xpos+2] == 1){
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	1e5a      	subs	r2, r3, #1
 8003d54:	88bb      	ldrh	r3, [r7, #4]
 8003d56:	1c99      	adds	r1, r3, #2
 8003d58:	4875      	ldr	r0, [pc, #468]	@ (8003f30 <isRightFull+0x4e8>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <isRightFull+0x328>
				return 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e140      	b.n	8003ff2 <isRightFull+0x5aa>
			}
		}

		if (BlockNum == 5){
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	2b05      	cmp	r3, #5
 8003d74:	d154      	bne.n	8003e20 <isRightFull+0x3d8>
			if (Orientation == 1 || Orientation == 3){
 8003d76:	883b      	ldrh	r3, [r7, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d002      	beq.n	8003d82 <isRightFull+0x33a>
 8003d7c:	883b      	ldrh	r3, [r7, #0]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d11e      	bne.n	8003dc0 <isRightFull+0x378>
				if (LCD_Screen[Ypos-1][Xpos+3] == 1){
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	88bb      	ldrh	r3, [r7, #4]
 8003d88:	1cd9      	adds	r1, r3, #3
 8003d8a:	4869      	ldr	r0, [pc, #420]	@ (8003f30 <isRightFull+0x4e8>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <isRightFull+0x35a>
					return 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e127      	b.n	8003ff2 <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos][Xpos+2] == 1){
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	88bb      	ldrh	r3, [r7, #4]
 8003da6:	1c99      	adds	r1, r3, #2
 8003da8:	4861      	ldr	r0, [pc, #388]	@ (8003f30 <isRightFull+0x4e8>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <isRightFull+0x378>
					return 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e118      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003dc0:	883b      	ldrh	r3, [r7, #0]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d002      	beq.n	8003dcc <isRightFull+0x384>
 8003dc6:	883b      	ldrh	r3, [r7, #0]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d129      	bne.n	8003e20 <isRightFull+0x3d8>
				for (int i = Ypos; i < Ypos+2; i++){
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	e011      	b.n	8003df6 <isRightFull+0x3ae>
					if (LCD_Screen[i][Xpos+2] == 1){
 8003dd2:	88bb      	ldrh	r3, [r7, #4]
 8003dd4:	1c99      	adds	r1, r3, #2
 8003dd6:	4856      	ldr	r0, [pc, #344]	@ (8003f30 <isRightFull+0x4e8>)
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <isRightFull+0x3a8>
						return 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e100      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos; i < Ypos+2; i++){
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3301      	adds	r3, #1
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	dde8      	ble.n	8003dd2 <isRightFull+0x38a>
					}
				}
				if (LCD_Screen[Ypos-1][Xpos+1] == 1){
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	1e5a      	subs	r2, r3, #1
 8003e04:	88bb      	ldrh	r3, [r7, #4]
 8003e06:	1c59      	adds	r1, r3, #1
 8003e08:	4849      	ldr	r0, [pc, #292]	@ (8003f30 <isRightFull+0x4e8>)
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <isRightFull+0x3d8>
					return 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e0e8      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
		}

		if (BlockNum == 6){
 8003e20:	88fb      	ldrh	r3, [r7, #6]
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	f040 808e 	bne.w	8003f44 <isRightFull+0x4fc>
			if (Orientation == 1){
 8003e28:	883b      	ldrh	r3, [r7, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d11c      	bne.n	8003e68 <isRightFull+0x420>
				if (LCD_Screen[Ypos][Xpos+3] == 1 || LCD_Screen[Ypos-1][Xpos+2] == 1){
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	1cd9      	adds	r1, r3, #3
 8003e34:	483e      	ldr	r0, [pc, #248]	@ (8003f30 <isRightFull+0x4e8>)
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d00d      	beq.n	8003e64 <isRightFull+0x41c>
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	1e5a      	subs	r2, r3, #1
 8003e4c:	88bb      	ldrh	r3, [r7, #4]
 8003e4e:	1c99      	adds	r1, r3, #2
 8003e50:	4837      	ldr	r0, [pc, #220]	@ (8003f30 <isRightFull+0x4e8>)
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <isRightFull+0x420>
					return 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e0c4      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2){
 8003e68:	883b      	ldrh	r3, [r7, #0]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d12a      	bne.n	8003ec4 <isRightFull+0x47c>
				if (LCD_Screen[Ypos-1][Xpos+2] == 1 || LCD_Screen[Ypos][Xpos+3] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1){
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	88bb      	ldrh	r3, [r7, #4]
 8003e74:	1c99      	adds	r1, r3, #2
 8003e76:	482e      	ldr	r0, [pc, #184]	@ (8003f30 <isRightFull+0x4e8>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d01a      	beq.n	8003ec0 <isRightFull+0x478>
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	88bb      	ldrh	r3, [r7, #4]
 8003e8e:	1cd9      	adds	r1, r3, #3
 8003e90:	4827      	ldr	r0, [pc, #156]	@ (8003f30 <isRightFull+0x4e8>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d00d      	beq.n	8003ec0 <isRightFull+0x478>
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	88bb      	ldrh	r3, [r7, #4]
 8003eaa:	1c99      	adds	r1, r3, #2
 8003eac:	4820      	ldr	r0, [pc, #128]	@ (8003f30 <isRightFull+0x4e8>)
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <isRightFull+0x47c>
					return 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e096      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 3){
 8003ec4:	883b      	ldrh	r3, [r7, #0]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d11c      	bne.n	8003f04 <isRightFull+0x4bc>
				if (LCD_Screen[Ypos][Xpos+3] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1){
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	88bb      	ldrh	r3, [r7, #4]
 8003ece:	1cd9      	adds	r1, r3, #3
 8003ed0:	4817      	ldr	r0, [pc, #92]	@ (8003f30 <isRightFull+0x4e8>)
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d00d      	beq.n	8003f00 <isRightFull+0x4b8>
 8003ee4:	887b      	ldrh	r3, [r7, #2]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	88bb      	ldrh	r3, [r7, #4]
 8003eea:	1c99      	adds	r1, r3, #2
 8003eec:	4810      	ldr	r0, [pc, #64]	@ (8003f30 <isRightFull+0x4e8>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <isRightFull+0x4bc>
					return 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e076      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 4){
 8003f04:	883b      	ldrh	r3, [r7, #0]
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d11c      	bne.n	8003f44 <isRightFull+0x4fc>
				for (int i = Ypos-1; i < Ypos+2; i++){
 8003f0a:	887b      	ldrh	r3, [r7, #2]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e013      	b.n	8003f3a <isRightFull+0x4f2>
					if (LCD_Screen[i][Xpos+2] == 1){
 8003f12:	88bb      	ldrh	r3, [r7, #4]
 8003f14:	1c99      	adds	r1, r3, #2
 8003f16:	4806      	ldr	r0, [pc, #24]	@ (8003f30 <isRightFull+0x4e8>)
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d103      	bne.n	8003f34 <isRightFull+0x4ec>
						return 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e060      	b.n	8003ff2 <isRightFull+0x5aa>
 8003f30:	2000030c 	.word	0x2000030c
				for (int i = Ypos-1; i < Ypos+2; i++){
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	dde6      	ble.n	8003f12 <isRightFull+0x4ca>
					}
				}
			}
		}

		if (BlockNum == 7){
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	d152      	bne.n	8003ff0 <isRightFull+0x5a8>
			if (Orientation == 1 || Orientation == 3){
 8003f4a:	883b      	ldrh	r3, [r7, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d002      	beq.n	8003f56 <isRightFull+0x50e>
 8003f50:	883b      	ldrh	r3, [r7, #0]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d11c      	bne.n	8003f90 <isRightFull+0x548>
				if (LCD_Screen[Ypos-1][Xpos+2] == 1 || LCD_Screen[Ypos][Xpos+3] == 1){
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	1e5a      	subs	r2, r3, #1
 8003f5a:	88bb      	ldrh	r3, [r7, #4]
 8003f5c:	1c99      	adds	r1, r3, #2
 8003f5e:	4828      	ldr	r0, [pc, #160]	@ (8004000 <isRightFull+0x5b8>)
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d00c      	beq.n	8003f8c <isRightFull+0x544>
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	88bb      	ldrh	r3, [r7, #4]
 8003f76:	1cd9      	adds	r1, r3, #3
 8003f78:	4821      	ldr	r0, [pc, #132]	@ (8004000 <isRightFull+0x5b8>)
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <isRightFull+0x548>
					return 0;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e030      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003f90:	883b      	ldrh	r3, [r7, #0]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d002      	beq.n	8003f9c <isRightFull+0x554>
 8003f96:	883b      	ldrh	r3, [r7, #0]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d129      	bne.n	8003ff0 <isRightFull+0x5a8>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	e011      	b.n	8003fc8 <isRightFull+0x580>
					if (LCD_Screen[i][Xpos+2] == 1){
 8003fa4:	88bb      	ldrh	r3, [r7, #4]
 8003fa6:	1c99      	adds	r1, r3, #2
 8003fa8:	4815      	ldr	r0, [pc, #84]	@ (8004000 <isRightFull+0x5b8>)
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <isRightFull+0x57a>
						return 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e017      	b.n	8003ff2 <isRightFull+0x5aa>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	887b      	ldrh	r3, [r7, #2]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	dde9      	ble.n	8003fa4 <isRightFull+0x55c>
					}
				}
				if (LCD_Screen[Ypos+1][Xpos+1] == 1){
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	88bb      	ldrh	r3, [r7, #4]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	4809      	ldr	r0, [pc, #36]	@ (8004000 <isRightFull+0x5b8>)
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <isRightFull+0x5a8>
					return 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	e000      	b.n	8003ff2 <isRightFull+0x5aa>
				}
			}
		}
		return 1;
 8003ff0:	2301      	movs	r3, #1
//	}
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	372c      	adds	r7, #44	@ 0x2c
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2000030c 	.word	0x2000030c

08004004 <canMoveRight>:

// Function to determine if block can move right if right is not full & Xpos is small enough depending on block
int canMoveRight(){
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 800400a:	4b37      	ldr	r3, [pc, #220]	@ (80040e8 <canMoveRight+0xe4>)
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8004010:	4b35      	ldr	r3, [pc, #212]	@ (80040e8 <canMoveRight+0xe4>)
 8004012:	885b      	ldrh	r3, [r3, #2]
 8004014:	80bb      	strh	r3, [r7, #4]
//	uint16_t Ypos = CurrentBlock[2];
	uint16_t Orientation = CurrentBlock[3];
 8004016:	4b34      	ldr	r3, [pc, #208]	@ (80040e8 <canMoveRight+0xe4>)
 8004018:	88db      	ldrh	r3, [r3, #6]
 800401a:	807b      	strh	r3, [r7, #2]

	if (isRightFull() == 1){
 800401c:	f7ff fd14 	bl	8003a48 <isRightFull>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d15b      	bne.n	80040de <canMoveRight+0xda>
		if (BlockNum == 1){
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d115      	bne.n	8004058 <canMoveRight+0x54>
			if (Orientation == 1 || Orientation == 3){
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d002      	beq.n	8004038 <canMoveRight+0x34>
 8004032:	887b      	ldrh	r3, [r7, #2]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d104      	bne.n	8004042 <canMoveRight+0x3e>
				if (Xpos < 8){
 8004038:	88bb      	ldrh	r3, [r7, #4]
 800403a:	2b07      	cmp	r3, #7
 800403c:	d801      	bhi.n	8004042 <canMoveRight+0x3e>
						return 1;
 800403e:	2301      	movs	r3, #1
 8004040:	e04e      	b.n	80040e0 <canMoveRight+0xdc>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d002      	beq.n	800404e <canMoveRight+0x4a>
 8004048:	887b      	ldrh	r3, [r7, #2]
 800404a:	2b04      	cmp	r3, #4
 800404c:	d104      	bne.n	8004058 <canMoveRight+0x54>
				if (Xpos < 11){
 800404e:	88bb      	ldrh	r3, [r7, #4]
 8004050:	2b0a      	cmp	r3, #10
 8004052:	d801      	bhi.n	8004058 <canMoveRight+0x54>
						return 1;
 8004054:	2301      	movs	r3, #1
 8004056:	e043      	b.n	80040e0 <canMoveRight+0xdc>
				}
			}
		}
		if (BlockNum == 2 || BlockNum == 3){
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d002      	beq.n	8004064 <canMoveRight+0x60>
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d115      	bne.n	8004090 <canMoveRight+0x8c>
			if (Orientation == 1 || Orientation == 3){
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d002      	beq.n	8004070 <canMoveRight+0x6c>
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d104      	bne.n	800407a <canMoveRight+0x76>
				if (Xpos < 9){
 8004070:	88bb      	ldrh	r3, [r7, #4]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d801      	bhi.n	800407a <canMoveRight+0x76>
					return 1;
 8004076:	2301      	movs	r3, #1
 8004078:	e032      	b.n	80040e0 <canMoveRight+0xdc>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 800407a:	887b      	ldrh	r3, [r7, #2]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d002      	beq.n	8004086 <canMoveRight+0x82>
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	2b04      	cmp	r3, #4
 8004084:	d104      	bne.n	8004090 <canMoveRight+0x8c>
				if (Xpos < 10){
 8004086:	88bb      	ldrh	r3, [r7, #4]
 8004088:	2b09      	cmp	r3, #9
 800408a:	d801      	bhi.n	8004090 <canMoveRight+0x8c>
					return 1;
 800408c:	2301      	movs	r3, #1
 800408e:	e027      	b.n	80040e0 <canMoveRight+0xdc>
				}
			}
		}
		if (BlockNum == 4){
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d104      	bne.n	80040a0 <canMoveRight+0x9c>
			if (Xpos < 10){
 8004096:	88bb      	ldrh	r3, [r7, #4]
 8004098:	2b09      	cmp	r3, #9
 800409a:	d801      	bhi.n	80040a0 <canMoveRight+0x9c>
				return 1;
 800409c:	2301      	movs	r3, #1
 800409e:	e01f      	b.n	80040e0 <canMoveRight+0xdc>
	//	if (BlockNum == 5){
	//		if (Xpos < 10){
	//			return 1;
	//		}
	//	}
		if (BlockNum == 5 || BlockNum == 6 || BlockNum == 7){
 80040a0:	88fb      	ldrh	r3, [r7, #6]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d005      	beq.n	80040b2 <canMoveRight+0xae>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b06      	cmp	r3, #6
 80040aa:	d002      	beq.n	80040b2 <canMoveRight+0xae>
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	2b07      	cmp	r3, #7
 80040b0:	d115      	bne.n	80040de <canMoveRight+0xda>
			if (Orientation == 1 || Orientation == 3){
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d002      	beq.n	80040be <canMoveRight+0xba>
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d104      	bne.n	80040c8 <canMoveRight+0xc4>
				if (Xpos < 9){
 80040be:	88bb      	ldrh	r3, [r7, #4]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d801      	bhi.n	80040c8 <canMoveRight+0xc4>
					return 1;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e00b      	b.n	80040e0 <canMoveRight+0xdc>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d002      	beq.n	80040d4 <canMoveRight+0xd0>
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d104      	bne.n	80040de <canMoveRight+0xda>
				if (Xpos < 10){
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	2b09      	cmp	r3, #9
 80040d8:	d801      	bhi.n	80040de <canMoveRight+0xda>
					return 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <canMoveRight+0xdc>
				}
			}
		}

	}
	return 0;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000660 	.word	0x20000660

080040ec <isFull>:

// Function to check if space below block is full or if it can move down
int isFull(){
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 80040f2:	4ba2      	ldr	r3, [pc, #648]	@ (800437c <isFull+0x290>)
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 80040f8:	4ba0      	ldr	r3, [pc, #640]	@ (800437c <isFull+0x290>)
 80040fa:	885b      	ldrh	r3, [r3, #2]
 80040fc:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 80040fe:	4b9f      	ldr	r3, [pc, #636]	@ (800437c <isFull+0x290>)
 8004100:	889b      	ldrh	r3, [r3, #4]
 8004102:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8004104:	4b9d      	ldr	r3, [pc, #628]	@ (800437c <isFull+0x290>)
 8004106:	88db      	ldrh	r3, [r3, #6]
 8004108:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d136      	bne.n	800417e <isFull+0x92>
		if (Orientation == 1 || Orientation == 3){
 8004110:	883b      	ldrh	r3, [r7, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d002      	beq.n	800411c <isFull+0x30>
 8004116:	883b      	ldrh	r3, [r7, #0]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d119      	bne.n	8004150 <isFull+0x64>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 800411c:	88bb      	ldrh	r3, [r7, #4]
 800411e:	81fb      	strh	r3, [r7, #14]
 8004120:	e011      	b.n	8004146 <isFull+0x5a>
				if (LCD_Screen[Ypos+1][i] == 1){
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	89f9      	ldrh	r1, [r7, #14]
 8004128:	4895      	ldr	r0, [pc, #596]	@ (8004380 <isFull+0x294>)
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <isFull+0x54>
					return 0;
 800413c:	2300      	movs	r3, #0
 800413e:	e2a9      	b.n	8004694 <isFull+0x5a8>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	3301      	adds	r3, #1
 8004144:	81fb      	strh	r3, [r7, #14]
 8004146:	88bb      	ldrh	r3, [r7, #4]
 8004148:	1cda      	adds	r2, r3, #3
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	429a      	cmp	r2, r3
 800414e:	dae8      	bge.n	8004122 <isFull+0x36>
				}
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8004150:	883b      	ldrh	r3, [r7, #0]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d002      	beq.n	800415c <isFull+0x70>
 8004156:	883b      	ldrh	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d10e      	bne.n	800417a <isFull+0x8e>
			if (LCD_Screen[Ypos+3][Xpos] == 1){
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	1cda      	adds	r2, r3, #3
 8004160:	88b9      	ldrh	r1, [r7, #4]
 8004162:	4887      	ldr	r0, [pc, #540]	@ (8004380 <isFull+0x294>)
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <isFull+0x8e>
				return 0;
 8004176:	2300      	movs	r3, #0
 8004178:	e28c      	b.n	8004694 <isFull+0x5a8>
			}
		}
		return 1;
 800417a:	2301      	movs	r3, #1
 800417c:	e28a      	b.n	8004694 <isFull+0x5a8>
	}

	if (BlockNum == 2){
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	2b02      	cmp	r3, #2
 8004182:	f040 808c 	bne.w	800429e <isFull+0x1b2>
		if (Orientation == 1){
 8004186:	883b      	ldrh	r3, [r7, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d119      	bne.n	80041c0 <isFull+0xd4>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 800418c:	88bb      	ldrh	r3, [r7, #4]
 800418e:	81bb      	strh	r3, [r7, #12]
 8004190:	e011      	b.n	80041b6 <isFull+0xca>
				if (LCD_Screen[Ypos+1][i] == 1)
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	89b9      	ldrh	r1, [r7, #12]
 8004198:	4879      	ldr	r0, [pc, #484]	@ (8004380 <isFull+0x294>)
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d101      	bne.n	80041b0 <isFull+0xc4>
				{
					return 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e271      	b.n	8004694 <isFull+0x5a8>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 80041b0:	89bb      	ldrh	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	81bb      	strh	r3, [r7, #12]
 80041b6:	88bb      	ldrh	r3, [r7, #4]
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	89bb      	ldrh	r3, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	dae8      	bge.n	8004192 <isFull+0xa6>
				}
			}
		}
		if (Orientation == 2){
 80041c0:	883b      	ldrh	r3, [r7, #0]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d11b      	bne.n	80041fe <isFull+0x112>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos][Xpos+1] == 1){
 80041c6:	887b      	ldrh	r3, [r7, #2]
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	88b9      	ldrh	r1, [r7, #4]
 80041cc:	486c      	ldr	r0, [pc, #432]	@ (8004380 <isFull+0x294>)
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d00c      	beq.n	80041fa <isFull+0x10e>
 80041e0:	887a      	ldrh	r2, [r7, #2]
 80041e2:	88bb      	ldrh	r3, [r7, #4]
 80041e4:	1c59      	adds	r1, r3, #1
 80041e6:	4866      	ldr	r0, [pc, #408]	@ (8004380 <isFull+0x294>)
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <isFull+0x112>
				return 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e24a      	b.n	8004694 <isFull+0x5a8>
			}
		}
		if (Orientation == 3){
 80041fe:	883b      	ldrh	r3, [r7, #0]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d12a      	bne.n	800425a <isFull+0x16e>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+2][Xpos+2] == 1) {
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	88b9      	ldrh	r1, [r7, #4]
 800420a:	485d      	ldr	r0, [pc, #372]	@ (8004380 <isFull+0x294>)
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d01b      	beq.n	8004256 <isFull+0x16a>
 800421e:	887b      	ldrh	r3, [r7, #2]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	88bb      	ldrh	r3, [r7, #4]
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	4856      	ldr	r0, [pc, #344]	@ (8004380 <isFull+0x294>)
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d00d      	beq.n	8004256 <isFull+0x16a>
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	88bb      	ldrh	r3, [r7, #4]
 8004240:	1c99      	adds	r1, r3, #2
 8004242:	484f      	ldr	r0, [pc, #316]	@ (8004380 <isFull+0x294>)
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <isFull+0x16e>
				return 0;
 8004256:	2300      	movs	r3, #0
 8004258:	e21c      	b.n	8004694 <isFull+0x5a8>
			}
		}
		if (Orientation == 4){
 800425a:	883b      	ldrh	r3, [r7, #0]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d11c      	bne.n	800429a <isFull+0x1ae>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1){
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	1c9a      	adds	r2, r3, #2
 8004264:	88b9      	ldrh	r1, [r7, #4]
 8004266:	4846      	ldr	r0, [pc, #280]	@ (8004380 <isFull+0x294>)
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d00d      	beq.n	8004296 <isFull+0x1aa>
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	88bb      	ldrh	r3, [r7, #4]
 8004280:	1c59      	adds	r1, r3, #1
 8004282:	483f      	ldr	r0, [pc, #252]	@ (8004380 <isFull+0x294>)
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <isFull+0x1ae>
				return 0;
 8004296:	2300      	movs	r3, #0
 8004298:	e1fc      	b.n	8004694 <isFull+0x5a8>
			}
		}
		return 1;
 800429a:	2301      	movs	r3, #1
 800429c:	e1fa      	b.n	8004694 <isFull+0x5a8>
	}

	if (BlockNum == 3){
 800429e:	88fb      	ldrh	r3, [r7, #6]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	f040 8090 	bne.w	80043c6 <isFull+0x2da>
		if (Orientation == 1){
 80042a6:	883b      	ldrh	r3, [r7, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d119      	bne.n	80042e0 <isFull+0x1f4>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 80042ac:	88bb      	ldrh	r3, [r7, #4]
 80042ae:	817b      	strh	r3, [r7, #10]
 80042b0:	e011      	b.n	80042d6 <isFull+0x1ea>
				if (LCD_Screen[Ypos+1][i] == 1)
 80042b2:	887b      	ldrh	r3, [r7, #2]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	8979      	ldrh	r1, [r7, #10]
 80042b8:	4831      	ldr	r0, [pc, #196]	@ (8004380 <isFull+0x294>)
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <isFull+0x1e4>
				{
					return 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e1e1      	b.n	8004694 <isFull+0x5a8>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 80042d0:	897b      	ldrh	r3, [r7, #10]
 80042d2:	3301      	adds	r3, #1
 80042d4:	817b      	strh	r3, [r7, #10]
 80042d6:	88bb      	ldrh	r3, [r7, #4]
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	429a      	cmp	r2, r3
 80042de:	dae8      	bge.n	80042b2 <isFull+0x1c6>
				}
			}
		}
		if (Orientation == 2){
 80042e0:	883b      	ldrh	r3, [r7, #0]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d11c      	bne.n	8004320 <isFull+0x234>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1){
 80042e6:	887b      	ldrh	r3, [r7, #2]
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	88b9      	ldrh	r1, [r7, #4]
 80042ec:	4824      	ldr	r0, [pc, #144]	@ (8004380 <isFull+0x294>)
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d00d      	beq.n	800431c <isFull+0x230>
 8004300:	887b      	ldrh	r3, [r7, #2]
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	88bb      	ldrh	r3, [r7, #4]
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	481d      	ldr	r0, [pc, #116]	@ (8004380 <isFull+0x294>)
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <isFull+0x234>
				return 0;
 800431c:	2300      	movs	r3, #0
 800431e:	e1b9      	b.n	8004694 <isFull+0x5a8>
			}
		}
		if (Orientation == 3){
 8004320:	883b      	ldrh	r3, [r7, #0]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d12e      	bne.n	8004384 <isFull+0x298>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1) {
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	88b9      	ldrh	r1, [r7, #4]
 800432c:	4814      	ldr	r0, [pc, #80]	@ (8004380 <isFull+0x294>)
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d01b      	beq.n	8004378 <isFull+0x28c>
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	88bb      	ldrh	r3, [r7, #4]
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	480d      	ldr	r0, [pc, #52]	@ (8004380 <isFull+0x294>)
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d00d      	beq.n	8004378 <isFull+0x28c>
 800435c:	887b      	ldrh	r3, [r7, #2]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	88bb      	ldrh	r3, [r7, #4]
 8004362:	1c99      	adds	r1, r3, #2
 8004364:	4806      	ldr	r0, [pc, #24]	@ (8004380 <isFull+0x294>)
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <isFull+0x298>
				return 0;
 8004378:	2300      	movs	r3, #0
 800437a:	e18b      	b.n	8004694 <isFull+0x5a8>
 800437c:	20000660 	.word	0x20000660
 8004380:	2000030c 	.word	0x2000030c
			}
		}
		if (Orientation == 4){
 8004384:	883b      	ldrh	r3, [r7, #0]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d11b      	bne.n	80043c2 <isFull+0x2d6>
			if (LCD_Screen[Ypos][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1) {
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	88b9      	ldrh	r1, [r7, #4]
 800438e:	48ad      	ldr	r0, [pc, #692]	@ (8004644 <isFull+0x558>)
 8004390:	4613      	mov	r3, r2
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d00d      	beq.n	80043be <isFull+0x2d2>
 80043a2:	887b      	ldrh	r3, [r7, #2]
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	88bb      	ldrh	r3, [r7, #4]
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	48a6      	ldr	r0, [pc, #664]	@ (8004644 <isFull+0x558>)
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <isFull+0x2d6>
				return 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	e168      	b.n	8004694 <isFull+0x5a8>
			}
		}
		return 1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e166      	b.n	8004694 <isFull+0x5a8>
	}

	if (BlockNum == 4){
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11e      	bne.n	800440a <isFull+0x31e>
		if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	88b9      	ldrh	r1, [r7, #4]
 80043d2:	489c      	ldr	r0, [pc, #624]	@ (8004644 <isFull+0x558>)
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d00d      	beq.n	8004402 <isFull+0x316>
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	4895      	ldr	r0, [pc, #596]	@ (8004644 <isFull+0x558>)
 80043f0:	4613      	mov	r3, r2
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <isFull+0x31a>
			return 0;
 8004402:	2300      	movs	r3, #0
 8004404:	e146      	b.n	8004694 <isFull+0x5a8>
		}
		return 1;
 8004406:	2301      	movs	r3, #1
 8004408:	e144      	b.n	8004694 <isFull+0x5a8>
	}

	if (BlockNum == 5){
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d154      	bne.n	80044ba <isFull+0x3ce>
		if (Orientation == 1 || Orientation == 3){
 8004410:	883b      	ldrh	r3, [r7, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d002      	beq.n	800441c <isFull+0x330>
 8004416:	883b      	ldrh	r3, [r7, #0]
 8004418:	2b03      	cmp	r3, #3
 800441a:	d129      	bne.n	8004470 <isFull+0x384>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos][Xpos+2] == 1) {
 800441c:	887b      	ldrh	r3, [r7, #2]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	88b9      	ldrh	r1, [r7, #4]
 8004422:	4888      	ldr	r0, [pc, #544]	@ (8004644 <isFull+0x558>)
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d01a      	beq.n	800446c <isFull+0x380>
 8004436:	887b      	ldrh	r3, [r7, #2]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	88bb      	ldrh	r3, [r7, #4]
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	4881      	ldr	r0, [pc, #516]	@ (8004644 <isFull+0x558>)
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d00c      	beq.n	800446c <isFull+0x380>
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	88bb      	ldrh	r3, [r7, #4]
 8004456:	1c99      	adds	r1, r3, #2
 8004458:	487a      	ldr	r0, [pc, #488]	@ (8004644 <isFull+0x558>)
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <isFull+0x384>
				return 0;
 800446c:	2300      	movs	r3, #0
 800446e:	e111      	b.n	8004694 <isFull+0x5a8>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8004470:	883b      	ldrh	r3, [r7, #0]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d002      	beq.n	800447c <isFull+0x390>
 8004476:	883b      	ldrh	r3, [r7, #0]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d11c      	bne.n	80044b6 <isFull+0x3ca>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1) {
 800447c:	887b      	ldrh	r3, [r7, #2]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	88b9      	ldrh	r1, [r7, #4]
 8004482:	4870      	ldr	r0, [pc, #448]	@ (8004644 <isFull+0x558>)
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00d      	beq.n	80044b2 <isFull+0x3c6>
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	1c9a      	adds	r2, r3, #2
 800449a:	88bb      	ldrh	r3, [r7, #4]
 800449c:	1c59      	adds	r1, r3, #1
 800449e:	4869      	ldr	r0, [pc, #420]	@ (8004644 <isFull+0x558>)
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <isFull+0x3ca>
				return 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e0ee      	b.n	8004694 <isFull+0x5a8>
			}
		}
		return 1;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0ec      	b.n	8004694 <isFull+0x5a8>
	}

	if (BlockNum == 6){
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	2b06      	cmp	r3, #6
 80044be:	f040 808d 	bne.w	80045dc <isFull+0x4f0>
		if (Orientation == 1){
 80044c2:	883b      	ldrh	r3, [r7, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d119      	bne.n	80044fc <isFull+0x410>
			for (uint16_t i = Xpos; i < Xpos+3; i++){
 80044c8:	88bb      	ldrh	r3, [r7, #4]
 80044ca:	813b      	strh	r3, [r7, #8]
 80044cc:	e011      	b.n	80044f2 <isFull+0x406>
				if (LCD_Screen[Ypos+1][i] == 1){
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	8939      	ldrh	r1, [r7, #8]
 80044d4:	485b      	ldr	r0, [pc, #364]	@ (8004644 <isFull+0x558>)
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <isFull+0x400>
					return 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e0d3      	b.n	8004694 <isFull+0x5a8>
			for (uint16_t i = Xpos; i < Xpos+3; i++){
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	3301      	adds	r3, #1
 80044f0:	813b      	strh	r3, [r7, #8]
 80044f2:	88bb      	ldrh	r3, [r7, #4]
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	893b      	ldrh	r3, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	dae8      	bge.n	80044ce <isFull+0x3e2>
				}
			}
		}
		if (Orientation == 2){
 80044fc:	883b      	ldrh	r3, [r7, #0]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d11c      	bne.n	800453c <isFull+0x450>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1){
 8004502:	887b      	ldrh	r3, [r7, #2]
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	88b9      	ldrh	r1, [r7, #4]
 8004508:	484e      	ldr	r0, [pc, #312]	@ (8004644 <isFull+0x558>)
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d00d      	beq.n	8004538 <isFull+0x44c>
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	88bb      	ldrh	r3, [r7, #4]
 8004522:	1c59      	adds	r1, r3, #1
 8004524:	4847      	ldr	r0, [pc, #284]	@ (8004644 <isFull+0x558>)
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <isFull+0x450>
				return 0;
 8004538:	2300      	movs	r3, #0
 800453a:	e0ab      	b.n	8004694 <isFull+0x5a8>
			}
		}
		if (Orientation == 3){
 800453c:	883b      	ldrh	r3, [r7, #0]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d12a      	bne.n	8004598 <isFull+0x4ac>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1){
 8004542:	887b      	ldrh	r3, [r7, #2]
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	88b9      	ldrh	r1, [r7, #4]
 8004548:	483e      	ldr	r0, [pc, #248]	@ (8004644 <isFull+0x558>)
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d01b      	beq.n	8004594 <isFull+0x4a8>
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	1c9a      	adds	r2, r3, #2
 8004560:	88bb      	ldrh	r3, [r7, #4]
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	4837      	ldr	r0, [pc, #220]	@ (8004644 <isFull+0x558>)
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d00d      	beq.n	8004594 <isFull+0x4a8>
 8004578:	887b      	ldrh	r3, [r7, #2]
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	88bb      	ldrh	r3, [r7, #4]
 800457e:	1c99      	adds	r1, r3, #2
 8004580:	4830      	ldr	r0, [pc, #192]	@ (8004644 <isFull+0x558>)
 8004582:	4613      	mov	r3, r2
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <isFull+0x4ac>
				return 0;
 8004594:	2300      	movs	r3, #0
 8004596:	e07d      	b.n	8004694 <isFull+0x5a8>
			}
		}
		if (Orientation == 4){
 8004598:	883b      	ldrh	r3, [r7, #0]
 800459a:	2b04      	cmp	r3, #4
 800459c:	d11c      	bne.n	80045d8 <isFull+0x4ec>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1){
 800459e:	887b      	ldrh	r3, [r7, #2]
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	88b9      	ldrh	r1, [r7, #4]
 80045a4:	4827      	ldr	r0, [pc, #156]	@ (8004644 <isFull+0x558>)
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d00d      	beq.n	80045d4 <isFull+0x4e8>
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	1c9a      	adds	r2, r3, #2
 80045bc:	88bb      	ldrh	r3, [r7, #4]
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	4820      	ldr	r0, [pc, #128]	@ (8004644 <isFull+0x558>)
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <isFull+0x4ec>
				return 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	e05d      	b.n	8004694 <isFull+0x5a8>
			}
		}
		return 1;
 80045d8:	2301      	movs	r3, #1
 80045da:	e05b      	b.n	8004694 <isFull+0x5a8>
	}

	if (BlockNum == 7){
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	2b07      	cmp	r3, #7
 80045e0:	d157      	bne.n	8004692 <isFull+0x5a6>
		if (Orientation == 1 || Orientation == 3){
 80045e2:	883b      	ldrh	r3, [r7, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d002      	beq.n	80045ee <isFull+0x502>
 80045e8:	883b      	ldrh	r3, [r7, #0]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d12c      	bne.n	8004648 <isFull+0x55c>
			if (LCD_Screen[Ypos][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1) {
 80045ee:	887a      	ldrh	r2, [r7, #2]
 80045f0:	88b9      	ldrh	r1, [r7, #4]
 80045f2:	4814      	ldr	r0, [pc, #80]	@ (8004644 <isFull+0x558>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d01b      	beq.n	800463e <isFull+0x552>
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	88bb      	ldrh	r3, [r7, #4]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	480d      	ldr	r0, [pc, #52]	@ (8004644 <isFull+0x558>)
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d00d      	beq.n	800463e <isFull+0x552>
 8004622:	887b      	ldrh	r3, [r7, #2]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	88bb      	ldrh	r3, [r7, #4]
 8004628:	1c99      	adds	r1, r3, #2
 800462a:	4806      	ldr	r0, [pc, #24]	@ (8004644 <isFull+0x558>)
 800462c:	4613      	mov	r3, r2
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d104      	bne.n	8004648 <isFull+0x55c>
				return 0;
 800463e:	2300      	movs	r3, #0
 8004640:	e028      	b.n	8004694 <isFull+0x5a8>
 8004642:	bf00      	nop
 8004644:	2000030c 	.word	0x2000030c
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8004648:	883b      	ldrh	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d002      	beq.n	8004654 <isFull+0x568>
 800464e:	883b      	ldrh	r3, [r7, #0]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d11c      	bne.n	800468e <isFull+0x5a2>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	88b9      	ldrh	r1, [r7, #4]
 800465a:	4811      	ldr	r0, [pc, #68]	@ (80046a0 <isFull+0x5b4>)
 800465c:	4613      	mov	r3, r2
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d00d      	beq.n	800468a <isFull+0x59e>
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	88bb      	ldrh	r3, [r7, #4]
 8004674:	1c59      	adds	r1, r3, #1
 8004676:	480a      	ldr	r0, [pc, #40]	@ (80046a0 <isFull+0x5b4>)
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <isFull+0x5a2>
				return 0;
 800468a:	2300      	movs	r3, #0
 800468c:	e002      	b.n	8004694 <isFull+0x5a8>
			}
		}
		return 1;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <isFull+0x5a8>
	}
	return 1;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	2000030c 	.word	0x2000030c

080046a4 <addSecond>:

// Function to increase a counter for seconds
void addSecond(){
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
	gameTime += 1;
 80046a8:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <addSecond+0x1c>)
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	4b03      	ldr	r3, [pc, #12]	@ (80046c0 <addSecond+0x1c>)
 80046b2:	801a      	strh	r2, [r3, #0]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000650 	.word	0x20000650

080046c4 <updateTop>:

// Function to update the highest_row array
int updateTop(){
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
//	uint16_t BlockNum = CurrentBlock[0];
//	uint16_t Xpos = CurrentBlock[1];
	uint16_t Ypos = CurrentBlock[2];
 80046ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <updateTop+0x80>)
 80046cc:	889b      	ldrh	r3, [r3, #4]
 80046ce:	807b      	strh	r3, [r7, #2]
//	uint16_t Orientation = CurrentBlock[3];
	int Highest_Row = 14;
 80046d0:	230e      	movs	r3, #14
 80046d2:	60fb      	str	r3, [r7, #12]

	for (int i = Ypos-2; i < 15; i++){
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	3b02      	subs	r3, #2
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	e029      	b.n	8004730 <updateTop+0x6c>
		for (int j = 0; j < 12; j++){
 80046dc:	2300      	movs	r3, #0
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	e020      	b.n	8004724 <updateTop+0x60>
			if (LCD_Screen[i][j] == 1){
 80046e2:	4919      	ldr	r1, [pc, #100]	@ (8004748 <updateTop+0x84>)
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d111      	bne.n	800471e <updateTop+0x5a>
				if (i < topRow[j]){
 80046fa:	4a14      	ldr	r2, [pc, #80]	@ (800474c <updateTop+0x88>)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	da0a      	bge.n	800471e <updateTop+0x5a>
					topRow[j] = i;
 8004708:	4910      	ldr	r1, [pc, #64]	@ (800474c <updateTop+0x88>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (i < Highest_Row){
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	429a      	cmp	r2, r3
 8004718:	da01      	bge.n	800471e <updateTop+0x5a>
						Highest_Row = i;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < 12; j++){
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3301      	adds	r3, #1
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b0b      	cmp	r3, #11
 8004728:	dddb      	ble.n	80046e2 <updateTop+0x1e>
	for (int i = Ypos-2; i < 15; i++){
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3301      	adds	r3, #1
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b0e      	cmp	r3, #14
 8004734:	ddd2      	ble.n	80046dc <updateTop+0x18>
					}
				}
			}
		}
	}
	return Highest_Row;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	20000660 	.word	0x20000660
 8004748:	2000030c 	.word	0x2000030c
 800474c:	2000060c 	.word	0x2000060c

08004750 <checkForTetris>:

// Function to check if a row is complete, and if so remove it and count how many lines have been moved
void checkForTetris(int Highest_Row){
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	@ 0x38
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	int rowComplete = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	637b      	str	r3, [r7, #52]	@ 0x34
	int consecutive = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	633b      	str	r3, [r7, #48]	@ 0x30
	int count = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int completeRows[4] = {0};
 8004764:	f107 0308 	add.w	r3, r7, #8
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	609a      	str	r2, [r3, #8]
 8004770:	60da      	str	r2, [r3, #12]
	int arrCount = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	62bb      	str	r3, [r7, #40]	@ 0x28
//			if (topRow[i] < Highest_Row){
//				Highest_Row = topRow[i];
//			}
//		}

	for (int i = 14; i >= (Highest_Row-1); i--){
 8004776:	230e      	movs	r3, #14
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
 800477a:	e070      	b.n	800485e <checkForTetris+0x10e>
		for (int j = 0; j < 12; j++){
 800477c:	2300      	movs	r3, #0
 800477e:	623b      	str	r3, [r7, #32]
 8004780:	e020      	b.n	80047c4 <checkForTetris+0x74>
			// Check if all elements are full
			if (LCD_Screen[i][j] == 1){
 8004782:	4949      	ldr	r1, [pc, #292]	@ (80048a8 <checkForTetris+0x158>)
 8004784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	4413      	add	r3, r2
 8004792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d102      	bne.n	80047a0 <checkForTetris+0x50>
				 rowComplete = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	637b      	str	r3, [r7, #52]	@ 0x34
 800479e:	e00e      	b.n	80047be <checkForTetris+0x6e>
			}
			else if (LCD_Screen[i][j] != 1){
 80047a0:	4941      	ldr	r1, [pc, #260]	@ (80048a8 <checkForTetris+0x158>)
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	4613      	mov	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	6a3a      	ldr	r2, [r7, #32]
 80047ae:	4413      	add	r3, r2
 80047b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d002      	beq.n	80047be <checkForTetris+0x6e>
				rowComplete = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 80047bc:	e005      	b.n	80047ca <checkForTetris+0x7a>
		for (int j = 0; j < 12; j++){
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	3301      	adds	r3, #1
 80047c2:	623b      	str	r3, [r7, #32]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	2b0b      	cmp	r3, #11
 80047c8:	dddb      	ble.n	8004782 <checkForTetris+0x32>
			}
		}

		// if there is a full row, add one to counter and check to see if consecutive
		if (rowComplete == 1)
 80047ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d119      	bne.n	8004804 <checkForTetris+0xb4>
		{
			completeRows[arrCount] = i;
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	3338      	adds	r3, #56	@ 0x38
 80047d6:	443b      	add	r3, r7
 80047d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047da:	f843 2c30 	str.w	r2, [r3, #-48]
			arrCount += 1;
 80047de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e0:	3301      	adds	r3, #1
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (consecutive == 1)
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d103      	bne.n	80047f2 <checkForTetris+0xa2>
			{
//				shiftRowDown(rowNum);
				count += 1;
 80047ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ec:	3301      	adds	r3, #1
 80047ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047f0:	e032      	b.n	8004858 <checkForTetris+0x108>
			}
			else if (consecutive == 0){
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d12f      	bne.n	8004858 <checkForTetris+0x108>
//				shiftRowDown(rowNum);
				count += 1;
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	3301      	adds	r3, #1
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
				consecutive = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	633b      	str	r3, [r7, #48]	@ 0x30
 8004802:	e029      	b.n	8004858 <checkForTetris+0x108>
			}
		}
		// Once you have an incomplete row, check the value of count and this tells you how many lines were cleared in a row
		else if(rowComplete == 0){
 8004804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004806:	2b00      	cmp	r3, #0
 8004808:	d126      	bne.n	8004858 <checkForTetris+0x108>
			if (consecutive == 1){
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	d123      	bne.n	8004858 <checkForTetris+0x108>
				if (count == 1){
 8004810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d104      	bne.n	8004820 <checkForTetris+0xd0>
					result[1] += 1;
 8004816:	4b25      	ldr	r3, [pc, #148]	@ (80048ac <checkForTetris+0x15c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	3301      	adds	r3, #1
 800481c:	4a23      	ldr	r2, [pc, #140]	@ (80048ac <checkForTetris+0x15c>)
 800481e:	6053      	str	r3, [r2, #4]
				}
				if (count == 2){
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	2b02      	cmp	r3, #2
 8004824:	d104      	bne.n	8004830 <checkForTetris+0xe0>
					result[2] += 1;
 8004826:	4b21      	ldr	r3, [pc, #132]	@ (80048ac <checkForTetris+0x15c>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	3301      	adds	r3, #1
 800482c:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <checkForTetris+0x15c>)
 800482e:	6093      	str	r3, [r2, #8]
				}
				if (count == 3){
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	2b03      	cmp	r3, #3
 8004834:	d104      	bne.n	8004840 <checkForTetris+0xf0>
					result[3] += 1;
 8004836:	4b1d      	ldr	r3, [pc, #116]	@ (80048ac <checkForTetris+0x15c>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	3301      	adds	r3, #1
 800483c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ac <checkForTetris+0x15c>)
 800483e:	60d3      	str	r3, [r2, #12]
				}
				if (count == 4){
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	2b04      	cmp	r3, #4
 8004844:	d104      	bne.n	8004850 <checkForTetris+0x100>
					result[4] += 1;
 8004846:	4b19      	ldr	r3, [pc, #100]	@ (80048ac <checkForTetris+0x15c>)
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	3301      	adds	r3, #1
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <checkForTetris+0x15c>)
 800484e:	6113      	str	r3, [r2, #16]
				}
				consecutive = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	633b      	str	r3, [r7, #48]	@ 0x30
				count = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 14; i >= (Highest_Row-1); i--){
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	3b01      	subs	r3, #1
 800485c:	627b      	str	r3, [r7, #36]	@ 0x24
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3b01      	subs	r3, #1
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	429a      	cmp	r2, r3
 8004866:	da89      	bge.n	800477c <checkForTetris+0x2c>
			}
		}
}
	// Erase and shift down the rows that were found to have been complete
	int shiftedCount = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
	for (int k = 0; k < arrCount; k++){
 800486c:	2300      	movs	r3, #0
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e010      	b.n	8004894 <checkForTetris+0x144>
		shiftRowDown((completeRows[k]+shiftedCount));
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	3338      	adds	r3, #56	@ 0x38
 8004878:	443b      	add	r3, r7
 800487a:	f853 2c30 	ldr.w	r2, [r3, #-48]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f814 	bl	80048b0 <shiftRowDown>
		shiftedCount += 1;
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
	for (int k = 0; k < arrCount; k++){
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	3301      	adds	r3, #1
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	429a      	cmp	r2, r3
 800489a:	dbea      	blt.n	8004872 <checkForTetris+0x122>
	}

}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3738      	adds	r7, #56	@ 0x38
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000030c 	.word	0x2000030c
 80048ac:	2000063c 	.word	0x2000063c

080048b0 <shiftRowDown>:

// Once a row is complete, we erase that row and shift the remaining rows down
void shiftRowDown(int rowNum){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	int Highest_Row = 14;
 80048b8:	230e      	movs	r3, #14
 80048ba:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 12; i++){
 80048bc:	2300      	movs	r3, #0
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	e00e      	b.n	80048e0 <shiftRowDown+0x30>
		if (topRow[i] < Highest_Row){
 80048c2:	4a32      	ldr	r2, [pc, #200]	@ (800498c <shiftRowDown+0xdc>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	dd04      	ble.n	80048da <shiftRowDown+0x2a>
			Highest_Row = topRow[i];
 80048d0:	4a2e      	ldr	r2, [pc, #184]	@ (800498c <shiftRowDown+0xdc>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d8:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 12; i++){
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3301      	adds	r3, #1
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b0b      	cmp	r3, #11
 80048e4:	dded      	ble.n	80048c2 <shiftRowDown+0x12>
		}
	}

	for (int j = rowNum; j >= Highest_Row; j--){
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e045      	b.n	8004978 <shiftRowDown+0xc8>
		for (int k = 0; k < 12; k++){
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	e03c      	b.n	800496c <shiftRowDown+0xbc>
			uint16_t Above_Value = Obj_Color[j-1][k];
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	4926      	ldr	r1, [pc, #152]	@ (8004990 <shiftRowDown+0xe0>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004908:	81fb      	strh	r3, [r7, #14]
			if (Above_Value == LCD_COLOR_BLACK){
 800490a:	89fb      	ldrh	r3, [r7, #14]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <shiftRowDown+0x66>
				Above_Value = GameScreenColor;
 8004910:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <shiftRowDown+0xe4>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	81fb      	strh	r3, [r7, #14]
			}
			LCD_Screen[j][k] = LCD_Screen[j-1][k];
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	1e5a      	subs	r2, r3, #1
 800491a:	491f      	ldr	r1, [pc, #124]	@ (8004998 <shiftRowDown+0xe8>)
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800492c:	481a      	ldr	r0, [pc, #104]	@ (8004998 <shiftRowDown+0xe8>)
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			Obj_Color[j][k] = Above_Value;
 8004940:	4913      	ldr	r1, [pc, #76]	@ (8004990 <shiftRowDown+0xe0>)
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	89fa      	ldrh	r2, [r7, #14]
 8004952:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(k,j,Above_Value);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	b29b      	uxth	r3, r3
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	b291      	uxth	r1, r2
 800495e:	89fa      	ldrh	r2, [r7, #14]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc f927 	bl	8000bb4 <LCD_Draw_Square_Fill_Border>
		for (int k = 0; k < 12; k++){
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	3301      	adds	r3, #1
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b0b      	cmp	r3, #11
 8004970:	ddbf      	ble.n	80048f2 <shiftRowDown+0x42>
	for (int j = rowNum; j >= Highest_Row; j--){
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3b01      	subs	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	429a      	cmp	r2, r3
 800497e:	dab5      	bge.n	80048ec <shiftRowDown+0x3c>
//	for (int l = 0; l < 12; l++){
//		LCD_Screen[Highest_Row][l] = 0;
//		Obj_Color[Highest_Row][l] = 0;
//		LCD_Erase_Square(l,Highest_Row);
//	}
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	2000060c 	.word	0x2000060c
 8004990:	2000018c 	.word	0x2000018c
 8004994:	20000002 	.word	0x20000002
 8004998:	2000030c 	.word	0x2000030c

0800499c <moveBlockDown>:

// Function to change block Ypos and move it down
void moveBlockDown(){
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
	  eraseCurrentBlock();
 80049a0:	f7fe fcbc 	bl	800331c <eraseCurrentBlock>
	  updateYpos();
 80049a4:	f7fe fd30 	bl	8003408 <updateYpos>
	  drawCurrentBlock();
 80049a8:	f7fe fc64 	bl	8003274 <drawCurrentBlock>
}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <moveBlockLeft>:

// Function to change block Xpos and move it left
void moveBlockLeft(){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
	eraseCurrentBlock();
 80049b4:	f7fe fcb2 	bl	800331c <eraseCurrentBlock>
	updateXpos(1);
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7fe fd37 	bl	800342c <updateXpos>
	drawCurrentBlock();
 80049be:	f7fe fc59 	bl	8003274 <drawCurrentBlock>
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <moveBlockRight>:

// Function to change block Xpos and move it right
void moveBlockRight(){
 80049c6:	b580      	push	{r7, lr}
 80049c8:	af00      	add	r7, sp, #0
	eraseCurrentBlock();
 80049ca:	f7fe fca7 	bl	800331c <eraseCurrentBlock>
	updateXpos(2);
 80049ce:	2002      	movs	r0, #2
 80049d0:	f7fe fd2c 	bl	800342c <updateXpos>
	drawCurrentBlock();
 80049d4:	f7fe fc4e 	bl	8003274 <drawCurrentBlock>
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}

080049dc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049e0:	b672      	cpsid	i
}
 80049e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <LCD_Error_Handler+0x8>

080049e8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80049ec:	f000 ff68 	bl	80058c0 <STMPE811_Init>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d001      	beq.n	80049fa <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80049f6:	bf00      	nop
 80049f8:	e7fd      	b.n	80049f6 <InitializeLCDTouch+0xe>
  }
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}

080049fe <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 f844 	bl	8005a94 <STMPE811_DetermineTouchPosition>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f814 	bl	8005a4e <STMPE811_Read>
 8004a26:	4603      	mov	r3, r0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	460a      	mov	r2, r1
 8004a3a:	71fb      	strb	r3, [r7, #7]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8004a40:	79ba      	ldrb	r2, [r7, #6]
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 f812 	bl	8005a70 <STMPE811_Write>
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <RNG_Init>:
#include <RNG.h>

RNG_HandleTypeDef RNG_Config;

// Initialize the RNG
void RNG_Init(){
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <RNG_Init+0x40>)
 8004a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a62:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <RNG_Init+0x40>)
 8004a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a68:	6353      	str	r3, [r2, #52]	@ 0x34
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <RNG_Init+0x40>)
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
	RNG_Config.Instance = RNG;
 8004a76:	4b08      	ldr	r3, [pc, #32]	@ (8004a98 <RNG_Init+0x44>)
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <RNG_Init+0x48>)
 8004a7a:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&RNG_Config) != HAL_OK){
 8004a7c:	4806      	ldr	r0, [pc, #24]	@ (8004a98 <RNG_Init+0x44>)
 8004a7e:	f004 f95d 	bl	8008d3c <HAL_RNG_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <RNG_Init+0x38>
		for (;;);
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <RNG_Init+0x34>
	}
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	20025e68 	.word	0x20025e68
 8004a9c:	50060800 	.word	0x50060800

08004aa0 <GetRandomBlock>:

// Return a random block between 1-7
uint32_t GetRandomBlock(){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
	uint32_t random_num = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
	random_num = HAL_RNG_GetRandomNumber(&RNG_Config);
 8004aaa:	480b      	ldr	r0, [pc, #44]	@ (8004ad8 <GetRandomBlock+0x38>)
 8004aac:	f004 f9c6 	bl	8008e3c <HAL_RNG_GetRandomNumber>
 8004ab0:	6078      	str	r0, [r7, #4]
	random_num = (random_num % 7) + 1;
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <GetRandomBlock+0x3c>)
 8004ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aba:	1aca      	subs	r2, r1, r3
 8004abc:	0852      	lsrs	r2, r2, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	089a      	lsrs	r2, r3, #2
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	1aca      	subs	r2, r1, r3
 8004aca:	1c53      	adds	r3, r2, #1
 8004acc:	607b      	str	r3, [r7, #4]
	return random_num;
 8004ace:	687b      	ldr	r3, [r7, #4]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20025e68 	.word	0x20025e68
 8004adc:	24924925 	.word	0x24924925

08004ae0 <getScheduledEvents>:
#include <Scheduler.h>

static uint32_t scheduledEvents;

// Returns the scheduled events
uint32_t getScheduledEvents(){
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <getScheduledEvents+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20025e78 	.word	0x20025e78

08004af8 <addSchedulerEvent>:

// Adds an event to be scheduled
void addSchedulerEvent(uint32_t event){
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <addSchedulerEvent+0x20>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	4a03      	ldr	r2, [pc, #12]	@ (8004b18 <addSchedulerEvent+0x20>)
 8004b0a:	6013      	str	r3, [r2, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	20025e78 	.word	0x20025e78

08004b1c <removeSchedulerEvent>:

// Removes event to be scheduled
void removeSchedulerEvent(uint32_t event){
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(event);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <removeSchedulerEvent+0x24>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	4a04      	ldr	r2, [pc, #16]	@ (8004b40 <removeSchedulerEvent+0x24>)
 8004b30:	6013      	str	r3, [r2, #0]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20025e78 	.word	0x20025e78

08004b44 <timer3Init>:

TIM_HandleTypeDef TIM3_Config;
TIM_HandleTypeDef TIM5_Config;

// Timer to drop blocks
void timer3Init(){
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb8 <timer3Init+0x74>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	4a19      	ldr	r2, [pc, #100]	@ (8004bb8 <timer3Init+0x74>)
 8004b54:	f043 0302 	orr.w	r3, r3, #2
 8004b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b5a:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <timer3Init+0x74>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]

	TIM3_Config.Instance = TIM3;
 8004b66:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <timer3Init+0x78>)
 8004b68:	4a15      	ldr	r2, [pc, #84]	@ (8004bc0 <timer3Init+0x7c>)
 8004b6a:	601a      	str	r2, [r3, #0]
	TIM3_Config.Init.Prescaler =  1400; // 4150 for 3sec drop or 1400 for 1sec drop
 8004b6c:	4b13      	ldr	r3, [pc, #76]	@ (8004bbc <timer3Init+0x78>)
 8004b6e:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8004b72:	605a      	str	r2, [r3, #4]
	TIM3_Config.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b74:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <timer3Init+0x78>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
	TIM3_Config.Init.Period = (65536-1);
 8004b7a:	4b10      	ldr	r3, [pc, #64]	@ (8004bbc <timer3Init+0x78>)
 8004b7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b80:	60da      	str	r2, [r3, #12]
	TIM3_Config.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b82:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <timer3Init+0x78>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
	TIM3_Config.Init.RepetitionCounter = 0;
 8004b88:	4b0c      	ldr	r3, [pc, #48]	@ (8004bbc <timer3Init+0x78>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	615a      	str	r2, [r3, #20]

	if (HAL_TIM_Base_Init(&TIM3_Config) != HAL_OK) {
 8004b8e:	480b      	ldr	r0, [pc, #44]	@ (8004bbc <timer3Init+0x78>)
 8004b90:	f004 fc48 	bl	8009424 <HAL_TIM_Base_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <timer3Init+0x5a>
	        // Initialization Error
	        while(1);
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <timer3Init+0x56>
	    }

	HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2103      	movs	r1, #3
 8004ba2:	201d      	movs	r0, #29
 8004ba4:	f001 fc7f 	bl	80064a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ba8:	201d      	movs	r0, #29
 8004baa:	f001 fc98 	bl	80064de <HAL_NVIC_EnableIRQ>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	20025e7c 	.word	0x20025e7c
 8004bc0:	40000400 	.word	0x40000400

08004bc4 <TIM3_Start>:

void TIM3_Start(){
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&TIM3_Config);
 8004bc8:	4802      	ldr	r0, [pc, #8]	@ (8004bd4 <TIM3_Start+0x10>)
 8004bca:	f004 fc7b 	bl	80094c4 <HAL_TIM_Base_Start_IT>
}
 8004bce:	bf00      	nop
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20025e7c 	.word	0x20025e7c

08004bd8 <timer5Init>:
 *
 * 0.15238 = (1001)(12488)/Pclk
 */

// Timer set to 1s to keep track of game time
void timer5Init(){
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM5_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c4c <timer5Init+0x74>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be6:	4a19      	ldr	r2, [pc, #100]	@ (8004c4c <timer5Init+0x74>)
 8004be8:	f043 0308 	orr.w	r3, r3, #8
 8004bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bee:	4b17      	ldr	r3, [pc, #92]	@ (8004c4c <timer5Init+0x74>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]

	TIM5_Config.Instance = TIM5;
 8004bfa:	4b15      	ldr	r3, [pc, #84]	@ (8004c50 <timer5Init+0x78>)
 8004bfc:	4a15      	ldr	r2, [pc, #84]	@ (8004c54 <timer5Init+0x7c>)
 8004bfe:	601a      	str	r2, [r3, #0]
	TIM5_Config.Init.Prescaler = 12488;
 8004c00:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <timer5Init+0x78>)
 8004c02:	f243 02c8 	movw	r2, #12488	@ 0x30c8
 8004c06:	605a      	str	r2, [r3, #4]
	TIM5_Config.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c08:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <timer5Init+0x78>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	609a      	str	r2, [r3, #8]
	TIM5_Config.Init.Period = (6563-1);
 8004c0e:	4b10      	ldr	r3, [pc, #64]	@ (8004c50 <timer5Init+0x78>)
 8004c10:	f641 12a2 	movw	r2, #6562	@ 0x19a2
 8004c14:	60da      	str	r2, [r3, #12]
	TIM5_Config.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c16:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <timer5Init+0x78>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	611a      	str	r2, [r3, #16]
	TIM5_Config.Init.RepetitionCounter = 0;
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <timer5Init+0x78>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	615a      	str	r2, [r3, #20]

	if (HAL_TIM_Base_Init(&TIM5_Config) != HAL_OK) {
 8004c22:	480b      	ldr	r0, [pc, #44]	@ (8004c50 <timer5Init+0x78>)
 8004c24:	f004 fbfe 	bl	8009424 <HAL_TIM_Base_Init>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <timer5Init+0x5a>
	        // Initialization Error
	        while(1);
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <timer5Init+0x56>
	    }

	HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004c32:	2200      	movs	r2, #0
 8004c34:	2100      	movs	r1, #0
 8004c36:	2032      	movs	r0, #50	@ 0x32
 8004c38:	f001 fc35 	bl	80064a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004c3c:	2032      	movs	r0, #50	@ 0x32
 8004c3e:	f001 fc4e 	bl	80064de <HAL_NVIC_EnableIRQ>
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	20025ec4 	.word	0x20025ec4
 8004c54:	40000c00 	.word	0x40000c00

08004c58 <TIM5_Start>:

void TIM5_Start(){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&TIM5_Config);
 8004c5c:	4802      	ldr	r0, [pc, #8]	@ (8004c68 <TIM5_Start+0x10>)
 8004c5e:	f004 fc31 	bl	80094c4 <HAL_TIM_Base_Start_IT>
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20025ec4 	.word	0x20025ec4

08004c6c <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8004c70:	f000 f9fe 	bl	8005070 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8004c74:	20ca      	movs	r0, #202	@ 0xca
 8004c76:	f000 f943 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8004c7a:	20c3      	movs	r0, #195	@ 0xc3
 8004c7c:	f000 f94d 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8004c80:	2008      	movs	r0, #8
 8004c82:	f000 f94a 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8004c86:	2050      	movs	r0, #80	@ 0x50
 8004c88:	f000 f947 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8004c8c:	20cf      	movs	r0, #207	@ 0xcf
 8004c8e:	f000 f937 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8004c92:	2000      	movs	r0, #0
 8004c94:	f000 f941 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8004c98:	20c1      	movs	r0, #193	@ 0xc1
 8004c9a:	f000 f93e 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8004c9e:	2030      	movs	r0, #48	@ 0x30
 8004ca0:	f000 f93b 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8004ca4:	20ed      	movs	r0, #237	@ 0xed
 8004ca6:	f000 f92b 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8004caa:	2064      	movs	r0, #100	@ 0x64
 8004cac:	f000 f935 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8004cb0:	2003      	movs	r0, #3
 8004cb2:	f000 f932 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8004cb6:	2012      	movs	r0, #18
 8004cb8:	f000 f92f 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8004cbc:	2081      	movs	r0, #129	@ 0x81
 8004cbe:	f000 f92c 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8004cc2:	20e8      	movs	r0, #232	@ 0xe8
 8004cc4:	f000 f91c 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8004cc8:	2085      	movs	r0, #133	@ 0x85
 8004cca:	f000 f926 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f000 f923 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8004cd4:	2078      	movs	r0, #120	@ 0x78
 8004cd6:	f000 f920 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8004cda:	20cb      	movs	r0, #203	@ 0xcb
 8004cdc:	f000 f910 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8004ce0:	2039      	movs	r0, #57	@ 0x39
 8004ce2:	f000 f91a 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8004ce6:	202c      	movs	r0, #44	@ 0x2c
 8004ce8:	f000 f917 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004cec:	2000      	movs	r0, #0
 8004cee:	f000 f914 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8004cf2:	2034      	movs	r0, #52	@ 0x34
 8004cf4:	f000 f911 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8004cf8:	2002      	movs	r0, #2
 8004cfa:	f000 f90e 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8004cfe:	20f7      	movs	r0, #247	@ 0xf7
 8004d00:	f000 f8fe 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8004d04:	2020      	movs	r0, #32
 8004d06:	f000 f908 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8004d0a:	20ea      	movs	r0, #234	@ 0xea
 8004d0c:	f000 f8f8 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004d10:	2000      	movs	r0, #0
 8004d12:	f000 f902 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f000 f8ff 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8004d1c:	20b1      	movs	r0, #177	@ 0xb1
 8004d1e:	f000 f8ef 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004d22:	2000      	movs	r0, #0
 8004d24:	f000 f8f9 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8004d28:	201b      	movs	r0, #27
 8004d2a:	f000 f8f6 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8004d2e:	20b6      	movs	r0, #182	@ 0xb6
 8004d30:	f000 f8e6 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8004d34:	200a      	movs	r0, #10
 8004d36:	f000 f8f0 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8004d3a:	20a2      	movs	r0, #162	@ 0xa2
 8004d3c:	f000 f8ed 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8004d40:	20c0      	movs	r0, #192	@ 0xc0
 8004d42:	f000 f8dd 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8004d46:	2010      	movs	r0, #16
 8004d48:	f000 f8e7 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8004d4c:	20c1      	movs	r0, #193	@ 0xc1
 8004d4e:	f000 f8d7 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8004d52:	2010      	movs	r0, #16
 8004d54:	f000 f8e1 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8004d58:	20c5      	movs	r0, #197	@ 0xc5
 8004d5a:	f000 f8d1 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8004d5e:	2045      	movs	r0, #69	@ 0x45
 8004d60:	f000 f8db 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8004d64:	2015      	movs	r0, #21
 8004d66:	f000 f8d8 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8004d6a:	20c7      	movs	r0, #199	@ 0xc7
 8004d6c:	f000 f8c8 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8004d70:	2090      	movs	r0, #144	@ 0x90
 8004d72:	f000 f8d2 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8004d76:	2036      	movs	r0, #54	@ 0x36
 8004d78:	f000 f8c2 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8004d7c:	20c8      	movs	r0, #200	@ 0xc8
 8004d7e:	f000 f8cc 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8004d82:	20f2      	movs	r0, #242	@ 0xf2
 8004d84:	f000 f8bc 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004d88:	2000      	movs	r0, #0
 8004d8a:	f000 f8c6 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8004d8e:	20b0      	movs	r0, #176	@ 0xb0
 8004d90:	f000 f8b6 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8004d94:	20c2      	movs	r0, #194	@ 0xc2
 8004d96:	f000 f8c0 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8004d9a:	20b6      	movs	r0, #182	@ 0xb6
 8004d9c:	f000 f8b0 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8004da0:	200a      	movs	r0, #10
 8004da2:	f000 f8ba 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8004da6:	20a7      	movs	r0, #167	@ 0xa7
 8004da8:	f000 f8b7 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8004dac:	2027      	movs	r0, #39	@ 0x27
 8004dae:	f000 f8b4 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8004db2:	2004      	movs	r0, #4
 8004db4:	f000 f8b1 	bl	8004f1a <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8004db8:	202a      	movs	r0, #42	@ 0x2a
 8004dba:	f000 f8a1 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f000 f8ab 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f000 f8a8 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f000 f8a5 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8004dd0:	20ef      	movs	r0, #239	@ 0xef
 8004dd2:	f000 f8a2 	bl	8004f1a <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8004dd6:	202b      	movs	r0, #43	@ 0x2b
 8004dd8:	f000 f892 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f000 f89c 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004de2:	2000      	movs	r0, #0
 8004de4:	f000 f899 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8004de8:	2001      	movs	r0, #1
 8004dea:	f000 f896 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8004dee:	203f      	movs	r0, #63	@ 0x3f
 8004df0:	f000 f893 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8004df4:	20f6      	movs	r0, #246	@ 0xf6
 8004df6:	f000 f883 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f000 f88d 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004e00:	2000      	movs	r0, #0
 8004e02:	f000 f88a 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8004e06:	2006      	movs	r0, #6
 8004e08:	f000 f887 	bl	8004f1a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8004e0c:	202c      	movs	r0, #44	@ 0x2c
 8004e0e:	f000 f877 	bl	8004f00 <ili9341_Write_Reg>
  LCD_Delay(200);
 8004e12:	20c8      	movs	r0, #200	@ 0xc8
 8004e14:	f000 f9e8 	bl	80051e8 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8004e18:	2026      	movs	r0, #38	@ 0x26
 8004e1a:	f000 f871 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8004e1e:	2001      	movs	r0, #1
 8004e20:	f000 f87b 	bl	8004f1a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8004e24:	20e0      	movs	r0, #224	@ 0xe0
 8004e26:	f000 f86b 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8004e2a:	200f      	movs	r0, #15
 8004e2c:	f000 f875 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8004e30:	2029      	movs	r0, #41	@ 0x29
 8004e32:	f000 f872 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8004e36:	2024      	movs	r0, #36	@ 0x24
 8004e38:	f000 f86f 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8004e3c:	200c      	movs	r0, #12
 8004e3e:	f000 f86c 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8004e42:	200e      	movs	r0, #14
 8004e44:	f000 f869 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8004e48:	2009      	movs	r0, #9
 8004e4a:	f000 f866 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8004e4e:	204e      	movs	r0, #78	@ 0x4e
 8004e50:	f000 f863 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8004e54:	2078      	movs	r0, #120	@ 0x78
 8004e56:	f000 f860 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8004e5a:	203c      	movs	r0, #60	@ 0x3c
 8004e5c:	f000 f85d 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8004e60:	2009      	movs	r0, #9
 8004e62:	f000 f85a 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8004e66:	2013      	movs	r0, #19
 8004e68:	f000 f857 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8004e6c:	2005      	movs	r0, #5
 8004e6e:	f000 f854 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8004e72:	2017      	movs	r0, #23
 8004e74:	f000 f851 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8004e78:	2011      	movs	r0, #17
 8004e7a:	f000 f84e 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f000 f84b 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8004e84:	20e1      	movs	r0, #225	@ 0xe1
 8004e86:	f000 f83b 	bl	8004f00 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f000 f845 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8004e90:	2016      	movs	r0, #22
 8004e92:	f000 f842 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8004e96:	201b      	movs	r0, #27
 8004e98:	f000 f83f 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8004e9c:	2004      	movs	r0, #4
 8004e9e:	f000 f83c 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8004ea2:	2011      	movs	r0, #17
 8004ea4:	f000 f839 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8004ea8:	2007      	movs	r0, #7
 8004eaa:	f000 f836 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8004eae:	2031      	movs	r0, #49	@ 0x31
 8004eb0:	f000 f833 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8004eb4:	2033      	movs	r0, #51	@ 0x33
 8004eb6:	f000 f830 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8004eba:	2042      	movs	r0, #66	@ 0x42
 8004ebc:	f000 f82d 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8004ec0:	2005      	movs	r0, #5
 8004ec2:	f000 f82a 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8004ec6:	200c      	movs	r0, #12
 8004ec8:	f000 f827 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8004ecc:	200a      	movs	r0, #10
 8004ece:	f000 f824 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8004ed2:	2028      	movs	r0, #40	@ 0x28
 8004ed4:	f000 f821 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8004ed8:	202f      	movs	r0, #47	@ 0x2f
 8004eda:	f000 f81e 	bl	8004f1a <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8004ede:	200f      	movs	r0, #15
 8004ee0:	f000 f81b 	bl	8004f1a <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8004ee4:	2011      	movs	r0, #17
 8004ee6:	f000 f80b 	bl	8004f00 <ili9341_Write_Reg>
  LCD_Delay(200);
 8004eea:	20c8      	movs	r0, #200	@ 0xc8
 8004eec:	f000 f97c 	bl	80051e8 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8004ef0:	2029      	movs	r0, #41	@ 0x29
 8004ef2:	f000 f805 	bl	8004f00 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8004ef6:	202c      	movs	r0, #44	@ 0x2c
 8004ef8:	f000 f802 	bl	8004f00 <ili9341_Write_Reg>
}
 8004efc:	bf00      	nop
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 f949 	bl	80051a4 <LCD_IO_WriteReg>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4603      	mov	r3, r0
 8004f22:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8004f24:	88fb      	ldrh	r3, [r7, #6]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f91a 	bl	8005160 <LCD_IO_WriteData>
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8004f38:	4819      	ldr	r0, [pc, #100]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f3a:	f004 f989 	bl	8009250 <HAL_SPI_GetState>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12b      	bne.n	8004f9c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8004f44:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f46:	4a17      	ldr	r2, [pc, #92]	@ (8004fa4 <SPI_Init+0x70>)
 8004f48:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004f4a:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f4c:	2218      	movs	r2, #24
 8004f4e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8004f50:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8004f56:	4b12      	ldr	r3, [pc, #72]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004f5c:	4b10      	ldr	r3, [pc, #64]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8004f62:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8004f68:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f6a:	2207      	movs	r2, #7
 8004f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8004f7a:	4b09      	ldr	r3, [pc, #36]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f80:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004f82:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f8a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f8e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8004f90:	4803      	ldr	r0, [pc, #12]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f92:	f000 f833 	bl	8004ffc <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004f96:	4802      	ldr	r0, [pc, #8]	@ (8004fa0 <SPI_Init+0x6c>)
 8004f98:	f003 ff65 	bl	8008e66 <HAL_SPI_Init>
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20025f0c 	.word	0x20025f0c
 8004fa4:	40015000 	.word	0x40015000

08004fa8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8004fb6:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <SPI_Write+0x34>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	1db9      	adds	r1, r7, #6
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	4808      	ldr	r0, [pc, #32]	@ (8004fe0 <SPI_Write+0x38>)
 8004fc0:	f004 f802 	bl	8008fc8 <HAL_SPI_Transmit>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8004fce:	f000 f809 	bl	8004fe4 <SPI_Error>
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000010 	.word	0x20000010
 8004fe0:	20025f0c 	.word	0x20025f0c

08004fe4 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004fe8:	4803      	ldr	r0, [pc, #12]	@ (8004ff8 <SPI_Error+0x14>)
 8004fea:	f003 ffc5 	bl	8008f78 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8004fee:	f7ff ffa1 	bl	8004f34 <SPI_Init>
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20025f0c 	.word	0x20025f0c

08004ffc <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	@ 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	4b17      	ldr	r3, [pc, #92]	@ (8005068 <SPI_MspInit+0x6c>)
 800500a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500c:	4a16      	ldr	r2, [pc, #88]	@ (8005068 <SPI_MspInit+0x6c>)
 800500e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005012:	6453      	str	r3, [r2, #68]	@ 0x44
 8005014:	4b14      	ldr	r3, [pc, #80]	@ (8005068 <SPI_MspInit+0x6c>)
 8005016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005018:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <SPI_MspInit+0x6c>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	4a0f      	ldr	r2, [pc, #60]	@ (8005068 <SPI_MspInit+0x6c>)
 800502a:	f043 0320 	orr.w	r3, r3, #32
 800502e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005030:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <SPI_MspInit+0x6c>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800503c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8005040:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8005046:	2302      	movs	r3, #2
 8005048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800504a:	2301      	movs	r3, #1
 800504c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800504e:	2305      	movs	r3, #5
 8005050:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	4619      	mov	r1, r3
 8005058:	4804      	ldr	r0, [pc, #16]	@ (800506c <SPI_MspInit+0x70>)
 800505a:	f001 fa8f 	bl	800657c <HAL_GPIO_Init>
}
 800505e:	bf00      	nop
 8005060:	3728      	adds	r7, #40	@ 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800
 800506c:	40021400 	.word	0x40021400

08005070 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8005076:	4b36      	ldr	r3, [pc, #216]	@ (8005150 <LCD_IO_Init+0xe0>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d164      	bne.n	8005148 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800507e:	4b34      	ldr	r3, [pc, #208]	@ (8005150 <LCD_IO_Init+0xe0>)
 8005080:	2201      	movs	r2, #1
 8005082:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8005084:	2300      	movs	r3, #0
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	4b32      	ldr	r3, [pc, #200]	@ (8005154 <LCD_IO_Init+0xe4>)
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	4a31      	ldr	r2, [pc, #196]	@ (8005154 <LCD_IO_Init+0xe4>)
 800508e:	f043 0308 	orr.w	r3, r3, #8
 8005092:	6313      	str	r3, [r2, #48]	@ 0x30
 8005094:	4b2f      	ldr	r3, [pc, #188]	@ (8005154 <LCD_IO_Init+0xe4>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80050a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80050a6:	2301      	movs	r3, #1
 80050a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80050ae:	2302      	movs	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80050b2:	f107 030c 	add.w	r3, r7, #12
 80050b6:	4619      	mov	r1, r3
 80050b8:	4827      	ldr	r0, [pc, #156]	@ (8005158 <LCD_IO_Init+0xe8>)
 80050ba:	f001 fa5f 	bl	800657c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	4b24      	ldr	r3, [pc, #144]	@ (8005154 <LCD_IO_Init+0xe4>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	4a23      	ldr	r2, [pc, #140]	@ (8005154 <LCD_IO_Init+0xe4>)
 80050c8:	f043 0308 	orr.w	r3, r3, #8
 80050cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ce:	4b21      	ldr	r3, [pc, #132]	@ (8005154 <LCD_IO_Init+0xe4>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80050da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80050e0:	2301      	movs	r3, #1
 80050e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80050e8:	2302      	movs	r3, #2
 80050ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80050ec:	f107 030c 	add.w	r3, r7, #12
 80050f0:	4619      	mov	r1, r3
 80050f2:	4819      	ldr	r0, [pc, #100]	@ (8005158 <LCD_IO_Init+0xe8>)
 80050f4:	f001 fa42 	bl	800657c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80050f8:	2300      	movs	r3, #0
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4b15      	ldr	r3, [pc, #84]	@ (8005154 <LCD_IO_Init+0xe4>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005100:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <LCD_IO_Init+0xe4>)
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	6313      	str	r3, [r2, #48]	@ 0x30
 8005108:	4b12      	ldr	r3, [pc, #72]	@ (8005154 <LCD_IO_Init+0xe4>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8005114:	2304      	movs	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005118:	2301      	movs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8005120:	2302      	movs	r3, #2
 8005122:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8005124:	f107 030c 	add.w	r3, r7, #12
 8005128:	4619      	mov	r1, r3
 800512a:	480c      	ldr	r0, [pc, #48]	@ (800515c <LCD_IO_Init+0xec>)
 800512c:	f001 fa26 	bl	800657c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	4809      	ldr	r0, [pc, #36]	@ (800515c <LCD_IO_Init+0xec>)
 8005136:	f001 fcd9 	bl	8006aec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800513a:	2201      	movs	r2, #1
 800513c:	2104      	movs	r1, #4
 800513e:	4807      	ldr	r0, [pc, #28]	@ (800515c <LCD_IO_Init+0xec>)
 8005140:	f001 fcd4 	bl	8006aec <HAL_GPIO_WritePin>

    SPI_Init();
 8005144:	f7ff fef6 	bl	8004f34 <SPI_Init>
  }
}
 8005148:	bf00      	nop
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20025f64 	.word	0x20025f64
 8005154:	40023800 	.word	0x40023800
 8005158:	40020c00 	.word	0x40020c00
 800515c:	40020800 	.word	0x40020800

08005160 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800516a:	2201      	movs	r2, #1
 800516c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005170:	480a      	ldr	r0, [pc, #40]	@ (800519c <LCD_IO_WriteData+0x3c>)
 8005172:	f001 fcbb 	bl	8006aec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8005176:	2200      	movs	r2, #0
 8005178:	2104      	movs	r1, #4
 800517a:	4809      	ldr	r0, [pc, #36]	@ (80051a0 <LCD_IO_WriteData+0x40>)
 800517c:	f001 fcb6 	bl	8006aec <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8005180:	88fb      	ldrh	r3, [r7, #6]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff10 	bl	8004fa8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005188:	2201      	movs	r2, #1
 800518a:	2104      	movs	r1, #4
 800518c:	4804      	ldr	r0, [pc, #16]	@ (80051a0 <LCD_IO_WriteData+0x40>)
 800518e:	f001 fcad 	bl	8006aec <HAL_GPIO_WritePin>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40020c00 	.word	0x40020c00
 80051a0:	40020800 	.word	0x40020800

080051a4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80051ae:	2200      	movs	r2, #0
 80051b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051b4:	480a      	ldr	r0, [pc, #40]	@ (80051e0 <LCD_IO_WriteReg+0x3c>)
 80051b6:	f001 fc99 	bl	8006aec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80051ba:	2200      	movs	r2, #0
 80051bc:	2104      	movs	r1, #4
 80051be:	4809      	ldr	r0, [pc, #36]	@ (80051e4 <LCD_IO_WriteReg+0x40>)
 80051c0:	f001 fc94 	bl	8006aec <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff feed 	bl	8004fa8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80051ce:	2201      	movs	r2, #1
 80051d0:	2104      	movs	r1, #4
 80051d2:	4804      	ldr	r0, [pc, #16]	@ (80051e4 <LCD_IO_WriteReg+0x40>)
 80051d4:	f001 fc8a 	bl	8006aec <HAL_GPIO_WritePin>
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40020c00 	.word	0x40020c00
 80051e4:	40020800 	.word	0x40020800

080051e8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 f817 	bl	8006224 <HAL_Delay>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005204:	f000 ff9c 	bl	8006140 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8005208:	f000 f862 	bl	80052d0 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality and Welcome Screen
 800520c:	f7fb f9b8 	bl	8000580 <ApplicationInit>

  uint32_t eventsToRun;

  for (;;)
  {
	  eventsToRun = getScheduledEvents();
 8005210:	f7ff fc66 	bl	8004ae0 <getScheduledEvents>
 8005214:	6078      	str	r0, [r7, #4]
	  if (eventsToRun & GAME_START){
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <main+0x3c>
		  gameStart();
 8005220:	f7fc f854 	bl	80012cc <gameStart>
		  removeSchedulerEvent(GAME_START);
 8005224:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005228:	f7ff fc78 	bl	8004b1c <removeSchedulerEvent>
		  InitializeLCDTouch();
 800522c:	f7ff fbdc 	bl	80049e8 <InitializeLCDTouch>
		  LCDTouchScreenInterruptGPIOInit();
 8005230:	f7fb fa2c 	bl	800068c <LCDTouchScreenInterruptGPIOInit>
		  Periph_Init();
 8005234:	f7fb f9c0 	bl	80005b8 <Periph_Init>
 8005238:	e7ea      	b.n	8005210 <main+0x12>
	  }
	  else if (eventsToRun & GAME_OVER){
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <main+0x4c>
		  gameOver();
 8005244:	f7fc f8b0 	bl	80013a8 <gameOver>
 8005248:	e7e2      	b.n	8005210 <main+0x12>
	  }
	  else if (eventsToRun & ROTATE_BLOCK){
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <main+0x62>
		  rotateBlock();
 8005254:	f7fd ff5a 	bl	800310c <rotateBlock>
		  removeSchedulerEvent(ROTATE_BLOCK);
 8005258:	2020      	movs	r0, #32
 800525a:	f7ff fc5f 	bl	8004b1c <removeSchedulerEvent>
 800525e:	e7d7      	b.n	8005210 <main+0x12>
	  }
	  else if (eventsToRun & MOVE_LEFT){
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <main+0x78>
		  moveBlockLeft();
 800526a:	f7ff fba1 	bl	80049b0 <moveBlockLeft>
		  removeSchedulerEvent(MOVE_LEFT);
 800526e:	2080      	movs	r0, #128	@ 0x80
 8005270:	f7ff fc54 	bl	8004b1c <removeSchedulerEvent>
 8005274:	e7cc      	b.n	8005210 <main+0x12>
	  }
	  else if (eventsToRun & MOVE_RIGHT){
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <main+0x90>
		  moveBlockRight();
 8005280:	f7ff fba1 	bl	80049c6 <moveBlockRight>
		  removeSchedulerEvent(MOVE_RIGHT);
 8005284:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005288:	f7ff fc48 	bl	8004b1c <removeSchedulerEvent>
 800528c:	e7c0      	b.n	8005210 <main+0x12>
	  }
	  else if (eventsToRun & DROP_BLOCK){
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <main+0xa6>
		  moveBlockDown();
 8005298:	f7ff fb80 	bl	800499c <moveBlockDown>
		  removeSchedulerEvent(DROP_BLOCK);
 800529c:	2040      	movs	r0, #64	@ 0x40
 800529e:	f7ff fc3d 	bl	8004b1c <removeSchedulerEvent>
 80052a2:	e7b5      	b.n	8005210 <main+0x12>
	  }
	  else if (eventsToRun & NEW_BLOCK){
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0b0      	beq.n	8005210 <main+0x12>
		  uint32_t randBlock = GetRandomBlock();
 80052ae:	f7ff fbf7 	bl	8004aa0 <GetRandomBlock>
 80052b2:	6038      	str	r0, [r7, #0]
		  updateCurrentBlock(randBlock, 5, 1, 1);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	b298      	uxth	r0, r3
 80052b8:	2301      	movs	r3, #1
 80052ba:	2201      	movs	r2, #1
 80052bc:	2105      	movs	r1, #5
 80052be:	f7fe f881 	bl	80033c4 <updateCurrentBlock>
		  drawCurrentBlock();
 80052c2:	f7fd ffd7 	bl	8003274 <drawCurrentBlock>
		  removeSchedulerEvent(NEW_BLOCK);
 80052c6:	2010      	movs	r0, #16
 80052c8:	f7ff fc28 	bl	8004b1c <removeSchedulerEvent>
	  eventsToRun = getScheduledEvents();
 80052cc:	e7a0      	b.n	8005210 <main+0x12>
	...

080052d0 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b092      	sub	sp, #72	@ 0x48
 80052d4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <SystemClockOverride+0x7c>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <SystemClockOverride+0x7c>)
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <SystemClockOverride+0x7c>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80052f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052fa:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052fc:	2302      	movs	r3, #2
 80052fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005300:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005304:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005306:	2308      	movs	r3, #8
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800530a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800530e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005310:	2302      	movs	r3, #2
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005314:	2307      	movs	r3, #7
 8005316:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f002 feca 	bl	80080b4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005320:	230f      	movs	r3, #15
 8005322:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005324:	2302      	movs	r3, #2
 8005326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005328:	2300      	movs	r3, #0
 800532a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800532c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005336:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8005338:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800533c:	2105      	movs	r1, #5
 800533e:	4618      	mov	r0, r3
 8005340:	f003 f930 	bl	80085a4 <HAL_RCC_ClockConfig>
}
 8005344:	bf00      	nop
 8005346:	3748      	adds	r7, #72	@ 0x48
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800

08005350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005354:	b672      	cpsid	i
}
 8005356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <Error_Handler+0x8>

0800535c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <HAL_MspInit+0x4c>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	4a0f      	ldr	r2, [pc, #60]	@ (80053a8 <HAL_MspInit+0x4c>)
 800536c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005370:	6453      	str	r3, [r2, #68]	@ 0x44
 8005372:	4b0d      	ldr	r3, [pc, #52]	@ (80053a8 <HAL_MspInit+0x4c>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <HAL_MspInit+0x4c>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <HAL_MspInit+0x4c>)
 8005388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800538c:	6413      	str	r3, [r2, #64]	@ 0x40
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <HAL_MspInit+0x4c>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800539a:	2007      	movs	r0, #7
 800539c:	f001 f878 	bl	8006490 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800

080053ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	@ 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	605a      	str	r2, [r3, #4]
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a29      	ldr	r2, [pc, #164]	@ (8005470 <HAL_I2C_MspInit+0xc4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d14b      	bne.n	8005466 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	4b28      	ldr	r3, [pc, #160]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d6:	4a27      	ldr	r2, [pc, #156]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053de:	4b25      	ldr	r3, [pc, #148]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	4b21      	ldr	r3, [pc, #132]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 80053f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f2:	4a20      	ldr	r2, [pc, #128]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8005406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800540a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800540c:	2312      	movs	r3, #18
 800540e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	2300      	movs	r3, #0
 8005412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005414:	2300      	movs	r3, #0
 8005416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005418:	2304      	movs	r3, #4
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800541c:	f107 0314 	add.w	r3, r7, #20
 8005420:	4619      	mov	r1, r3
 8005422:	4815      	ldr	r0, [pc, #84]	@ (8005478 <HAL_I2C_MspInit+0xcc>)
 8005424:	f001 f8aa 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8005428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800542c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800542e:	2312      	movs	r3, #18
 8005430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005436:	2300      	movs	r3, #0
 8005438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800543a:	2304      	movs	r3, #4
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800543e:	f107 0314 	add.w	r3, r7, #20
 8005442:	4619      	mov	r1, r3
 8005444:	480d      	ldr	r0, [pc, #52]	@ (800547c <HAL_I2C_MspInit+0xd0>)
 8005446:	f001 f899 	bl	800657c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 8005454:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005458:	6413      	str	r3, [r2, #64]	@ 0x40
 800545a:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <HAL_I2C_MspInit+0xc8>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8005466:	bf00      	nop
 8005468:	3728      	adds	r7, #40	@ 0x28
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40005c00 	.word	0x40005c00
 8005474:	40023800 	.word	0x40023800
 8005478:	40020800 	.word	0x40020800
 800547c:	40020000 	.word	0x40020000

08005480 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b09a      	sub	sp, #104	@ 0x68
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005488:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	605a      	str	r2, [r3, #4]
 8005492:	609a      	str	r2, [r3, #8]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800549c:	2230      	movs	r2, #48	@ 0x30
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f004 fb35 	bl	8009b10 <memset>
  if(hltdc->Instance==LTDC)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a81      	ldr	r2, [pc, #516]	@ (80056b0 <HAL_LTDC_MspInit+0x230>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	f040 80fa 	bne.w	80056a6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80054b2:	2308      	movs	r3, #8
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80054b6:	2332      	movs	r3, #50	@ 0x32
 80054b8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80054ba:	2302      	movs	r3, #2
 80054bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80054be:	2300      	movs	r3, #0
 80054c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054c6:	4618      	mov	r0, r3
 80054c8:	f003 fa78 	bl	80089bc <HAL_RCCEx_PeriphCLKConfig>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80054d2:	f7ff ff3d 	bl	8005350 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	4b76      	ldr	r3, [pc, #472]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	4a75      	ldr	r2, [pc, #468]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 80054e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80054e6:	4b73      	ldr	r3, [pc, #460]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	4b6f      	ldr	r3, [pc, #444]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	4a6e      	ldr	r2, [pc, #440]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 80054fc:	f043 0320 	orr.w	r3, r3, #32
 8005500:	6313      	str	r3, [r2, #48]	@ 0x30
 8005502:	4b6c      	ldr	r3, [pc, #432]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	4b68      	ldr	r3, [pc, #416]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	4a67      	ldr	r2, [pc, #412]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	6313      	str	r3, [r2, #48]	@ 0x30
 800551e:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	4b61      	ldr	r3, [pc, #388]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	4a60      	ldr	r2, [pc, #384]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	6313      	str	r3, [r2, #48]	@ 0x30
 800553a:	4b5e      	ldr	r3, [pc, #376]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
 800554a:	4b5a      	ldr	r3, [pc, #360]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554e:	4a59      	ldr	r2, [pc, #356]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005554:	6313      	str	r3, [r2, #48]	@ 0x30
 8005556:	4b57      	ldr	r3, [pc, #348]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	4b53      	ldr	r3, [pc, #332]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	4a52      	ldr	r2, [pc, #328]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 800556c:	f043 0304 	orr.w	r3, r3, #4
 8005570:	6313      	str	r3, [r2, #48]	@ 0x30
 8005572:	4b50      	ldr	r3, [pc, #320]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	4b4c      	ldr	r3, [pc, #304]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	4a4b      	ldr	r2, [pc, #300]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005588:	f043 0308 	orr.w	r3, r3, #8
 800558c:	6313      	str	r3, [r2, #48]	@ 0x30
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <HAL_LTDC_MspInit+0x234>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800559a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a0:	2302      	movs	r3, #2
 80055a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a4:	2300      	movs	r3, #0
 80055a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a8:	2300      	movs	r3, #0
 80055aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80055ac:	230e      	movs	r3, #14
 80055ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80055b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055b4:	4619      	mov	r1, r3
 80055b6:	4840      	ldr	r0, [pc, #256]	@ (80056b8 <HAL_LTDC_MspInit+0x238>)
 80055b8:	f000 ffe0 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80055bc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80055c0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ca:	2300      	movs	r3, #0
 80055cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80055ce:	230e      	movs	r3, #14
 80055d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055d6:	4619      	mov	r1, r3
 80055d8:	4838      	ldr	r0, [pc, #224]	@ (80056bc <HAL_LTDC_MspInit+0x23c>)
 80055da:	f000 ffcf 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80055de:	2303      	movs	r3, #3
 80055e0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e2:	2302      	movs	r3, #2
 80055e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ea:	2300      	movs	r3, #0
 80055ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80055ee:	2309      	movs	r3, #9
 80055f0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055f6:	4619      	mov	r1, r3
 80055f8:	4831      	ldr	r0, [pc, #196]	@ (80056c0 <HAL_LTDC_MspInit+0x240>)
 80055fa:	f000 ffbf 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80055fe:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8005602:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005604:	2302      	movs	r3, #2
 8005606:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005608:	2300      	movs	r3, #0
 800560a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560c:	2300      	movs	r3, #0
 800560e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005610:	230e      	movs	r3, #14
 8005612:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005614:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005618:	4619      	mov	r1, r3
 800561a:	4829      	ldr	r0, [pc, #164]	@ (80056c0 <HAL_LTDC_MspInit+0x240>)
 800561c:	f000 ffae 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8005620:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8005624:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	2302      	movs	r3, #2
 8005628:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562e:	2300      	movs	r3, #0
 8005630:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005632:	230e      	movs	r3, #14
 8005634:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005636:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800563a:	4619      	mov	r1, r3
 800563c:	4821      	ldr	r0, [pc, #132]	@ (80056c4 <HAL_LTDC_MspInit+0x244>)
 800563e:	f000 ff9d 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8005642:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8005646:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005648:	2302      	movs	r3, #2
 800564a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564c:	2300      	movs	r3, #0
 800564e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005650:	2300      	movs	r3, #0
 8005652:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005654:	230e      	movs	r3, #14
 8005656:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005658:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800565c:	4619      	mov	r1, r3
 800565e:	481a      	ldr	r0, [pc, #104]	@ (80056c8 <HAL_LTDC_MspInit+0x248>)
 8005660:	f000 ff8c 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8005664:	2348      	movs	r3, #72	@ 0x48
 8005666:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005668:	2302      	movs	r3, #2
 800566a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566c:	2300      	movs	r3, #0
 800566e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005670:	2300      	movs	r3, #0
 8005672:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005674:	230e      	movs	r3, #14
 8005676:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800567c:	4619      	mov	r1, r3
 800567e:	4813      	ldr	r0, [pc, #76]	@ (80056cc <HAL_LTDC_MspInit+0x24c>)
 8005680:	f000 ff7c 	bl	800657c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8005684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005688:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800568a:	2302      	movs	r3, #2
 800568c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568e:	2300      	movs	r3, #0
 8005690:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005692:	2300      	movs	r3, #0
 8005694:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005696:	2309      	movs	r3, #9
 8005698:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800569a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800569e:	4619      	mov	r1, r3
 80056a0:	4808      	ldr	r0, [pc, #32]	@ (80056c4 <HAL_LTDC_MspInit+0x244>)
 80056a2:	f000 ff6b 	bl	800657c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80056a6:	bf00      	nop
 80056a8:	3768      	adds	r7, #104	@ 0x68
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	40016800 	.word	0x40016800
 80056b4:	40023800 	.word	0x40023800
 80056b8:	40021400 	.word	0x40021400
 80056bc:	40020000 	.word	0x40020000
 80056c0:	40020400 	.word	0x40020400
 80056c4:	40021800 	.word	0x40021800
 80056c8:	40020800 	.word	0x40020800
 80056cc:	40020c00 	.word	0x40020c00

080056d0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a0b      	ldr	r2, [pc, #44]	@ (800570c <HAL_RNG_MspInit+0x3c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10d      	bne.n	80056fe <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005710 <HAL_RNG_MspInit+0x40>)
 80056e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ea:	4a09      	ldr	r2, [pc, #36]	@ (8005710 <HAL_RNG_MspInit+0x40>)
 80056ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80056f2:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <HAL_RNG_MspInit+0x40>)
 80056f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	50060800 	.word	0x50060800
 8005710:	40023800 	.word	0x40023800

08005714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08a      	sub	sp, #40	@ 0x28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800571c:	f107 0314 	add.w	r3, r7, #20
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a19      	ldr	r2, [pc, #100]	@ (8005798 <HAL_SPI_MspInit+0x84>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d12c      	bne.n	8005790 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	4b18      	ldr	r3, [pc, #96]	@ (800579c <HAL_SPI_MspInit+0x88>)
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	4a17      	ldr	r2, [pc, #92]	@ (800579c <HAL_SPI_MspInit+0x88>)
 8005740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005744:	6453      	str	r3, [r2, #68]	@ 0x44
 8005746:	4b15      	ldr	r3, [pc, #84]	@ (800579c <HAL_SPI_MspInit+0x88>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	4b11      	ldr	r3, [pc, #68]	@ (800579c <HAL_SPI_MspInit+0x88>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	4a10      	ldr	r2, [pc, #64]	@ (800579c <HAL_SPI_MspInit+0x88>)
 800575c:	f043 0320 	orr.w	r3, r3, #32
 8005760:	6313      	str	r3, [r2, #48]	@ 0x30
 8005762:	4b0e      	ldr	r3, [pc, #56]	@ (800579c <HAL_SPI_MspInit+0x88>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800576e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8005772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005774:	2302      	movs	r3, #2
 8005776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005778:	2300      	movs	r3, #0
 800577a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577c:	2300      	movs	r3, #0
 800577e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005780:	2305      	movs	r3, #5
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4619      	mov	r1, r3
 800578a:	4805      	ldr	r0, [pc, #20]	@ (80057a0 <HAL_SPI_MspInit+0x8c>)
 800578c:	f000 fef6 	bl	800657c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8005790:	bf00      	nop
 8005792:	3728      	adds	r7, #40	@ 0x28
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40015000 	.word	0x40015000
 800579c:	40023800 	.word	0x40023800
 80057a0:	40021400 	.word	0x40021400

080057a4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a08      	ldr	r2, [pc, #32]	@ (80057d4 <HAL_SPI_MspDeInit+0x30>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10a      	bne.n	80057cc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80057b6:	4b08      	ldr	r3, [pc, #32]	@ (80057d8 <HAL_SPI_MspDeInit+0x34>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	4a07      	ldr	r2, [pc, #28]	@ (80057d8 <HAL_SPI_MspDeInit+0x34>)
 80057bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80057c0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80057c2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80057c6:	4805      	ldr	r0, [pc, #20]	@ (80057dc <HAL_SPI_MspDeInit+0x38>)
 80057c8:	f001 f884 	bl	80068d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40015000 	.word	0x40015000
 80057d8:	40023800 	.word	0x40023800
 80057dc:	40021400 	.word	0x40021400

080057e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0b      	ldr	r2, [pc, #44]	@ (800581c <HAL_TIM_Base_MspInit+0x3c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d10d      	bne.n	800580e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <HAL_TIM_Base_MspInit+0x40>)
 80057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057fa:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <HAL_TIM_Base_MspInit+0x40>)
 80057fc:	f043 0310 	orr.w	r3, r3, #16
 8005800:	6413      	str	r3, [r2, #64]	@ 0x40
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <HAL_TIM_Base_MspInit+0x40>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40001000 	.word	0x40001000
 8005820:	40023800 	.word	0x40023800

08005824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <NMI_Handler+0x4>

0800582c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <HardFault_Handler+0x4>

08005834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <MemManage_Handler+0x4>

0800583c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <BusFault_Handler+0x4>

08005844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <UsageFault_Handler+0x4>

0800584c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005850:	bf00      	nop
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800585a:	b480      	push	{r7}
 800585c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800587a:	f000 fcb3 	bl	80061e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005892:	2b00      	cmp	r3, #0
 8005894:	db0b      	blt.n	80058ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	f003 021f 	and.w	r2, r3, #31
 800589c:	4907      	ldr	r1, [pc, #28]	@ (80058bc <__NVIC_EnableIRQ+0x38>)
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2001      	movs	r0, #1
 80058a6:	fa00 f202 	lsl.w	r2, r0, r2
 80058aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	e000e100 	.word	0xe000e100

080058c0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80058c6:	f000 f9df 	bl	8005c88 <I2C3_MspInit>
//    I2C3_GPIO_Init();
    /* Initialize I2C */
    I2C3_Init();
 80058ca:	f000 f99d 	bl	8005c08 <I2C3_Init>
//    I2C3__Init();

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80058ce:	2202      	movs	r2, #2
 80058d0:	2103      	movs	r1, #3
 80058d2:	2082      	movs	r0, #130	@ 0x82
 80058d4:	f000 fa2c 	bl	8005d30 <I2C3_Write>
    HAL_Delay(5);
 80058d8:	2005      	movs	r0, #5
 80058da:	f000 fca3 	bl	8006224 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80058de:	2200      	movs	r2, #0
 80058e0:	2103      	movs	r1, #3
 80058e2:	2082      	movs	r0, #130	@ 0x82
 80058e4:	f000 fa24 	bl	8005d30 <I2C3_Write>
    HAL_Delay(2);
 80058e8:	2002      	movs	r0, #2
 80058ea:	f000 fc9b 	bl	8006224 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80058ee:	1cba      	adds	r2, r7, #2
 80058f0:	2302      	movs	r3, #2
 80058f2:	2100      	movs	r1, #0
 80058f4:	2082      	movs	r0, #130	@ 0x82
 80058f6:	f000 fa6b 	bl	8005dd0 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80058fa:	887b      	ldrh	r3, [r7, #2]
 80058fc:	021b      	lsls	r3, r3, #8
 80058fe:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8005900:	887b      	ldrh	r3, [r7, #2]
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	b29a      	uxth	r2, r3
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	4313      	orrs	r3, r2
 800590a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	f640 0211 	movw	r2, #2065	@ 0x811
 8005912:	4293      	cmp	r3, r2
 8005914:	d001      	beq.n	800591a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8005916:	2303      	movs	r3, #3
 8005918:	e095      	b.n	8005a46 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800591a:	2202      	movs	r2, #2
 800591c:	2103      	movs	r1, #3
 800591e:	2082      	movs	r0, #130	@ 0x82
 8005920:	f000 fa06 	bl	8005d30 <I2C3_Write>
    HAL_Delay(5);
 8005924:	2005      	movs	r0, #5
 8005926:	f000 fc7d 	bl	8006224 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800592a:	2200      	movs	r2, #0
 800592c:	2103      	movs	r1, #3
 800592e:	2082      	movs	r0, #130	@ 0x82
 8005930:	f000 f9fe 	bl	8005d30 <I2C3_Write>
    HAL_Delay(2);
 8005934:	2002      	movs	r0, #2
 8005936:	f000 fc75 	bl	8006224 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800593a:	2004      	movs	r0, #4
 800593c:	f000 f887 	bl	8005a4e <STMPE811_Read>
 8005940:	4603      	mov	r3, r0
 8005942:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8005944:	797b      	ldrb	r3, [r7, #5]
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800594c:	797b      	ldrb	r3, [r7, #5]
 800594e:	461a      	mov	r2, r3
 8005950:	2104      	movs	r1, #4
 8005952:	2082      	movs	r0, #130	@ 0x82
 8005954:	f000 f9ec 	bl	8005d30 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8005958:	2004      	movs	r0, #4
 800595a:	f000 f878 	bl	8005a4e <STMPE811_Read>
 800595e:	4603      	mov	r3, r0
 8005960:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8005962:	797b      	ldrb	r3, [r7, #5]
 8005964:	f023 0302 	bic.w	r3, r3, #2
 8005968:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800596a:	797b      	ldrb	r3, [r7, #5]
 800596c:	461a      	mov	r2, r3
 800596e:	2104      	movs	r1, #4
 8005970:	2082      	movs	r0, #130	@ 0x82
 8005972:	f000 f9dd 	bl	8005d30 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8005976:	2249      	movs	r2, #73	@ 0x49
 8005978:	2120      	movs	r1, #32
 800597a:	2082      	movs	r0, #130	@ 0x82
 800597c:	f000 f9d8 	bl	8005d30 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8005980:	2002      	movs	r0, #2
 8005982:	f000 fc4f 	bl	8006224 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8005986:	2201      	movs	r2, #1
 8005988:	2121      	movs	r1, #33	@ 0x21
 800598a:	2082      	movs	r0, #130	@ 0x82
 800598c:	f000 f9d0 	bl	8005d30 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8005990:	2017      	movs	r0, #23
 8005992:	f000 f85c 	bl	8005a4e <STMPE811_Read>
 8005996:	4603      	mov	r3, r0
 8005998:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800599a:	797b      	ldrb	r3, [r7, #5]
 800599c:	f043 031e 	orr.w	r3, r3, #30
 80059a0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80059a2:	797b      	ldrb	r3, [r7, #5]
 80059a4:	461a      	mov	r2, r3
 80059a6:	2117      	movs	r1, #23
 80059a8:	2082      	movs	r0, #130	@ 0x82
 80059aa:	f000 f9c1 	bl	8005d30 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80059ae:	229a      	movs	r2, #154	@ 0x9a
 80059b0:	2141      	movs	r1, #65	@ 0x41
 80059b2:	2082      	movs	r0, #130	@ 0x82
 80059b4:	f000 f9bc 	bl	8005d30 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80059b8:	2201      	movs	r2, #1
 80059ba:	214a      	movs	r1, #74	@ 0x4a
 80059bc:	2082      	movs	r0, #130	@ 0x82
 80059be:	f000 f9b7 	bl	8005d30 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80059c2:	2201      	movs	r2, #1
 80059c4:	214b      	movs	r1, #75	@ 0x4b
 80059c6:	2082      	movs	r0, #130	@ 0x82
 80059c8:	f000 f9b2 	bl	8005d30 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80059cc:	2200      	movs	r2, #0
 80059ce:	214b      	movs	r1, #75	@ 0x4b
 80059d0:	2082      	movs	r0, #130	@ 0x82
 80059d2:	f000 f9ad 	bl	8005d30 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80059d6:	2201      	movs	r2, #1
 80059d8:	2156      	movs	r1, #86	@ 0x56
 80059da:	2082      	movs	r0, #130	@ 0x82
 80059dc:	f000 f9a8 	bl	8005d30 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80059e0:	2201      	movs	r2, #1
 80059e2:	2158      	movs	r1, #88	@ 0x58
 80059e4:	2082      	movs	r0, #130	@ 0x82
 80059e6:	f000 f9a3 	bl	8005d30 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80059ea:	2203      	movs	r2, #3
 80059ec:	2140      	movs	r1, #64	@ 0x40
 80059ee:	2082      	movs	r0, #130	@ 0x82
 80059f0:	f000 f99e 	bl	8005d30 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 80059f4:	22ff      	movs	r2, #255	@ 0xff
 80059f6:	210b      	movs	r1, #11
 80059f8:	2082      	movs	r0, #130	@ 0x82
 80059fa:	f000 f999 	bl	8005d30 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 80059fe:	f000 f8c1 	bl	8005b84 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8005a02:	2009      	movs	r0, #9
 8005a04:	f000 f823 	bl	8005a4e <STMPE811_Read>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8005a0c:	797b      	ldrb	r3, [r7, #5]
 8005a0e:	f043 0301 	orr.w	r3, r3, #1
 8005a12:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8005a14:	797b      	ldrb	r3, [r7, #5]
 8005a16:	461a      	mov	r2, r3
 8005a18:	2109      	movs	r1, #9
 8005a1a:	2082      	movs	r0, #130	@ 0x82
 8005a1c:	f000 f988 	bl	8005d30 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8005a20:	200a      	movs	r0, #10
 8005a22:	f000 f814 	bl	8005a4e <STMPE811_Read>
 8005a26:	4603      	mov	r3, r0
 8005a28:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8005a2a:	797b      	ldrb	r3, [r7, #5]
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8005a32:	797b      	ldrb	r3, [r7, #5]
 8005a34:	461a      	mov	r2, r3
 8005a36:	210a      	movs	r1, #10
 8005a38:	2082      	movs	r0, #130	@ 0x82
 8005a3a:	f000 f979 	bl	8005d30 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8005a3e:	20c8      	movs	r0, #200	@ 0xc8
 8005a40:	f000 fbf0 	bl	8006224 <HAL_Delay>

    return STMPE811_State_Ok;
 8005a44:	2302      	movs	r3, #2

}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	4603      	mov	r3, r0
 8005a56:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8005a58:	f107 020f 	add.w	r2, r7, #15
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	2082      	movs	r0, #130	@ 0x82
 8005a62:	f000 f98f 	bl	8005d84 <I2C3_Read>

    return readData;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	460a      	mov	r2, r1
 8005a7a:	71fb      	strb	r3, [r7, #7]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8005a80:	79ba      	ldrb	r2, [r7, #6]
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	4619      	mov	r1, r3
 8005a86:	2082      	movs	r0, #130	@ 0x82
 8005a88:	f000 f952 	bl	8005d30 <I2C3_Write>
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	799b      	ldrb	r3, [r3, #6]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d117      	bne.n	8005ad4 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f9b3 	bl	8005e14 <TM_STMPE811_ReadX>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	885b      	ldrh	r3, [r3, #2]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fa06 	bl	8005ed0 <TM_STMPE811_ReadY>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8005aca:	3301      	adds	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	805a      	strh	r2, [r3, #2]
 8005ad2:	e048      	b.n	8005b66 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	799b      	ldrb	r3, [r3, #6]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d112      	bne.n	8005b02 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f997 	bl	8005e14 <TM_STMPE811_ReadX>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	885b      	ldrh	r3, [r3, #2]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 f9ec 	bl	8005ed0 <TM_STMPE811_ReadY>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	805a      	strh	r2, [r3, #2]
 8005b00:	e031      	b.n	8005b66 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	799b      	ldrb	r3, [r3, #6]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d115      	bne.n	8005b36 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	885b      	ldrh	r3, [r3, #2]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 f980 	bl	8005e14 <TM_STMPE811_ReadX>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f9d5 	bl	8005ed0 <TM_STMPE811_ReadY>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	e017      	b.n	8005b66 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	799b      	ldrb	r3, [r3, #6]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d113      	bne.n	8005b66 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f966 	bl	8005e14 <TM_STMPE811_ReadX>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f9b9 	bl	8005ed0 <TM_STMPE811_ReadY>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8005b66:	2201      	movs	r2, #1
 8005b68:	214b      	movs	r1, #75	@ 0x4b
 8005b6a:	2082      	movs	r0, #130	@ 0x82
 8005b6c:	f000 f8e0 	bl	8005d30 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8005b70:	2200      	movs	r2, #0
 8005b72:	214b      	movs	r1, #75	@ 0x4b
 8005b74:	2082      	movs	r0, #130	@ 0x82
 8005b76:	f000 f8db 	bl	8005d30 <I2C3_Write>
}
 8005b7a:	bf00      	nop
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	603b      	str	r3, [r7, #0]
 8005b8e:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <enableInterruptSupportForTouch+0x5c>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b92:	4a13      	ldr	r2, [pc, #76]	@ (8005be0 <enableInterruptSupportForTouch+0x5c>)
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <enableInterruptSupportForTouch+0x5c>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba6:	1d3b      	adds	r3, r7, #4
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
 8005bae:	609a      	str	r2, [r3, #8]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005bb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005bba:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8005bbe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4805      	ldr	r0, [pc, #20]	@ (8005be4 <enableInterruptSupportForTouch+0x60>)
 8005bce:	f000 fcd5 	bl	800657c <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005bd2:	2028      	movs	r0, #40	@ 0x28
 8005bd4:	f7ff fe56 	bl	8005884 <__NVIC_EnableIRQ>

}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40023800 	.word	0x40023800
 8005be4:	40020000 	.word	0x40020000

08005be8 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20025fbc 	.word	0x20025fbc

08005c08 <I2C3_Init>:

static void I2C3_Init()
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8005c0e:	2300      	movs	r3, #0
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <I2C3_Init+0x70>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	4a18      	ldr	r2, [pc, #96]	@ (8005c78 <I2C3_Init+0x70>)
 8005c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c1e:	4b16      	ldr	r3, [pc, #88]	@ (8005c78 <I2C3_Init+0x70>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8005c2a:	4b14      	ldr	r3, [pc, #80]	@ (8005c7c <I2C3_Init+0x74>)
 8005c2c:	4a14      	ldr	r2, [pc, #80]	@ (8005c80 <I2C3_Init+0x78>)
 8005c2e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8005c30:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <I2C3_Init+0x74>)
 8005c32:	4a14      	ldr	r2, [pc, #80]	@ (8005c84 <I2C3_Init+0x7c>)
 8005c34:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005c36:	4b11      	ldr	r3, [pc, #68]	@ (8005c7c <I2C3_Init+0x74>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8005c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c7c <I2C3_Init+0x74>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c42:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <I2C3_Init+0x74>)
 8005c44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005c48:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c7c <I2C3_Init+0x74>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <I2C3_Init+0x74>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8005c56:	4809      	ldr	r0, [pc, #36]	@ (8005c7c <I2C3_Init+0x74>)
 8005c58:	f000 ff62 	bl	8006b20 <HAL_I2C_Init>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <I2C3_Init+0x5e>
    }
//    return;
    HAL_Delay(100);
 8005c6a:	2064      	movs	r0, #100	@ 0x64
 8005c6c:	f000 fada 	bl	8006224 <HAL_Delay>
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	20025f68 	.word	0x20025f68
 8005c80:	40005c00 	.word	0x40005c00
 8005c84:	000186a0 	.word	0x000186a0

08005c88 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c8e:	f107 030c 	add.w	r3, r7, #12
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	60da      	str	r2, [r3, #12]
 8005c9c:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	4b20      	ldr	r3, [pc, #128]	@ (8005d24 <I2C3_MspInit+0x9c>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d24 <I2C3_MspInit+0x9c>)
 8005ca8:	f043 0304 	orr.w	r3, r3, #4
 8005cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cae:	4b1d      	ldr	r3, [pc, #116]	@ (8005d24 <I2C3_MspInit+0x9c>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <I2C3_MspInit+0x9c>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc2:	4a18      	ldr	r2, [pc, #96]	@ (8005d24 <I2C3_MspInit+0x9c>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cca:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <I2C3_MspInit+0x9c>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8005cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cdc:	2312      	movs	r3, #18
 8005cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005ce8:	2304      	movs	r3, #4
 8005cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8005cec:	f107 030c 	add.w	r3, r7, #12
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	480d      	ldr	r0, [pc, #52]	@ (8005d28 <I2C3_MspInit+0xa0>)
 8005cf4:	f000 fc42 	bl	800657c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8005cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005cfe:	2312      	movs	r3, #18
 8005d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005d0a:	2304      	movs	r3, #4
 8005d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	4619      	mov	r1, r3
 8005d14:	4805      	ldr	r0, [pc, #20]	@ (8005d2c <I2C3_MspInit+0xa4>)
 8005d16:	f000 fc31 	bl	800657c <HAL_GPIO_Init>
    
}
 8005d1a:	bf00      	nop
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40020800 	.word	0x40020800
 8005d2c:	40020000 	.word	0x40020000

08005d30 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af04      	add	r7, sp, #16
 8005d36:	4603      	mov	r3, r0
 8005d38:	80fb      	strh	r3, [r7, #6]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	717b      	strb	r3, [r7, #5]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8005d42:	793b      	ldrb	r3, [r7, #4]
 8005d44:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8005d46:	797b      	ldrb	r3, [r7, #5]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	88f9      	ldrh	r1, [r7, #6]
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d78 <I2C3_Write+0x48>)
 8005d4e:	9302      	str	r3, [sp, #8]
 8005d50:	2301      	movs	r3, #1
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	f107 030f 	add.w	r3, r7, #15
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4807      	ldr	r0, [pc, #28]	@ (8005d7c <I2C3_Write+0x4c>)
 8005d5e:	f001 f823 	bl	8006da8 <HAL_I2C_Mem_Write>
 8005d62:	4603      	mov	r3, r0
 8005d64:	461a      	mov	r2, r3
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <I2C3_Write+0x50>)
 8005d68:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8005d6a:	f7ff ff3d 	bl	8005be8 <verifyHAL_I2C_IS_OKAY>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	0003d090 	.word	0x0003d090
 8005d7c:	20025f68 	.word	0x20025f68
 8005d80:	20025fbc 	.word	0x20025fbc

08005d84 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af04      	add	r7, sp, #16
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	603a      	str	r2, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	460b      	mov	r3, r1
 8005d92:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	b299      	uxth	r1, r3
 8005d98:	79bb      	ldrb	r3, [r7, #6]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <I2C3_Read+0x40>)
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	2301      	movs	r3, #1
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	2301      	movs	r3, #1
 8005daa:	4807      	ldr	r0, [pc, #28]	@ (8005dc8 <I2C3_Read+0x44>)
 8005dac:	f001 f8f6 	bl	8006f9c <HAL_I2C_Mem_Read>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <I2C3_Read+0x48>)
 8005db6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8005db8:	f7ff ff16 	bl	8005be8 <verifyHAL_I2C_IS_OKAY>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	0003d090 	.word	0x0003d090
 8005dc8:	20025f68 	.word	0x20025f68
 8005dcc:	20025fbc 	.word	0x20025fbc

08005dd0 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	603a      	str	r2, [r7, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
 8005dde:	460b      	mov	r3, r1
 8005de0:	71bb      	strb	r3, [r7, #6]
 8005de2:	4613      	mov	r3, r2
 8005de4:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	b299      	uxth	r1, r3
 8005dea:	79bb      	ldrb	r3, [r7, #6]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	4b07      	ldr	r3, [pc, #28]	@ (8005e0c <I2C3_MulitByteRead+0x3c>)
 8005df0:	9302      	str	r3, [sp, #8]
 8005df2:	88bb      	ldrh	r3, [r7, #4]
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4804      	ldr	r0, [pc, #16]	@ (8005e10 <I2C3_MulitByteRead+0x40>)
 8005dfe:	f001 f8cd 	bl	8006f9c <HAL_I2C_Mem_Read>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	0003d090 	.word	0x0003d090
 8005e10:	20025f68 	.word	0x20025f68

08005e14 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8005e1e:	204d      	movs	r0, #77	@ 0x4d
 8005e20:	f7ff fe15 	bl	8005a4e <STMPE811_Read>
 8005e24:	4603      	mov	r3, r0
 8005e26:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8005e28:	204e      	movs	r0, #78	@ 0x4e
 8005e2a:	f7ff fe10 	bl	8005a4e <STMPE811_Read>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8005e32:	7a7b      	ldrb	r3, [r7, #9]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	7a3b      	ldrb	r3, [r7, #8]
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8005e40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e44:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	dc06      	bgt.n	8005e5a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8005e4c:	89fb      	ldrh	r3, [r7, #14]
 8005e4e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8005e52:	330c      	adds	r3, #12
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	81fb      	strh	r3, [r7, #14]
 8005e58:	e005      	b.n	8005e66 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8005e5a:	89fb      	ldrh	r3, [r7, #14]
 8005e5c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8005e60:	3308      	adds	r3, #8
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8005e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <TM_STMPE811_ReadX+0xb8>)
 8005e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8005e70:	441a      	add	r2, r3
 8005e72:	10d2      	asrs	r2, r2, #3
 8005e74:	17db      	asrs	r3, r3, #31
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8005e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e7e:	2bef      	cmp	r3, #239	@ 0xef
 8005e80:	dd02      	ble.n	8005e88 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8005e82:	23ef      	movs	r3, #239	@ 0xef
 8005e84:	81fb      	strh	r3, [r7, #14]
 8005e86:	e005      	b.n	8005e94 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8005e88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da01      	bge.n	8005e94 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8005e90:	2300      	movs	r3, #0
 8005e92:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8005e94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	dd05      	ble.n	8005eaa <TM_STMPE811_ReadX+0x96>
 8005e9e:	89fa      	ldrh	r2, [r7, #14]
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	e004      	b.n	8005eb4 <TM_STMPE811_ReadX+0xa0>
 8005eaa:	89fb      	ldrh	r3, [r7, #14]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	b21b      	sxth	r3, r3
 8005eb4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8005eb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	dd01      	ble.n	8005ec2 <TM_STMPE811_ReadX+0xae>
        return val;
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	e000      	b.n	8005ec4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	88888889 	.word	0x88888889

08005ed0 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8005eda:	204f      	movs	r0, #79	@ 0x4f
 8005edc:	f7ff fdb7 	bl	8005a4e <STMPE811_Read>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8005ee4:	2050      	movs	r0, #80	@ 0x50
 8005ee6:	f7ff fdb2 	bl	8005a4e <STMPE811_Read>
 8005eea:	4603      	mov	r3, r0
 8005eec:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8005eee:	7a7b      	ldrb	r3, [r7, #9]
 8005ef0:	021b      	lsls	r3, r3, #8
 8005ef2:	b21a      	sxth	r2, r3
 8005ef4:	7a3b      	ldrb	r3, [r7, #8]
 8005ef6:	b21b      	sxth	r3, r3
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8005efc:	89fb      	ldrh	r3, [r7, #14]
 8005efe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8005f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f0a:	4a19      	ldr	r2, [pc, #100]	@ (8005f70 <TM_STMPE811_ReadY+0xa0>)
 8005f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8005f10:	1052      	asrs	r2, r2, #1
 8005f12:	17db      	asrs	r3, r3, #31
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8005f18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dc02      	bgt.n	8005f26 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	81fb      	strh	r3, [r7, #14]
 8005f24:	e007      	b.n	8005f36 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8005f26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005f2e:	db02      	blt.n	8005f36 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8005f30:	f240 133f 	movw	r3, #319	@ 0x13f
 8005f34:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8005f36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	dd05      	ble.n	8005f4c <TM_STMPE811_ReadY+0x7c>
 8005f40:	89fa      	ldrh	r2, [r7, #14]
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	e004      	b.n	8005f56 <TM_STMPE811_ReadY+0x86>
 8005f4c:	89fb      	ldrh	r3, [r7, #14]
 8005f4e:	88fa      	ldrh	r2, [r7, #6]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	b21b      	sxth	r3, r3
 8005f56:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8005f58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	dd01      	ble.n	8005f64 <TM_STMPE811_ReadY+0x94>
        return val;
 8005f60:	89fb      	ldrh	r3, [r7, #14]
 8005f62:	e000      	b.n	8005f66 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8005f64:	88fb      	ldrh	r3, [r7, #6]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2e8ba2e9 	.word	0x2e8ba2e9

08005f74 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	e00a      	b.n	8005faa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f94:	f3af 8000 	nop.w
 8005f98:	4601      	mov	r1, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	60ba      	str	r2, [r7, #8]
 8005fa0:	b2ca      	uxtb	r2, r1
 8005fa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	dbf0      	blt.n	8005f94 <_read+0x12>
  }

  return len;
 8005fb2:	687b      	ldr	r3, [r7, #4]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3718      	adds	r7, #24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
 8005fcc:	e009      	b.n	8005fe2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	60ba      	str	r2, [r7, #8]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	dbf1      	blt.n	8005fce <_write+0x12>
  }
  return len;
 8005fea:	687b      	ldr	r3, [r7, #4]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <_close>:

int _close(int file)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800601c:	605a      	str	r2, [r3, #4]
  return 0;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <_isatty>:

int _isatty(int file)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006034:	2301      	movs	r3, #1
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006064:	4a14      	ldr	r2, [pc, #80]	@ (80060b8 <_sbrk+0x5c>)
 8006066:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <_sbrk+0x60>)
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006070:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <_sbrk+0x64>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d102      	bne.n	800607e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006078:	4b11      	ldr	r3, [pc, #68]	@ (80060c0 <_sbrk+0x64>)
 800607a:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <_sbrk+0x68>)
 800607c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800607e:	4b10      	ldr	r3, [pc, #64]	@ (80060c0 <_sbrk+0x64>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4413      	add	r3, r2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d207      	bcs.n	800609c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800608c:	f003 fd8e 	bl	8009bac <__errno>
 8006090:	4603      	mov	r3, r0
 8006092:	220c      	movs	r2, #12
 8006094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006096:	f04f 33ff 	mov.w	r3, #4294967295
 800609a:	e009      	b.n	80060b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800609c:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <_sbrk+0x64>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <_sbrk+0x64>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	4a05      	ldr	r2, [pc, #20]	@ (80060c0 <_sbrk+0x64>)
 80060ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80060ae:	68fb      	ldr	r3, [r7, #12]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20030000 	.word	0x20030000
 80060bc:	00000400 	.word	0x00000400
 80060c0:	20025fc0 	.word	0x20025fc0
 80060c4:	20026118 	.word	0x20026118

080060c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060cc:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <SystemInit+0x20>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d2:	4a05      	ldr	r2, [pc, #20]	@ (80060e8 <SystemInit+0x20>)
 80060d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	e000ed00 	.word	0xe000ed00

080060ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80060ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006124 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80060f0:	f7ff ffea 	bl	80060c8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060f4:	480c      	ldr	r0, [pc, #48]	@ (8006128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80060f6:	490d      	ldr	r1, [pc, #52]	@ (800612c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80060f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80060fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060fc:	e002      	b.n	8006104 <LoopCopyDataInit>

080060fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006102:	3304      	adds	r3, #4

08006104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006108:	d3f9      	bcc.n	80060fe <CopyDataInit>
  
/* Zero fill the bss segment. */

  ldr r2, =_sbss
 800610a:	4a0a      	ldr	r2, [pc, #40]	@ (8006134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800610c:	4c0a      	ldr	r4, [pc, #40]	@ (8006138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800610e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006110:	e001      	b.n	8006116 <LoopFillZerobss>

08006112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006114:	3204      	adds	r2, #4

08006116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006118:	d3fb      	bcc.n	8006112 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800611a:	f003 fd4d 	bl	8009bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800611e:	f7ff f86e 	bl	80051fe <main>
  bx  lr    
 8006122:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006124:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800612c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8006130:	0800b888 	.word	0x0800b888
  ldr r2, =_sbss
 8006134:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8006138:	20026114 	.word	0x20026114

0800613c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800613c:	e7fe      	b.n	800613c <ADC_IRQHandler>
	...

08006140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006144:	4b0e      	ldr	r3, [pc, #56]	@ (8006180 <HAL_Init+0x40>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a0d      	ldr	r2, [pc, #52]	@ (8006180 <HAL_Init+0x40>)
 800614a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800614e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_Init+0x40>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a0a      	ldr	r2, [pc, #40]	@ (8006180 <HAL_Init+0x40>)
 8006156:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800615a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800615c:	4b08      	ldr	r3, [pc, #32]	@ (8006180 <HAL_Init+0x40>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a07      	ldr	r2, [pc, #28]	@ (8006180 <HAL_Init+0x40>)
 8006162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006168:	2003      	movs	r0, #3
 800616a:	f000 f991 	bl	8006490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800616e:	2000      	movs	r0, #0
 8006170:	f000 f808 	bl	8006184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006174:	f7ff f8f2 	bl	800535c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40023c00 	.word	0x40023c00

08006184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800618c:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <HAL_InitTick+0x54>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b12      	ldr	r3, [pc, #72]	@ (80061dc <HAL_InitTick+0x58>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	4619      	mov	r1, r3
 8006196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800619a:	fbb3 f3f1 	udiv	r3, r3, r1
 800619e:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f9b7 	bl	8006516 <HAL_SYSTICK_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e00e      	b.n	80061d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b0f      	cmp	r3, #15
 80061b6:	d80a      	bhi.n	80061ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061b8:	2200      	movs	r2, #0
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	f000 f971 	bl	80064a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061c4:	4a06      	ldr	r2, [pc, #24]	@ (80061e0 <HAL_InitTick+0x5c>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e000      	b.n	80061d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000014 	.word	0x20000014
 80061dc:	2000001c 	.word	0x2000001c
 80061e0:	20000018 	.word	0x20000018

080061e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061e8:	4b06      	ldr	r3, [pc, #24]	@ (8006204 <HAL_IncTick+0x20>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <HAL_IncTick+0x24>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4413      	add	r3, r2
 80061f4:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <HAL_IncTick+0x24>)
 80061f6:	6013      	str	r3, [r2, #0]
}
 80061f8:	bf00      	nop
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	2000001c 	.word	0x2000001c
 8006208:	20025fc4 	.word	0x20025fc4

0800620c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return uwTick;
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <HAL_GetTick+0x14>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20025fc4 	.word	0x20025fc4

08006224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800622c:	f7ff ffee 	bl	800620c <HAL_GetTick>
 8006230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623c:	d005      	beq.n	800624a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800623e:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <HAL_Delay+0x44>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800624a:	bf00      	nop
 800624c:	f7ff ffde 	bl	800620c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	429a      	cmp	r2, r3
 800625a:	d8f7      	bhi.n	800624c <HAL_Delay+0x28>
  {
  }
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	2000001c 	.word	0x2000001c

0800626c <__NVIC_SetPriorityGrouping>:
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800627c:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <__NVIC_SetPriorityGrouping+0x44>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006288:	4013      	ands	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800629e:	4a04      	ldr	r2, [pc, #16]	@ (80062b0 <__NVIC_SetPriorityGrouping+0x44>)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	60d3      	str	r3, [r2, #12]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <__NVIC_GetPriorityGrouping>:
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b8:	4b04      	ldr	r3, [pc, #16]	@ (80062cc <__NVIC_GetPriorityGrouping+0x18>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	f003 0307 	and.w	r3, r3, #7
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <__NVIC_EnableIRQ>:
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	db0b      	blt.n	80062fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062e2:	79fb      	ldrb	r3, [r7, #7]
 80062e4:	f003 021f 	and.w	r2, r3, #31
 80062e8:	4907      	ldr	r1, [pc, #28]	@ (8006308 <__NVIC_EnableIRQ+0x38>)
 80062ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2001      	movs	r0, #1
 80062f2:	fa00 f202 	lsl.w	r2, r0, r2
 80062f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	e000e100 	.word	0xe000e100

0800630c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	db12      	blt.n	8006344 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	f003 021f 	and.w	r2, r3, #31
 8006324:	490a      	ldr	r1, [pc, #40]	@ (8006350 <__NVIC_DisableIRQ+0x44>)
 8006326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2001      	movs	r0, #1
 800632e:	fa00 f202 	lsl.w	r2, r0, r2
 8006332:	3320      	adds	r3, #32
 8006334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006338:	f3bf 8f4f 	dsb	sy
}
 800633c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800633e:	f3bf 8f6f 	isb	sy
}
 8006342:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	e000e100 	.word	0xe000e100

08006354 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006362:	2b00      	cmp	r3, #0
 8006364:	db0c      	blt.n	8006380 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	f003 021f 	and.w	r2, r3, #31
 800636c:	4907      	ldr	r1, [pc, #28]	@ (800638c <__NVIC_ClearPendingIRQ+0x38>)
 800636e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	2001      	movs	r0, #1
 8006376:	fa00 f202 	lsl.w	r2, r0, r2
 800637a:	3360      	adds	r3, #96	@ 0x60
 800637c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	e000e100 	.word	0xe000e100

08006390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	6039      	str	r1, [r7, #0]
 800639a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db0a      	blt.n	80063ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	490c      	ldr	r1, [pc, #48]	@ (80063dc <__NVIC_SetPriority+0x4c>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	440b      	add	r3, r1
 80063b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b8:	e00a      	b.n	80063d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	4908      	ldr	r1, [pc, #32]	@ (80063e0 <__NVIC_SetPriority+0x50>)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	3b04      	subs	r3, #4
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	440b      	add	r3, r1
 80063ce:	761a      	strb	r2, [r3, #24]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	e000e100 	.word	0xe000e100
 80063e0:	e000ed00 	.word	0xe000ed00

080063e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	@ 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f1c3 0307 	rsb	r3, r3, #7
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf28      	it	cs
 8006402:	2304      	movcs	r3, #4
 8006404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3304      	adds	r3, #4
 800640a:	2b06      	cmp	r3, #6
 800640c:	d902      	bls.n	8006414 <NVIC_EncodePriority+0x30>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3b03      	subs	r3, #3
 8006412:	e000      	b.n	8006416 <NVIC_EncodePriority+0x32>
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	401a      	ands	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800642c:	f04f 31ff 	mov.w	r1, #4294967295
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	fa01 f303 	lsl.w	r3, r1, r3
 8006436:	43d9      	mvns	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800643c:	4313      	orrs	r3, r2
         );
}
 800643e:	4618      	mov	r0, r3
 8006440:	3724      	adds	r7, #36	@ 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3b01      	subs	r3, #1
 8006458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645c:	d301      	bcc.n	8006462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645e:	2301      	movs	r3, #1
 8006460:	e00f      	b.n	8006482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006462:	4a0a      	ldr	r2, [pc, #40]	@ (800648c <SysTick_Config+0x40>)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3b01      	subs	r3, #1
 8006468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800646a:	210f      	movs	r1, #15
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	f7ff ff8e 	bl	8006390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006474:	4b05      	ldr	r3, [pc, #20]	@ (800648c <SysTick_Config+0x40>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800647a:	4b04      	ldr	r3, [pc, #16]	@ (800648c <SysTick_Config+0x40>)
 800647c:	2207      	movs	r2, #7
 800647e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	e000e010 	.word	0xe000e010

08006490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff fee7 	bl	800626c <__NVIC_SetPriorityGrouping>
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	4603      	mov	r3, r0
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064b8:	f7ff fefc 	bl	80062b4 <__NVIC_GetPriorityGrouping>
 80064bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	6978      	ldr	r0, [r7, #20]
 80064c4:	f7ff ff8e 	bl	80063e4 <NVIC_EncodePriority>
 80064c8:	4602      	mov	r2, r0
 80064ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff ff5d 	bl	8006390 <__NVIC_SetPriority>
}
 80064d6:	bf00      	nop
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b082      	sub	sp, #8
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	4603      	mov	r3, r0
 80064e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff feef 	bl	80062d0 <__NVIC_EnableIRQ>
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	4603      	mov	r3, r0
 8006502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff feff 	bl	800630c <__NVIC_DisableIRQ>
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ff94 	bl	800644c <SysTick_Config>
 8006524:	4603      	mov	r3, r0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	4603      	mov	r3, r0
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff ff09 	bl	8006354 <__NVIC_ClearPendingIRQ>
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2201      	movs	r2, #1
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8006566:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <HAL_EXTI_ClearPending+0x2c>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6153      	str	r3, [r2, #20]
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40013c00 	.word	0x40013c00

0800657c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800657c:	b480      	push	{r7}
 800657e:	b089      	sub	sp, #36	@ 0x24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800658a:	2300      	movs	r3, #0
 800658c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	e177      	b.n	8006888 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006598:	2201      	movs	r2, #1
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4013      	ands	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	f040 8166 	bne.w	8006882 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d005      	beq.n	80065ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d130      	bne.n	8006630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	2203      	movs	r2, #3
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	4013      	ands	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006604:	2201      	movs	r2, #1
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	43db      	mvns	r3, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 0201 	and.w	r2, r3, #1
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	2b03      	cmp	r3, #3
 800663a:	d017      	beq.n	800666c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	2203      	movs	r2, #3
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4013      	ands	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4313      	orrs	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d123      	bne.n	80066c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	08da      	lsrs	r2, r3, #3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3208      	adds	r2, #8
 8006680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	220f      	movs	r2, #15
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	4013      	ands	r3, r2
 800669a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	08da      	lsrs	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3208      	adds	r2, #8
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	2203      	movs	r2, #3
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	43db      	mvns	r3, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4013      	ands	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f003 0203 	and.w	r2, r3, #3
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80c0 	beq.w	8006882 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	4b66      	ldr	r3, [pc, #408]	@ (80068a0 <HAL_GPIO_Init+0x324>)
 8006708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670a:	4a65      	ldr	r2, [pc, #404]	@ (80068a0 <HAL_GPIO_Init+0x324>)
 800670c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006710:	6453      	str	r3, [r2, #68]	@ 0x44
 8006712:	4b63      	ldr	r3, [pc, #396]	@ (80068a0 <HAL_GPIO_Init+0x324>)
 8006714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006716:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800671e:	4a61      	ldr	r2, [pc, #388]	@ (80068a4 <HAL_GPIO_Init+0x328>)
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	089b      	lsrs	r3, r3, #2
 8006724:	3302      	adds	r3, #2
 8006726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	220f      	movs	r2, #15
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	43db      	mvns	r3, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	4013      	ands	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a58      	ldr	r2, [pc, #352]	@ (80068a8 <HAL_GPIO_Init+0x32c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d037      	beq.n	80067ba <HAL_GPIO_Init+0x23e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a57      	ldr	r2, [pc, #348]	@ (80068ac <HAL_GPIO_Init+0x330>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d031      	beq.n	80067b6 <HAL_GPIO_Init+0x23a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a56      	ldr	r2, [pc, #344]	@ (80068b0 <HAL_GPIO_Init+0x334>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02b      	beq.n	80067b2 <HAL_GPIO_Init+0x236>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a55      	ldr	r2, [pc, #340]	@ (80068b4 <HAL_GPIO_Init+0x338>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d025      	beq.n	80067ae <HAL_GPIO_Init+0x232>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a54      	ldr	r2, [pc, #336]	@ (80068b8 <HAL_GPIO_Init+0x33c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01f      	beq.n	80067aa <HAL_GPIO_Init+0x22e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a53      	ldr	r2, [pc, #332]	@ (80068bc <HAL_GPIO_Init+0x340>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d019      	beq.n	80067a6 <HAL_GPIO_Init+0x22a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a52      	ldr	r2, [pc, #328]	@ (80068c0 <HAL_GPIO_Init+0x344>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <HAL_GPIO_Init+0x226>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a51      	ldr	r2, [pc, #324]	@ (80068c4 <HAL_GPIO_Init+0x348>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00d      	beq.n	800679e <HAL_GPIO_Init+0x222>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a50      	ldr	r2, [pc, #320]	@ (80068c8 <HAL_GPIO_Init+0x34c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <HAL_GPIO_Init+0x21e>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a4f      	ldr	r2, [pc, #316]	@ (80068cc <HAL_GPIO_Init+0x350>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <HAL_GPIO_Init+0x21a>
 8006792:	2309      	movs	r3, #9
 8006794:	e012      	b.n	80067bc <HAL_GPIO_Init+0x240>
 8006796:	230a      	movs	r3, #10
 8006798:	e010      	b.n	80067bc <HAL_GPIO_Init+0x240>
 800679a:	2308      	movs	r3, #8
 800679c:	e00e      	b.n	80067bc <HAL_GPIO_Init+0x240>
 800679e:	2307      	movs	r3, #7
 80067a0:	e00c      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067a2:	2306      	movs	r3, #6
 80067a4:	e00a      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067a6:	2305      	movs	r3, #5
 80067a8:	e008      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067aa:	2304      	movs	r3, #4
 80067ac:	e006      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067ae:	2303      	movs	r3, #3
 80067b0:	e004      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e002      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <HAL_GPIO_Init+0x240>
 80067ba:	2300      	movs	r3, #0
 80067bc:	69fa      	ldr	r2, [r7, #28]
 80067be:	f002 0203 	and.w	r2, r2, #3
 80067c2:	0092      	lsls	r2, r2, #2
 80067c4:	4093      	lsls	r3, r2
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067cc:	4935      	ldr	r1, [pc, #212]	@ (80068a4 <HAL_GPIO_Init+0x328>)
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	089b      	lsrs	r3, r3, #2
 80067d2:	3302      	adds	r3, #2
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067da:	4b3d      	ldr	r3, [pc, #244]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	43db      	mvns	r3, r3
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	4013      	ands	r3, r2
 80067e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067fe:	4a34      	ldr	r2, [pc, #208]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006804:	4b32      	ldr	r3, [pc, #200]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	43db      	mvns	r3, r3
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	4013      	ands	r3, r2
 8006812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006828:	4a29      	ldr	r2, [pc, #164]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800682e:	4b28      	ldr	r3, [pc, #160]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	43db      	mvns	r3, r3
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4013      	ands	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006852:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006858:	4b1d      	ldr	r3, [pc, #116]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	43db      	mvns	r3, r3
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	4013      	ands	r3, r2
 8006866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800687c:	4a14      	ldr	r2, [pc, #80]	@ (80068d0 <HAL_GPIO_Init+0x354>)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	3301      	adds	r3, #1
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b0f      	cmp	r3, #15
 800688c:	f67f ae84 	bls.w	8006598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	3724      	adds	r7, #36	@ 0x24
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40023800 	.word	0x40023800
 80068a4:	40013800 	.word	0x40013800
 80068a8:	40020000 	.word	0x40020000
 80068ac:	40020400 	.word	0x40020400
 80068b0:	40020800 	.word	0x40020800
 80068b4:	40020c00 	.word	0x40020c00
 80068b8:	40021000 	.word	0x40021000
 80068bc:	40021400 	.word	0x40021400
 80068c0:	40021800 	.word	0x40021800
 80068c4:	40021c00 	.word	0x40021c00
 80068c8:	40022000 	.word	0x40022000
 80068cc:	40022400 	.word	0x40022400
 80068d0:	40013c00 	.word	0x40013c00

080068d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068de:	2300      	movs	r3, #0
 80068e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80068e2:	2300      	movs	r3, #0
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	e0d9      	b.n	8006aa4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068f0:	2201      	movs	r2, #1
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4013      	ands	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	429a      	cmp	r2, r3
 8006908:	f040 80c9 	bne.w	8006a9e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800690c:	4a6b      	ldr	r2, [pc, #428]	@ (8006abc <HAL_GPIO_DeInit+0x1e8>)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	3302      	adds	r3, #2
 8006914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006918:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	220f      	movs	r2, #15
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	4013      	ands	r3, r2
 800692c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a63      	ldr	r2, [pc, #396]	@ (8006ac0 <HAL_GPIO_DeInit+0x1ec>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d037      	beq.n	80069a6 <HAL_GPIO_DeInit+0xd2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a62      	ldr	r2, [pc, #392]	@ (8006ac4 <HAL_GPIO_DeInit+0x1f0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d031      	beq.n	80069a2 <HAL_GPIO_DeInit+0xce>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a61      	ldr	r2, [pc, #388]	@ (8006ac8 <HAL_GPIO_DeInit+0x1f4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d02b      	beq.n	800699e <HAL_GPIO_DeInit+0xca>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a60      	ldr	r2, [pc, #384]	@ (8006acc <HAL_GPIO_DeInit+0x1f8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d025      	beq.n	800699a <HAL_GPIO_DeInit+0xc6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a5f      	ldr	r2, [pc, #380]	@ (8006ad0 <HAL_GPIO_DeInit+0x1fc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01f      	beq.n	8006996 <HAL_GPIO_DeInit+0xc2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad4 <HAL_GPIO_DeInit+0x200>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d019      	beq.n	8006992 <HAL_GPIO_DeInit+0xbe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad8 <HAL_GPIO_DeInit+0x204>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_GPIO_DeInit+0xba>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a5c      	ldr	r2, [pc, #368]	@ (8006adc <HAL_GPIO_DeInit+0x208>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00d      	beq.n	800698a <HAL_GPIO_DeInit+0xb6>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a5b      	ldr	r2, [pc, #364]	@ (8006ae0 <HAL_GPIO_DeInit+0x20c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <HAL_GPIO_DeInit+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a5a      	ldr	r2, [pc, #360]	@ (8006ae4 <HAL_GPIO_DeInit+0x210>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d101      	bne.n	8006982 <HAL_GPIO_DeInit+0xae>
 800697e:	2309      	movs	r3, #9
 8006980:	e012      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 8006982:	230a      	movs	r3, #10
 8006984:	e010      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 8006986:	2308      	movs	r3, #8
 8006988:	e00e      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 800698a:	2307      	movs	r3, #7
 800698c:	e00c      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 800698e:	2306      	movs	r3, #6
 8006990:	e00a      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 8006992:	2305      	movs	r3, #5
 8006994:	e008      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 8006996:	2304      	movs	r3, #4
 8006998:	e006      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 800699a:	2303      	movs	r3, #3
 800699c:	e004      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 800699e:	2302      	movs	r3, #2
 80069a0:	e002      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <HAL_GPIO_DeInit+0xd4>
 80069a6:	2300      	movs	r3, #0
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	f002 0203 	and.w	r2, r2, #3
 80069ae:	0092      	lsls	r2, r2, #2
 80069b0:	4093      	lsls	r3, r2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d132      	bne.n	8006a1e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80069b8:	4b4b      	ldr	r3, [pc, #300]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	43db      	mvns	r3, r3
 80069c0:	4949      	ldr	r1, [pc, #292]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80069c6:	4b48      	ldr	r3, [pc, #288]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	43db      	mvns	r3, r3
 80069ce:	4946      	ldr	r1, [pc, #280]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80069d4:	4b44      	ldr	r3, [pc, #272]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	43db      	mvns	r3, r3
 80069dc:	4942      	ldr	r1, [pc, #264]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069de:	4013      	ands	r3, r2
 80069e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80069e2:	4b41      	ldr	r3, [pc, #260]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	43db      	mvns	r3, r3
 80069ea:	493f      	ldr	r1, [pc, #252]	@ (8006ae8 <HAL_GPIO_DeInit+0x214>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	220f      	movs	r2, #15
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006a00:	4a2e      	ldr	r2, [pc, #184]	@ (8006abc <HAL_GPIO_DeInit+0x1e8>)
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	089b      	lsrs	r3, r3, #2
 8006a06:	3302      	adds	r3, #2
 8006a08:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	43da      	mvns	r2, r3
 8006a10:	482a      	ldr	r0, [pc, #168]	@ (8006abc <HAL_GPIO_DeInit+0x1e8>)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	089b      	lsrs	r3, r3, #2
 8006a16:	400a      	ands	r2, r1
 8006a18:	3302      	adds	r3, #2
 8006a1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	005b      	lsls	r3, r3, #1
 8006a26:	2103      	movs	r1, #3
 8006a28:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	401a      	ands	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	08da      	lsrs	r2, r3, #3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3208      	adds	r2, #8
 8006a3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	220f      	movs	r2, #15
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	08d2      	lsrs	r2, r2, #3
 8006a54:	4019      	ands	r1, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3208      	adds	r2, #8
 8006a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	2103      	movs	r1, #3
 8006a68:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	401a      	ands	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	2101      	movs	r1, #1
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	401a      	ands	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2103      	movs	r1, #3
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	43db      	mvns	r3, r3
 8006a98:	401a      	ands	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b0f      	cmp	r3, #15
 8006aa8:	f67f af22 	bls.w	80068f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40013800 	.word	0x40013800
 8006ac0:	40020000 	.word	0x40020000
 8006ac4:	40020400 	.word	0x40020400
 8006ac8:	40020800 	.word	0x40020800
 8006acc:	40020c00 	.word	0x40020c00
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	40021400 	.word	0x40021400
 8006ad8:	40021800 	.word	0x40021800
 8006adc:	40021c00 	.word	0x40021c00
 8006ae0:	40022000 	.word	0x40022000
 8006ae4:	40022400 	.word	0x40022400
 8006ae8:	40013c00 	.word	0x40013c00

08006aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	807b      	strh	r3, [r7, #2]
 8006af8:	4613      	mov	r3, r2
 8006afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006afc:	787b      	ldrb	r3, [r7, #1]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b02:	887a      	ldrh	r2, [r7, #2]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b08:	e003      	b.n	8006b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b0a:	887b      	ldrh	r3, [r7, #2]
 8006b0c:	041a      	lsls	r2, r3, #16
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	619a      	str	r2, [r3, #24]
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e12b      	b.n	8006d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fe fc30 	bl	80053ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2224      	movs	r2, #36	@ 0x24
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006b84:	f001 ff06 	bl	8008994 <HAL_RCC_GetPCLK1Freq>
 8006b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4a81      	ldr	r2, [pc, #516]	@ (8006d94 <HAL_I2C_Init+0x274>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d807      	bhi.n	8006ba4 <HAL_I2C_Init+0x84>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a80      	ldr	r2, [pc, #512]	@ (8006d98 <HAL_I2C_Init+0x278>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	bf94      	ite	ls
 8006b9c:	2301      	movls	r3, #1
 8006b9e:	2300      	movhi	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	e006      	b.n	8006bb2 <HAL_I2C_Init+0x92>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8006d9c <HAL_I2C_Init+0x27c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	bf94      	ite	ls
 8006bac:	2301      	movls	r3, #1
 8006bae:	2300      	movhi	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e0e7      	b.n	8006d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4a78      	ldr	r2, [pc, #480]	@ (8006da0 <HAL_I2C_Init+0x280>)
 8006bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc2:	0c9b      	lsrs	r3, r3, #18
 8006bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4a6a      	ldr	r2, [pc, #424]	@ (8006d94 <HAL_I2C_Init+0x274>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d802      	bhi.n	8006bf4 <HAL_I2C_Init+0xd4>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	e009      	b.n	8006c08 <HAL_I2C_Init+0xe8>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	4a69      	ldr	r2, [pc, #420]	@ (8006da4 <HAL_I2C_Init+0x284>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	099b      	lsrs	r3, r3, #6
 8006c06:	3301      	adds	r3, #1
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6812      	ldr	r2, [r2, #0]
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	495c      	ldr	r1, [pc, #368]	@ (8006d94 <HAL_I2C_Init+0x274>)
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d819      	bhi.n	8006c5c <HAL_I2C_Init+0x13c>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1e59      	subs	r1, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c36:	1c59      	adds	r1, r3, #1
 8006c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006c3c:	400b      	ands	r3, r1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_I2C_Init+0x138>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1e59      	subs	r1, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c50:	3301      	adds	r3, #1
 8006c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c56:	e051      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	e04f      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d111      	bne.n	8006c88 <HAL_I2C_Init+0x168>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	1e58      	subs	r0, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6859      	ldr	r1, [r3, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	440b      	add	r3, r1
 8006c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c76:	3301      	adds	r3, #1
 8006c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	e012      	b.n	8006cae <HAL_I2C_Init+0x18e>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	1e58      	subs	r0, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6859      	ldr	r1, [r3, #4]
 8006c90:	460b      	mov	r3, r1
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	0099      	lsls	r1, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf0c      	ite	eq
 8006ca8:	2301      	moveq	r3, #1
 8006caa:	2300      	movne	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_Init+0x196>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e022      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10e      	bne.n	8006cdc <HAL_I2C_Init+0x1bc>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1e58      	subs	r0, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6859      	ldr	r1, [r3, #4]
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	440b      	add	r3, r1
 8006ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cda:	e00f      	b.n	8006cfc <HAL_I2C_Init+0x1dc>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	1e58      	subs	r0, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	0099      	lsls	r1, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	6809      	ldr	r1, [r1, #0]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69da      	ldr	r2, [r3, #28]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6911      	ldr	r1, [r2, #16]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68d2      	ldr	r2, [r2, #12]
 8006d36:	4311      	orrs	r1, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	000186a0 	.word	0x000186a0
 8006d98:	001e847f 	.word	0x001e847f
 8006d9c:	003d08ff 	.word	0x003d08ff
 8006da0:	431bde83 	.word	0x431bde83
 8006da4:	10624dd3 	.word	0x10624dd3

08006da8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b088      	sub	sp, #32
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	4608      	mov	r0, r1
 8006db2:	4611      	mov	r1, r2
 8006db4:	461a      	mov	r2, r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	817b      	strh	r3, [r7, #10]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	813b      	strh	r3, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006dc2:	f7ff fa23 	bl	800620c <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b20      	cmp	r3, #32
 8006dd2:	f040 80d9 	bne.w	8006f88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2319      	movs	r3, #25
 8006ddc:	2201      	movs	r2, #1
 8006dde:	496d      	ldr	r1, [pc, #436]	@ (8006f94 <HAL_I2C_Mem_Write+0x1ec>)
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fc8b 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
 8006dee:	e0cc      	b.n	8006f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_I2C_Mem_Write+0x56>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e0c5      	b.n	8006f8a <HAL_I2C_Mem_Write+0x1e2>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d007      	beq.n	8006e24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2221      	movs	r2, #33	@ 0x21
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2240      	movs	r2, #64	@ 0x40
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a4d      	ldr	r2, [pc, #308]	@ (8006f98 <HAL_I2C_Mem_Write+0x1f0>)
 8006e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e66:	88f8      	ldrh	r0, [r7, #6]
 8006e68:	893a      	ldrh	r2, [r7, #8]
 8006e6a:	8979      	ldrh	r1, [r7, #10]
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	4603      	mov	r3, r0
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 fac2 	bl	8007400 <I2C_RequestMemoryWrite>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d052      	beq.n	8006f28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e081      	b.n	8006f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fd50 	bl	8007930 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00d      	beq.n	8006eb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d107      	bne.n	8006eae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e06b      	b.n	8006f8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb6:	781a      	ldrb	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d11b      	bne.n	8006f28 <HAL_I2C_Mem_Write+0x180>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	781a      	ldrb	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1aa      	bne.n	8006e86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fd43 	bl	80079c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d107      	bne.n	8006f58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e016      	b.n	8006f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	e000      	b.n	8006f8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006f88:	2302      	movs	r3, #2
  }
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	00100002 	.word	0x00100002
 8006f98:	ffff0000 	.word	0xffff0000

08006f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08c      	sub	sp, #48	@ 0x30
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	817b      	strh	r3, [r7, #10]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	813b      	strh	r3, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006fb6:	f7ff f929 	bl	800620c <HAL_GetTick>
 8006fba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b20      	cmp	r3, #32
 8006fc6:	f040 8214 	bne.w	80073f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	2319      	movs	r3, #25
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	497b      	ldr	r1, [pc, #492]	@ (80071c0 <HAL_I2C_Mem_Read+0x224>)
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fb91 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e207      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d101      	bne.n	8006ff2 <HAL_I2C_Mem_Read+0x56>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	e200      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d007      	beq.n	8007018 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2222      	movs	r2, #34	@ 0x22
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2240      	movs	r2, #64	@ 0x40
 8007034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007048:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4a5b      	ldr	r2, [pc, #364]	@ (80071c4 <HAL_I2C_Mem_Read+0x228>)
 8007058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800705a:	88f8      	ldrh	r0, [r7, #6]
 800705c:	893a      	ldrh	r2, [r7, #8]
 800705e:	8979      	ldrh	r1, [r7, #10]
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4603      	mov	r3, r0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fa5e 	bl	800752c <I2C_RequestMemoryRead>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e1bc      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d113      	bne.n	80070aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007082:	2300      	movs	r3, #0
 8007084:	623b      	str	r3, [r7, #32]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	623b      	str	r3, [r7, #32]
 8007096:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	e190      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d11b      	bne.n	80070ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070e6:	601a      	str	r2, [r3, #0]
 80070e8:	e170      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d11b      	bne.n	800712a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007100:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	e150      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007140:	e144      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007146:	2b03      	cmp	r3, #3
 8007148:	f200 80f1 	bhi.w	800732e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007150:	2b01      	cmp	r3, #1
 8007152:	d123      	bne.n	800719c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fc79 	bl	8007a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e145      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800719a:	e117      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d14e      	bne.n	8007242 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071aa:	2200      	movs	r2, #0
 80071ac:	4906      	ldr	r1, [pc, #24]	@ (80071c8 <HAL_I2C_Mem_Read+0x22c>)
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 faa4 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e11a      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
 80071be:	bf00      	nop
 80071c0:	00100002 	.word	0x00100002
 80071c4:	ffff0000 	.word	0xffff0000
 80071c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e6:	b2d2      	uxtb	r2, r2
 80071e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007240:	e0c4      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	2200      	movs	r2, #0
 800724a:	496c      	ldr	r1, [pc, #432]	@ (80073fc <HAL_I2C_Mem_Read+0x460>)
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fa55 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0cb      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800726a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a4:	2200      	movs	r2, #0
 80072a6:	4955      	ldr	r1, [pc, #340]	@ (80073fc <HAL_I2C_Mem_Read+0x460>)
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fa27 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e09d      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	691a      	ldr	r2, [r3, #16]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800732c:	e04e      	b.n	80073cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800732e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007330:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fb8c 	bl	8007a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e058      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	b2d2      	uxtb	r2, r2
 800734e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b04      	cmp	r3, #4
 8007380:	d124      	bne.n	80073cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007386:	2b03      	cmp	r3, #3
 8007388:	d107      	bne.n	800739a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007398:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	b2d2      	uxtb	r2, r2
 80073a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f47f aeb6 	bne.w	8007142 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3728      	adds	r7, #40	@ 0x28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	00010004 	.word	0x00010004

08007400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	4608      	mov	r0, r1
 800740a:	4611      	mov	r1, r2
 800740c:	461a      	mov	r2, r3
 800740e:	4603      	mov	r3, r0
 8007410:	817b      	strh	r3, [r7, #10]
 8007412:	460b      	mov	r3, r1
 8007414:	813b      	strh	r3, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	2200      	movs	r2, #0
 8007432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f960 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00d      	beq.n	800745e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007450:	d103      	bne.n	800745a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e05f      	b.n	800751e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800745e:	897b      	ldrh	r3, [r7, #10]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800746c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	6a3a      	ldr	r2, [r7, #32]
 8007472:	492d      	ldr	r1, [pc, #180]	@ (8007528 <I2C_RequestMemoryWrite+0x128>)
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f9bb 	bl	80077f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e04c      	b.n	800751e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007484:	2300      	movs	r3, #0
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800749a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800749c:	6a39      	ldr	r1, [r7, #32]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fa46 	bl	8007930 <I2C_WaitOnTXEFlagUntilTimeout>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00d      	beq.n	80074c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d107      	bne.n	80074c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e02b      	b.n	800751e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d105      	bne.n	80074d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074cc:	893b      	ldrh	r3, [r7, #8]
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	611a      	str	r2, [r3, #16]
 80074d6:	e021      	b.n	800751c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074d8:	893b      	ldrh	r3, [r7, #8]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	b29b      	uxth	r3, r3
 80074de:	b2da      	uxtb	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e8:	6a39      	ldr	r1, [r7, #32]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fa20 	bl	8007930 <I2C_WaitOnTXEFlagUntilTimeout>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d107      	bne.n	800750e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800750c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e005      	b.n	800751e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007512:	893b      	ldrh	r3, [r7, #8]
 8007514:	b2da      	uxtb	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	00010002 	.word	0x00010002

0800752c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	461a      	mov	r2, r3
 800753a:	4603      	mov	r3, r0
 800753c:	817b      	strh	r3, [r7, #10]
 800753e:	460b      	mov	r3, r1
 8007540:	813b      	strh	r3, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007554:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007564:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	2200      	movs	r2, #0
 800756e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f8c2 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00d      	beq.n	800759a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758c:	d103      	bne.n	8007596 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007594:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e0aa      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800759a:	897b      	ldrh	r3, [r7, #10]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80075a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	6a3a      	ldr	r2, [r7, #32]
 80075ae:	4952      	ldr	r1, [pc, #328]	@ (80076f8 <I2C_RequestMemoryRead+0x1cc>)
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f91d 	bl	80077f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e097      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d8:	6a39      	ldr	r1, [r7, #32]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f9a8 	bl	8007930 <I2C_WaitOnTXEFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00d      	beq.n	8007602 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d107      	bne.n	80075fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e076      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007602:	88fb      	ldrh	r3, [r7, #6]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d105      	bne.n	8007614 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007608:	893b      	ldrh	r3, [r7, #8]
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	611a      	str	r2, [r3, #16]
 8007612:	e021      	b.n	8007658 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007614:	893b      	ldrh	r3, [r7, #8]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	b29b      	uxth	r3, r3
 800761a:	b2da      	uxtb	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007624:	6a39      	ldr	r1, [r7, #32]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f982 	bl	8007930 <I2C_WaitOnTXEFlagUntilTimeout>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00d      	beq.n	800764e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	2b04      	cmp	r3, #4
 8007638:	d107      	bne.n	800764a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e050      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800764e:	893b      	ldrh	r3, [r7, #8]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765a:	6a39      	ldr	r1, [r7, #32]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f967 	bl	8007930 <I2C_WaitOnTXEFlagUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766c:	2b04      	cmp	r3, #4
 800766e:	d107      	bne.n	8007680 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800767e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e035      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007692:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	2200      	movs	r2, #0
 800769c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f82b 	bl	80076fc <I2C_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ba:	d103      	bne.n	80076c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e013      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80076c8:	897b      	ldrh	r3, [r7, #10]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f043 0301 	orr.w	r3, r3, #1
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	4906      	ldr	r1, [pc, #24]	@ (80076f8 <I2C_RequestMemoryRead+0x1cc>)
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f886 	bl	80077f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	00010002 	.word	0x00010002

080076fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	603b      	str	r3, [r7, #0]
 8007708:	4613      	mov	r3, r2
 800770a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800770c:	e048      	b.n	80077a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007714:	d044      	beq.n	80077a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007716:	f7fe fd79 	bl	800620c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d302      	bcc.n	800772c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d139      	bne.n	80077a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	0c1b      	lsrs	r3, r3, #16
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b01      	cmp	r3, #1
 8007734:	d10d      	bne.n	8007752 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	43da      	mvns	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4013      	ands	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf0c      	ite	eq
 8007748:	2301      	moveq	r3, #1
 800774a:	2300      	movne	r3, #0
 800774c:	b2db      	uxtb	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	e00c      	b.n	800776c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	43da      	mvns	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	4013      	ands	r3, r2
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	bf0c      	ite	eq
 8007764:	2301      	moveq	r3, #1
 8007766:	2300      	movne	r3, #0
 8007768:	b2db      	uxtb	r3, r3
 800776a:	461a      	mov	r2, r3
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	429a      	cmp	r2, r3
 8007770:	d116      	bne.n	80077a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778c:	f043 0220 	orr.w	r2, r3, #32
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e023      	b.n	80077e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d10d      	bne.n	80077c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	43da      	mvns	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4013      	ands	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf0c      	ite	eq
 80077bc:	2301      	moveq	r3, #1
 80077be:	2300      	movne	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	461a      	mov	r2, r3
 80077c4:	e00c      	b.n	80077e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	43da      	mvns	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	4013      	ands	r3, r2
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d093      	beq.n	800770e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80077fe:	e071      	b.n	80078e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800780a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780e:	d123      	bne.n	8007858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800781e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007844:	f043 0204 	orr.w	r2, r3, #4
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e067      	b.n	8007928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d041      	beq.n	80078e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007860:	f7fe fcd4 	bl	800620c <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d302      	bcc.n	8007876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d136      	bne.n	80078e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	0c1b      	lsrs	r3, r3, #16
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d10c      	bne.n	800789a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	43da      	mvns	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	e00b      	b.n	80078b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	43da      	mvns	r2, r3
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	4013      	ands	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bf14      	ite	ne
 80078ac:	2301      	movne	r3, #1
 80078ae:	2300      	moveq	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d016      	beq.n	80078e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d0:	f043 0220 	orr.w	r2, r3, #32
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e021      	b.n	8007928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	0c1b      	lsrs	r3, r3, #16
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10c      	bne.n	8007908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	43da      	mvns	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4013      	ands	r3, r2
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf14      	ite	ne
 8007900:	2301      	movne	r3, #1
 8007902:	2300      	moveq	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e00b      	b.n	8007920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	43da      	mvns	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4013      	ands	r3, r2
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf14      	ite	ne
 800791a:	2301      	movne	r3, #1
 800791c:	2300      	moveq	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	f47f af6d 	bne.w	8007800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800793c:	e034      	b.n	80079a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f8e3 	bl	8007b0a <I2C_IsAcknowledgeFailed>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e034      	b.n	80079b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007954:	d028      	beq.n	80079a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007956:	f7fe fc59 	bl	800620c <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d302      	bcc.n	800796c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d11d      	bne.n	80079a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007976:	2b80      	cmp	r3, #128	@ 0x80
 8007978:	d016      	beq.n	80079a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007994:	f043 0220 	orr.w	r2, r3, #32
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e007      	b.n	80079b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b2:	2b80      	cmp	r3, #128	@ 0x80
 80079b4:	d1c3      	bne.n	800793e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079cc:	e034      	b.n	8007a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f89b 	bl	8007b0a <I2C_IsAcknowledgeFailed>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e034      	b.n	8007a48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d028      	beq.n	8007a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e6:	f7fe fc11 	bl	800620c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d302      	bcc.n	80079fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11d      	bne.n	8007a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d016      	beq.n	8007a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a24:	f043 0220 	orr.w	r2, r3, #32
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e007      	b.n	8007a48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d1c3      	bne.n	80079ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a5c:	e049      	b.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b10      	cmp	r3, #16
 8007a6a:	d119      	bne.n	8007aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0210 	mvn.w	r2, #16
 8007a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e030      	b.n	8007b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aa0:	f7fe fbb4 	bl	800620c <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d302      	bcc.n	8007ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d11d      	bne.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac0:	2b40      	cmp	r3, #64	@ 0x40
 8007ac2:	d016      	beq.n	8007af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e007      	b.n	8007b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afc:	2b40      	cmp	r3, #64	@ 0x40
 8007afe:	d1ae      	bne.n	8007a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b20:	d11b      	bne.n	8007b5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007b2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b46:	f043 0204 	orr.w	r2, r3, #4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e000      	b.n	8007b5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e0bf      	b.n	8007cfa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fd fc76 	bl	8005480 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007baa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6999      	ldr	r1, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bc0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6899      	ldr	r1, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b4a      	ldr	r3, [pc, #296]	@ (8007d04 <HAL_LTDC_Init+0x19c>)
 8007bdc:	400b      	ands	r3, r1
 8007bde:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6899      	ldr	r1, [r3, #8]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68d9      	ldr	r1, [r3, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	4b3e      	ldr	r3, [pc, #248]	@ (8007d04 <HAL_LTDC_Init+0x19c>)
 8007c0a:	400b      	ands	r3, r1
 8007c0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	041b      	lsls	r3, r3, #16
 8007c14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68d9      	ldr	r1, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1a      	ldr	r2, [r3, #32]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6919      	ldr	r1, [r3, #16]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b33      	ldr	r3, [pc, #204]	@ (8007d04 <HAL_LTDC_Init+0x19c>)
 8007c38:	400b      	ands	r3, r1
 8007c3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6919      	ldr	r1, [r3, #16]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6959      	ldr	r1, [r3, #20]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b27      	ldr	r3, [pc, #156]	@ (8007d04 <HAL_LTDC_Init+0x19c>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6959      	ldr	r1, [r3, #20]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0206 	orr.w	r2, r2, #6
 8007cd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699a      	ldr	r2, [r3, #24]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	f000f800 	.word	0xf000f800

08007d08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007d08:	b5b0      	push	{r4, r5, r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_LTDC_ConfigLayer+0x1a>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e02c      	b.n	8007d7c <HAL_LTDC_ConfigLayer+0x74>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2134      	movs	r1, #52	@ 0x34
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4614      	mov	r4, r2
 8007d46:	461d      	mov	r5, r3
 8007d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f811 	bl	8007d84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2201      	movs	r2, #1
 8007d68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bdb0      	pop	{r4, r5, r7, pc}

08007d84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b089      	sub	sp, #36	@ 0x24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da0:	4413      	add	r3, r2
 8007da2:	041b      	lsls	r3, r3, #16
 8007da4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	01db      	lsls	r3, r3, #7
 8007db0:	4413      	add	r3, r2
 8007db2:	3384      	adds	r3, #132	@ 0x84
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	6812      	ldr	r2, [r2, #0]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	01d2      	lsls	r2, r2, #7
 8007dc0:	440a      	add	r2, r1
 8007dc2:	3284      	adds	r2, #132	@ 0x84
 8007dc4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007dc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ddc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4619      	mov	r1, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	01db      	lsls	r3, r3, #7
 8007de8:	440b      	add	r3, r1
 8007dea:	3384      	adds	r3, #132	@ 0x84
 8007dec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007df2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e02:	4413      	add	r3, r2
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	01db      	lsls	r3, r3, #7
 8007e12:	4413      	add	r3, r2
 8007e14:	3384      	adds	r3, #132	@ 0x84
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	01d2      	lsls	r2, r2, #7
 8007e22:	440a      	add	r2, r1
 8007e24:	3284      	adds	r2, #132	@ 0x84
 8007e26:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007e2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e3a:	4413      	add	r3, r2
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4619      	mov	r1, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	01db      	lsls	r3, r3, #7
 8007e48:	440b      	add	r3, r1
 8007e4a:	3384      	adds	r3, #132	@ 0x84
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	01db      	lsls	r3, r3, #7
 8007e5e:	4413      	add	r3, r2
 8007e60:	3384      	adds	r3, #132	@ 0x84
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	6812      	ldr	r2, [r2, #0]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	01d2      	lsls	r2, r2, #7
 8007e6e:	440a      	add	r2, r1
 8007e70:	3284      	adds	r2, #132	@ 0x84
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	01db      	lsls	r3, r3, #7
 8007e82:	4413      	add	r3, r2
 8007e84:	3384      	adds	r3, #132	@ 0x84
 8007e86:	461a      	mov	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	061b      	lsls	r3, r3, #24
 8007ea8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	01db      	lsls	r3, r3, #7
 8007eb4:	4413      	add	r3, r2
 8007eb6:	3384      	adds	r3, #132	@ 0x84
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	01db      	lsls	r3, r3, #7
 8007ec4:	4413      	add	r3, r2
 8007ec6:	3384      	adds	r3, #132	@ 0x84
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	01db      	lsls	r3, r3, #7
 8007ee8:	440b      	add	r3, r1
 8007eea:	3384      	adds	r3, #132	@ 0x84
 8007eec:	4619      	mov	r1, r3
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	01db      	lsls	r3, r3, #7
 8007efe:	4413      	add	r3, r2
 8007f00:	3384      	adds	r3, #132	@ 0x84
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	01d2      	lsls	r2, r2, #7
 8007f0e:	440a      	add	r2, r1
 8007f10:	3284      	adds	r2, #132	@ 0x84
 8007f12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007f16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	01db      	lsls	r3, r3, #7
 8007f22:	4413      	add	r3, r2
 8007f24:	3384      	adds	r3, #132	@ 0x84
 8007f26:	461a      	mov	r2, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	01db      	lsls	r3, r3, #7
 8007f38:	4413      	add	r3, r2
 8007f3a:	3384      	adds	r3, #132	@ 0x84
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	6812      	ldr	r2, [r2, #0]
 8007f42:	4611      	mov	r1, r2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	01d2      	lsls	r2, r2, #7
 8007f48:	440a      	add	r2, r1
 8007f4a:	3284      	adds	r2, #132	@ 0x84
 8007f4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007f50:	f023 0307 	bic.w	r3, r3, #7
 8007f54:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	69da      	ldr	r2, [r3, #28]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	68f9      	ldr	r1, [r7, #12]
 8007f60:	6809      	ldr	r1, [r1, #0]
 8007f62:	4608      	mov	r0, r1
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	01c9      	lsls	r1, r1, #7
 8007f68:	4401      	add	r1, r0
 8007f6a:	3184      	adds	r1, #132	@ 0x84
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	01db      	lsls	r3, r3, #7
 8007f7a:	4413      	add	r3, r2
 8007f7c:	3384      	adds	r3, #132	@ 0x84
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	01db      	lsls	r3, r3, #7
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3384      	adds	r3, #132	@ 0x84
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2300      	movs	r3, #0
 8007f92:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	461a      	mov	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	01db      	lsls	r3, r3, #7
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3384      	adds	r3, #132	@ 0x84
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d102      	bne.n	8007fb8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007fb2:	2304      	movs	r3, #4
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	e01b      	b.n	8007ff0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d102      	bne.n	8007fc6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	61fb      	str	r3, [r7, #28]
 8007fc4:	e014      	b.n	8007ff0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d00b      	beq.n	8007fe6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d007      	beq.n	8007fe6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d003      	beq.n	8007fe6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007fe2:	2b07      	cmp	r3, #7
 8007fe4:	d102      	bne.n	8007fec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	61fb      	str	r3, [r7, #28]
 8007fea:	e001      	b.n	8007ff0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007fec:	2301      	movs	r3, #1
 8007fee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	01db      	lsls	r3, r3, #7
 8007ffa:	4413      	add	r3, r2
 8007ffc:	3384      	adds	r3, #132	@ 0x84
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	4611      	mov	r1, r2
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	01d2      	lsls	r2, r2, #7
 800800a:	440a      	add	r2, r1
 800800c:	3284      	adds	r2, #132	@ 0x84
 800800e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008012:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	6859      	ldr	r1, [r3, #4]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	1acb      	subs	r3, r1, r3
 800802a:	69f9      	ldr	r1, [r7, #28]
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008032:	68f9      	ldr	r1, [r7, #12]
 8008034:	6809      	ldr	r1, [r1, #0]
 8008036:	4608      	mov	r0, r1
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	01c9      	lsls	r1, r1, #7
 800803c:	4401      	add	r1, r0
 800803e:	3184      	adds	r1, #132	@ 0x84
 8008040:	4313      	orrs	r3, r2
 8008042:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	01db      	lsls	r3, r3, #7
 800804e:	4413      	add	r3, r2
 8008050:	3384      	adds	r3, #132	@ 0x84
 8008052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	6812      	ldr	r2, [r2, #0]
 8008058:	4611      	mov	r1, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	01d2      	lsls	r2, r2, #7
 800805e:	440a      	add	r2, r1
 8008060:	3284      	adds	r2, #132	@ 0x84
 8008062:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008066:	f023 0307 	bic.w	r3, r3, #7
 800806a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	461a      	mov	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	01db      	lsls	r3, r3, #7
 8008076:	4413      	add	r3, r2
 8008078:	3384      	adds	r3, #132	@ 0x84
 800807a:	461a      	mov	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	01db      	lsls	r3, r3, #7
 800808c:	4413      	add	r3, r2
 800808e:	3384      	adds	r3, #132	@ 0x84
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	6812      	ldr	r2, [r2, #0]
 8008096:	4611      	mov	r1, r2
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	01d2      	lsls	r2, r2, #7
 800809c:	440a      	add	r2, r1
 800809e:	3284      	adds	r2, #132	@ 0x84
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6013      	str	r3, [r2, #0]
}
 80080a6:	bf00      	nop
 80080a8:	3724      	adds	r7, #36	@ 0x24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
	...

080080b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e267      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d075      	beq.n	80081be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80080d2:	4b88      	ldr	r3, [pc, #544]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 030c 	and.w	r3, r3, #12
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d00c      	beq.n	80080f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080de:	4b85      	ldr	r3, [pc, #532]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80080e6:	2b08      	cmp	r3, #8
 80080e8:	d112      	bne.n	8008110 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ea:	4b82      	ldr	r3, [pc, #520]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080f6:	d10b      	bne.n	8008110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f8:	4b7e      	ldr	r3, [pc, #504]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d05b      	beq.n	80081bc <HAL_RCC_OscConfig+0x108>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d157      	bne.n	80081bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e242      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008118:	d106      	bne.n	8008128 <HAL_RCC_OscConfig+0x74>
 800811a:	4b76      	ldr	r3, [pc, #472]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a75      	ldr	r2, [pc, #468]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	e01d      	b.n	8008164 <HAL_RCC_OscConfig+0xb0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008130:	d10c      	bne.n	800814c <HAL_RCC_OscConfig+0x98>
 8008132:	4b70      	ldr	r3, [pc, #448]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a6f      	ldr	r2, [pc, #444]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4b6d      	ldr	r3, [pc, #436]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a6c      	ldr	r2, [pc, #432]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	e00b      	b.n	8008164 <HAL_RCC_OscConfig+0xb0>
 800814c:	4b69      	ldr	r3, [pc, #420]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a68      	ldr	r2, [pc, #416]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	4b66      	ldr	r3, [pc, #408]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a65      	ldr	r2, [pc, #404]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 800815e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d013      	beq.n	8008194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800816c:	f7fe f84e 	bl	800620c <HAL_GetTick>
 8008170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008172:	e008      	b.n	8008186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008174:	f7fe f84a 	bl	800620c <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b64      	cmp	r3, #100	@ 0x64
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e207      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008186:	4b5b      	ldr	r3, [pc, #364]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0f0      	beq.n	8008174 <HAL_RCC_OscConfig+0xc0>
 8008192:	e014      	b.n	80081be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008194:	f7fe f83a 	bl	800620c <HAL_GetTick>
 8008198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800819c:	f7fe f836 	bl	800620c <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b64      	cmp	r3, #100	@ 0x64
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e1f3      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ae:	4b51      	ldr	r3, [pc, #324]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f0      	bne.n	800819c <HAL_RCC_OscConfig+0xe8>
 80081ba:	e000      	b.n	80081be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d063      	beq.n	8008292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80081ca:	4b4a      	ldr	r3, [pc, #296]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 030c 	and.w	r3, r3, #12
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081d6:	4b47      	ldr	r3, [pc, #284]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80081de:	2b08      	cmp	r3, #8
 80081e0:	d11c      	bne.n	800821c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081e2:	4b44      	ldr	r3, [pc, #272]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d116      	bne.n	800821c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ee:	4b41      	ldr	r3, [pc, #260]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <HAL_RCC_OscConfig+0x152>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d001      	beq.n	8008206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e1c7      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008206:	4b3b      	ldr	r3, [pc, #236]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	00db      	lsls	r3, r3, #3
 8008214:	4937      	ldr	r1, [pc, #220]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008216:	4313      	orrs	r3, r2
 8008218:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800821a:	e03a      	b.n	8008292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d020      	beq.n	8008266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008224:	4b34      	ldr	r3, [pc, #208]	@ (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008226:	2201      	movs	r2, #1
 8008228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822a:	f7fd ffef 	bl	800620c <HAL_GetTick>
 800822e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008230:	e008      	b.n	8008244 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008232:	f7fd ffeb 	bl	800620c <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e1a8      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008244:	4b2b      	ldr	r3, [pc, #172]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f0      	beq.n	8008232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008250:	4b28      	ldr	r3, [pc, #160]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4925      	ldr	r1, [pc, #148]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008260:	4313      	orrs	r3, r2
 8008262:	600b      	str	r3, [r1, #0]
 8008264:	e015      	b.n	8008292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008266:	4b24      	ldr	r3, [pc, #144]	@ (80082f8 <HAL_RCC_OscConfig+0x244>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826c:	f7fd ffce 	bl	800620c <HAL_GetTick>
 8008270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008272:	e008      	b.n	8008286 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008274:	f7fd ffca 	bl	800620c <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e187      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008286:	4b1b      	ldr	r3, [pc, #108]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f0      	bne.n	8008274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d036      	beq.n	800830c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d016      	beq.n	80082d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a6:	4b15      	ldr	r3, [pc, #84]	@ (80082fc <HAL_RCC_OscConfig+0x248>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ac:	f7fd ffae 	bl	800620c <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b4:	f7fd ffaa 	bl	800620c <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e167      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082c6:	4b0b      	ldr	r3, [pc, #44]	@ (80082f4 <HAL_RCC_OscConfig+0x240>)
 80082c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0f0      	beq.n	80082b4 <HAL_RCC_OscConfig+0x200>
 80082d2:	e01b      	b.n	800830c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d4:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <HAL_RCC_OscConfig+0x248>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082da:	f7fd ff97 	bl	800620c <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082e0:	e00e      	b.n	8008300 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082e2:	f7fd ff93 	bl	800620c <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d907      	bls.n	8008300 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e150      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
 80082f4:	40023800 	.word	0x40023800
 80082f8:	42470000 	.word	0x42470000
 80082fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008300:	4b88      	ldr	r3, [pc, #544]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1ea      	bne.n	80082e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8097 	beq.w	8008448 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800831a:	2300      	movs	r3, #0
 800831c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800831e:	4b81      	ldr	r3, [pc, #516]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10f      	bne.n	800834a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]
 800832e:	4b7d      	ldr	r3, [pc, #500]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008332:	4a7c      	ldr	r2, [pc, #496]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008338:	6413      	str	r3, [r2, #64]	@ 0x40
 800833a:	4b7a      	ldr	r3, [pc, #488]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008342:	60bb      	str	r3, [r7, #8]
 8008344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008346:	2301      	movs	r3, #1
 8008348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800834a:	4b77      	ldr	r3, [pc, #476]	@ (8008528 <HAL_RCC_OscConfig+0x474>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008352:	2b00      	cmp	r3, #0
 8008354:	d118      	bne.n	8008388 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008356:	4b74      	ldr	r3, [pc, #464]	@ (8008528 <HAL_RCC_OscConfig+0x474>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a73      	ldr	r2, [pc, #460]	@ (8008528 <HAL_RCC_OscConfig+0x474>)
 800835c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008362:	f7fd ff53 	bl	800620c <HAL_GetTick>
 8008366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008368:	e008      	b.n	800837c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800836a:	f7fd ff4f 	bl	800620c <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	2b02      	cmp	r3, #2
 8008376:	d901      	bls.n	800837c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e10c      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800837c:	4b6a      	ldr	r3, [pc, #424]	@ (8008528 <HAL_RCC_OscConfig+0x474>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0f0      	beq.n	800836a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d106      	bne.n	800839e <HAL_RCC_OscConfig+0x2ea>
 8008390:	4b64      	ldr	r3, [pc, #400]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008394:	4a63      	ldr	r2, [pc, #396]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	6713      	str	r3, [r2, #112]	@ 0x70
 800839c:	e01c      	b.n	80083d8 <HAL_RCC_OscConfig+0x324>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	d10c      	bne.n	80083c0 <HAL_RCC_OscConfig+0x30c>
 80083a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	4a5e      	ldr	r2, [pc, #376]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80083b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80083be:	e00b      	b.n	80083d8 <HAL_RCC_OscConfig+0x324>
 80083c0:	4b58      	ldr	r3, [pc, #352]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c4:	4a57      	ldr	r2, [pc, #348]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80083cc:	4b55      	ldr	r3, [pc, #340]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d0:	4a54      	ldr	r2, [pc, #336]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80083d2:	f023 0304 	bic.w	r3, r3, #4
 80083d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d015      	beq.n	800840c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e0:	f7fd ff14 	bl	800620c <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e6:	e00a      	b.n	80083fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e8:	f7fd ff10 	bl	800620c <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e0cb      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fe:	4b49      	ldr	r3, [pc, #292]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0ee      	beq.n	80083e8 <HAL_RCC_OscConfig+0x334>
 800840a:	e014      	b.n	8008436 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800840c:	f7fd fefe 	bl	800620c <HAL_GetTick>
 8008410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008412:	e00a      	b.n	800842a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008414:	f7fd fefa 	bl	800620c <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008422:	4293      	cmp	r3, r2
 8008424:	d901      	bls.n	800842a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e0b5      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800842a:	4b3e      	ldr	r3, [pc, #248]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 800842c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1ee      	bne.n	8008414 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d105      	bne.n	8008448 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800843c:	4b39      	ldr	r3, [pc, #228]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	4a38      	ldr	r2, [pc, #224]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008446:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 80a1 	beq.w	8008594 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008452:	4b34      	ldr	r3, [pc, #208]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 030c 	and.w	r3, r3, #12
 800845a:	2b08      	cmp	r3, #8
 800845c:	d05c      	beq.n	8008518 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	2b02      	cmp	r3, #2
 8008464:	d141      	bne.n	80084ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008466:	4b31      	ldr	r3, [pc, #196]	@ (800852c <HAL_RCC_OscConfig+0x478>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800846c:	f7fd fece 	bl	800620c <HAL_GetTick>
 8008470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008472:	e008      	b.n	8008486 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008474:	f7fd feca 	bl	800620c <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e087      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008486:	4b27      	ldr	r3, [pc, #156]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f0      	bne.n	8008474 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69da      	ldr	r2, [r3, #28]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a0:	019b      	lsls	r3, r3, #6
 80084a2:	431a      	orrs	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	085b      	lsrs	r3, r3, #1
 80084aa:	3b01      	subs	r3, #1
 80084ac:	041b      	lsls	r3, r3, #16
 80084ae:	431a      	orrs	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	491b      	ldr	r1, [pc, #108]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084bc:	4b1b      	ldr	r3, [pc, #108]	@ (800852c <HAL_RCC_OscConfig+0x478>)
 80084be:	2201      	movs	r2, #1
 80084c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c2:	f7fd fea3 	bl	800620c <HAL_GetTick>
 80084c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084c8:	e008      	b.n	80084dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084ca:	f7fd fe9f 	bl	800620c <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e05c      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084dc:	4b11      	ldr	r3, [pc, #68]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0f0      	beq.n	80084ca <HAL_RCC_OscConfig+0x416>
 80084e8:	e054      	b.n	8008594 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ea:	4b10      	ldr	r3, [pc, #64]	@ (800852c <HAL_RCC_OscConfig+0x478>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084f0:	f7fd fe8c 	bl	800620c <HAL_GetTick>
 80084f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f6:	e008      	b.n	800850a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084f8:	f7fd fe88 	bl	800620c <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b02      	cmp	r3, #2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e045      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800850a:	4b06      	ldr	r3, [pc, #24]	@ (8008524 <HAL_RCC_OscConfig+0x470>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1f0      	bne.n	80084f8 <HAL_RCC_OscConfig+0x444>
 8008516:	e03d      	b.n	8008594 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d107      	bne.n	8008530 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e038      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
 8008524:	40023800 	.word	0x40023800
 8008528:	40007000 	.word	0x40007000
 800852c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008530:	4b1b      	ldr	r3, [pc, #108]	@ (80085a0 <HAL_RCC_OscConfig+0x4ec>)
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d028      	beq.n	8008590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008548:	429a      	cmp	r2, r3
 800854a:	d121      	bne.n	8008590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d11a      	bne.n	8008590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008560:	4013      	ands	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008566:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008568:	4293      	cmp	r3, r2
 800856a:	d111      	bne.n	8008590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008576:	085b      	lsrs	r3, r3, #1
 8008578:	3b01      	subs	r3, #1
 800857a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800857c:	429a      	cmp	r2, r3
 800857e:	d107      	bne.n	8008590 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800858a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800858c:	429a      	cmp	r2, r3
 800858e:	d001      	beq.n	8008594 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e000      	b.n	8008596 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40023800 	.word	0x40023800

080085a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e0cc      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085b8:	4b68      	ldr	r3, [pc, #416]	@ (800875c <HAL_RCC_ClockConfig+0x1b8>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d90c      	bls.n	80085e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c6:	4b65      	ldr	r3, [pc, #404]	@ (800875c <HAL_RCC_ClockConfig+0x1b8>)
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	b2d2      	uxtb	r2, r2
 80085cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ce:	4b63      	ldr	r3, [pc, #396]	@ (800875c <HAL_RCC_ClockConfig+0x1b8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 030f 	and.w	r3, r3, #15
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d001      	beq.n	80085e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e0b8      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d020      	beq.n	800862e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085f8:	4b59      	ldr	r3, [pc, #356]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	4a58      	ldr	r2, [pc, #352]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008610:	4b53      	ldr	r3, [pc, #332]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	4a52      	ldr	r2, [pc, #328]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800861a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800861c:	4b50      	ldr	r3, [pc, #320]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	494d      	ldr	r1, [pc, #308]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 800862a:	4313      	orrs	r3, r2
 800862c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d044      	beq.n	80086c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d107      	bne.n	8008652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008642:	4b47      	ldr	r3, [pc, #284]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d119      	bne.n	8008682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e07f      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2b02      	cmp	r3, #2
 8008658:	d003      	beq.n	8008662 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800865e:	2b03      	cmp	r3, #3
 8008660:	d107      	bne.n	8008672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008662:	4b3f      	ldr	r3, [pc, #252]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d109      	bne.n	8008682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e06f      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008672:	4b3b      	ldr	r3, [pc, #236]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e067      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008682:	4b37      	ldr	r3, [pc, #220]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f023 0203 	bic.w	r2, r3, #3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	4934      	ldr	r1, [pc, #208]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008690:	4313      	orrs	r3, r2
 8008692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008694:	f7fd fdba 	bl	800620c <HAL_GetTick>
 8008698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800869a:	e00a      	b.n	80086b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800869c:	f7fd fdb6 	bl	800620c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d901      	bls.n	80086b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80086ae:	2303      	movs	r3, #3
 80086b0:	e04f      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086b2:	4b2b      	ldr	r3, [pc, #172]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f003 020c 	and.w	r2, r3, #12
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d1eb      	bne.n	800869c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086c4:	4b25      	ldr	r3, [pc, #148]	@ (800875c <HAL_RCC_ClockConfig+0x1b8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d20c      	bcs.n	80086ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086d2:	4b22      	ldr	r3, [pc, #136]	@ (800875c <HAL_RCC_ClockConfig+0x1b8>)
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086da:	4b20      	ldr	r3, [pc, #128]	@ (800875c <HAL_RCC_ClockConfig+0x1b8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d001      	beq.n	80086ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e032      	b.n	8008752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d008      	beq.n	800870a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086f8:	4b19      	ldr	r3, [pc, #100]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	4916      	ldr	r1, [pc, #88]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	4313      	orrs	r3, r2
 8008708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d009      	beq.n	800872a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008716:	4b12      	ldr	r3, [pc, #72]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	490e      	ldr	r1, [pc, #56]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008726:	4313      	orrs	r3, r2
 8008728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800872a:	f000 f821 	bl	8008770 <HAL_RCC_GetSysClockFreq>
 800872e:	4602      	mov	r2, r0
 8008730:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <HAL_RCC_ClockConfig+0x1bc>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	091b      	lsrs	r3, r3, #4
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	490a      	ldr	r1, [pc, #40]	@ (8008764 <HAL_RCC_ClockConfig+0x1c0>)
 800873c:	5ccb      	ldrb	r3, [r1, r3]
 800873e:	fa22 f303 	lsr.w	r3, r2, r3
 8008742:	4a09      	ldr	r2, [pc, #36]	@ (8008768 <HAL_RCC_ClockConfig+0x1c4>)
 8008744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <HAL_RCC_ClockConfig+0x1c8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd fd1a 	bl	8006184 <HAL_InitTick>

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40023c00 	.word	0x40023c00
 8008760:	40023800 	.word	0x40023800
 8008764:	0800b82c 	.word	0x0800b82c
 8008768:	20000014 	.word	0x20000014
 800876c:	20000018 	.word	0x20000018

08008770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008774:	b094      	sub	sp, #80	@ 0x50
 8008776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008784:	2300      	movs	r3, #0
 8008786:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008788:	4b79      	ldr	r3, [pc, #484]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x200>)
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f003 030c 	and.w	r3, r3, #12
 8008790:	2b08      	cmp	r3, #8
 8008792:	d00d      	beq.n	80087b0 <HAL_RCC_GetSysClockFreq+0x40>
 8008794:	2b08      	cmp	r3, #8
 8008796:	f200 80e1 	bhi.w	800895c <HAL_RCC_GetSysClockFreq+0x1ec>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <HAL_RCC_GetSysClockFreq+0x34>
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d003      	beq.n	80087aa <HAL_RCC_GetSysClockFreq+0x3a>
 80087a2:	e0db      	b.n	800895c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087a4:	4b73      	ldr	r3, [pc, #460]	@ (8008974 <HAL_RCC_GetSysClockFreq+0x204>)
 80087a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087a8:	e0db      	b.n	8008962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087aa:	4b73      	ldr	r3, [pc, #460]	@ (8008978 <HAL_RCC_GetSysClockFreq+0x208>)
 80087ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087ae:	e0d8      	b.n	8008962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x200>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087ba:	4b6d      	ldr	r3, [pc, #436]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x200>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d063      	beq.n	800888e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x200>)
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	099b      	lsrs	r3, r3, #6
 80087cc:	2200      	movs	r2, #0
 80087ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80087d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80087da:	2300      	movs	r3, #0
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80087e2:	4622      	mov	r2, r4
 80087e4:	462b      	mov	r3, r5
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 0100 	mov.w	r1, #0
 80087ee:	0159      	lsls	r1, r3, #5
 80087f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087f4:	0150      	lsls	r0, r2, #5
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	4621      	mov	r1, r4
 80087fc:	1a51      	subs	r1, r2, r1
 80087fe:	6139      	str	r1, [r7, #16]
 8008800:	4629      	mov	r1, r5
 8008802:	eb63 0301 	sbc.w	r3, r3, r1
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	f04f 0300 	mov.w	r3, #0
 8008810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008814:	4659      	mov	r1, fp
 8008816:	018b      	lsls	r3, r1, #6
 8008818:	4651      	mov	r1, sl
 800881a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800881e:	4651      	mov	r1, sl
 8008820:	018a      	lsls	r2, r1, #6
 8008822:	4651      	mov	r1, sl
 8008824:	ebb2 0801 	subs.w	r8, r2, r1
 8008828:	4659      	mov	r1, fp
 800882a:	eb63 0901 	sbc.w	r9, r3, r1
 800882e:	f04f 0200 	mov.w	r2, #0
 8008832:	f04f 0300 	mov.w	r3, #0
 8008836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800883a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800883e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008842:	4690      	mov	r8, r2
 8008844:	4699      	mov	r9, r3
 8008846:	4623      	mov	r3, r4
 8008848:	eb18 0303 	adds.w	r3, r8, r3
 800884c:	60bb      	str	r3, [r7, #8]
 800884e:	462b      	mov	r3, r5
 8008850:	eb49 0303 	adc.w	r3, r9, r3
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	f04f 0300 	mov.w	r3, #0
 800885e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008862:	4629      	mov	r1, r5
 8008864:	024b      	lsls	r3, r1, #9
 8008866:	4621      	mov	r1, r4
 8008868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800886c:	4621      	mov	r1, r4
 800886e:	024a      	lsls	r2, r1, #9
 8008870:	4610      	mov	r0, r2
 8008872:	4619      	mov	r1, r3
 8008874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008876:	2200      	movs	r2, #0
 8008878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800887a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800887c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008880:	f7f7 fd06 	bl	8000290 <__aeabi_uldivmod>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4613      	mov	r3, r2
 800888a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800888c:	e058      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800888e:	4b38      	ldr	r3, [pc, #224]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x200>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	099b      	lsrs	r3, r3, #6
 8008894:	2200      	movs	r2, #0
 8008896:	4618      	mov	r0, r3
 8008898:	4611      	mov	r1, r2
 800889a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800889e:	623b      	str	r3, [r7, #32]
 80088a0:	2300      	movs	r3, #0
 80088a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80088a8:	4642      	mov	r2, r8
 80088aa:	464b      	mov	r3, r9
 80088ac:	f04f 0000 	mov.w	r0, #0
 80088b0:	f04f 0100 	mov.w	r1, #0
 80088b4:	0159      	lsls	r1, r3, #5
 80088b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088ba:	0150      	lsls	r0, r2, #5
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4641      	mov	r1, r8
 80088c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80088c6:	4649      	mov	r1, r9
 80088c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80088d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80088dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80088e0:	ebb2 040a 	subs.w	r4, r2, sl
 80088e4:	eb63 050b 	sbc.w	r5, r3, fp
 80088e8:	f04f 0200 	mov.w	r2, #0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	00eb      	lsls	r3, r5, #3
 80088f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088f6:	00e2      	lsls	r2, r4, #3
 80088f8:	4614      	mov	r4, r2
 80088fa:	461d      	mov	r5, r3
 80088fc:	4643      	mov	r3, r8
 80088fe:	18e3      	adds	r3, r4, r3
 8008900:	603b      	str	r3, [r7, #0]
 8008902:	464b      	mov	r3, r9
 8008904:	eb45 0303 	adc.w	r3, r5, r3
 8008908:	607b      	str	r3, [r7, #4]
 800890a:	f04f 0200 	mov.w	r2, #0
 800890e:	f04f 0300 	mov.w	r3, #0
 8008912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008916:	4629      	mov	r1, r5
 8008918:	028b      	lsls	r3, r1, #10
 800891a:	4621      	mov	r1, r4
 800891c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008920:	4621      	mov	r1, r4
 8008922:	028a      	lsls	r2, r1, #10
 8008924:	4610      	mov	r0, r2
 8008926:	4619      	mov	r1, r3
 8008928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800892a:	2200      	movs	r2, #0
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	61fa      	str	r2, [r7, #28]
 8008930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008934:	f7f7 fcac 	bl	8000290 <__aeabi_uldivmod>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4613      	mov	r3, r2
 800893e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008940:	4b0b      	ldr	r3, [pc, #44]	@ (8008970 <HAL_RCC_GetSysClockFreq+0x200>)
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	0c1b      	lsrs	r3, r3, #16
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	3301      	adds	r3, #1
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008954:	fbb2 f3f3 	udiv	r3, r2, r3
 8008958:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800895a:	e002      	b.n	8008962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800895c:	4b05      	ldr	r3, [pc, #20]	@ (8008974 <HAL_RCC_GetSysClockFreq+0x204>)
 800895e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008964:	4618      	mov	r0, r3
 8008966:	3750      	adds	r7, #80	@ 0x50
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896e:	bf00      	nop
 8008970:	40023800 	.word	0x40023800
 8008974:	00f42400 	.word	0x00f42400
 8008978:	007a1200 	.word	0x007a1200

0800897c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008980:	4b03      	ldr	r3, [pc, #12]	@ (8008990 <HAL_RCC_GetHCLKFreq+0x14>)
 8008982:	681b      	ldr	r3, [r3, #0]
}
 8008984:	4618      	mov	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	20000014 	.word	0x20000014

08008994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008998:	f7ff fff0 	bl	800897c <HAL_RCC_GetHCLKFreq>
 800899c:	4602      	mov	r2, r0
 800899e:	4b05      	ldr	r3, [pc, #20]	@ (80089b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	0a9b      	lsrs	r3, r3, #10
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	4903      	ldr	r1, [pc, #12]	@ (80089b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089aa:	5ccb      	ldrb	r3, [r1, r3]
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40023800 	.word	0x40023800
 80089b8:	0800b83c 	.word	0x0800b83c

080089bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0301 	and.w	r3, r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10b      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d075      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80089f0:	4b91      	ldr	r3, [pc, #580]	@ (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089f6:	f7fd fc09 	bl	800620c <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089fc:	e008      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089fe:	f7fd fc05 	bl	800620c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e189      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a10:	4b8a      	ldr	r3, [pc, #552]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f0      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d009      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	019a      	lsls	r2, r3, #6
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	071b      	lsls	r3, r3, #28
 8008a34:	4981      	ldr	r1, [pc, #516]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01f      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a48:	4b7c      	ldr	r3, [pc, #496]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a4e:	0f1b      	lsrs	r3, r3, #28
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	019a      	lsls	r2, r3, #6
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	061b      	lsls	r3, r3, #24
 8008a62:	431a      	orrs	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	071b      	lsls	r3, r3, #28
 8008a68:	4974      	ldr	r1, [pc, #464]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008a70:	4b72      	ldr	r3, [pc, #456]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a76:	f023 021f 	bic.w	r2, r3, #31
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	496e      	ldr	r1, [pc, #440]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	019a      	lsls	r2, r3, #6
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	061b      	lsls	r3, r3, #24
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	071b      	lsls	r3, r3, #28
 8008aa8:	4964      	ldr	r1, [pc, #400]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ab0:	4b61      	ldr	r3, [pc, #388]	@ (8008c38 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ab6:	f7fd fba9 	bl	800620c <HAL_GetTick>
 8008aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008abc:	e008      	b.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008abe:	f7fd fba5 	bl	800620c <HAL_GetTick>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	1ad3      	subs	r3, r2, r3
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d901      	bls.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e129      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0f0      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d105      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d079      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008af4:	4b52      	ldr	r3, [pc, #328]	@ (8008c40 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008afa:	f7fd fb87 	bl	800620c <HAL_GetTick>
 8008afe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b00:	e008      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b02:	f7fd fb83 	bl	800620c <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e107      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b14:	4b49      	ldr	r3, [pc, #292]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b20:	d0ef      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d020      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b2e:	4b43      	ldr	r3, [pc, #268]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b34:	0f1b      	lsrs	r3, r3, #28
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	019a      	lsls	r2, r3, #6
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	061b      	lsls	r3, r3, #24
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	071b      	lsls	r3, r3, #28
 8008b4e:	493b      	ldr	r1, [pc, #236]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008b56:	4b39      	ldr	r3, [pc, #228]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	4934      	ldr	r1, [pc, #208]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01e      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b82:	0e1b      	lsrs	r3, r3, #24
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	019a      	lsls	r2, r3, #6
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	061b      	lsls	r3, r3, #24
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	071b      	lsls	r3, r3, #28
 8008b9c:	4927      	ldr	r1, [pc, #156]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ba4:	4b25      	ldr	r3, [pc, #148]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008baa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb2:	4922      	ldr	r1, [pc, #136]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008bba:	4b21      	ldr	r3, [pc, #132]	@ (8008c40 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008bc0:	f7fd fb24 	bl	800620c <HAL_GetTick>
 8008bc4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bc6:	e008      	b.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008bc8:	f7fd fb20 	bl	800620c <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d901      	bls.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e0a4      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bda:	4b18      	ldr	r3, [pc, #96]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008be2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be6:	d1ef      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0320 	and.w	r3, r3, #32
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 808b 	beq.w	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
 8008bfa:	4b10      	ldr	r3, [pc, #64]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c06:	4b0d      	ldr	r3, [pc, #52]	@ (8008c3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a0b      	ldr	r2, [pc, #44]	@ (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c1e:	f7fd faf5 	bl	800620c <HAL_GetTick>
 8008c22:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008c24:	e010      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c26:	f7fd faf1 	bl	800620c <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d909      	bls.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e075      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008c38:	42470068 	.word	0x42470068
 8008c3c:	40023800 	.word	0x40023800
 8008c40:	42470070 	.word	0x42470070
 8008c44:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008c48:	4b38      	ldr	r3, [pc, #224]	@ (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0e8      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c54:	4b36      	ldr	r3, [pc, #216]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c5c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d02f      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d028      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c72:	4b2f      	ldr	r3, [pc, #188]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c82:	4b2c      	ldr	r3, [pc, #176]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008c88:	4a29      	ldr	r2, [pc, #164]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c8e:	4b28      	ldr	r3, [pc, #160]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d114      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008c9a:	f7fd fab7 	bl	800620c <HAL_GetTick>
 8008c9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ca0:	e00a      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ca2:	f7fd fab3 	bl	800620c <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d901      	bls.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e035      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0ee      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ccc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cd0:	d10d      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008cd2:	4b17      	ldr	r3, [pc, #92]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ce6:	4912      	ldr	r1, [pc, #72]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	608b      	str	r3, [r1, #8]
 8008cec:	e005      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008cee:	4b10      	ldr	r3, [pc, #64]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cf4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008cf8:	6093      	str	r3, [r2, #8]
 8008cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008cfc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d06:	490a      	ldr	r1, [pc, #40]	@ (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008d1e:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008d20:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40007000 	.word	0x40007000
 8008d30:	40023800 	.word	0x40023800
 8008d34:	42470e40 	.word	0x42470e40
 8008d38:	424711e0 	.word	0x424711e0

08008d3c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e01c      	b.n	8008d88 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	795b      	ldrb	r3, [r3, #5]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d105      	bne.n	8008d64 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fc fcb6 	bl	80056d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f042 0204 	orr.w	r2, r2, #4
 8008d78:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	791b      	ldrb	r3, [r3, #4]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d101      	bne.n	8008daa <HAL_RNG_GenerateRandomNumber+0x1a>
 8008da6:	2302      	movs	r3, #2
 8008da8:	e044      	b.n	8008e34 <HAL_RNG_GenerateRandomNumber+0xa4>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	795b      	ldrb	r3, [r3, #5]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d133      	bne.n	8008e22 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dc0:	f7fd fa24 	bl	800620c <HAL_GetTick>
 8008dc4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008dc6:	e018      	b.n	8008dfa <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008dc8:	f7fd fa20 	bl	800620c <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d911      	bls.n	8008dfa <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d00a      	beq.n	8008dfa <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e01c      	b.n	8008e34 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d1df      	bne.n	8008dc8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	715a      	strb	r2, [r3, #5]
 8008e20:	e004      	b.n	8008e2c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2204      	movs	r2, #4
 8008e26:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	711a      	strb	r2, [r3, #4]

  return status;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	330c      	adds	r3, #12
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff ffa0 	bl	8008d90 <HAL_RNG_GenerateRandomNumber>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d102      	bne.n	8008e5c <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	e000      	b.n	8008e5e <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8008e5c:	2300      	movs	r3, #0
  }
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b082      	sub	sp, #8
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e07b      	b.n	8008f70 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d108      	bne.n	8008e92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e88:	d009      	beq.n	8008e9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	61da      	str	r2, [r3, #28]
 8008e90:	e005      	b.n	8008e9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7fc fc2b 	bl	8005714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ed4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f22:	ea42 0103 	orr.w	r1, r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	f003 0104 	and.w	r1, r3, #4
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	f003 0210 	and.w	r2, r3, #16
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69da      	ldr	r2, [r3, #28]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e01a      	b.n	8008fc0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008fa0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fc fbfe 	bl	80057a4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	603b      	str	r3, [r7, #0]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fd8:	f7fd f918 	bl	800620c <HAL_GetTick>
 8008fdc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008fde:	88fb      	ldrh	r3, [r7, #6]
 8008fe0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d001      	beq.n	8008ff2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e12a      	b.n	8009248 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_SPI_Transmit+0x36>
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e122      	b.n	8009248 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_SPI_Transmit+0x48>
 800900c:	2302      	movs	r3, #2
 800900e:	e11b      	b.n	8009248 <HAL_SPI_Transmit+0x280>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2203      	movs	r2, #3
 800901c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	88fa      	ldrh	r2, [r7, #6]
 8009036:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800905e:	d10f      	bne.n	8009080 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800906e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800907e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908a:	2b40      	cmp	r3, #64	@ 0x40
 800908c:	d007      	beq.n	800909e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a6:	d152      	bne.n	800914e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_SPI_Transmit+0xee>
 80090b0:	8b7b      	ldrh	r3, [r7, #26]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d145      	bne.n	8009142 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ba:	881a      	ldrh	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c6:	1c9a      	adds	r2, r3, #2
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090da:	e032      	b.n	8009142 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d112      	bne.n	8009110 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fa:	1c9a      	adds	r2, r3, #2
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800910e:	e018      	b.n	8009142 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009110:	f7fd f87c 	bl	800620c <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	429a      	cmp	r2, r3
 800911e:	d803      	bhi.n	8009128 <HAL_SPI_Transmit+0x160>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d102      	bne.n	800912e <HAL_SPI_Transmit+0x166>
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e082      	b.n	8009248 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1c7      	bne.n	80090dc <HAL_SPI_Transmit+0x114>
 800914c:	e053      	b.n	80091f6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_SPI_Transmit+0x194>
 8009156:	8b7b      	ldrh	r3, [r7, #26]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d147      	bne.n	80091ec <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	7812      	ldrb	r2, [r2, #0]
 8009168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009182:	e033      	b.n	80091ec <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b02      	cmp	r3, #2
 8009190:	d113      	bne.n	80091ba <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	330c      	adds	r3, #12
 800919c:	7812      	ldrb	r2, [r2, #0]
 800919e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3b01      	subs	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80091b8:	e018      	b.n	80091ec <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ba:	f7fd f827 	bl	800620c <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d803      	bhi.n	80091d2 <HAL_SPI_Transmit+0x20a>
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d0:	d102      	bne.n	80091d8 <HAL_SPI_Transmit+0x210>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e02d      	b.n	8009248 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1c6      	bne.n	8009184 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 f8be 	bl	800937c <SPI_EndRxTxTransaction>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2220      	movs	r2, #32
 800920a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009246:	2300      	movs	r3, #0
  }
}
 8009248:	4618      	mov	r0, r3
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800925e:	b2db      	uxtb	r3, r3
}
 8009260:	4618      	mov	r0, r3
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	4613      	mov	r3, r2
 800927a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800927c:	f7fc ffc6 	bl	800620c <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4413      	add	r3, r2
 800928a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800928c:	f7fc ffbe 	bl	800620c <HAL_GetTick>
 8009290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009292:	4b39      	ldr	r3, [pc, #228]	@ (8009378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	015b      	lsls	r3, r3, #5
 8009298:	0d1b      	lsrs	r3, r3, #20
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092a2:	e054      	b.n	800934e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092aa:	d050      	beq.n	800934e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092ac:	f7fc ffae 	bl	800620c <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	69fa      	ldr	r2, [r7, #28]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d902      	bls.n	80092c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d13d      	bne.n	800933e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092da:	d111      	bne.n	8009300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092e4:	d004      	beq.n	80092f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ee:	d107      	bne.n	8009300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009308:	d10f      	bne.n	800932a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e017      	b.n	800936e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	3b01      	subs	r3, #1
 800934c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	bf0c      	ite	eq
 800935e:	2301      	moveq	r3, #1
 8009360:	2300      	movne	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	461a      	mov	r2, r3
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	429a      	cmp	r2, r3
 800936a:	d19b      	bne.n	80092a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3720      	adds	r7, #32
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20000014 	.word	0x20000014

0800937c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af02      	add	r7, sp, #8
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2201      	movs	r2, #1
 8009390:	2102      	movs	r1, #2
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f7ff ff6a 	bl	800926c <SPI_WaitFlagStateUntilTimeout>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a2:	f043 0220 	orr.w	r2, r3, #32
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	e032      	b.n	8009414 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80093ae:	4b1b      	ldr	r3, [pc, #108]	@ (800941c <SPI_EndRxTxTransaction+0xa0>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009420 <SPI_EndRxTxTransaction+0xa4>)
 80093b4:	fba2 2303 	umull	r2, r3, r2, r3
 80093b8:	0d5b      	lsrs	r3, r3, #21
 80093ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093be:	fb02 f303 	mul.w	r3, r2, r3
 80093c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093cc:	d112      	bne.n	80093f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2200      	movs	r2, #0
 80093d6:	2180      	movs	r1, #128	@ 0x80
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff ff47 	bl	800926c <SPI_WaitFlagStateUntilTimeout>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d016      	beq.n	8009412 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e8:	f043 0220 	orr.w	r2, r3, #32
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e00f      	b.n	8009414 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800940a:	2b80      	cmp	r3, #128	@ 0x80
 800940c:	d0f2      	beq.n	80093f4 <SPI_EndRxTxTransaction+0x78>
 800940e:	e000      	b.n	8009412 <SPI_EndRxTxTransaction+0x96>
        break;
 8009410:	bf00      	nop
  }

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000014 	.word	0x20000014
 8009420:	165e9f81 	.word	0x165e9f81

08009424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e041      	b.n	80094ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b00      	cmp	r3, #0
 8009440:	d106      	bne.n	8009450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7fc f9c8 	bl	80057e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3304      	adds	r3, #4
 8009460:	4619      	mov	r1, r3
 8009462:	4610      	mov	r0, r2
 8009464:	f000 f89e 	bl	80095a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
	...

080094c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d001      	beq.n	80094dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e04e      	b.n	800957a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f042 0201 	orr.w	r2, r2, #1
 80094f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a23      	ldr	r2, [pc, #140]	@ (8009588 <HAL_TIM_Base_Start_IT+0xc4>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d022      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009506:	d01d      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1f      	ldr	r2, [pc, #124]	@ (800958c <HAL_TIM_Base_Start_IT+0xc8>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d018      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1e      	ldr	r2, [pc, #120]	@ (8009590 <HAL_TIM_Base_Start_IT+0xcc>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d013      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a1c      	ldr	r2, [pc, #112]	@ (8009594 <HAL_TIM_Base_Start_IT+0xd0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00e      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1b      	ldr	r2, [pc, #108]	@ (8009598 <HAL_TIM_Base_Start_IT+0xd4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d009      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a19      	ldr	r2, [pc, #100]	@ (800959c <HAL_TIM_Base_Start_IT+0xd8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d004      	beq.n	8009544 <HAL_TIM_Base_Start_IT+0x80>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a18      	ldr	r2, [pc, #96]	@ (80095a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d111      	bne.n	8009568 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b06      	cmp	r3, #6
 8009554:	d010      	beq.n	8009578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f042 0201 	orr.w	r2, r2, #1
 8009564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009566:	e007      	b.n	8009578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f042 0201 	orr.w	r2, r2, #1
 8009576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	40010000 	.word	0x40010000
 800958c:	40000400 	.word	0x40000400
 8009590:	40000800 	.word	0x40000800
 8009594:	40000c00 	.word	0x40000c00
 8009598:	40010400 	.word	0x40010400
 800959c:	40014000 	.word	0x40014000
 80095a0:	40001800 	.word	0x40001800

080095a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a46      	ldr	r2, [pc, #280]	@ (80096d0 <TIM_Base_SetConfig+0x12c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095c2:	d00f      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a43      	ldr	r2, [pc, #268]	@ (80096d4 <TIM_Base_SetConfig+0x130>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00b      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a42      	ldr	r2, [pc, #264]	@ (80096d8 <TIM_Base_SetConfig+0x134>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d007      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a41      	ldr	r2, [pc, #260]	@ (80096dc <TIM_Base_SetConfig+0x138>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d003      	beq.n	80095e4 <TIM_Base_SetConfig+0x40>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a40      	ldr	r2, [pc, #256]	@ (80096e0 <TIM_Base_SetConfig+0x13c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d108      	bne.n	80095f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a35      	ldr	r2, [pc, #212]	@ (80096d0 <TIM_Base_SetConfig+0x12c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d02b      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009604:	d027      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a32      	ldr	r2, [pc, #200]	@ (80096d4 <TIM_Base_SetConfig+0x130>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d023      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a31      	ldr	r2, [pc, #196]	@ (80096d8 <TIM_Base_SetConfig+0x134>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d01f      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a30      	ldr	r2, [pc, #192]	@ (80096dc <TIM_Base_SetConfig+0x138>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d01b      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a2f      	ldr	r2, [pc, #188]	@ (80096e0 <TIM_Base_SetConfig+0x13c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d017      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a2e      	ldr	r2, [pc, #184]	@ (80096e4 <TIM_Base_SetConfig+0x140>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d013      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a2d      	ldr	r2, [pc, #180]	@ (80096e8 <TIM_Base_SetConfig+0x144>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d00f      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a2c      	ldr	r2, [pc, #176]	@ (80096ec <TIM_Base_SetConfig+0x148>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00b      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a2b      	ldr	r2, [pc, #172]	@ (80096f0 <TIM_Base_SetConfig+0x14c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d007      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a2a      	ldr	r2, [pc, #168]	@ (80096f4 <TIM_Base_SetConfig+0x150>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d003      	beq.n	8009656 <TIM_Base_SetConfig+0xb2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a29      	ldr	r2, [pc, #164]	@ (80096f8 <TIM_Base_SetConfig+0x154>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d108      	bne.n	8009668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800965c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	4313      	orrs	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a10      	ldr	r2, [pc, #64]	@ (80096d0 <TIM_Base_SetConfig+0x12c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_Base_SetConfig+0xf8>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a12      	ldr	r2, [pc, #72]	@ (80096e0 <TIM_Base_SetConfig+0x13c>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d103      	bne.n	80096a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d105      	bne.n	80096c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f023 0201 	bic.w	r2, r3, #1
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	611a      	str	r2, [r3, #16]
  }
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	40010000 	.word	0x40010000
 80096d4:	40000400 	.word	0x40000400
 80096d8:	40000800 	.word	0x40000800
 80096dc:	40000c00 	.word	0x40000c00
 80096e0:	40010400 	.word	0x40010400
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	40014800 	.word	0x40014800
 80096f0:	40001800 	.word	0x40001800
 80096f4:	40001c00 	.word	0x40001c00
 80096f8:	40002000 	.word	0x40002000

080096fc <std>:
 80096fc:	2300      	movs	r3, #0
 80096fe:	b510      	push	{r4, lr}
 8009700:	4604      	mov	r4, r0
 8009702:	e9c0 3300 	strd	r3, r3, [r0]
 8009706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970a:	6083      	str	r3, [r0, #8]
 800970c:	8181      	strh	r1, [r0, #12]
 800970e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009710:	81c2      	strh	r2, [r0, #14]
 8009712:	6183      	str	r3, [r0, #24]
 8009714:	4619      	mov	r1, r3
 8009716:	2208      	movs	r2, #8
 8009718:	305c      	adds	r0, #92	@ 0x5c
 800971a:	f000 f9f9 	bl	8009b10 <memset>
 800971e:	4b0d      	ldr	r3, [pc, #52]	@ (8009754 <std+0x58>)
 8009720:	6263      	str	r3, [r4, #36]	@ 0x24
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <std+0x5c>)
 8009724:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <std+0x60>)
 8009728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <std+0x64>)
 800972c:	6323      	str	r3, [r4, #48]	@ 0x30
 800972e:	4b0d      	ldr	r3, [pc, #52]	@ (8009764 <std+0x68>)
 8009730:	6224      	str	r4, [r4, #32]
 8009732:	429c      	cmp	r4, r3
 8009734:	d006      	beq.n	8009744 <std+0x48>
 8009736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800973a:	4294      	cmp	r4, r2
 800973c:	d002      	beq.n	8009744 <std+0x48>
 800973e:	33d0      	adds	r3, #208	@ 0xd0
 8009740:	429c      	cmp	r4, r3
 8009742:	d105      	bne.n	8009750 <std+0x54>
 8009744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800974c:	f000 ba58 	b.w	8009c00 <__retarget_lock_init_recursive>
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	08009961 	.word	0x08009961
 8009758:	08009983 	.word	0x08009983
 800975c:	080099bb 	.word	0x080099bb
 8009760:	080099df 	.word	0x080099df
 8009764:	20025fc8 	.word	0x20025fc8

08009768 <stdio_exit_handler>:
 8009768:	4a02      	ldr	r2, [pc, #8]	@ (8009774 <stdio_exit_handler+0xc>)
 800976a:	4903      	ldr	r1, [pc, #12]	@ (8009778 <stdio_exit_handler+0x10>)
 800976c:	4803      	ldr	r0, [pc, #12]	@ (800977c <stdio_exit_handler+0x14>)
 800976e:	f000 b869 	b.w	8009844 <_fwalk_sglue>
 8009772:	bf00      	nop
 8009774:	20000020 	.word	0x20000020
 8009778:	0800a4a1 	.word	0x0800a4a1
 800977c:	20000030 	.word	0x20000030

08009780 <cleanup_stdio>:
 8009780:	6841      	ldr	r1, [r0, #4]
 8009782:	4b0c      	ldr	r3, [pc, #48]	@ (80097b4 <cleanup_stdio+0x34>)
 8009784:	4299      	cmp	r1, r3
 8009786:	b510      	push	{r4, lr}
 8009788:	4604      	mov	r4, r0
 800978a:	d001      	beq.n	8009790 <cleanup_stdio+0x10>
 800978c:	f000 fe88 	bl	800a4a0 <_fflush_r>
 8009790:	68a1      	ldr	r1, [r4, #8]
 8009792:	4b09      	ldr	r3, [pc, #36]	@ (80097b8 <cleanup_stdio+0x38>)
 8009794:	4299      	cmp	r1, r3
 8009796:	d002      	beq.n	800979e <cleanup_stdio+0x1e>
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fe81 	bl	800a4a0 <_fflush_r>
 800979e:	68e1      	ldr	r1, [r4, #12]
 80097a0:	4b06      	ldr	r3, [pc, #24]	@ (80097bc <cleanup_stdio+0x3c>)
 80097a2:	4299      	cmp	r1, r3
 80097a4:	d004      	beq.n	80097b0 <cleanup_stdio+0x30>
 80097a6:	4620      	mov	r0, r4
 80097a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ac:	f000 be78 	b.w	800a4a0 <_fflush_r>
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	bf00      	nop
 80097b4:	20025fc8 	.word	0x20025fc8
 80097b8:	20026030 	.word	0x20026030
 80097bc:	20026098 	.word	0x20026098

080097c0 <global_stdio_init.part.0>:
 80097c0:	b510      	push	{r4, lr}
 80097c2:	4b0b      	ldr	r3, [pc, #44]	@ (80097f0 <global_stdio_init.part.0+0x30>)
 80097c4:	4c0b      	ldr	r4, [pc, #44]	@ (80097f4 <global_stdio_init.part.0+0x34>)
 80097c6:	4a0c      	ldr	r2, [pc, #48]	@ (80097f8 <global_stdio_init.part.0+0x38>)
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	4620      	mov	r0, r4
 80097cc:	2200      	movs	r2, #0
 80097ce:	2104      	movs	r1, #4
 80097d0:	f7ff ff94 	bl	80096fc <std>
 80097d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097d8:	2201      	movs	r2, #1
 80097da:	2109      	movs	r1, #9
 80097dc:	f7ff ff8e 	bl	80096fc <std>
 80097e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097e4:	2202      	movs	r2, #2
 80097e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ea:	2112      	movs	r1, #18
 80097ec:	f7ff bf86 	b.w	80096fc <std>
 80097f0:	20026100 	.word	0x20026100
 80097f4:	20025fc8 	.word	0x20025fc8
 80097f8:	08009769 	.word	0x08009769

080097fc <__sfp_lock_acquire>:
 80097fc:	4801      	ldr	r0, [pc, #4]	@ (8009804 <__sfp_lock_acquire+0x8>)
 80097fe:	f000 ba00 	b.w	8009c02 <__retarget_lock_acquire_recursive>
 8009802:	bf00      	nop
 8009804:	20026109 	.word	0x20026109

08009808 <__sfp_lock_release>:
 8009808:	4801      	ldr	r0, [pc, #4]	@ (8009810 <__sfp_lock_release+0x8>)
 800980a:	f000 b9fb 	b.w	8009c04 <__retarget_lock_release_recursive>
 800980e:	bf00      	nop
 8009810:	20026109 	.word	0x20026109

08009814 <__sinit>:
 8009814:	b510      	push	{r4, lr}
 8009816:	4604      	mov	r4, r0
 8009818:	f7ff fff0 	bl	80097fc <__sfp_lock_acquire>
 800981c:	6a23      	ldr	r3, [r4, #32]
 800981e:	b11b      	cbz	r3, 8009828 <__sinit+0x14>
 8009820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009824:	f7ff bff0 	b.w	8009808 <__sfp_lock_release>
 8009828:	4b04      	ldr	r3, [pc, #16]	@ (800983c <__sinit+0x28>)
 800982a:	6223      	str	r3, [r4, #32]
 800982c:	4b04      	ldr	r3, [pc, #16]	@ (8009840 <__sinit+0x2c>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1f5      	bne.n	8009820 <__sinit+0xc>
 8009834:	f7ff ffc4 	bl	80097c0 <global_stdio_init.part.0>
 8009838:	e7f2      	b.n	8009820 <__sinit+0xc>
 800983a:	bf00      	nop
 800983c:	08009781 	.word	0x08009781
 8009840:	20026100 	.word	0x20026100

08009844 <_fwalk_sglue>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	4607      	mov	r7, r0
 800984a:	4688      	mov	r8, r1
 800984c:	4614      	mov	r4, r2
 800984e:	2600      	movs	r6, #0
 8009850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009854:	f1b9 0901 	subs.w	r9, r9, #1
 8009858:	d505      	bpl.n	8009866 <_fwalk_sglue+0x22>
 800985a:	6824      	ldr	r4, [r4, #0]
 800985c:	2c00      	cmp	r4, #0
 800985e:	d1f7      	bne.n	8009850 <_fwalk_sglue+0xc>
 8009860:	4630      	mov	r0, r6
 8009862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009866:	89ab      	ldrh	r3, [r5, #12]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d907      	bls.n	800987c <_fwalk_sglue+0x38>
 800986c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009870:	3301      	adds	r3, #1
 8009872:	d003      	beq.n	800987c <_fwalk_sglue+0x38>
 8009874:	4629      	mov	r1, r5
 8009876:	4638      	mov	r0, r7
 8009878:	47c0      	blx	r8
 800987a:	4306      	orrs	r6, r0
 800987c:	3568      	adds	r5, #104	@ 0x68
 800987e:	e7e9      	b.n	8009854 <_fwalk_sglue+0x10>

08009880 <iprintf>:
 8009880:	b40f      	push	{r0, r1, r2, r3}
 8009882:	b507      	push	{r0, r1, r2, lr}
 8009884:	4906      	ldr	r1, [pc, #24]	@ (80098a0 <iprintf+0x20>)
 8009886:	ab04      	add	r3, sp, #16
 8009888:	6808      	ldr	r0, [r1, #0]
 800988a:	f853 2b04 	ldr.w	r2, [r3], #4
 800988e:	6881      	ldr	r1, [r0, #8]
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	f000 fadb 	bl	8009e4c <_vfiprintf_r>
 8009896:	b003      	add	sp, #12
 8009898:	f85d eb04 	ldr.w	lr, [sp], #4
 800989c:	b004      	add	sp, #16
 800989e:	4770      	bx	lr
 80098a0:	2000002c 	.word	0x2000002c

080098a4 <_puts_r>:
 80098a4:	6a03      	ldr	r3, [r0, #32]
 80098a6:	b570      	push	{r4, r5, r6, lr}
 80098a8:	6884      	ldr	r4, [r0, #8]
 80098aa:	4605      	mov	r5, r0
 80098ac:	460e      	mov	r6, r1
 80098ae:	b90b      	cbnz	r3, 80098b4 <_puts_r+0x10>
 80098b0:	f7ff ffb0 	bl	8009814 <__sinit>
 80098b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098b6:	07db      	lsls	r3, r3, #31
 80098b8:	d405      	bmi.n	80098c6 <_puts_r+0x22>
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	0598      	lsls	r0, r3, #22
 80098be:	d402      	bmi.n	80098c6 <_puts_r+0x22>
 80098c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098c2:	f000 f99e 	bl	8009c02 <__retarget_lock_acquire_recursive>
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	0719      	lsls	r1, r3, #28
 80098ca:	d502      	bpl.n	80098d2 <_puts_r+0x2e>
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d135      	bne.n	800993e <_puts_r+0x9a>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 f8c5 	bl	8009a64 <__swsetup_r>
 80098da:	b380      	cbz	r0, 800993e <_puts_r+0x9a>
 80098dc:	f04f 35ff 	mov.w	r5, #4294967295
 80098e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098e2:	07da      	lsls	r2, r3, #31
 80098e4:	d405      	bmi.n	80098f2 <_puts_r+0x4e>
 80098e6:	89a3      	ldrh	r3, [r4, #12]
 80098e8:	059b      	lsls	r3, r3, #22
 80098ea:	d402      	bmi.n	80098f2 <_puts_r+0x4e>
 80098ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ee:	f000 f989 	bl	8009c04 <__retarget_lock_release_recursive>
 80098f2:	4628      	mov	r0, r5
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	da04      	bge.n	8009904 <_puts_r+0x60>
 80098fa:	69a2      	ldr	r2, [r4, #24]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	dc17      	bgt.n	8009930 <_puts_r+0x8c>
 8009900:	290a      	cmp	r1, #10
 8009902:	d015      	beq.n	8009930 <_puts_r+0x8c>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	6022      	str	r2, [r4, #0]
 800990a:	7019      	strb	r1, [r3, #0]
 800990c:	68a3      	ldr	r3, [r4, #8]
 800990e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009912:	3b01      	subs	r3, #1
 8009914:	60a3      	str	r3, [r4, #8]
 8009916:	2900      	cmp	r1, #0
 8009918:	d1ed      	bne.n	80098f6 <_puts_r+0x52>
 800991a:	2b00      	cmp	r3, #0
 800991c:	da11      	bge.n	8009942 <_puts_r+0x9e>
 800991e:	4622      	mov	r2, r4
 8009920:	210a      	movs	r1, #10
 8009922:	4628      	mov	r0, r5
 8009924:	f000 f85f 	bl	80099e6 <__swbuf_r>
 8009928:	3001      	adds	r0, #1
 800992a:	d0d7      	beq.n	80098dc <_puts_r+0x38>
 800992c:	250a      	movs	r5, #10
 800992e:	e7d7      	b.n	80098e0 <_puts_r+0x3c>
 8009930:	4622      	mov	r2, r4
 8009932:	4628      	mov	r0, r5
 8009934:	f000 f857 	bl	80099e6 <__swbuf_r>
 8009938:	3001      	adds	r0, #1
 800993a:	d1e7      	bne.n	800990c <_puts_r+0x68>
 800993c:	e7ce      	b.n	80098dc <_puts_r+0x38>
 800993e:	3e01      	subs	r6, #1
 8009940:	e7e4      	b.n	800990c <_puts_r+0x68>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	6022      	str	r2, [r4, #0]
 8009948:	220a      	movs	r2, #10
 800994a:	701a      	strb	r2, [r3, #0]
 800994c:	e7ee      	b.n	800992c <_puts_r+0x88>
	...

08009950 <puts>:
 8009950:	4b02      	ldr	r3, [pc, #8]	@ (800995c <puts+0xc>)
 8009952:	4601      	mov	r1, r0
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	f7ff bfa5 	b.w	80098a4 <_puts_r>
 800995a:	bf00      	nop
 800995c:	2000002c 	.word	0x2000002c

08009960 <__sread>:
 8009960:	b510      	push	{r4, lr}
 8009962:	460c      	mov	r4, r1
 8009964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009968:	f000 f8fc 	bl	8009b64 <_read_r>
 800996c:	2800      	cmp	r0, #0
 800996e:	bfab      	itete	ge
 8009970:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009972:	89a3      	ldrhlt	r3, [r4, #12]
 8009974:	181b      	addge	r3, r3, r0
 8009976:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800997a:	bfac      	ite	ge
 800997c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800997e:	81a3      	strhlt	r3, [r4, #12]
 8009980:	bd10      	pop	{r4, pc}

08009982 <__swrite>:
 8009982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009986:	461f      	mov	r7, r3
 8009988:	898b      	ldrh	r3, [r1, #12]
 800998a:	05db      	lsls	r3, r3, #23
 800998c:	4605      	mov	r5, r0
 800998e:	460c      	mov	r4, r1
 8009990:	4616      	mov	r6, r2
 8009992:	d505      	bpl.n	80099a0 <__swrite+0x1e>
 8009994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009998:	2302      	movs	r3, #2
 800999a:	2200      	movs	r2, #0
 800999c:	f000 f8d0 	bl	8009b40 <_lseek_r>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	4632      	mov	r2, r6
 80099ae:	463b      	mov	r3, r7
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	f000 b8e7 	b.w	8009b88 <_write_r>

080099ba <__sseek>:
 80099ba:	b510      	push	{r4, lr}
 80099bc:	460c      	mov	r4, r1
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 f8bd 	bl	8009b40 <_lseek_r>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	bf15      	itete	ne
 80099cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099d6:	81a3      	strheq	r3, [r4, #12]
 80099d8:	bf18      	it	ne
 80099da:	81a3      	strhne	r3, [r4, #12]
 80099dc:	bd10      	pop	{r4, pc}

080099de <__sclose>:
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	f000 b89d 	b.w	8009b20 <_close_r>

080099e6 <__swbuf_r>:
 80099e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e8:	460e      	mov	r6, r1
 80099ea:	4614      	mov	r4, r2
 80099ec:	4605      	mov	r5, r0
 80099ee:	b118      	cbz	r0, 80099f8 <__swbuf_r+0x12>
 80099f0:	6a03      	ldr	r3, [r0, #32]
 80099f2:	b90b      	cbnz	r3, 80099f8 <__swbuf_r+0x12>
 80099f4:	f7ff ff0e 	bl	8009814 <__sinit>
 80099f8:	69a3      	ldr	r3, [r4, #24]
 80099fa:	60a3      	str	r3, [r4, #8]
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	071a      	lsls	r2, r3, #28
 8009a00:	d501      	bpl.n	8009a06 <__swbuf_r+0x20>
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	b943      	cbnz	r3, 8009a18 <__swbuf_r+0x32>
 8009a06:	4621      	mov	r1, r4
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f000 f82b 	bl	8009a64 <__swsetup_r>
 8009a0e:	b118      	cbz	r0, 8009a18 <__swbuf_r+0x32>
 8009a10:	f04f 37ff 	mov.w	r7, #4294967295
 8009a14:	4638      	mov	r0, r7
 8009a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	6922      	ldr	r2, [r4, #16]
 8009a1c:	1a98      	subs	r0, r3, r2
 8009a1e:	6963      	ldr	r3, [r4, #20]
 8009a20:	b2f6      	uxtb	r6, r6
 8009a22:	4283      	cmp	r3, r0
 8009a24:	4637      	mov	r7, r6
 8009a26:	dc05      	bgt.n	8009a34 <__swbuf_r+0x4e>
 8009a28:	4621      	mov	r1, r4
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f000 fd38 	bl	800a4a0 <_fflush_r>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d1ed      	bne.n	8009a10 <__swbuf_r+0x2a>
 8009a34:	68a3      	ldr	r3, [r4, #8]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	60a3      	str	r3, [r4, #8]
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	6022      	str	r2, [r4, #0]
 8009a40:	701e      	strb	r6, [r3, #0]
 8009a42:	6962      	ldr	r2, [r4, #20]
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d004      	beq.n	8009a54 <__swbuf_r+0x6e>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	07db      	lsls	r3, r3, #31
 8009a4e:	d5e1      	bpl.n	8009a14 <__swbuf_r+0x2e>
 8009a50:	2e0a      	cmp	r6, #10
 8009a52:	d1df      	bne.n	8009a14 <__swbuf_r+0x2e>
 8009a54:	4621      	mov	r1, r4
 8009a56:	4628      	mov	r0, r5
 8009a58:	f000 fd22 	bl	800a4a0 <_fflush_r>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d0d9      	beq.n	8009a14 <__swbuf_r+0x2e>
 8009a60:	e7d6      	b.n	8009a10 <__swbuf_r+0x2a>
	...

08009a64 <__swsetup_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4b29      	ldr	r3, [pc, #164]	@ (8009b0c <__swsetup_r+0xa8>)
 8009a68:	4605      	mov	r5, r0
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	b118      	cbz	r0, 8009a78 <__swsetup_r+0x14>
 8009a70:	6a03      	ldr	r3, [r0, #32]
 8009a72:	b90b      	cbnz	r3, 8009a78 <__swsetup_r+0x14>
 8009a74:	f7ff fece 	bl	8009814 <__sinit>
 8009a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7c:	0719      	lsls	r1, r3, #28
 8009a7e:	d422      	bmi.n	8009ac6 <__swsetup_r+0x62>
 8009a80:	06da      	lsls	r2, r3, #27
 8009a82:	d407      	bmi.n	8009a94 <__swsetup_r+0x30>
 8009a84:	2209      	movs	r2, #9
 8009a86:	602a      	str	r2, [r5, #0]
 8009a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	e033      	b.n	8009afc <__swsetup_r+0x98>
 8009a94:	0758      	lsls	r0, r3, #29
 8009a96:	d512      	bpl.n	8009abe <__swsetup_r+0x5a>
 8009a98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a9a:	b141      	cbz	r1, 8009aae <__swsetup_r+0x4a>
 8009a9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aa0:	4299      	cmp	r1, r3
 8009aa2:	d002      	beq.n	8009aaa <__swsetup_r+0x46>
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f8af 	bl	8009c08 <_free_r>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aae:	89a3      	ldrh	r3, [r4, #12]
 8009ab0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009ab4:	81a3      	strh	r3, [r4, #12]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	6063      	str	r3, [r4, #4]
 8009aba:	6923      	ldr	r3, [r4, #16]
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	89a3      	ldrh	r3, [r4, #12]
 8009ac0:	f043 0308 	orr.w	r3, r3, #8
 8009ac4:	81a3      	strh	r3, [r4, #12]
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	b94b      	cbnz	r3, 8009ade <__swsetup_r+0x7a>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad4:	d003      	beq.n	8009ade <__swsetup_r+0x7a>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f000 fd2f 	bl	800a53c <__smakebuf_r>
 8009ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae2:	f013 0201 	ands.w	r2, r3, #1
 8009ae6:	d00a      	beq.n	8009afe <__swsetup_r+0x9a>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	60a2      	str	r2, [r4, #8]
 8009aec:	6962      	ldr	r2, [r4, #20]
 8009aee:	4252      	negs	r2, r2
 8009af0:	61a2      	str	r2, [r4, #24]
 8009af2:	6922      	ldr	r2, [r4, #16]
 8009af4:	b942      	cbnz	r2, 8009b08 <__swsetup_r+0xa4>
 8009af6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009afa:	d1c5      	bne.n	8009a88 <__swsetup_r+0x24>
 8009afc:	bd38      	pop	{r3, r4, r5, pc}
 8009afe:	0799      	lsls	r1, r3, #30
 8009b00:	bf58      	it	pl
 8009b02:	6962      	ldrpl	r2, [r4, #20]
 8009b04:	60a2      	str	r2, [r4, #8]
 8009b06:	e7f4      	b.n	8009af2 <__swsetup_r+0x8e>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e7f7      	b.n	8009afc <__swsetup_r+0x98>
 8009b0c:	2000002c 	.word	0x2000002c

08009b10 <memset>:
 8009b10:	4402      	add	r2, r0
 8009b12:	4603      	mov	r3, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <_close_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	@ (8009b3c <_close_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7fc fa62 	bl	8005ff4 <_close>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_close_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_close_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20026104 	.word	0x20026104

08009b40 <_lseek_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	@ (8009b60 <_lseek_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7fc fa77 	bl	8006042 <_lseek>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_lseek_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_lseek_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20026104 	.word	0x20026104

08009b64 <_read_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	@ (8009b84 <_read_r+0x20>)
 8009b68:	4604      	mov	r4, r0
 8009b6a:	4608      	mov	r0, r1
 8009b6c:	4611      	mov	r1, r2
 8009b6e:	2200      	movs	r2, #0
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	f7fc fa05 	bl	8005f82 <_read>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d102      	bne.n	8009b82 <_read_r+0x1e>
 8009b7c:	682b      	ldr	r3, [r5, #0]
 8009b7e:	b103      	cbz	r3, 8009b82 <_read_r+0x1e>
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	bd38      	pop	{r3, r4, r5, pc}
 8009b84:	20026104 	.word	0x20026104

08009b88 <_write_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d07      	ldr	r5, [pc, #28]	@ (8009ba8 <_write_r+0x20>)
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	4608      	mov	r0, r1
 8009b90:	4611      	mov	r1, r2
 8009b92:	2200      	movs	r2, #0
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	f7fc fa10 	bl	8005fbc <_write>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_write_r+0x1e>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_write_r+0x1e>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20026104 	.word	0x20026104

08009bac <__errno>:
 8009bac:	4b01      	ldr	r3, [pc, #4]	@ (8009bb4 <__errno+0x8>)
 8009bae:	6818      	ldr	r0, [r3, #0]
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	2000002c 	.word	0x2000002c

08009bb8 <__libc_init_array>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	4d0d      	ldr	r5, [pc, #52]	@ (8009bf0 <__libc_init_array+0x38>)
 8009bbc:	4c0d      	ldr	r4, [pc, #52]	@ (8009bf4 <__libc_init_array+0x3c>)
 8009bbe:	1b64      	subs	r4, r4, r5
 8009bc0:	10a4      	asrs	r4, r4, #2
 8009bc2:	2600      	movs	r6, #0
 8009bc4:	42a6      	cmp	r6, r4
 8009bc6:	d109      	bne.n	8009bdc <__libc_init_array+0x24>
 8009bc8:	4d0b      	ldr	r5, [pc, #44]	@ (8009bf8 <__libc_init_array+0x40>)
 8009bca:	4c0c      	ldr	r4, [pc, #48]	@ (8009bfc <__libc_init_array+0x44>)
 8009bcc:	f000 fd24 	bl	800a618 <_init>
 8009bd0:	1b64      	subs	r4, r4, r5
 8009bd2:	10a4      	asrs	r4, r4, #2
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	42a6      	cmp	r6, r4
 8009bd8:	d105      	bne.n	8009be6 <__libc_init_array+0x2e>
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be0:	4798      	blx	r3
 8009be2:	3601      	adds	r6, #1
 8009be4:	e7ee      	b.n	8009bc4 <__libc_init_array+0xc>
 8009be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bea:	4798      	blx	r3
 8009bec:	3601      	adds	r6, #1
 8009bee:	e7f2      	b.n	8009bd6 <__libc_init_array+0x1e>
 8009bf0:	0800b880 	.word	0x0800b880
 8009bf4:	0800b880 	.word	0x0800b880
 8009bf8:	0800b880 	.word	0x0800b880
 8009bfc:	0800b884 	.word	0x0800b884

08009c00 <__retarget_lock_init_recursive>:
 8009c00:	4770      	bx	lr

08009c02 <__retarget_lock_acquire_recursive>:
 8009c02:	4770      	bx	lr

08009c04 <__retarget_lock_release_recursive>:
 8009c04:	4770      	bx	lr
	...

08009c08 <_free_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	d041      	beq.n	8009c94 <_free_r+0x8c>
 8009c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c14:	1f0c      	subs	r4, r1, #4
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfb8      	it	lt
 8009c1a:	18e4      	addlt	r4, r4, r3
 8009c1c:	f000 f8e0 	bl	8009de0 <__malloc_lock>
 8009c20:	4a1d      	ldr	r2, [pc, #116]	@ (8009c98 <_free_r+0x90>)
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	b933      	cbnz	r3, 8009c34 <_free_r+0x2c>
 8009c26:	6063      	str	r3, [r4, #4]
 8009c28:	6014      	str	r4, [r2, #0]
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c30:	f000 b8dc 	b.w	8009dec <__malloc_unlock>
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d908      	bls.n	8009c4a <_free_r+0x42>
 8009c38:	6820      	ldr	r0, [r4, #0]
 8009c3a:	1821      	adds	r1, r4, r0
 8009c3c:	428b      	cmp	r3, r1
 8009c3e:	bf01      	itttt	eq
 8009c40:	6819      	ldreq	r1, [r3, #0]
 8009c42:	685b      	ldreq	r3, [r3, #4]
 8009c44:	1809      	addeq	r1, r1, r0
 8009c46:	6021      	streq	r1, [r4, #0]
 8009c48:	e7ed      	b.n	8009c26 <_free_r+0x1e>
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	b10b      	cbz	r3, 8009c54 <_free_r+0x4c>
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	d9fa      	bls.n	8009c4a <_free_r+0x42>
 8009c54:	6811      	ldr	r1, [r2, #0]
 8009c56:	1850      	adds	r0, r2, r1
 8009c58:	42a0      	cmp	r0, r4
 8009c5a:	d10b      	bne.n	8009c74 <_free_r+0x6c>
 8009c5c:	6820      	ldr	r0, [r4, #0]
 8009c5e:	4401      	add	r1, r0
 8009c60:	1850      	adds	r0, r2, r1
 8009c62:	4283      	cmp	r3, r0
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	d1e0      	bne.n	8009c2a <_free_r+0x22>
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	6053      	str	r3, [r2, #4]
 8009c6e:	4408      	add	r0, r1
 8009c70:	6010      	str	r0, [r2, #0]
 8009c72:	e7da      	b.n	8009c2a <_free_r+0x22>
 8009c74:	d902      	bls.n	8009c7c <_free_r+0x74>
 8009c76:	230c      	movs	r3, #12
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	e7d6      	b.n	8009c2a <_free_r+0x22>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	1821      	adds	r1, r4, r0
 8009c80:	428b      	cmp	r3, r1
 8009c82:	bf04      	itt	eq
 8009c84:	6819      	ldreq	r1, [r3, #0]
 8009c86:	685b      	ldreq	r3, [r3, #4]
 8009c88:	6063      	str	r3, [r4, #4]
 8009c8a:	bf04      	itt	eq
 8009c8c:	1809      	addeq	r1, r1, r0
 8009c8e:	6021      	streq	r1, [r4, #0]
 8009c90:	6054      	str	r4, [r2, #4]
 8009c92:	e7ca      	b.n	8009c2a <_free_r+0x22>
 8009c94:	bd38      	pop	{r3, r4, r5, pc}
 8009c96:	bf00      	nop
 8009c98:	20026110 	.word	0x20026110

08009c9c <sbrk_aligned>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009cdc <sbrk_aligned+0x40>)
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	6831      	ldr	r1, [r6, #0]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	b911      	cbnz	r1, 8009cae <sbrk_aligned+0x12>
 8009ca8:	f000 fca6 	bl	800a5f8 <_sbrk_r>
 8009cac:	6030      	str	r0, [r6, #0]
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 fca1 	bl	800a5f8 <_sbrk_r>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d103      	bne.n	8009cc2 <sbrk_aligned+0x26>
 8009cba:	f04f 34ff 	mov.w	r4, #4294967295
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	1cc4      	adds	r4, r0, #3
 8009cc4:	f024 0403 	bic.w	r4, r4, #3
 8009cc8:	42a0      	cmp	r0, r4
 8009cca:	d0f8      	beq.n	8009cbe <sbrk_aligned+0x22>
 8009ccc:	1a21      	subs	r1, r4, r0
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f000 fc92 	bl	800a5f8 <_sbrk_r>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d1f2      	bne.n	8009cbe <sbrk_aligned+0x22>
 8009cd8:	e7ef      	b.n	8009cba <sbrk_aligned+0x1e>
 8009cda:	bf00      	nop
 8009cdc:	2002610c 	.word	0x2002610c

08009ce0 <_malloc_r>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	1ccd      	adds	r5, r1, #3
 8009ce6:	f025 0503 	bic.w	r5, r5, #3
 8009cea:	3508      	adds	r5, #8
 8009cec:	2d0c      	cmp	r5, #12
 8009cee:	bf38      	it	cc
 8009cf0:	250c      	movcc	r5, #12
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	db01      	blt.n	8009cfc <_malloc_r+0x1c>
 8009cf8:	42a9      	cmp	r1, r5
 8009cfa:	d904      	bls.n	8009d06 <_malloc_r+0x26>
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	6033      	str	r3, [r6, #0]
 8009d00:	2000      	movs	r0, #0
 8009d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ddc <_malloc_r+0xfc>
 8009d0a:	f000 f869 	bl	8009de0 <__malloc_lock>
 8009d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d12:	461c      	mov	r4, r3
 8009d14:	bb44      	cbnz	r4, 8009d68 <_malloc_r+0x88>
 8009d16:	4629      	mov	r1, r5
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff ffbf 	bl	8009c9c <sbrk_aligned>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	4604      	mov	r4, r0
 8009d22:	d158      	bne.n	8009dd6 <_malloc_r+0xf6>
 8009d24:	f8d8 4000 	ldr.w	r4, [r8]
 8009d28:	4627      	mov	r7, r4
 8009d2a:	2f00      	cmp	r7, #0
 8009d2c:	d143      	bne.n	8009db6 <_malloc_r+0xd6>
 8009d2e:	2c00      	cmp	r4, #0
 8009d30:	d04b      	beq.n	8009dca <_malloc_r+0xea>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	4639      	mov	r1, r7
 8009d36:	4630      	mov	r0, r6
 8009d38:	eb04 0903 	add.w	r9, r4, r3
 8009d3c:	f000 fc5c 	bl	800a5f8 <_sbrk_r>
 8009d40:	4581      	cmp	r9, r0
 8009d42:	d142      	bne.n	8009dca <_malloc_r+0xea>
 8009d44:	6821      	ldr	r1, [r4, #0]
 8009d46:	1a6d      	subs	r5, r5, r1
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ffa6 	bl	8009c9c <sbrk_aligned>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d03a      	beq.n	8009dca <_malloc_r+0xea>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	442b      	add	r3, r5
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	bb62      	cbnz	r2, 8009dbc <_malloc_r+0xdc>
 8009d62:	f8c8 7000 	str.w	r7, [r8]
 8009d66:	e00f      	b.n	8009d88 <_malloc_r+0xa8>
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	1b52      	subs	r2, r2, r5
 8009d6c:	d420      	bmi.n	8009db0 <_malloc_r+0xd0>
 8009d6e:	2a0b      	cmp	r2, #11
 8009d70:	d917      	bls.n	8009da2 <_malloc_r+0xc2>
 8009d72:	1961      	adds	r1, r4, r5
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	6025      	str	r5, [r4, #0]
 8009d78:	bf18      	it	ne
 8009d7a:	6059      	strne	r1, [r3, #4]
 8009d7c:	6863      	ldr	r3, [r4, #4]
 8009d7e:	bf08      	it	eq
 8009d80:	f8c8 1000 	streq.w	r1, [r8]
 8009d84:	5162      	str	r2, [r4, r5]
 8009d86:	604b      	str	r3, [r1, #4]
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f000 f82f 	bl	8009dec <__malloc_unlock>
 8009d8e:	f104 000b 	add.w	r0, r4, #11
 8009d92:	1d23      	adds	r3, r4, #4
 8009d94:	f020 0007 	bic.w	r0, r0, #7
 8009d98:	1ac2      	subs	r2, r0, r3
 8009d9a:	bf1c      	itt	ne
 8009d9c:	1a1b      	subne	r3, r3, r0
 8009d9e:	50a3      	strne	r3, [r4, r2]
 8009da0:	e7af      	b.n	8009d02 <_malloc_r+0x22>
 8009da2:	6862      	ldr	r2, [r4, #4]
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	bf0c      	ite	eq
 8009da8:	f8c8 2000 	streq.w	r2, [r8]
 8009dac:	605a      	strne	r2, [r3, #4]
 8009dae:	e7eb      	b.n	8009d88 <_malloc_r+0xa8>
 8009db0:	4623      	mov	r3, r4
 8009db2:	6864      	ldr	r4, [r4, #4]
 8009db4:	e7ae      	b.n	8009d14 <_malloc_r+0x34>
 8009db6:	463c      	mov	r4, r7
 8009db8:	687f      	ldr	r7, [r7, #4]
 8009dba:	e7b6      	b.n	8009d2a <_malloc_r+0x4a>
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d1fb      	bne.n	8009dbc <_malloc_r+0xdc>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6053      	str	r3, [r2, #4]
 8009dc8:	e7de      	b.n	8009d88 <_malloc_r+0xa8>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	6033      	str	r3, [r6, #0]
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f000 f80c 	bl	8009dec <__malloc_unlock>
 8009dd4:	e794      	b.n	8009d00 <_malloc_r+0x20>
 8009dd6:	6005      	str	r5, [r0, #0]
 8009dd8:	e7d6      	b.n	8009d88 <_malloc_r+0xa8>
 8009dda:	bf00      	nop
 8009ddc:	20026110 	.word	0x20026110

08009de0 <__malloc_lock>:
 8009de0:	4801      	ldr	r0, [pc, #4]	@ (8009de8 <__malloc_lock+0x8>)
 8009de2:	f7ff bf0e 	b.w	8009c02 <__retarget_lock_acquire_recursive>
 8009de6:	bf00      	nop
 8009de8:	20026108 	.word	0x20026108

08009dec <__malloc_unlock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	@ (8009df4 <__malloc_unlock+0x8>)
 8009dee:	f7ff bf09 	b.w	8009c04 <__retarget_lock_release_recursive>
 8009df2:	bf00      	nop
 8009df4:	20026108 	.word	0x20026108

08009df8 <__sfputc_r>:
 8009df8:	6893      	ldr	r3, [r2, #8]
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	b410      	push	{r4}
 8009e00:	6093      	str	r3, [r2, #8]
 8009e02:	da08      	bge.n	8009e16 <__sfputc_r+0x1e>
 8009e04:	6994      	ldr	r4, [r2, #24]
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	db01      	blt.n	8009e0e <__sfputc_r+0x16>
 8009e0a:	290a      	cmp	r1, #10
 8009e0c:	d103      	bne.n	8009e16 <__sfputc_r+0x1e>
 8009e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e12:	f7ff bde8 	b.w	80099e6 <__swbuf_r>
 8009e16:	6813      	ldr	r3, [r2, #0]
 8009e18:	1c58      	adds	r0, r3, #1
 8009e1a:	6010      	str	r0, [r2, #0]
 8009e1c:	7019      	strb	r1, [r3, #0]
 8009e1e:	4608      	mov	r0, r1
 8009e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <__sfputs_r>:
 8009e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e28:	4606      	mov	r6, r0
 8009e2a:	460f      	mov	r7, r1
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	18d5      	adds	r5, r2, r3
 8009e30:	42ac      	cmp	r4, r5
 8009e32:	d101      	bne.n	8009e38 <__sfputs_r+0x12>
 8009e34:	2000      	movs	r0, #0
 8009e36:	e007      	b.n	8009e48 <__sfputs_r+0x22>
 8009e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3c:	463a      	mov	r2, r7
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7ff ffda 	bl	8009df8 <__sfputc_r>
 8009e44:	1c43      	adds	r3, r0, #1
 8009e46:	d1f3      	bne.n	8009e30 <__sfputs_r+0xa>
 8009e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e4c <_vfiprintf_r>:
 8009e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	460d      	mov	r5, r1
 8009e52:	b09d      	sub	sp, #116	@ 0x74
 8009e54:	4614      	mov	r4, r2
 8009e56:	4698      	mov	r8, r3
 8009e58:	4606      	mov	r6, r0
 8009e5a:	b118      	cbz	r0, 8009e64 <_vfiprintf_r+0x18>
 8009e5c:	6a03      	ldr	r3, [r0, #32]
 8009e5e:	b90b      	cbnz	r3, 8009e64 <_vfiprintf_r+0x18>
 8009e60:	f7ff fcd8 	bl	8009814 <__sinit>
 8009e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e66:	07d9      	lsls	r1, r3, #31
 8009e68:	d405      	bmi.n	8009e76 <_vfiprintf_r+0x2a>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	059a      	lsls	r2, r3, #22
 8009e6e:	d402      	bmi.n	8009e76 <_vfiprintf_r+0x2a>
 8009e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e72:	f7ff fec6 	bl	8009c02 <__retarget_lock_acquire_recursive>
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	071b      	lsls	r3, r3, #28
 8009e7a:	d501      	bpl.n	8009e80 <_vfiprintf_r+0x34>
 8009e7c:	692b      	ldr	r3, [r5, #16]
 8009e7e:	b99b      	cbnz	r3, 8009ea8 <_vfiprintf_r+0x5c>
 8009e80:	4629      	mov	r1, r5
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff fdee 	bl	8009a64 <__swsetup_r>
 8009e88:	b170      	cbz	r0, 8009ea8 <_vfiprintf_r+0x5c>
 8009e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e8c:	07dc      	lsls	r4, r3, #31
 8009e8e:	d504      	bpl.n	8009e9a <_vfiprintf_r+0x4e>
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	b01d      	add	sp, #116	@ 0x74
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	89ab      	ldrh	r3, [r5, #12]
 8009e9c:	0598      	lsls	r0, r3, #22
 8009e9e:	d4f7      	bmi.n	8009e90 <_vfiprintf_r+0x44>
 8009ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ea2:	f7ff feaf 	bl	8009c04 <__retarget_lock_release_recursive>
 8009ea6:	e7f3      	b.n	8009e90 <_vfiprintf_r+0x44>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eac:	2320      	movs	r3, #32
 8009eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eb6:	2330      	movs	r3, #48	@ 0x30
 8009eb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a068 <_vfiprintf_r+0x21c>
 8009ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ec0:	f04f 0901 	mov.w	r9, #1
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	469a      	mov	sl, r3
 8009ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ecc:	b10a      	cbz	r2, 8009ed2 <_vfiprintf_r+0x86>
 8009ece:	2a25      	cmp	r2, #37	@ 0x25
 8009ed0:	d1f9      	bne.n	8009ec6 <_vfiprintf_r+0x7a>
 8009ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ed6:	d00b      	beq.n	8009ef0 <_vfiprintf_r+0xa4>
 8009ed8:	465b      	mov	r3, fp
 8009eda:	4622      	mov	r2, r4
 8009edc:	4629      	mov	r1, r5
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f7ff ffa1 	bl	8009e26 <__sfputs_r>
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f000 80a7 	beq.w	800a038 <_vfiprintf_r+0x1ec>
 8009eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009eec:	445a      	add	r2, fp
 8009eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 809f 	beq.w	800a038 <_vfiprintf_r+0x1ec>
 8009efa:	2300      	movs	r3, #0
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295
 8009f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f04:	f10a 0a01 	add.w	sl, sl, #1
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	9307      	str	r3, [sp, #28]
 8009f0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f12:	4654      	mov	r4, sl
 8009f14:	2205      	movs	r2, #5
 8009f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1a:	4853      	ldr	r0, [pc, #332]	@ (800a068 <_vfiprintf_r+0x21c>)
 8009f1c:	f7f6 f968 	bl	80001f0 <memchr>
 8009f20:	9a04      	ldr	r2, [sp, #16]
 8009f22:	b9d8      	cbnz	r0, 8009f5c <_vfiprintf_r+0x110>
 8009f24:	06d1      	lsls	r1, r2, #27
 8009f26:	bf44      	itt	mi
 8009f28:	2320      	movmi	r3, #32
 8009f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f2e:	0713      	lsls	r3, r2, #28
 8009f30:	bf44      	itt	mi
 8009f32:	232b      	movmi	r3, #43	@ 0x2b
 8009f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f38:	f89a 3000 	ldrb.w	r3, [sl]
 8009f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f3e:	d015      	beq.n	8009f6c <_vfiprintf_r+0x120>
 8009f40:	9a07      	ldr	r2, [sp, #28]
 8009f42:	4654      	mov	r4, sl
 8009f44:	2000      	movs	r0, #0
 8009f46:	f04f 0c0a 	mov.w	ip, #10
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f50:	3b30      	subs	r3, #48	@ 0x30
 8009f52:	2b09      	cmp	r3, #9
 8009f54:	d94b      	bls.n	8009fee <_vfiprintf_r+0x1a2>
 8009f56:	b1b0      	cbz	r0, 8009f86 <_vfiprintf_r+0x13a>
 8009f58:	9207      	str	r2, [sp, #28]
 8009f5a:	e014      	b.n	8009f86 <_vfiprintf_r+0x13a>
 8009f5c:	eba0 0308 	sub.w	r3, r0, r8
 8009f60:	fa09 f303 	lsl.w	r3, r9, r3
 8009f64:	4313      	orrs	r3, r2
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	46a2      	mov	sl, r4
 8009f6a:	e7d2      	b.n	8009f12 <_vfiprintf_r+0xc6>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	1d19      	adds	r1, r3, #4
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	9103      	str	r1, [sp, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	bfbb      	ittet	lt
 8009f78:	425b      	neglt	r3, r3
 8009f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009f7e:	9307      	strge	r3, [sp, #28]
 8009f80:	9307      	strlt	r3, [sp, #28]
 8009f82:	bfb8      	it	lt
 8009f84:	9204      	strlt	r2, [sp, #16]
 8009f86:	7823      	ldrb	r3, [r4, #0]
 8009f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f8a:	d10a      	bne.n	8009fa2 <_vfiprintf_r+0x156>
 8009f8c:	7863      	ldrb	r3, [r4, #1]
 8009f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f90:	d132      	bne.n	8009ff8 <_vfiprintf_r+0x1ac>
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	1d1a      	adds	r2, r3, #4
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	9203      	str	r2, [sp, #12]
 8009f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f9e:	3402      	adds	r4, #2
 8009fa0:	9305      	str	r3, [sp, #20]
 8009fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a078 <_vfiprintf_r+0x22c>
 8009fa6:	7821      	ldrb	r1, [r4, #0]
 8009fa8:	2203      	movs	r2, #3
 8009faa:	4650      	mov	r0, sl
 8009fac:	f7f6 f920 	bl	80001f0 <memchr>
 8009fb0:	b138      	cbz	r0, 8009fc2 <_vfiprintf_r+0x176>
 8009fb2:	9b04      	ldr	r3, [sp, #16]
 8009fb4:	eba0 000a 	sub.w	r0, r0, sl
 8009fb8:	2240      	movs	r2, #64	@ 0x40
 8009fba:	4082      	lsls	r2, r0
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	3401      	adds	r4, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	4829      	ldr	r0, [pc, #164]	@ (800a06c <_vfiprintf_r+0x220>)
 8009fc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fcc:	2206      	movs	r2, #6
 8009fce:	f7f6 f90f 	bl	80001f0 <memchr>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d03f      	beq.n	800a056 <_vfiprintf_r+0x20a>
 8009fd6:	4b26      	ldr	r3, [pc, #152]	@ (800a070 <_vfiprintf_r+0x224>)
 8009fd8:	bb1b      	cbnz	r3, 800a022 <_vfiprintf_r+0x1d6>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	3307      	adds	r3, #7
 8009fde:	f023 0307 	bic.w	r3, r3, #7
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	9303      	str	r3, [sp, #12]
 8009fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fe8:	443b      	add	r3, r7
 8009fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fec:	e76a      	b.n	8009ec4 <_vfiprintf_r+0x78>
 8009fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	2001      	movs	r0, #1
 8009ff6:	e7a8      	b.n	8009f4a <_vfiprintf_r+0xfe>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	3401      	adds	r4, #1
 8009ffc:	9305      	str	r3, [sp, #20]
 8009ffe:	4619      	mov	r1, r3
 800a000:	f04f 0c0a 	mov.w	ip, #10
 800a004:	4620      	mov	r0, r4
 800a006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a00a:	3a30      	subs	r2, #48	@ 0x30
 800a00c:	2a09      	cmp	r2, #9
 800a00e:	d903      	bls.n	800a018 <_vfiprintf_r+0x1cc>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d0c6      	beq.n	8009fa2 <_vfiprintf_r+0x156>
 800a014:	9105      	str	r1, [sp, #20]
 800a016:	e7c4      	b.n	8009fa2 <_vfiprintf_r+0x156>
 800a018:	fb0c 2101 	mla	r1, ip, r1, r2
 800a01c:	4604      	mov	r4, r0
 800a01e:	2301      	movs	r3, #1
 800a020:	e7f0      	b.n	800a004 <_vfiprintf_r+0x1b8>
 800a022:	ab03      	add	r3, sp, #12
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	462a      	mov	r2, r5
 800a028:	4b12      	ldr	r3, [pc, #72]	@ (800a074 <_vfiprintf_r+0x228>)
 800a02a:	a904      	add	r1, sp, #16
 800a02c:	4630      	mov	r0, r6
 800a02e:	f3af 8000 	nop.w
 800a032:	4607      	mov	r7, r0
 800a034:	1c78      	adds	r0, r7, #1
 800a036:	d1d6      	bne.n	8009fe6 <_vfiprintf_r+0x19a>
 800a038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a03a:	07d9      	lsls	r1, r3, #31
 800a03c:	d405      	bmi.n	800a04a <_vfiprintf_r+0x1fe>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	059a      	lsls	r2, r3, #22
 800a042:	d402      	bmi.n	800a04a <_vfiprintf_r+0x1fe>
 800a044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a046:	f7ff fddd 	bl	8009c04 <__retarget_lock_release_recursive>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	065b      	lsls	r3, r3, #25
 800a04e:	f53f af1f 	bmi.w	8009e90 <_vfiprintf_r+0x44>
 800a052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a054:	e71e      	b.n	8009e94 <_vfiprintf_r+0x48>
 800a056:	ab03      	add	r3, sp, #12
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	462a      	mov	r2, r5
 800a05c:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <_vfiprintf_r+0x228>)
 800a05e:	a904      	add	r1, sp, #16
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f879 	bl	800a158 <_printf_i>
 800a066:	e7e4      	b.n	800a032 <_vfiprintf_r+0x1e6>
 800a068:	0800b844 	.word	0x0800b844
 800a06c:	0800b84e 	.word	0x0800b84e
 800a070:	00000000 	.word	0x00000000
 800a074:	08009e27 	.word	0x08009e27
 800a078:	0800b84a 	.word	0x0800b84a

0800a07c <_printf_common>:
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	4616      	mov	r6, r2
 800a082:	4698      	mov	r8, r3
 800a084:	688a      	ldr	r2, [r1, #8]
 800a086:	690b      	ldr	r3, [r1, #16]
 800a088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a08c:	4293      	cmp	r3, r2
 800a08e:	bfb8      	it	lt
 800a090:	4613      	movlt	r3, r2
 800a092:	6033      	str	r3, [r6, #0]
 800a094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a098:	4607      	mov	r7, r0
 800a09a:	460c      	mov	r4, r1
 800a09c:	b10a      	cbz	r2, 800a0a2 <_printf_common+0x26>
 800a09e:	3301      	adds	r3, #1
 800a0a0:	6033      	str	r3, [r6, #0]
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	0699      	lsls	r1, r3, #26
 800a0a6:	bf42      	ittt	mi
 800a0a8:	6833      	ldrmi	r3, [r6, #0]
 800a0aa:	3302      	addmi	r3, #2
 800a0ac:	6033      	strmi	r3, [r6, #0]
 800a0ae:	6825      	ldr	r5, [r4, #0]
 800a0b0:	f015 0506 	ands.w	r5, r5, #6
 800a0b4:	d106      	bne.n	800a0c4 <_printf_common+0x48>
 800a0b6:	f104 0a19 	add.w	sl, r4, #25
 800a0ba:	68e3      	ldr	r3, [r4, #12]
 800a0bc:	6832      	ldr	r2, [r6, #0]
 800a0be:	1a9b      	subs	r3, r3, r2
 800a0c0:	42ab      	cmp	r3, r5
 800a0c2:	dc26      	bgt.n	800a112 <_printf_common+0x96>
 800a0c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	3b00      	subs	r3, #0
 800a0cc:	bf18      	it	ne
 800a0ce:	2301      	movne	r3, #1
 800a0d0:	0692      	lsls	r2, r2, #26
 800a0d2:	d42b      	bmi.n	800a12c <_printf_common+0xb0>
 800a0d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0d8:	4641      	mov	r1, r8
 800a0da:	4638      	mov	r0, r7
 800a0dc:	47c8      	blx	r9
 800a0de:	3001      	adds	r0, #1
 800a0e0:	d01e      	beq.n	800a120 <_printf_common+0xa4>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	f003 0306 	and.w	r3, r3, #6
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	bf02      	ittt	eq
 800a0ee:	68e5      	ldreq	r5, [r4, #12]
 800a0f0:	6833      	ldreq	r3, [r6, #0]
 800a0f2:	1aed      	subeq	r5, r5, r3
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	bf0c      	ite	eq
 800a0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0fc:	2500      	movne	r5, #0
 800a0fe:	4293      	cmp	r3, r2
 800a100:	bfc4      	itt	gt
 800a102:	1a9b      	subgt	r3, r3, r2
 800a104:	18ed      	addgt	r5, r5, r3
 800a106:	2600      	movs	r6, #0
 800a108:	341a      	adds	r4, #26
 800a10a:	42b5      	cmp	r5, r6
 800a10c:	d11a      	bne.n	800a144 <_printf_common+0xc8>
 800a10e:	2000      	movs	r0, #0
 800a110:	e008      	b.n	800a124 <_printf_common+0xa8>
 800a112:	2301      	movs	r3, #1
 800a114:	4652      	mov	r2, sl
 800a116:	4641      	mov	r1, r8
 800a118:	4638      	mov	r0, r7
 800a11a:	47c8      	blx	r9
 800a11c:	3001      	adds	r0, #1
 800a11e:	d103      	bne.n	800a128 <_printf_common+0xac>
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a128:	3501      	adds	r5, #1
 800a12a:	e7c6      	b.n	800a0ba <_printf_common+0x3e>
 800a12c:	18e1      	adds	r1, r4, r3
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	2030      	movs	r0, #48	@ 0x30
 800a132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a136:	4422      	add	r2, r4
 800a138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a13c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a140:	3302      	adds	r3, #2
 800a142:	e7c7      	b.n	800a0d4 <_printf_common+0x58>
 800a144:	2301      	movs	r3, #1
 800a146:	4622      	mov	r2, r4
 800a148:	4641      	mov	r1, r8
 800a14a:	4638      	mov	r0, r7
 800a14c:	47c8      	blx	r9
 800a14e:	3001      	adds	r0, #1
 800a150:	d0e6      	beq.n	800a120 <_printf_common+0xa4>
 800a152:	3601      	adds	r6, #1
 800a154:	e7d9      	b.n	800a10a <_printf_common+0x8e>
	...

0800a158 <_printf_i>:
 800a158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	7e0f      	ldrb	r7, [r1, #24]
 800a15e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a160:	2f78      	cmp	r7, #120	@ 0x78
 800a162:	4691      	mov	r9, r2
 800a164:	4680      	mov	r8, r0
 800a166:	460c      	mov	r4, r1
 800a168:	469a      	mov	sl, r3
 800a16a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a16e:	d807      	bhi.n	800a180 <_printf_i+0x28>
 800a170:	2f62      	cmp	r7, #98	@ 0x62
 800a172:	d80a      	bhi.n	800a18a <_printf_i+0x32>
 800a174:	2f00      	cmp	r7, #0
 800a176:	f000 80d2 	beq.w	800a31e <_printf_i+0x1c6>
 800a17a:	2f58      	cmp	r7, #88	@ 0x58
 800a17c:	f000 80b9 	beq.w	800a2f2 <_printf_i+0x19a>
 800a180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a188:	e03a      	b.n	800a200 <_printf_i+0xa8>
 800a18a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a18e:	2b15      	cmp	r3, #21
 800a190:	d8f6      	bhi.n	800a180 <_printf_i+0x28>
 800a192:	a101      	add	r1, pc, #4	@ (adr r1, 800a198 <_printf_i+0x40>)
 800a194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a198:	0800a1f1 	.word	0x0800a1f1
 800a19c:	0800a205 	.word	0x0800a205
 800a1a0:	0800a181 	.word	0x0800a181
 800a1a4:	0800a181 	.word	0x0800a181
 800a1a8:	0800a181 	.word	0x0800a181
 800a1ac:	0800a181 	.word	0x0800a181
 800a1b0:	0800a205 	.word	0x0800a205
 800a1b4:	0800a181 	.word	0x0800a181
 800a1b8:	0800a181 	.word	0x0800a181
 800a1bc:	0800a181 	.word	0x0800a181
 800a1c0:	0800a181 	.word	0x0800a181
 800a1c4:	0800a305 	.word	0x0800a305
 800a1c8:	0800a22f 	.word	0x0800a22f
 800a1cc:	0800a2bf 	.word	0x0800a2bf
 800a1d0:	0800a181 	.word	0x0800a181
 800a1d4:	0800a181 	.word	0x0800a181
 800a1d8:	0800a327 	.word	0x0800a327
 800a1dc:	0800a181 	.word	0x0800a181
 800a1e0:	0800a22f 	.word	0x0800a22f
 800a1e4:	0800a181 	.word	0x0800a181
 800a1e8:	0800a181 	.word	0x0800a181
 800a1ec:	0800a2c7 	.word	0x0800a2c7
 800a1f0:	6833      	ldr	r3, [r6, #0]
 800a1f2:	1d1a      	adds	r2, r3, #4
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6032      	str	r2, [r6, #0]
 800a1f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a200:	2301      	movs	r3, #1
 800a202:	e09d      	b.n	800a340 <_printf_i+0x1e8>
 800a204:	6833      	ldr	r3, [r6, #0]
 800a206:	6820      	ldr	r0, [r4, #0]
 800a208:	1d19      	adds	r1, r3, #4
 800a20a:	6031      	str	r1, [r6, #0]
 800a20c:	0606      	lsls	r6, r0, #24
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0xbc>
 800a210:	681d      	ldr	r5, [r3, #0]
 800a212:	e003      	b.n	800a21c <_printf_i+0xc4>
 800a214:	0645      	lsls	r5, r0, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0xb8>
 800a218:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	da03      	bge.n	800a228 <_printf_i+0xd0>
 800a220:	232d      	movs	r3, #45	@ 0x2d
 800a222:	426d      	negs	r5, r5
 800a224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a228:	4859      	ldr	r0, [pc, #356]	@ (800a390 <_printf_i+0x238>)
 800a22a:	230a      	movs	r3, #10
 800a22c:	e011      	b.n	800a252 <_printf_i+0xfa>
 800a22e:	6821      	ldr	r1, [r4, #0]
 800a230:	6833      	ldr	r3, [r6, #0]
 800a232:	0608      	lsls	r0, r1, #24
 800a234:	f853 5b04 	ldr.w	r5, [r3], #4
 800a238:	d402      	bmi.n	800a240 <_printf_i+0xe8>
 800a23a:	0649      	lsls	r1, r1, #25
 800a23c:	bf48      	it	mi
 800a23e:	b2ad      	uxthmi	r5, r5
 800a240:	2f6f      	cmp	r7, #111	@ 0x6f
 800a242:	4853      	ldr	r0, [pc, #332]	@ (800a390 <_printf_i+0x238>)
 800a244:	6033      	str	r3, [r6, #0]
 800a246:	bf14      	ite	ne
 800a248:	230a      	movne	r3, #10
 800a24a:	2308      	moveq	r3, #8
 800a24c:	2100      	movs	r1, #0
 800a24e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a252:	6866      	ldr	r6, [r4, #4]
 800a254:	60a6      	str	r6, [r4, #8]
 800a256:	2e00      	cmp	r6, #0
 800a258:	bfa2      	ittt	ge
 800a25a:	6821      	ldrge	r1, [r4, #0]
 800a25c:	f021 0104 	bicge.w	r1, r1, #4
 800a260:	6021      	strge	r1, [r4, #0]
 800a262:	b90d      	cbnz	r5, 800a268 <_printf_i+0x110>
 800a264:	2e00      	cmp	r6, #0
 800a266:	d04b      	beq.n	800a300 <_printf_i+0x1a8>
 800a268:	4616      	mov	r6, r2
 800a26a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a26e:	fb03 5711 	mls	r7, r3, r1, r5
 800a272:	5dc7      	ldrb	r7, [r0, r7]
 800a274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a278:	462f      	mov	r7, r5
 800a27a:	42bb      	cmp	r3, r7
 800a27c:	460d      	mov	r5, r1
 800a27e:	d9f4      	bls.n	800a26a <_printf_i+0x112>
 800a280:	2b08      	cmp	r3, #8
 800a282:	d10b      	bne.n	800a29c <_printf_i+0x144>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	07df      	lsls	r7, r3, #31
 800a288:	d508      	bpl.n	800a29c <_printf_i+0x144>
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6861      	ldr	r1, [r4, #4]
 800a28e:	4299      	cmp	r1, r3
 800a290:	bfde      	ittt	le
 800a292:	2330      	movle	r3, #48	@ 0x30
 800a294:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a298:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a29c:	1b92      	subs	r2, r2, r6
 800a29e:	6122      	str	r2, [r4, #16]
 800a2a0:	f8cd a000 	str.w	sl, [sp]
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	aa03      	add	r2, sp, #12
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7ff fee6 	bl	800a07c <_printf_common>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d14a      	bne.n	800a34a <_printf_i+0x1f2>
 800a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b8:	b004      	add	sp, #16
 800a2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2be:	6823      	ldr	r3, [r4, #0]
 800a2c0:	f043 0320 	orr.w	r3, r3, #32
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	4833      	ldr	r0, [pc, #204]	@ (800a394 <_printf_i+0x23c>)
 800a2c8:	2778      	movs	r7, #120	@ 0x78
 800a2ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	6831      	ldr	r1, [r6, #0]
 800a2d2:	061f      	lsls	r7, r3, #24
 800a2d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2d8:	d402      	bmi.n	800a2e0 <_printf_i+0x188>
 800a2da:	065f      	lsls	r7, r3, #25
 800a2dc:	bf48      	it	mi
 800a2de:	b2ad      	uxthmi	r5, r5
 800a2e0:	6031      	str	r1, [r6, #0]
 800a2e2:	07d9      	lsls	r1, r3, #31
 800a2e4:	bf44      	itt	mi
 800a2e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a2ea:	6023      	strmi	r3, [r4, #0]
 800a2ec:	b11d      	cbz	r5, 800a2f6 <_printf_i+0x19e>
 800a2ee:	2310      	movs	r3, #16
 800a2f0:	e7ac      	b.n	800a24c <_printf_i+0xf4>
 800a2f2:	4827      	ldr	r0, [pc, #156]	@ (800a390 <_printf_i+0x238>)
 800a2f4:	e7e9      	b.n	800a2ca <_printf_i+0x172>
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	f023 0320 	bic.w	r3, r3, #32
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	e7f6      	b.n	800a2ee <_printf_i+0x196>
 800a300:	4616      	mov	r6, r2
 800a302:	e7bd      	b.n	800a280 <_printf_i+0x128>
 800a304:	6833      	ldr	r3, [r6, #0]
 800a306:	6825      	ldr	r5, [r4, #0]
 800a308:	6961      	ldr	r1, [r4, #20]
 800a30a:	1d18      	adds	r0, r3, #4
 800a30c:	6030      	str	r0, [r6, #0]
 800a30e:	062e      	lsls	r6, r5, #24
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	d501      	bpl.n	800a318 <_printf_i+0x1c0>
 800a314:	6019      	str	r1, [r3, #0]
 800a316:	e002      	b.n	800a31e <_printf_i+0x1c6>
 800a318:	0668      	lsls	r0, r5, #25
 800a31a:	d5fb      	bpl.n	800a314 <_printf_i+0x1bc>
 800a31c:	8019      	strh	r1, [r3, #0]
 800a31e:	2300      	movs	r3, #0
 800a320:	6123      	str	r3, [r4, #16]
 800a322:	4616      	mov	r6, r2
 800a324:	e7bc      	b.n	800a2a0 <_printf_i+0x148>
 800a326:	6833      	ldr	r3, [r6, #0]
 800a328:	1d1a      	adds	r2, r3, #4
 800a32a:	6032      	str	r2, [r6, #0]
 800a32c:	681e      	ldr	r6, [r3, #0]
 800a32e:	6862      	ldr	r2, [r4, #4]
 800a330:	2100      	movs	r1, #0
 800a332:	4630      	mov	r0, r6
 800a334:	f7f5 ff5c 	bl	80001f0 <memchr>
 800a338:	b108      	cbz	r0, 800a33e <_printf_i+0x1e6>
 800a33a:	1b80      	subs	r0, r0, r6
 800a33c:	6060      	str	r0, [r4, #4]
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	2300      	movs	r3, #0
 800a344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a348:	e7aa      	b.n	800a2a0 <_printf_i+0x148>
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	4632      	mov	r2, r6
 800a34e:	4649      	mov	r1, r9
 800a350:	4640      	mov	r0, r8
 800a352:	47d0      	blx	sl
 800a354:	3001      	adds	r0, #1
 800a356:	d0ad      	beq.n	800a2b4 <_printf_i+0x15c>
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	079b      	lsls	r3, r3, #30
 800a35c:	d413      	bmi.n	800a386 <_printf_i+0x22e>
 800a35e:	68e0      	ldr	r0, [r4, #12]
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	4298      	cmp	r0, r3
 800a364:	bfb8      	it	lt
 800a366:	4618      	movlt	r0, r3
 800a368:	e7a6      	b.n	800a2b8 <_printf_i+0x160>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4632      	mov	r2, r6
 800a36e:	4649      	mov	r1, r9
 800a370:	4640      	mov	r0, r8
 800a372:	47d0      	blx	sl
 800a374:	3001      	adds	r0, #1
 800a376:	d09d      	beq.n	800a2b4 <_printf_i+0x15c>
 800a378:	3501      	adds	r5, #1
 800a37a:	68e3      	ldr	r3, [r4, #12]
 800a37c:	9903      	ldr	r1, [sp, #12]
 800a37e:	1a5b      	subs	r3, r3, r1
 800a380:	42ab      	cmp	r3, r5
 800a382:	dcf2      	bgt.n	800a36a <_printf_i+0x212>
 800a384:	e7eb      	b.n	800a35e <_printf_i+0x206>
 800a386:	2500      	movs	r5, #0
 800a388:	f104 0619 	add.w	r6, r4, #25
 800a38c:	e7f5      	b.n	800a37a <_printf_i+0x222>
 800a38e:	bf00      	nop
 800a390:	0800b855 	.word	0x0800b855
 800a394:	0800b866 	.word	0x0800b866

0800a398 <__sflush_r>:
 800a398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a0:	0716      	lsls	r6, r2, #28
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	d454      	bmi.n	800a452 <__sflush_r+0xba>
 800a3a8:	684b      	ldr	r3, [r1, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dc02      	bgt.n	800a3b4 <__sflush_r+0x1c>
 800a3ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dd48      	ble.n	800a446 <__sflush_r+0xae>
 800a3b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3b6:	2e00      	cmp	r6, #0
 800a3b8:	d045      	beq.n	800a446 <__sflush_r+0xae>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3c0:	682f      	ldr	r7, [r5, #0]
 800a3c2:	6a21      	ldr	r1, [r4, #32]
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	d030      	beq.n	800a42a <__sflush_r+0x92>
 800a3c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	0759      	lsls	r1, r3, #29
 800a3ce:	d505      	bpl.n	800a3dc <__sflush_r+0x44>
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3d6:	b10b      	cbz	r3, 800a3dc <__sflush_r+0x44>
 800a3d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3da:	1ad2      	subs	r2, r2, r3
 800a3dc:	2300      	movs	r3, #0
 800a3de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3e0:	6a21      	ldr	r1, [r4, #32]
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b0      	blx	r6
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	d106      	bne.n	800a3fa <__sflush_r+0x62>
 800a3ec:	6829      	ldr	r1, [r5, #0]
 800a3ee:	291d      	cmp	r1, #29
 800a3f0:	d82b      	bhi.n	800a44a <__sflush_r+0xb2>
 800a3f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a49c <__sflush_r+0x104>)
 800a3f4:	410a      	asrs	r2, r1
 800a3f6:	07d6      	lsls	r6, r2, #31
 800a3f8:	d427      	bmi.n	800a44a <__sflush_r+0xb2>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	6062      	str	r2, [r4, #4]
 800a3fe:	04d9      	lsls	r1, r3, #19
 800a400:	6922      	ldr	r2, [r4, #16]
 800a402:	6022      	str	r2, [r4, #0]
 800a404:	d504      	bpl.n	800a410 <__sflush_r+0x78>
 800a406:	1c42      	adds	r2, r0, #1
 800a408:	d101      	bne.n	800a40e <__sflush_r+0x76>
 800a40a:	682b      	ldr	r3, [r5, #0]
 800a40c:	b903      	cbnz	r3, 800a410 <__sflush_r+0x78>
 800a40e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a412:	602f      	str	r7, [r5, #0]
 800a414:	b1b9      	cbz	r1, 800a446 <__sflush_r+0xae>
 800a416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a41a:	4299      	cmp	r1, r3
 800a41c:	d002      	beq.n	800a424 <__sflush_r+0x8c>
 800a41e:	4628      	mov	r0, r5
 800a420:	f7ff fbf2 	bl	8009c08 <_free_r>
 800a424:	2300      	movs	r3, #0
 800a426:	6363      	str	r3, [r4, #52]	@ 0x34
 800a428:	e00d      	b.n	800a446 <__sflush_r+0xae>
 800a42a:	2301      	movs	r3, #1
 800a42c:	4628      	mov	r0, r5
 800a42e:	47b0      	blx	r6
 800a430:	4602      	mov	r2, r0
 800a432:	1c50      	adds	r0, r2, #1
 800a434:	d1c9      	bne.n	800a3ca <__sflush_r+0x32>
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0c6      	beq.n	800a3ca <__sflush_r+0x32>
 800a43c:	2b1d      	cmp	r3, #29
 800a43e:	d001      	beq.n	800a444 <__sflush_r+0xac>
 800a440:	2b16      	cmp	r3, #22
 800a442:	d11e      	bne.n	800a482 <__sflush_r+0xea>
 800a444:	602f      	str	r7, [r5, #0]
 800a446:	2000      	movs	r0, #0
 800a448:	e022      	b.n	800a490 <__sflush_r+0xf8>
 800a44a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a44e:	b21b      	sxth	r3, r3
 800a450:	e01b      	b.n	800a48a <__sflush_r+0xf2>
 800a452:	690f      	ldr	r7, [r1, #16]
 800a454:	2f00      	cmp	r7, #0
 800a456:	d0f6      	beq.n	800a446 <__sflush_r+0xae>
 800a458:	0793      	lsls	r3, r2, #30
 800a45a:	680e      	ldr	r6, [r1, #0]
 800a45c:	bf08      	it	eq
 800a45e:	694b      	ldreq	r3, [r1, #20]
 800a460:	600f      	str	r7, [r1, #0]
 800a462:	bf18      	it	ne
 800a464:	2300      	movne	r3, #0
 800a466:	eba6 0807 	sub.w	r8, r6, r7
 800a46a:	608b      	str	r3, [r1, #8]
 800a46c:	f1b8 0f00 	cmp.w	r8, #0
 800a470:	dde9      	ble.n	800a446 <__sflush_r+0xae>
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a476:	4643      	mov	r3, r8
 800a478:	463a      	mov	r2, r7
 800a47a:	4628      	mov	r0, r5
 800a47c:	47b0      	blx	r6
 800a47e:	2800      	cmp	r0, #0
 800a480:	dc08      	bgt.n	800a494 <__sflush_r+0xfc>
 800a482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	4407      	add	r7, r0
 800a496:	eba8 0800 	sub.w	r8, r8, r0
 800a49a:	e7e7      	b.n	800a46c <__sflush_r+0xd4>
 800a49c:	dfbffffe 	.word	0xdfbffffe

0800a4a0 <_fflush_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	690b      	ldr	r3, [r1, #16]
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	b913      	cbnz	r3, 800a4b0 <_fflush_r+0x10>
 800a4aa:	2500      	movs	r5, #0
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	b118      	cbz	r0, 800a4ba <_fflush_r+0x1a>
 800a4b2:	6a03      	ldr	r3, [r0, #32]
 800a4b4:	b90b      	cbnz	r3, 800a4ba <_fflush_r+0x1a>
 800a4b6:	f7ff f9ad 	bl	8009814 <__sinit>
 800a4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d0f3      	beq.n	800a4aa <_fflush_r+0xa>
 800a4c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4c4:	07d0      	lsls	r0, r2, #31
 800a4c6:	d404      	bmi.n	800a4d2 <_fflush_r+0x32>
 800a4c8:	0599      	lsls	r1, r3, #22
 800a4ca:	d402      	bmi.n	800a4d2 <_fflush_r+0x32>
 800a4cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ce:	f7ff fb98 	bl	8009c02 <__retarget_lock_acquire_recursive>
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	f7ff ff5f 	bl	800a398 <__sflush_r>
 800a4da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4dc:	07da      	lsls	r2, r3, #31
 800a4de:	4605      	mov	r5, r0
 800a4e0:	d4e4      	bmi.n	800a4ac <_fflush_r+0xc>
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	059b      	lsls	r3, r3, #22
 800a4e6:	d4e1      	bmi.n	800a4ac <_fflush_r+0xc>
 800a4e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ea:	f7ff fb8b 	bl	8009c04 <__retarget_lock_release_recursive>
 800a4ee:	e7dd      	b.n	800a4ac <_fflush_r+0xc>

0800a4f0 <__swhatbuf_r>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f8:	2900      	cmp	r1, #0
 800a4fa:	b096      	sub	sp, #88	@ 0x58
 800a4fc:	4615      	mov	r5, r2
 800a4fe:	461e      	mov	r6, r3
 800a500:	da0d      	bge.n	800a51e <__swhatbuf_r+0x2e>
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a508:	f04f 0100 	mov.w	r1, #0
 800a50c:	bf14      	ite	ne
 800a50e:	2340      	movne	r3, #64	@ 0x40
 800a510:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a514:	2000      	movs	r0, #0
 800a516:	6031      	str	r1, [r6, #0]
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	b016      	add	sp, #88	@ 0x58
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	466a      	mov	r2, sp
 800a520:	f000 f848 	bl	800a5b4 <_fstat_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	dbec      	blt.n	800a502 <__swhatbuf_r+0x12>
 800a528:	9901      	ldr	r1, [sp, #4]
 800a52a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a52e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a532:	4259      	negs	r1, r3
 800a534:	4159      	adcs	r1, r3
 800a536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a53a:	e7eb      	b.n	800a514 <__swhatbuf_r+0x24>

0800a53c <__smakebuf_r>:
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a540:	079d      	lsls	r5, r3, #30
 800a542:	4606      	mov	r6, r0
 800a544:	460c      	mov	r4, r1
 800a546:	d507      	bpl.n	800a558 <__smakebuf_r+0x1c>
 800a548:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	6123      	str	r3, [r4, #16]
 800a550:	2301      	movs	r3, #1
 800a552:	6163      	str	r3, [r4, #20]
 800a554:	b003      	add	sp, #12
 800a556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a558:	ab01      	add	r3, sp, #4
 800a55a:	466a      	mov	r2, sp
 800a55c:	f7ff ffc8 	bl	800a4f0 <__swhatbuf_r>
 800a560:	9f00      	ldr	r7, [sp, #0]
 800a562:	4605      	mov	r5, r0
 800a564:	4639      	mov	r1, r7
 800a566:	4630      	mov	r0, r6
 800a568:	f7ff fbba 	bl	8009ce0 <_malloc_r>
 800a56c:	b948      	cbnz	r0, 800a582 <__smakebuf_r+0x46>
 800a56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a572:	059a      	lsls	r2, r3, #22
 800a574:	d4ee      	bmi.n	800a554 <__smakebuf_r+0x18>
 800a576:	f023 0303 	bic.w	r3, r3, #3
 800a57a:	f043 0302 	orr.w	r3, r3, #2
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	e7e2      	b.n	800a548 <__smakebuf_r+0xc>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	6020      	str	r0, [r4, #0]
 800a586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a592:	b15b      	cbz	r3, 800a5ac <__smakebuf_r+0x70>
 800a594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f81d 	bl	800a5d8 <_isatty_r>
 800a59e:	b128      	cbz	r0, 800a5ac <__smakebuf_r+0x70>
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	431d      	orrs	r5, r3
 800a5b0:	81a5      	strh	r5, [r4, #12]
 800a5b2:	e7cf      	b.n	800a554 <__smakebuf_r+0x18>

0800a5b4 <_fstat_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	@ (800a5d4 <_fstat_r+0x20>)
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	602b      	str	r3, [r5, #0]
 800a5c2:	f7fb fd23 	bl	800600c <_fstat>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	d102      	bne.n	800a5d0 <_fstat_r+0x1c>
 800a5ca:	682b      	ldr	r3, [r5, #0]
 800a5cc:	b103      	cbz	r3, 800a5d0 <_fstat_r+0x1c>
 800a5ce:	6023      	str	r3, [r4, #0]
 800a5d0:	bd38      	pop	{r3, r4, r5, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20026104 	.word	0x20026104

0800a5d8 <_isatty_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	@ (800a5f4 <_isatty_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7fb fd22 	bl	800602c <_isatty>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_isatty_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_isatty_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20026104 	.word	0x20026104

0800a5f8 <_sbrk_r>:
 800a5f8:	b538      	push	{r3, r4, r5, lr}
 800a5fa:	4d06      	ldr	r5, [pc, #24]	@ (800a614 <_sbrk_r+0x1c>)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	4608      	mov	r0, r1
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	f7fb fd2a 	bl	800605c <_sbrk>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_sbrk_r+0x1a>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_sbrk_r+0x1a>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20026104 	.word	0x20026104

0800a618 <_init>:
 800a618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61a:	bf00      	nop
 800a61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61e:	bc08      	pop	{r3}
 800a620:	469e      	mov	lr, r3
 800a622:	4770      	bx	lr

0800a624 <_fini>:
 800a624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a626:	bf00      	nop
 800a628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62a:	bc08      	pop	{r3}
 800a62c:	469e      	mov	lr, r3
 800a62e:	4770      	bx	lr
