
CJacobs_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004430  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e0  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  00007020  2**0
                  CONTENTS
  4 .ARM          00000008  080057bc  080057bc  000067bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000067c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080057cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007020  2**0
                  CONTENTS
 10 .bss          00025960  20000020  20000020  00007020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025980  20025980  00007020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aec7  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217d  00000000  00000000  00011f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  00014098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000813  00000000  00000000  00014b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002618b  00000000  00000000  0001538b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8c1  00000000  00000000  0003b516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e089d  00000000  00000000  00048dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129674  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac4  00000000  00000000  001296b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0012c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080045c4 	.word	0x080045c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	080045c4 	.word	0x080045c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f001 ffab 	bl	800243a <initialise_monitor_handles>
    LTCD__Init();
 80004e4:	f000 f958 	bl	8000798 <LTCD__Init>
    LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f915 	bl	8000718 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fb08 	bl	8000b08 <LCD_Clear>
    buttonIRQInit();
 80004f8:	f000 f814 	bl	8000524 <buttonIRQInit>
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <EXTI0_IRQHandler>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void EXTI0_IRQHandler(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000504:	2006      	movs	r0, #6
 8000506:	f002 f99a 	bl	800283e <HAL_NVIC_DisableIRQ>
//	addSchedulerEvent(ROTATE_BLOCK);
	rotateBlock();
 800050a:	f001 f9b5 	bl	8001878 <rotateBlock>
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800050e:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <EXTI0_IRQHandler+0x20>)
 8000510:	2201      	movs	r2, #1
 8000512:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000514:	2006      	movs	r0, #6
 8000516:	f002 f984 	bl	8002822 <HAL_NVIC_EnableIRQ>
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40013c00 	.word	0x40013c00

08000524 <buttonIRQInit>:
	}
	return returnValue;
}

// Button initialization for Interrupt Mode
void buttonIRQInit(){
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef pinConfig = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
	pinConfig.Pin = GPIO_PIN_0; //GPIO_PIN_0
 8000538:	2301      	movs	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
	pinConfig.Mode = GPIO_MODE_IT_FALLING;
 800053c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000540:	60bb      	str	r3, [r7, #8]
	pinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000542:	2302      	movs	r3, #2
 8000544:	613b      	str	r3, [r7, #16]
	pinConfig.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <buttonIRQInit+0x5c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <buttonIRQInit+0x5c>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <buttonIRQInit+0x5c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &pinConfig);
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	@ (8000584 <buttonIRQInit+0x60>)
 800056c:	f002 f982 	bl	8002874 <HAL_GPIO_Init>

//	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000570:	2006      	movs	r0, #6
 8000572:	f002 f956 	bl	8002822 <HAL_NVIC_EnableIRQ>
}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800
 8000584:	40020000 	.word	0x40020000

08000588 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	@ 0x30
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	4b5a      	ldr	r3, [pc, #360]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a59      	ldr	r2, [pc, #356]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000598:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b57      	ldr	r3, [pc, #348]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005a6:	61bb      	str	r3, [r7, #24]
 80005a8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a52      	ldr	r2, [pc, #328]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b50      	ldr	r3, [pc, #320]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b4c      	ldr	r3, [pc, #304]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a4b      	ldr	r2, [pc, #300]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b45      	ldr	r3, [pc, #276]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a44      	ldr	r2, [pc, #272]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <LCD_GPIO_Init+0x174>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b3e      	ldr	r3, [pc, #248]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a3d      	ldr	r2, [pc, #244]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b3b      	ldr	r3, [pc, #236]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0308 	and.w	r3, r3, #8
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b37      	ldr	r3, [pc, #220]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a36      	ldr	r2, [pc, #216]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000624:	f043 0320 	orr.w	r3, r3, #32
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <LCD_GPIO_Init+0x174>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0320 	and.w	r3, r3, #32
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <LCD_GPIO_Init+0x174>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a2f      	ldr	r2, [pc, #188]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <LCD_GPIO_Init+0x174>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000652:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000656:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000660:	2302      	movs	r3, #2
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000664:	230e      	movs	r3, #14
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4824      	ldr	r0, [pc, #144]	@ (8000700 <LCD_GPIO_Init+0x178>)
 8000670:	f002 f900 	bl	8002874 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000674:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000678:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4820      	ldr	r0, [pc, #128]	@ (8000704 <LCD_GPIO_Init+0x17c>)
 8000682:	f002 f8f7 	bl	8002874 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000686:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	481d      	ldr	r0, [pc, #116]	@ (8000708 <LCD_GPIO_Init+0x180>)
 8000694:	f002 f8ee 	bl	8002874 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000698:	2348      	movs	r3, #72	@ 0x48
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	481a      	ldr	r0, [pc, #104]	@ (800070c <LCD_GPIO_Init+0x184>)
 80006a4:	f002 f8e6 	bl	8002874 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80006a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4816      	ldr	r0, [pc, #88]	@ (8000710 <LCD_GPIO_Init+0x188>)
 80006b6:	f002 f8dd 	bl	8002874 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80006ba:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80006be:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4813      	ldr	r0, [pc, #76]	@ (8000714 <LCD_GPIO_Init+0x18c>)
 80006c8:	f002 f8d4 	bl	8002874 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80006cc:	2303      	movs	r3, #3
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80006d0:	2309      	movs	r3, #9
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <LCD_GPIO_Init+0x17c>)
 80006dc:	f002 f8ca 	bl	8002874 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <LCD_GPIO_Init+0x18c>)
 80006ee:	f002 f8c1 	bl	8002874 <HAL_GPIO_Init>
}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	@ 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40021400 	.word	0x40021400
 8000714:	40021800 	.word	0x40021800

08000718 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b090      	sub	sp, #64	@ 0x40
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000726:	23f0      	movs	r3, #240	@ 0xf0
 8000728:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800072e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000732:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000738:	23ff      	movs	r3, #255	@ 0xff
 800073a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000746:	2305      	movs	r3, #5
 8000748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d101      	bne.n	8000754 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <LTCD_Layer_Init+0x78>)
 8000752:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000754:	23f0      	movs	r3, #240	@ 0xf0
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000758:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800075c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <LTCD_Layer_Init+0x7c>)
 800077a:	f002 fc1d 	bl	8002fb8 <HAL_LTDC_ConfigLayer>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000784:	f001 f94e 	bl	8001a24 <LCD_Error_Handler>
	}
}
 8000788:	bf00      	nop
 800078a:	3740      	adds	r7, #64	@ 0x40
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000120 	.word	0x20000120
 8000794:	2000003c 	.word	0x2000003c

08000798 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <LTCD__Init+0xb0>)
 800079e:	4a2b      	ldr	r2, [pc, #172]	@ (800084c <LTCD__Init+0xb4>)
 80007a0:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 80007a2:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <LTCD__Init+0xb0>)
 80007a4:	2209      	movs	r2, #9
 80007a6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 80007a8:	4b27      	ldr	r3, [pc, #156]	@ (8000848 <LTCD__Init+0xb0>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 80007ae:	4b26      	ldr	r3, [pc, #152]	@ (8000848 <LTCD__Init+0xb0>)
 80007b0:	221d      	movs	r2, #29
 80007b2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <LTCD__Init+0xb0>)
 80007b6:	2203      	movs	r2, #3
 80007b8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 80007ba:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <LTCD__Init+0xb0>)
 80007bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <LTCD__Init+0xb0>)
 80007c4:	f240 1243 	movw	r2, #323	@ 0x143
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <LTCD__Init+0xb0>)
 80007cc:	f240 1217 	movw	r2, #279	@ 0x117
 80007d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <LTCD__Init+0xb0>)
 80007d4:	f240 1247 	movw	r2, #327	@ 0x147
 80007d8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <LTCD__Init+0xb0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <LTCD__Init+0xb0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <LTCD__Init+0xb0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80007f2:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <LTCD__Init+0xb8>)
 80007f4:	2208      	movs	r2, #8
 80007f6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <LTCD__Init+0xb8>)
 80007fa:	22c0      	movs	r2, #192	@ 0xc0
 80007fc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80007fe:	4b14      	ldr	r3, [pc, #80]	@ (8000850 <LTCD__Init+0xb8>)
 8000800:	2204      	movs	r2, #4
 8000802:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000804:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <LTCD__Init+0xb8>)
 8000806:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800080a:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800080c:	4810      	ldr	r0, [pc, #64]	@ (8000850 <LTCD__Init+0xb8>)
 800080e:	f003 fa0d 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <LTCD__Init+0xb0>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <LTCD__Init+0xb0>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <LTCD__Init+0xb0>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <LTCD__Init+0xb0>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800082a:	f7ff fead 	bl	8000588 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <LTCD__Init+0xb0>)
 8000830:	f002 faf2 	bl	8002e18 <HAL_LTDC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800083a:	f001 f8f3 	bl	8001a24 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800083e:	f001 f8f7 	bl	8001a30 <ili9341_Init>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000003c 	.word	0x2000003c
 800084c:	40016800 	.word	0x40016800
 8000850:	200000e4 	.word	0x200000e4

08000854 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
 800085e:	460b      	mov	r3, r1
 8000860:	80bb      	strh	r3, [r7, #4]
 8000862:	4613      	mov	r3, r2
 8000864:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000866:	88ba      	ldrh	r2, [r7, #4]
 8000868:	4613      	mov	r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	1a9b      	subs	r3, r3, r2
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	461a      	mov	r2, r3
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	4413      	add	r3, r2
 8000876:	4905      	ldr	r1, [pc, #20]	@ (800088c <LCD_Draw_Pixel+0x38>)
 8000878:	887a      	ldrh	r2, [r7, #2]
 800087a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000120 	.word	0x20000120

08000890 <LCD_Draw_Square_Fill_Border>:
        }
    }
}

void LCD_Draw_Square_Fill_Border(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	460b      	mov	r3, r1
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	4613      	mov	r3, r2
 80008a0:	807b      	strh	r3, [r7, #2]
	uint16_t x = Xpos*blockSize;
 80008a2:	4b34      	ldr	r3, [pc, #208]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	88fa      	ldrh	r2, [r7, #6]
 80008aa:	fb12 f303 	smulbb	r3, r2, r3
 80008ae:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 80008b0:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	88ba      	ldrh	r2, [r7, #4]
 80008b8:	fb12 f303 	smulbb	r3, r2, r3
 80008bc:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 80008be:	2301      	movs	r3, #1
 80008c0:	81fb      	strh	r3, [r7, #14]
 80008c2:	e04c      	b.n	800095e <LCD_Draw_Square_Fill_Border+0xce>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 80008c4:	2301      	movs	r3, #1
 80008c6:	81bb      	strh	r3, [r7, #12]
 80008c8:	e03d      	b.n	8000946 <LCD_Draw_Square_Fill_Border+0xb6>
	        {
	            LCD_Draw_Pixel(i+x, j+y, color);
 80008ca:	89fa      	ldrh	r2, [r7, #14]
 80008cc:	897b      	ldrh	r3, [r7, #10]
 80008ce:	4413      	add	r3, r2
 80008d0:	b298      	uxth	r0, r3
 80008d2:	89ba      	ldrh	r2, [r7, #12]
 80008d4:	893b      	ldrh	r3, [r7, #8]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	887a      	ldrh	r2, [r7, #2]
 80008dc:	4619      	mov	r1, r3
 80008de:	f7ff ffb9 	bl	8000854 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,LCD_COLOR_BLACK);
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	8939      	ldrh	r1, [r7, #8]
 80008ea:	8978      	ldrh	r0, [r7, #10]
 80008ec:	2300      	movs	r3, #0
 80008ee:	f000 f8bd 	bl	8000a6c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,LCD_COLOR_BLACK);
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	897b      	ldrh	r3, [r7, #10]
 80008fa:	4413      	add	r3, r2
 80008fc:	b298      	uxth	r0, r3
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	b29b      	uxth	r3, r3
 8000904:	3301      	adds	r3, #1
 8000906:	b29a      	uxth	r2, r3
 8000908:	8939      	ldrh	r1, [r7, #8]
 800090a:	2300      	movs	r3, #0
 800090c:	f000 f8ae 	bl	8000a6c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	b29a      	uxth	r2, r3
 8000916:	8939      	ldrh	r1, [r7, #8]
 8000918:	8978      	ldrh	r0, [r7, #10]
 800091a:	2300      	movs	r3, #0
 800091c:	f000 f8cd 	bl	8000aba <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,LCD_COLOR_BLACK);
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	b29a      	uxth	r2, r3
 8000926:	893b      	ldrh	r3, [r7, #8]
 8000928:	4413      	add	r3, r2
 800092a:	b299      	uxth	r1, r3
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	b29a      	uxth	r2, r3
 8000932:	8978      	ldrh	r0, [r7, #10]
 8000934:	2300      	movs	r3, #0
 8000936:	f000 f8c0 	bl	8000aba <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 800093a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800093e:	b29b      	uxth	r3, r3
 8000940:	3301      	adds	r3, #1
 8000942:	b29b      	uxth	r3, r3
 8000944:	81bb      	strh	r3, [r7, #12]
 8000946:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	ddbb      	ble.n	80008ca <LCD_Draw_Square_Fill_Border+0x3a>
	for(int16_t i=1; i<=blockSize; i++)
 8000952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000956:	b29b      	uxth	r3, r3
 8000958:	3301      	adds	r3, #1
 800095a:	b29b      	uxth	r3, r3
 800095c:	81fb      	strh	r3, [r7, #14]
 800095e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000962:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	429a      	cmp	r2, r3
 8000968:	ddac      	ble.n	80008c4 <LCD_Draw_Square_Fill_Border+0x34>
	        }
	    }
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000004 	.word	0x20000004

08000978 <LCD_Erase_Square>:

void LCD_Erase_Square(uint16_t Xpos, uint16_t Ypos)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	460a      	mov	r2, r1
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4613      	mov	r3, r2
 8000986:	80bb      	strh	r3, [r7, #4]
	uint16_t x = Xpos*blockSize;
 8000988:	4b36      	ldr	r3, [pc, #216]	@ (8000a64 <LCD_Erase_Square+0xec>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	b29b      	uxth	r3, r3
 800098e:	88fa      	ldrh	r2, [r7, #6]
 8000990:	fb12 f303 	smulbb	r3, r2, r3
 8000994:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000996:	4b33      	ldr	r3, [pc, #204]	@ (8000a64 <LCD_Erase_Square+0xec>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	b29b      	uxth	r3, r3
 800099c:	88ba      	ldrh	r2, [r7, #4]
 800099e:	fb12 f303 	smulbb	r3, r2, r3
 80009a2:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 80009a4:	2301      	movs	r3, #1
 80009a6:	81fb      	strh	r3, [r7, #14]
 80009a8:	e051      	b.n	8000a4e <LCD_Erase_Square+0xd6>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 80009aa:	2301      	movs	r3, #1
 80009ac:	81bb      	strh	r3, [r7, #12]
 80009ae:	e042      	b.n	8000a36 <LCD_Erase_Square+0xbe>
	        {
	            LCD_Draw_Pixel(i+x, j+y, GameScreenColor);
 80009b0:	89fa      	ldrh	r2, [r7, #14]
 80009b2:	897b      	ldrh	r3, [r7, #10]
 80009b4:	4413      	add	r3, r2
 80009b6:	b298      	uxth	r0, r3
 80009b8:	89ba      	ldrh	r2, [r7, #12]
 80009ba:	893b      	ldrh	r3, [r7, #8]
 80009bc:	4413      	add	r3, r2
 80009be:	b29b      	uxth	r3, r3
 80009c0:	4a29      	ldr	r2, [pc, #164]	@ (8000a68 <LCD_Erase_Square+0xf0>)
 80009c2:	8812      	ldrh	r2, [r2, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f7ff ff45 	bl	8000854 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 80009ca:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <LCD_Erase_Square+0xec>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <LCD_Erase_Square+0xf0>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	8939      	ldrh	r1, [r7, #8]
 80009d6:	8978      	ldrh	r0, [r7, #10]
 80009d8:	f000 f848 	bl	8000a6c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <LCD_Erase_Square+0xec>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	897b      	ldrh	r3, [r7, #10]
 80009e4:	4413      	add	r3, r2
 80009e6:	b298      	uxth	r0, r3
 80009e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <LCD_Erase_Square+0xec>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <LCD_Erase_Square+0xf0>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	8939      	ldrh	r1, [r7, #8]
 80009f8:	f000 f838 	bl	8000a6c <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 80009fc:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <LCD_Erase_Square+0xec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <LCD_Erase_Square+0xf0>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	8939      	ldrh	r1, [r7, #8]
 8000a08:	8978      	ldrh	r0, [r7, #10]
 8000a0a:	f000 f856 	bl	8000aba <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <LCD_Erase_Square+0xec>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	893b      	ldrh	r3, [r7, #8]
 8000a16:	4413      	add	r3, r2
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <LCD_Erase_Square+0xec>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <LCD_Erase_Square+0xf0>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	8978      	ldrh	r0, [r7, #10]
 8000a26:	f000 f848 	bl	8000aba <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000a2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	3301      	adds	r3, #1
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	81bb      	strh	r3, [r7, #12]
 8000a36:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <LCD_Erase_Square+0xec>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	ddb6      	ble.n	80009b0 <LCD_Erase_Square+0x38>
	for(int16_t i=1; i<=blockSize; i++)
 8000a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	81fb      	strh	r3, [r7, #14]
 8000a4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a52:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <LCD_Erase_Square+0xec>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dda7      	ble.n	80009aa <LCD_Erase_Square+0x32>
	        }
	    }
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000004 	.word	0x20000004
 8000a68:	20000002 	.word	0x20000002

08000a6c <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	81fb      	strh	r3, [r7, #14]
 8000a8e:	e00b      	b.n	8000aa8 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000a90:	89fa      	ldrh	r2, [r7, #14]
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	b299      	uxth	r1, r3
 8000a98:	883a      	ldrh	r2, [r7, #0]
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fed9 	bl	8000854 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	81fb      	strh	r3, [r7, #14]
 8000aa8:	89fa      	ldrh	r2, [r7, #14]
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3ef      	bcc.n	8000a90 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}

08000aba <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	4623      	mov	r3, r4
 8000aca:	80fb      	strh	r3, [r7, #6]
 8000acc:	4603      	mov	r3, r0
 8000ace:	80bb      	strh	r3, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	807b      	strh	r3, [r7, #2]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	81fb      	strh	r3, [r7, #14]
 8000adc:	e00b      	b.n	8000af6 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000ade:	89fa      	ldrh	r2, [r7, #14]
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	883a      	ldrh	r2, [r7, #0]
 8000ae8:	88b9      	ldrh	r1, [r7, #4]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff feb2 	bl	8000854 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	3301      	adds	r3, #1
 8000af4:	81fb      	strh	r3, [r7, #14]
 8000af6:	89fa      	ldrh	r2, [r7, #14]
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d3ef      	bcc.n	8000ade <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}

08000b08 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	460a      	mov	r2, r1
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d10e      	bne.n	8000b3c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e007      	b.n	8000b34 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000b24:	4908      	ldr	r1, [pc, #32]	@ (8000b48 <LCD_Clear+0x40>)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	88ba      	ldrh	r2, [r7, #4]
 8000b2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000b3a:	d3f3      	bcc.n	8000b24 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20000120 	.word	0x20000120

08000b4c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000b56:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <LCD_SetTextColor+0x1c>)
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	8013      	strh	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	20000000 	.word	0x20000000

08000b6c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <LCD_SetFont+0x1c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000114 	.word	0x20000114

08000b8c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	603a      	str	r2, [r7, #0]
 8000b96:	80fb      	strh	r3, [r7, #6]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	e04c      	b.n	8000c44 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	e03f      	b.n	8000c30 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	889b      	ldrh	r3, [r3, #4]
 8000bc2:	4a27      	ldr	r2, [pc, #156]	@ (8000c60 <LCD_Draw_Char+0xd4>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	400b      	ands	r3, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d104      	bne.n	8000be8 <LCD_Draw_Char+0x5c>
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	889b      	ldrh	r3, [r3, #4]
 8000be4:	2b0c      	cmp	r3, #12
 8000be6:	d920      	bls.n	8000c2a <LCD_Draw_Char+0x9e>
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	fa42 f303 	asr.w	r3, r2, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d104      	bne.n	8000c0c <LCD_Draw_Char+0x80>
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	889b      	ldrh	r3, [r3, #4]
 8000c08:	2b0c      	cmp	r3, #12
 8000c0a:	d80e      	bhi.n	8000c2a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	88fb      	ldrh	r3, [r7, #6]
 8000c12:	4413      	add	r3, r2
 8000c14:	b298      	uxth	r0, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	88bb      	ldrh	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <LCD_Draw_Char+0xd8>)
 8000c22:	8812      	ldrh	r2, [r2, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f7ff fe15 	bl	8000854 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	889b      	ldrh	r3, [r3, #4]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d3b8      	bcc.n	8000bb0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <LCD_Draw_Char+0xd0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	88db      	ldrh	r3, [r3, #6]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d3ab      	bcc.n	8000baa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000114 	.word	0x20000114
 8000c60:	aaaaaaab 	.word	0xaaaaaaab
 8000c64:	20000000 	.word	0x20000000

08000c68 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
 8000c72:	460b      	mov	r3, r1
 8000c74:	80bb      	strh	r3, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	3b20      	subs	r3, #32
 8000c7e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000c80:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <LCD_DisplayChar+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	4907      	ldr	r1, [pc, #28]	@ (8000ca8 <LCD_DisplayChar+0x40>)
 8000c8a:	6809      	ldr	r1, [r1, #0]
 8000c8c:	88c9      	ldrh	r1, [r1, #6]
 8000c8e:	fb01 f303 	mul.w	r3, r1, r3
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	441a      	add	r2, r3
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff76 	bl	8000b8c <LCD_Draw_Char>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000114 	.word	0x20000114

08000cac <GameInit>:
	LCD_DisplayChar(140,160,'d');
//	blockOne();
}

void GameInit(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	uint16_t size = 10;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	80fb      	strh	r3, [r7, #6]
//			else
//				frameBuffer[x*y] = LCD_COLOR_BLACK;
//		}
//	}

	LCD_Clear(0,GameScreenColor);
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000da8 <GameInit+0xfc>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff23 	bl	8000b08 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000cc2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cc6:	f7ff ff41 	bl	8000b4c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cca:	4838      	ldr	r0, [pc, #224]	@ (8000dac <GameInit+0x100>)
 8000ccc:	f7ff ff4e 	bl	8000b6c <LCD_SetFont>

	LCD_DisplayChar(80,140,'W');
 8000cd0:	2257      	movs	r2, #87	@ 0x57
 8000cd2:	218c      	movs	r1, #140	@ 0x8c
 8000cd4:	2050      	movs	r0, #80	@ 0x50
 8000cd6:	f7ff ffc7 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(94,140,'e');
 8000cda:	2265      	movs	r2, #101	@ 0x65
 8000cdc:	218c      	movs	r1, #140	@ 0x8c
 8000cde:	205e      	movs	r0, #94	@ 0x5e
 8000ce0:	f7ff ffc2 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(104,140,'l');
 8000ce4:	226c      	movs	r2, #108	@ 0x6c
 8000ce6:	218c      	movs	r1, #140	@ 0x8c
 8000ce8:	2068      	movs	r0, #104	@ 0x68
 8000cea:	f7ff ffbd 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(112,140,'c');
 8000cee:	2263      	movs	r2, #99	@ 0x63
 8000cf0:	218c      	movs	r1, #140	@ 0x8c
 8000cf2:	2070      	movs	r0, #112	@ 0x70
 8000cf4:	f7ff ffb8 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(124,140,'o');
 8000cf8:	226f      	movs	r2, #111	@ 0x6f
 8000cfa:	218c      	movs	r1, #140	@ 0x8c
 8000cfc:	207c      	movs	r0, #124	@ 0x7c
 8000cfe:	f7ff ffb3 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'m');
 8000d02:	226d      	movs	r2, #109	@ 0x6d
 8000d04:	218c      	movs	r1, #140	@ 0x8c
 8000d06:	208c      	movs	r0, #140	@ 0x8c
 8000d08:	f7ff ffae 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'e');
 8000d0c:	2265      	movs	r2, #101	@ 0x65
 8000d0e:	218c      	movs	r1, #140	@ 0x8c
 8000d10:	209b      	movs	r0, #155	@ 0x9b
 8000d12:	f7ff ffa9 	bl	8000c68 <LCD_DisplayChar>

	LCD_DisplayChar(110,165,'t');
 8000d16:	2274      	movs	r2, #116	@ 0x74
 8000d18:	21a5      	movs	r1, #165	@ 0xa5
 8000d1a:	206e      	movs	r0, #110	@ 0x6e
 8000d1c:	f7ff ffa4 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(120,165,'o');
 8000d20:	226f      	movs	r2, #111	@ 0x6f
 8000d22:	21a5      	movs	r1, #165	@ 0xa5
 8000d24:	2078      	movs	r0, #120	@ 0x78
 8000d26:	f7ff ff9f 	bl	8000c68 <LCD_DisplayChar>

	LCD_DisplayChar(95,190,'T');
 8000d2a:	2254      	movs	r2, #84	@ 0x54
 8000d2c:	21be      	movs	r1, #190	@ 0xbe
 8000d2e:	205f      	movs	r0, #95	@ 0x5f
 8000d30:	f7ff ff9a 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(105,190,'e');
 8000d34:	2265      	movs	r2, #101	@ 0x65
 8000d36:	21be      	movs	r1, #190	@ 0xbe
 8000d38:	2069      	movs	r0, #105	@ 0x69
 8000d3a:	f7ff ff95 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(115,190,'t');
 8000d3e:	2274      	movs	r2, #116	@ 0x74
 8000d40:	21be      	movs	r1, #190	@ 0xbe
 8000d42:	2073      	movs	r0, #115	@ 0x73
 8000d44:	f7ff ff90 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(125,190,'r');
 8000d48:	2272      	movs	r2, #114	@ 0x72
 8000d4a:	21be      	movs	r1, #190	@ 0xbe
 8000d4c:	207d      	movs	r0, #125	@ 0x7d
 8000d4e:	f7ff ff8b 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(132,190,'i');
 8000d52:	2269      	movs	r2, #105	@ 0x69
 8000d54:	21be      	movs	r1, #190	@ 0xbe
 8000d56:	2084      	movs	r0, #132	@ 0x84
 8000d58:	f7ff ff86 	bl	8000c68 <LCD_DisplayChar>
	LCD_DisplayChar(139,190,'s');
 8000d5c:	2273      	movs	r2, #115	@ 0x73
 8000d5e:	21be      	movs	r1, #190	@ 0xbe
 8000d60:	208b      	movs	r0, #139	@ 0x8b
 8000d62:	f7ff ff81 	bl	8000c68 <LCD_DisplayChar>
//	blockSix(105,55,10,LCD_COLOR_MAGENTA);
//	blockSeven(155,55,10,LCD_COLOR_RED);
//
//	blockOneV(45,85,10,LCD_COLOR_CYAN);

	LCD_Clear(0,GameScreenColor);
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <GameInit+0xfc>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fecb 	bl	8000b08 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d76:	f7ff fee9 	bl	8000b4c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <GameInit+0x100>)
 8000d7c:	f7ff fef6 	bl	8000b6c <LCD_SetFont>

	drawBlockSeven(5, 2, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2102      	movs	r1, #2
 8000d84:	2005      	movs	r0, #5
 8000d86:	f000 fccd 	bl	8001724 <drawBlockSeven>
	updateCurrentBlock(7, 5, 2, 1);
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	2105      	movs	r1, #5
 8000d90:	2007      	movs	r0, #7
 8000d92:	f000 fe25 	bl	80019e0 <updateCurrentBlock>
	HAL_Delay(1000);
 8000d96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9a:	f001 fc03 	bl	80025a4 <HAL_Delay>
//		drawBlockOne(5, i, 4);
//		HAL_Delay(1000);
//		eraseBlockOne(5, i, 4);
//	}
//	drawBlockOne(5,15,1);
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000002 	.word	0x20000002
 8000dac:	20000008 	.word	0x20000008

08000db0 <drawBlockOne>:

void drawBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	80bb      	strh	r3, [r7, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <drawBlockOne+0x1e>
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d112      	bne.n	8000df4 <drawBlockOne+0x44>
		for (int i = Xpos; i < (Xpos+4); i++){
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e00a      	b.n	8000dea <drawBlockOne+0x3a>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_CYAN);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	88b9      	ldrh	r1, [r7, #4]
 8000dda:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fd56 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+4); i++){
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	3303      	adds	r3, #3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	ddef      	ble.n	8000dd4 <drawBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d002      	beq.n	8000e00 <drawBlockOne+0x50>
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d115      	bne.n	8000e2c <drawBlockOne+0x7c>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000e00:	88bb      	ldrh	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	e00c      	b.n	8000e22 <drawBlockOne+0x72>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_CYAN);
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	b291      	uxth	r1, r2
 8000e12:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fd3a 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	88bb      	ldrh	r3, [r7, #4]
 8000e24:	3302      	adds	r3, #2
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dded      	ble.n	8000e08 <drawBlockOne+0x58>
		}
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <eraseBlockOne>:

void eraseBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80fb      	strh	r3, [r7, #6]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	80bb      	strh	r3, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d002      	beq.n	8000e52 <eraseBlockOne+0x1e>
 8000e4c:	887b      	ldrh	r3, [r7, #2]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d111      	bne.n	8000e76 <eraseBlockOne+0x42>
		for (int i = Xpos; i < (Xpos+4); i++){
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	e009      	b.n	8000e6c <eraseBlockOne+0x38>
			LCD_Erase_Square(i, Ypos);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	88ba      	ldrh	r2, [r7, #4]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fd89 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+4); i++){
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	3303      	adds	r3, #3
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	ddf0      	ble.n	8000e58 <eraseBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d002      	beq.n	8000e82 <eraseBlockOne+0x4e>
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	d114      	bne.n	8000eac <eraseBlockOne+0x78>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	e00b      	b.n	8000ea2 <eraseBlockOne+0x6e>
			LCD_Erase_Square(Xpos+1, i);
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	b292      	uxth	r2, r2
 8000e94:	4611      	mov	r1, r2
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd6e 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	ddee      	ble.n	8000e8a <eraseBlockOne+0x56>
		}
	}
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <drawBlockTwo>:

void drawBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	80bb      	strh	r3, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d119      	bne.n	8000f00 <drawBlockTwo+0x4c>
		for (int i = Xpos; i < (Xpos+3); i++){
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e009      	b.n	8000ee6 <drawBlockTwo+0x32>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	88b9      	ldrh	r1, [r7, #4]
 8000ed8:	221f      	movs	r2, #31
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fcd8 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+3); i++){
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	3302      	adds	r3, #2
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	ddf0      	ble.n	8000ed2 <drawBlockTwo+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_BLUE);
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	221f      	movs	r2, #31
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fcc8 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
	if (orientation == 2){
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d11b      	bne.n	8000f3e <drawBlockTwo+0x8a>
			for (int i = Ypos; i < (Ypos+3); i++){
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	e00b      	b.n	8000f24 <drawBlockTwo+0x70>
				LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	b291      	uxth	r1, r2
 8000f16:	221f      	movs	r2, #31
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fcb9 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			for (int i = Ypos; i < (Ypos+3); i++){
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	3302      	adds	r3, #2
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	ddee      	ble.n	8000f0c <drawBlockTwo+0x58>
			}
			LCD_Draw_Square_Fill_Border(Xpos+2,Ypos,LCD_COLOR_BLUE);
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	3302      	adds	r3, #2
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	88b9      	ldrh	r1, [r7, #4]
 8000f36:	221f      	movs	r2, #31
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fca9 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		}
	if (orientation == 3){
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	2b03      	cmp	r3, #3
 8000f42:	d11b      	bne.n	8000f7c <drawBlockTwo+0xc8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e009      	b.n	8000f5e <drawBlockTwo+0xaa>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	88b9      	ldrh	r1, [r7, #4]
 8000f50:	221f      	movs	r2, #31
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fc9c 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+3); i++){
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	3302      	adds	r3, #2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	ddf0      	ble.n	8000f4a <drawBlockTwo+0x96>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_BLUE);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	b298      	uxth	r0, r3
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	221f      	movs	r2, #31
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fc8a 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
	if (orientation == 4){
 8000f7c:	887b      	ldrh	r3, [r7, #2]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d11c      	bne.n	8000fbc <drawBlockTwo+0x108>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	e00b      	b.n	8000fa2 <drawBlockTwo+0xee>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	b291      	uxth	r1, r2
 8000f94:	221f      	movs	r2, #31
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fc7a 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	ddee      	ble.n	8000f8a <drawBlockTwo+0xd6>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_BLUE);
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	221f      	movs	r2, #31
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fc6a 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <eraseBlockTwo>:

void eraseBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d119      	bne.n	8001010 <eraseBlockTwo+0x4c>
		for (int i = Xpos; i < (Xpos+3); i++){
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e009      	b.n	8000ff6 <eraseBlockTwo+0x32>
			LCD_Erase_Square(i,Ypos);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	88ba      	ldrh	r2, [r7, #4]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fcc4 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+3); i++){
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	ddf0      	ble.n	8000fe2 <eraseBlockTwo+0x1e>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	b29a      	uxth	r2, r3
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fcb4 	bl	8000978 <LCD_Erase_Square>
	}
	if (orientation == 2){
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d11b      	bne.n	800104e <eraseBlockTwo+0x8a>
			for (int i = Ypos; i < (Ypos+3); i++){
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	e00b      	b.n	8001034 <eraseBlockTwo+0x70>
				LCD_Erase_Square(Xpos+1,i);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	3301      	adds	r3, #1
 8001020:	b29b      	uxth	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	b292      	uxth	r2, r2
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fca5 	bl	8000978 <LCD_Erase_Square>
			for (int i = Ypos; i < (Ypos+3); i++){
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	88bb      	ldrh	r3, [r7, #4]
 8001036:	3302      	adds	r3, #2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	429a      	cmp	r2, r3
 800103c:	ddee      	ble.n	800101c <eraseBlockTwo+0x58>
			}
			LCD_Erase_Square(Xpos+2,Ypos);
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	3302      	adds	r3, #2
 8001042:	b29b      	uxth	r3, r3
 8001044:	88ba      	ldrh	r2, [r7, #4]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fc95 	bl	8000978 <LCD_Erase_Square>
		}
	if (orientation == 3){
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d11b      	bne.n	800108c <eraseBlockTwo+0xc8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e009      	b.n	800106e <eraseBlockTwo+0xaa>
			LCD_Erase_Square(i,Ypos);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	b29b      	uxth	r3, r3
 800105e:	88ba      	ldrh	r2, [r7, #4]
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fc88 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	3302      	adds	r3, #2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	ddf0      	ble.n	800105a <eraseBlockTwo+0x96>
		}
		LCD_Erase_Square(Xpos+2,Ypos+1);
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	3302      	adds	r3, #2
 800107c:	b29a      	uxth	r2, r3
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff fc76 	bl	8000978 <LCD_Erase_Square>
	}
	if (orientation == 4){
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d11c      	bne.n	80010cc <eraseBlockTwo+0x108>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	3b01      	subs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	e00b      	b.n	80010b2 <eraseBlockTwo+0xee>
			LCD_Erase_Square(Xpos+1,i);
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	3301      	adds	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	b292      	uxth	r2, r2
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fc66 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	3301      	adds	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	3301      	adds	r3, #1
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	ddee      	ble.n	800109a <eraseBlockTwo+0xd6>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80010bc:	88bb      	ldrh	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fc56 	bl	8000978 <LCD_Erase_Square>
	}
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <drawBlockThree>:

void drawBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	460b      	mov	r3, r1
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d11d      	bne.n	8001128 <drawBlockThree+0x54>
		for (int i = Xpos; i < (Xpos+3); i++){
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00a      	b.n	8001108 <drawBlockThree+0x34>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	88b9      	ldrh	r1, [r7, #4]
 80010f8:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fbc7 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	3302      	adds	r3, #2
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	429a      	cmp	r2, r3
 8001110:	ddef      	ble.n	80010f2 <drawBlockThree+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_ORANGE);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	3302      	adds	r3, #2
 8001116:	b298      	uxth	r0, r3
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	b29b      	uxth	r3, r3
 800111e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fbb4 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
	if (orientation == 2){
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d11d      	bne.n	800116a <drawBlockThree+0x96>
			for (int i = Ypos; i < (Ypos+3); i++){
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	e00c      	b.n	800114e <drawBlockThree+0x7a>
				LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	3301      	adds	r3, #1
 8001138:	b29b      	uxth	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	b291      	uxth	r1, r2
 800113e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fba4 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			for (int i = Ypos; i < (Ypos+3); i++){
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	3301      	adds	r3, #1
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	3302      	adds	r3, #2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	dded      	ble.n	8001134 <drawBlockThree+0x60>
			}
			LCD_Draw_Square_Fill_Border(Xpos+2,Ypos,LCD_COLOR_ORANGE);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	3302      	adds	r3, #2
 800115c:	b29b      	uxth	r3, r3
 800115e:	88b9      	ldrh	r1, [r7, #4]
 8001160:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fb93 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		}
	if (orientation == 3){
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d11b      	bne.n	80011a8 <drawBlockThree+0xd4>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e00a      	b.n	800118c <drawBlockThree+0xb8>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b29b      	uxth	r3, r3
 800117a:	88b9      	ldrh	r1, [r7, #4]
 800117c:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fb85 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	3302      	adds	r3, #2
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	429a      	cmp	r2, r3
 8001194:	ddef      	ble.n	8001176 <drawBlockThree+0xa2>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_ORANGE);
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	3301      	adds	r3, #1
 800119a:	b299      	uxth	r1, r3
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fb74 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
	if (orientation == 4){
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d11e      	bne.n	80011ec <drawBlockThree+0x118>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	e00c      	b.n	80011d0 <drawBlockThree+0xfc>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	b291      	uxth	r1, r2
 80011c0:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fb63 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3301      	adds	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	3301      	adds	r3, #1
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dded      	ble.n	80011b6 <drawBlockThree+0xe2>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_ORANGE);
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	3b01      	subs	r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fb52 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <eraseBlockThree>:

void eraseBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	460b      	mov	r3, r1
 8001200:	80bb      	strh	r3, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d11b      	bne.n	8001244 <eraseBlockThree+0x50>
		for (int i = Xpos; i < (Xpos+3); i++){
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e009      	b.n	8001226 <eraseBlockThree+0x32>
			LCD_Erase_Square(i,Ypos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	b29b      	uxth	r3, r3
 8001216:	88ba      	ldrh	r2, [r7, #4]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fbac 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	3302      	adds	r3, #2
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	ddf0      	ble.n	8001212 <eraseBlockThree+0x1e>
		}
		LCD_Erase_Square(Xpos+2,Ypos-1);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	3302      	adds	r3, #2
 8001234:	b29a      	uxth	r2, r3
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	3b01      	subs	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	4619      	mov	r1, r3
 800123e:	4610      	mov	r0, r2
 8001240:	f7ff fb9a 	bl	8000978 <LCD_Erase_Square>
	}
	if (orientation == 2){
 8001244:	887b      	ldrh	r3, [r7, #2]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d11b      	bne.n	8001282 <eraseBlockThree+0x8e>
			for (int i = Ypos; i < (Ypos+3); i++){
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	e00b      	b.n	8001268 <eraseBlockThree+0x74>
				LCD_Erase_Square(Xpos+1,i);
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	3301      	adds	r3, #1
 8001254:	b29b      	uxth	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	b292      	uxth	r2, r2
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fb8b 	bl	8000978 <LCD_Erase_Square>
			for (int i = Ypos; i < (Ypos+3); i++){
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	3301      	adds	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	3302      	adds	r3, #2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	429a      	cmp	r2, r3
 8001270:	ddee      	ble.n	8001250 <eraseBlockThree+0x5c>
			}
			LCD_Erase_Square(Xpos+2,Ypos);
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	3302      	adds	r3, #2
 8001276:	b29b      	uxth	r3, r3
 8001278:	88ba      	ldrh	r2, [r7, #4]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fb7b 	bl	8000978 <LCD_Erase_Square>
		}
	if (orientation == 3){
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d119      	bne.n	80012bc <eraseBlockThree+0xc8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e009      	b.n	80012a2 <eraseBlockThree+0xae>
			LCD_Erase_Square(i,Ypos);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	b29b      	uxth	r3, r3
 8001292:	88ba      	ldrh	r2, [r7, #4]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fb6e 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+3); i++){
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	3302      	adds	r3, #2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	ddf0      	ble.n	800128e <eraseBlockThree+0x9a>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fb5e 	bl	8000978 <LCD_Erase_Square>
	}
	if (orientation == 4){
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d11c      	bne.n	80012fc <eraseBlockThree+0x108>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e00b      	b.n	80012e2 <eraseBlockThree+0xee>
			LCD_Erase_Square(Xpos+1,i);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	3301      	adds	r3, #1
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	b292      	uxth	r2, r2
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb4e 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	ddee      	ble.n	80012ca <eraseBlockThree+0xd6>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fb3e 	bl	8000978 <LCD_Erase_Square>
	}
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <drawBlockFour>:

void drawBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
 800130e:	460b      	mov	r3, r1
 8001310:	80bb      	strh	r3, [r7, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	e014      	b.n	8001346 <drawBlockFour+0x42>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_YELLOW);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b29b      	uxth	r3, r3
 8001320:	88b9      	ldrh	r1, [r7, #4]
 8001322:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fab2 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_YELLOW);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	b298      	uxth	r0, r3
 8001330:	88bb      	ldrh	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff faa8 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	for (int i = Xpos; i < (Xpos+2); i++){
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	3301      	adds	r3, #1
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	dde5      	ble.n	800131c <drawBlockFour+0x18>
		}
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <eraseBlockFour>:

void eraseBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	80fb      	strh	r3, [r7, #6]
 8001364:	460b      	mov	r3, r1
 8001366:	80bb      	strh	r3, [r7, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e012      	b.n	8001398 <eraseBlockFour+0x3e>
			LCD_Erase_Square(i,Ypos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	b29b      	uxth	r3, r3
 8001376:	88ba      	ldrh	r2, [r7, #4]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fafc 	bl	8000978 <LCD_Erase_Square>
			LCD_Erase_Square(i,Ypos-1);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	b29a      	uxth	r2, r3
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	4619      	mov	r1, r3
 800138c:	4610      	mov	r0, r2
 800138e:	f7ff faf3 	bl	8000978 <LCD_Erase_Square>
	for (int i = Xpos; i < (Xpos+2); i++){
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3301      	adds	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	3301      	adds	r3, #1
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dde7      	ble.n	8001372 <eraseBlockFour+0x18>
		}
}
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <drawBlockFive>:

void drawBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	460b      	mov	r3, r1
 80013b8:	80bb      	strh	r3, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d002      	beq.n	80013ca <drawBlockFive+0x1e>
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d11e      	bne.n	8001408 <drawBlockFive+0x5c>
		for (int i = Xpos; i < (Xpos+2); i++){
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	e016      	b.n	80013fe <drawBlockFive+0x52>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_GREEN);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	88b9      	ldrh	r1, [r7, #4]
 80013d6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fa58 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			LCD_Draw_Square_Fill_Border(i+1,Ypos-1,LCD_COLOR_GREEN);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	b298      	uxth	r0, r3
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fa4c 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+2); i++){
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	3301      	adds	r3, #1
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	dde3      	ble.n	80013d0 <drawBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d002      	beq.n	8001414 <drawBlockFive+0x68>
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d11e      	bne.n	8001452 <drawBlockFive+0xa6>
		for (int i = Ypos; i < (Ypos+2); i++){
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	e016      	b.n	8001448 <drawBlockFive+0x9c>
			LCD_Draw_Square_Fill_Border(Xpos,i-1,LCD_COLOR_GREEN);
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	b299      	uxth	r1, r3
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fa31 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_GREEN);
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	3301      	adds	r3, #1
 8001432:	b29b      	uxth	r3, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	b291      	uxth	r1, r2
 8001438:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fa27 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos; i < (Ypos+2); i++){
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3301      	adds	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	429a      	cmp	r2, r3
 8001450:	dde3      	ble.n	800141a <drawBlockFive+0x6e>
		}
	}
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <eraseBlockFive>:

void eraseBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	80fb      	strh	r3, [r7, #6]
 8001464:	460b      	mov	r3, r1
 8001466:	80bb      	strh	r3, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d002      	beq.n	8001478 <eraseBlockFive+0x1e>
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d11c      	bne.n	80014b2 <eraseBlockFive+0x58>
		for (int i = Xpos; i < (Xpos+2); i++){
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e014      	b.n	80014a8 <eraseBlockFive+0x4e>
			LCD_Erase_Square(i,Ypos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	b29b      	uxth	r3, r3
 8001482:	88ba      	ldrh	r2, [r7, #4]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fa76 	bl	8000978 <LCD_Erase_Square>
			LCD_Erase_Square(i+1,Ypos-1);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	b29b      	uxth	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff fa6b 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+2); i++){
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	3301      	adds	r3, #1
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dde5      	ble.n	800147e <eraseBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d002      	beq.n	80014be <eraseBlockFive+0x64>
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d11c      	bne.n	80014f8 <eraseBlockFive+0x9e>
		for (int i = Ypos; i < (Ypos+2); i++){
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e014      	b.n	80014ee <eraseBlockFive+0x94>
			LCD_Erase_Square(Xpos,i-1);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3b01      	subs	r3, #1
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fa51 	bl	8000978 <LCD_Erase_Square>
			LCD_Erase_Square(Xpos+1,i);
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	3301      	adds	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	b292      	uxth	r2, r2
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fa48 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos; i < (Ypos+2); i++){
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dde5      	ble.n	80014c4 <eraseBlockFive+0x6a>
		}
	}
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <drawBlockSix>:

void drawBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
 800150a:	460b      	mov	r3, r1
 800150c:	80bb      	strh	r3, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d11c      	bne.n	8001552 <drawBlockSix+0x52>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	3b01      	subs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e00a      	b.n	8001536 <drawBlockSix+0x36>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	b29b      	uxth	r3, r3
 8001524:	88b9      	ldrh	r1, [r7, #4]
 8001526:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f9b0 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3301      	adds	r3, #1
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	ddef      	ble.n	8001520 <drawBlockSix+0x20>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_MAGENTA);
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	b299      	uxth	r1, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f99f 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}

	if (orientation == 3){
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	2b03      	cmp	r3, #3
 8001556:	d11c      	bne.n	8001592 <drawBlockSix+0x92>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	3b01      	subs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	e00a      	b.n	8001576 <drawBlockSix+0x76>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	b29b      	uxth	r3, r3
 8001564:	88b9      	ldrh	r1, [r7, #4]
 8001566:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f990 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	3301      	adds	r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	3301      	adds	r3, #1
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	ddef      	ble.n	8001560 <drawBlockSix+0x60>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_MAGENTA);
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	3301      	adds	r3, #1
 8001584:	b299      	uxth	r1, r3
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f97f 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
	if (orientation == 2){
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d11c      	bne.n	80015d2 <drawBlockSix+0xd2>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001598:	88bb      	ldrh	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	e00a      	b.n	80015b6 <drawBlockSix+0xb6>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	b299      	uxth	r1, r3
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff f970 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	88bb      	ldrh	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	ddef      	ble.n	80015a0 <drawBlockSix+0xa0>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos,LCD_COLOR_MAGENTA);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	3301      	adds	r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	88b9      	ldrh	r1, [r7, #4]
 80015c8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff f95f 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
	if (orientation == 4){
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d11c      	bne.n	8001612 <drawBlockSix+0x112>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	e00a      	b.n	80015f6 <drawBlockSix+0xf6>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	b299      	uxth	r1, r3
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f950 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3301      	adds	r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	3301      	adds	r3, #1
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	ddef      	ble.n	80015e0 <drawBlockSix+0xe0>
		}
		LCD_Draw_Square_Fill_Border(Xpos-1,Ypos,LCD_COLOR_MAGENTA);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	3b01      	subs	r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	88b9      	ldrh	r1, [r7, #4]
 8001608:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f93f 	bl	8000890 <LCD_Draw_Square_Fill_Border>
	}
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <eraseBlockSix>:

void eraseBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	80fb      	strh	r3, [r7, #6]
 8001624:	460b      	mov	r3, r1
 8001626:	80bb      	strh	r3, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d11a      	bne.n	8001668 <eraseBlockSix+0x4e>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	3b01      	subs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e009      	b.n	800164e <eraseBlockSix+0x34>
			LCD_Erase_Square(i,Ypos);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	b29b      	uxth	r3, r3
 800163e:	88ba      	ldrh	r2, [r7, #4]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f998 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	3301      	adds	r3, #1
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	ddf0      	ble.n	800163a <eraseBlockSix+0x20>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff f988 	bl	8000978 <LCD_Erase_Square>
	}

	if (orientation == 3){
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d11a      	bne.n	80016a4 <eraseBlockSix+0x8a>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	3b01      	subs	r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	e009      	b.n	800168a <eraseBlockSix+0x70>
			LCD_Erase_Square(i,Ypos);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	b29b      	uxth	r3, r3
 800167a:	88ba      	ldrh	r2, [r7, #4]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff f97a 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	3301      	adds	r3, #1
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	3301      	adds	r3, #1
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	ddf0      	ble.n	8001676 <eraseBlockSix+0x5c>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	3301      	adds	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f96a 	bl	8000978 <LCD_Erase_Square>
	}
	if (orientation == 2){
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d11a      	bne.n	80016e0 <eraseBlockSix+0xc6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e009      	b.n	80016c6 <eraseBlockSix+0xac>
			LCD_Erase_Square(Xpos,i);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f95c 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	3301      	adds	r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	3301      	adds	r3, #1
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	ddf0      	ble.n	80016b2 <eraseBlockSix+0x98>
		}
		LCD_Erase_Square(Xpos+1,Ypos);
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	88ba      	ldrh	r2, [r7, #4]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f94c 	bl	8000978 <LCD_Erase_Square>
	}
	if (orientation == 4){
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d11a      	bne.n	800171c <eraseBlockSix+0x102>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	e009      	b.n	8001702 <eraseBlockSix+0xe8>
			LCD_Erase_Square(Xpos,i);
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f93e 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3301      	adds	r3, #1
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	3301      	adds	r3, #1
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	429a      	cmp	r2, r3
 800170a:	ddf0      	ble.n	80016ee <eraseBlockSix+0xd4>
		}
		LCD_Erase_Square(Xpos-1,Ypos);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	3b01      	subs	r3, #1
 8001710:	b29b      	uxth	r3, r3
 8001712:	88ba      	ldrh	r2, [r7, #4]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f92e 	bl	8000978 <LCD_Erase_Square>
	}
}
 800171c:	bf00      	nop
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <drawBlockSeven>:

void drawBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	460b      	mov	r3, r1
 8001730:	80bb      	strh	r3, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d002      	beq.n	8001742 <drawBlockSeven+0x1e>
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d11e      	bne.n	8001780 <drawBlockSeven+0x5c>
		for (int i = Xpos; i < (Xpos+2); i++){
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e016      	b.n	8001776 <drawBlockSeven+0x52>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_RED);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	b29b      	uxth	r3, r3
 800174c:	88b9      	ldrh	r1, [r7, #4]
 800174e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f89c 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			LCD_Draw_Square_Fill_Border(i-1,Ypos-1,LCD_COLOR_RED);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b298      	uxth	r0, r3
 8001760:	88bb      	ldrh	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	b29b      	uxth	r3, r3
 8001766:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f890 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Xpos; i < (Xpos+2); i++){
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	3301      	adds	r3, #1
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	dde3      	ble.n	8001748 <drawBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d002      	beq.n	800178c <drawBlockSeven+0x68>
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d11e      	bne.n	80017ca <drawBlockSeven+0xa6>
		for (int i = Ypos; i < (Ypos+2); i++){
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	e016      	b.n	80017c0 <drawBlockSeven+0x9c>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_RED);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	b299      	uxth	r1, r3
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff f877 	bl	8000890 <LCD_Draw_Square_Fill_Border>
			LCD_Draw_Square_Fill_Border(Xpos+1,i-1,LCD_COLOR_RED);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b298      	uxth	r0, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3b01      	subs	r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff f86b 	bl	8000890 <LCD_Draw_Square_Fill_Border>
		for (int i = Ypos; i < (Ypos+2); i++){
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	3301      	adds	r3, #1
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dde3      	ble.n	8001792 <drawBlockSeven+0x6e>
		}
	}
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <eraseBlockSeven>:

void eraseBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	80fb      	strh	r3, [r7, #6]
 80017dc:	460b      	mov	r3, r1
 80017de:	80bb      	strh	r3, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d002      	beq.n	80017f0 <eraseBlockSeven+0x1e>
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d11c      	bne.n	800182a <eraseBlockSeven+0x58>
		for (int i = Xpos; i < (Xpos+2); i++){
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	e014      	b.n	8001820 <eraseBlockSeven+0x4e>
			LCD_Erase_Square(i,Ypos);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	88ba      	ldrh	r2, [r7, #4]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f8ba 	bl	8000978 <LCD_Erase_Square>
			LCD_Erase_Square(i-1,Ypos-1);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	b29b      	uxth	r3, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff f8af 	bl	8000978 <LCD_Erase_Square>
		for (int i = Xpos; i < (Xpos+2); i++){
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	3301      	adds	r3, #1
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	429a      	cmp	r2, r3
 8001828:	dde5      	ble.n	80017f6 <eraseBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d002      	beq.n	8001836 <eraseBlockSeven+0x64>
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d11c      	bne.n	8001870 <eraseBlockSeven+0x9e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	e014      	b.n	8001866 <eraseBlockSeven+0x94>
			LCD_Erase_Square(Xpos,i);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	b29a      	uxth	r2, r3
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f897 	bl	8000978 <LCD_Erase_Square>
			LCD_Erase_Square(Xpos+1,i-1);
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	3301      	adds	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29b      	uxth	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f7ff f88c 	bl	8000978 <LCD_Erase_Square>
		for (int i = Ypos; i < (Ypos+2); i++){
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	3301      	adds	r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	88bb      	ldrh	r3, [r7, #4]
 8001868:	3301      	adds	r3, #1
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	dde5      	ble.n	800183c <eraseBlockSeven+0x6a>
		}
	}
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <rotateBlock>:
				}
			}
		}
}

void rotateBlock(){
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 800187e:	4b57      	ldr	r3, [pc, #348]	@ (80019dc <rotateBlock+0x164>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpos = CurrentBlock[1];
 8001884:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <rotateBlock+0x164>)
 8001886:	885b      	ldrh	r3, [r3, #2]
 8001888:	817b      	strh	r3, [r7, #10]
	uint16_t Ypos = CurrentBlock[2];
 800188a:	4b54      	ldr	r3, [pc, #336]	@ (80019dc <rotateBlock+0x164>)
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	813b      	strh	r3, [r7, #8]
	uint16_t OrgOrientation = CurrentBlock[3];
 8001890:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <rotateBlock+0x164>)
 8001892:	88db      	ldrh	r3, [r3, #6]
 8001894:	80fb      	strh	r3, [r7, #6]
	uint16_t NewOrientation;
	if (OrgOrientation < 4){
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d803      	bhi.n	80018a4 <rotateBlock+0x2c>
		NewOrientation = OrgOrientation + 1;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	3301      	adds	r3, #1
 80018a0:	81fb      	strh	r3, [r7, #14]
 80018a2:	e004      	b.n	80018ae <rotateBlock+0x36>
	}
	else if (OrgOrientation >= 4){
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d901      	bls.n	80018ae <rotateBlock+0x36>
		NewOrientation = 1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	81fb      	strh	r3, [r7, #14]
	}

	if (BlockNum == 1){
 80018ae:	89bb      	ldrh	r3, [r7, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d111      	bne.n	80018d8 <rotateBlock+0x60>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 80018b4:	88fa      	ldrh	r2, [r7, #6]
 80018b6:	8939      	ldrh	r1, [r7, #8]
 80018b8:	897b      	ldrh	r3, [r7, #10]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff faba 	bl	8000e34 <eraseBlockOne>
		drawBlockOne(Xpos, Ypos, NewOrientation);
 80018c0:	89fa      	ldrh	r2, [r7, #14]
 80018c2:	8939      	ldrh	r1, [r7, #8]
 80018c4:	897b      	ldrh	r3, [r7, #10]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fa72 	bl	8000db0 <drawBlockOne>
		updateCurrentBlock(1, Xpos, Ypos, NewOrientation);
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	893a      	ldrh	r2, [r7, #8]
 80018d0:	8979      	ldrh	r1, [r7, #10]
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 f884 	bl	80019e0 <updateCurrentBlock>
	}
	if (BlockNum == 2){
 80018d8:	89bb      	ldrh	r3, [r7, #12]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d111      	bne.n	8001902 <rotateBlock+0x8a>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 80018de:	88fa      	ldrh	r2, [r7, #6]
 80018e0:	8939      	ldrh	r1, [r7, #8]
 80018e2:	897b      	ldrh	r3, [r7, #10]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fb6d 	bl	8000fc4 <eraseBlockTwo>
		drawBlockTwo(Xpos, Ypos, NewOrientation);
 80018ea:	89fa      	ldrh	r2, [r7, #14]
 80018ec:	8939      	ldrh	r1, [r7, #8]
 80018ee:	897b      	ldrh	r3, [r7, #10]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fadf 	bl	8000eb4 <drawBlockTwo>
		updateCurrentBlock(2, Xpos, Ypos, NewOrientation);
 80018f6:	89fb      	ldrh	r3, [r7, #14]
 80018f8:	893a      	ldrh	r2, [r7, #8]
 80018fa:	8979      	ldrh	r1, [r7, #10]
 80018fc:	2002      	movs	r0, #2
 80018fe:	f000 f86f 	bl	80019e0 <updateCurrentBlock>
		}
	if (BlockNum == 3){
 8001902:	89bb      	ldrh	r3, [r7, #12]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d111      	bne.n	800192c <rotateBlock+0xb4>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	8939      	ldrh	r1, [r7, #8]
 800190c:	897b      	ldrh	r3, [r7, #10]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fc70 	bl	80011f4 <eraseBlockThree>
		drawBlockThree(Xpos, Ypos, NewOrientation);
 8001914:	89fa      	ldrh	r2, [r7, #14]
 8001916:	8939      	ldrh	r1, [r7, #8]
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fbda 	bl	80010d4 <drawBlockThree>
		updateCurrentBlock(3, Xpos, Ypos, NewOrientation);
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	893a      	ldrh	r2, [r7, #8]
 8001924:	8979      	ldrh	r1, [r7, #10]
 8001926:	2003      	movs	r0, #3
 8001928:	f000 f85a 	bl	80019e0 <updateCurrentBlock>
		}
	if (BlockNum == 4){
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d111      	bne.n	8001956 <rotateBlock+0xde>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 8001932:	88fa      	ldrh	r2, [r7, #6]
 8001934:	8939      	ldrh	r1, [r7, #8]
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fd0e 	bl	800135a <eraseBlockFour>
		drawBlockFour(Xpos, Ypos, NewOrientation);
 800193e:	89fa      	ldrh	r2, [r7, #14]
 8001940:	8939      	ldrh	r1, [r7, #8]
 8001942:	897b      	ldrh	r3, [r7, #10]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fcdd 	bl	8001304 <drawBlockFour>
		updateCurrentBlock(4, Xpos, Ypos, NewOrientation);
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	893a      	ldrh	r2, [r7, #8]
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	2004      	movs	r0, #4
 8001952:	f000 f845 	bl	80019e0 <updateCurrentBlock>
		}
	if (BlockNum == 5){
 8001956:	89bb      	ldrh	r3, [r7, #12]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d111      	bne.n	8001980 <rotateBlock+0x108>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 800195c:	88fa      	ldrh	r2, [r7, #6]
 800195e:	8939      	ldrh	r1, [r7, #8]
 8001960:	897b      	ldrh	r3, [r7, #10]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fd79 	bl	800145a <eraseBlockFive>
		drawBlockFive(Xpos, Ypos, NewOrientation);
 8001968:	89fa      	ldrh	r2, [r7, #14]
 800196a:	8939      	ldrh	r1, [r7, #8]
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fd1c 	bl	80013ac <drawBlockFive>
		updateCurrentBlock(5, Xpos, Ypos, NewOrientation);
 8001974:	89fb      	ldrh	r3, [r7, #14]
 8001976:	893a      	ldrh	r2, [r7, #8]
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	2005      	movs	r0, #5
 800197c:	f000 f830 	bl	80019e0 <updateCurrentBlock>
		}
	if (BlockNum == 6){
 8001980:	89bb      	ldrh	r3, [r7, #12]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d111      	bne.n	80019aa <rotateBlock+0x132>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	8939      	ldrh	r1, [r7, #8]
 800198a:	897b      	ldrh	r3, [r7, #10]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe44 	bl	800161a <eraseBlockSix>
		drawBlockSix(Xpos, Ypos, NewOrientation);
 8001992:	89fa      	ldrh	r2, [r7, #14]
 8001994:	8939      	ldrh	r1, [r7, #8]
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fdb1 	bl	8001500 <drawBlockSix>
		updateCurrentBlock(6, Xpos, Ypos, NewOrientation);
 800199e:	89fb      	ldrh	r3, [r7, #14]
 80019a0:	893a      	ldrh	r2, [r7, #8]
 80019a2:	8979      	ldrh	r1, [r7, #10]
 80019a4:	2006      	movs	r0, #6
 80019a6:	f000 f81b 	bl	80019e0 <updateCurrentBlock>
		}
	if (BlockNum == 7){
 80019aa:	89bb      	ldrh	r3, [r7, #12]
 80019ac:	2b07      	cmp	r3, #7
 80019ae:	d111      	bne.n	80019d4 <rotateBlock+0x15c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	8939      	ldrh	r1, [r7, #8]
 80019b4:	897b      	ldrh	r3, [r7, #10]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff0b 	bl	80017d2 <eraseBlockSeven>
		drawBlockSeven(Xpos, Ypos, NewOrientation);
 80019bc:	89fa      	ldrh	r2, [r7, #14]
 80019be:	8939      	ldrh	r1, [r7, #8]
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff feae 	bl	8001724 <drawBlockSeven>
		updateCurrentBlock(7, Xpos, Ypos, NewOrientation);
 80019c8:	89fb      	ldrh	r3, [r7, #14]
 80019ca:	893a      	ldrh	r2, [r7, #8]
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	2007      	movs	r0, #7
 80019d0:	f000 f806 	bl	80019e0 <updateCurrentBlock>
		}
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000118 	.word	0x20000118

080019e0 <updateCurrentBlock>:

void updateCurrentBlock(uint16_t BlockNum, uint16_t Xpos, uint16_t Ypos, uint16_t Orientation){
 80019e0:	b490      	push	{r4, r7}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4604      	mov	r4, r0
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	4603      	mov	r3, r0
 80019f4:	80bb      	strh	r3, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]
 80019fa:	4613      	mov	r3, r2
 80019fc:	803b      	strh	r3, [r7, #0]
	CurrentBlock[0] = BlockNum;
 80019fe:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <updateCurrentBlock+0x40>)
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	8013      	strh	r3, [r2, #0]
	CurrentBlock[1] = Xpos;
 8001a04:	4a06      	ldr	r2, [pc, #24]	@ (8001a20 <updateCurrentBlock+0x40>)
 8001a06:	88bb      	ldrh	r3, [r7, #4]
 8001a08:	8053      	strh	r3, [r2, #2]
	CurrentBlock[2] = Ypos;
 8001a0a:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <updateCurrentBlock+0x40>)
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	8093      	strh	r3, [r2, #4]
	CurrentBlock[3] = Orientation;
 8001a10:	4a03      	ldr	r2, [pc, #12]	@ (8001a20 <updateCurrentBlock+0x40>)
 8001a12:	883b      	ldrh	r3, [r7, #0]
 8001a14:	80d3      	strh	r3, [r2, #6]
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc90      	pop	{r4, r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000118 	.word	0x20000118

08001a24 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <LCD_Error_Handler+0x8>

08001a30 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001a34:	f000 f9fe 	bl	8001e34 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001a38:	20ca      	movs	r0, #202	@ 0xca
 8001a3a:	f000 f943 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001a3e:	20c3      	movs	r0, #195	@ 0xc3
 8001a40:	f000 f94d 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001a44:	2008      	movs	r0, #8
 8001a46:	f000 f94a 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001a4a:	2050      	movs	r0, #80	@ 0x50
 8001a4c:	f000 f947 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001a50:	20cf      	movs	r0, #207	@ 0xcf
 8001a52:	f000 f937 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f941 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001a5c:	20c1      	movs	r0, #193	@ 0xc1
 8001a5e:	f000 f93e 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001a62:	2030      	movs	r0, #48	@ 0x30
 8001a64:	f000 f93b 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001a68:	20ed      	movs	r0, #237	@ 0xed
 8001a6a:	f000 f92b 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001a6e:	2064      	movs	r0, #100	@ 0x64
 8001a70:	f000 f935 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 f932 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001a7a:	2012      	movs	r0, #18
 8001a7c:	f000 f92f 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001a80:	2081      	movs	r0, #129	@ 0x81
 8001a82:	f000 f92c 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001a86:	20e8      	movs	r0, #232	@ 0xe8
 8001a88:	f000 f91c 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001a8c:	2085      	movs	r0, #133	@ 0x85
 8001a8e:	f000 f926 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f000 f923 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a98:	2078      	movs	r0, #120	@ 0x78
 8001a9a:	f000 f920 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001a9e:	20cb      	movs	r0, #203	@ 0xcb
 8001aa0:	f000 f910 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001aa4:	2039      	movs	r0, #57	@ 0x39
 8001aa6:	f000 f91a 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001aaa:	202c      	movs	r0, #44	@ 0x2c
 8001aac:	f000 f917 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 f914 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001ab6:	2034      	movs	r0, #52	@ 0x34
 8001ab8:	f000 f911 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f000 f90e 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001ac2:	20f7      	movs	r0, #247	@ 0xf7
 8001ac4:	f000 f8fe 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001ac8:	2020      	movs	r0, #32
 8001aca:	f000 f908 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001ace:	20ea      	movs	r0, #234	@ 0xea
 8001ad0:	f000 f8f8 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f000 f902 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f8ff 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001ae0:	20b1      	movs	r0, #177	@ 0xb1
 8001ae2:	f000 f8ef 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 f8f9 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001aec:	201b      	movs	r0, #27
 8001aee:	f000 f8f6 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001af2:	20b6      	movs	r0, #182	@ 0xb6
 8001af4:	f000 f8e6 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001af8:	200a      	movs	r0, #10
 8001afa:	f000 f8f0 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001afe:	20a2      	movs	r0, #162	@ 0xa2
 8001b00:	f000 f8ed 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001b04:	20c0      	movs	r0, #192	@ 0xc0
 8001b06:	f000 f8dd 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f000 f8e7 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001b10:	20c1      	movs	r0, #193	@ 0xc1
 8001b12:	f000 f8d7 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001b16:	2010      	movs	r0, #16
 8001b18:	f000 f8e1 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001b1c:	20c5      	movs	r0, #197	@ 0xc5
 8001b1e:	f000 f8d1 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001b22:	2045      	movs	r0, #69	@ 0x45
 8001b24:	f000 f8db 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001b28:	2015      	movs	r0, #21
 8001b2a:	f000 f8d8 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001b2e:	20c7      	movs	r0, #199	@ 0xc7
 8001b30:	f000 f8c8 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001b34:	2090      	movs	r0, #144	@ 0x90
 8001b36:	f000 f8d2 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001b3a:	2036      	movs	r0, #54	@ 0x36
 8001b3c:	f000 f8c2 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001b40:	20c8      	movs	r0, #200	@ 0xc8
 8001b42:	f000 f8cc 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001b46:	20f2      	movs	r0, #242	@ 0xf2
 8001b48:	f000 f8bc 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f000 f8c6 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001b52:	20b0      	movs	r0, #176	@ 0xb0
 8001b54:	f000 f8b6 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001b58:	20c2      	movs	r0, #194	@ 0xc2
 8001b5a:	f000 f8c0 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001b5e:	20b6      	movs	r0, #182	@ 0xb6
 8001b60:	f000 f8b0 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001b64:	200a      	movs	r0, #10
 8001b66:	f000 f8ba 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001b6a:	20a7      	movs	r0, #167	@ 0xa7
 8001b6c:	f000 f8b7 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001b70:	2027      	movs	r0, #39	@ 0x27
 8001b72:	f000 f8b4 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f000 f8b1 	bl	8001cde <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001b7c:	202a      	movs	r0, #42	@ 0x2a
 8001b7e:	f000 f8a1 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f8ab 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 f8a8 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f8a5 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001b94:	20ef      	movs	r0, #239	@ 0xef
 8001b96:	f000 f8a2 	bl	8001cde <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001b9a:	202b      	movs	r0, #43	@ 0x2b
 8001b9c:	f000 f892 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f000 f89c 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f899 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001bac:	2001      	movs	r0, #1
 8001bae:	f000 f896 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001bb2:	203f      	movs	r0, #63	@ 0x3f
 8001bb4:	f000 f893 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001bb8:	20f6      	movs	r0, #246	@ 0xf6
 8001bba:	f000 f883 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 f88d 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f000 f88a 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001bca:	2006      	movs	r0, #6
 8001bcc:	f000 f887 	bl	8001cde <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001bd0:	202c      	movs	r0, #44	@ 0x2c
 8001bd2:	f000 f877 	bl	8001cc4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001bd6:	20c8      	movs	r0, #200	@ 0xc8
 8001bd8:	f000 f9e8 	bl	8001fac <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001bdc:	2026      	movs	r0, #38	@ 0x26
 8001bde:	f000 f871 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f000 f87b 	bl	8001cde <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001be8:	20e0      	movs	r0, #224	@ 0xe0
 8001bea:	f000 f86b 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f875 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001bf4:	2029      	movs	r0, #41	@ 0x29
 8001bf6:	f000 f872 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001bfa:	2024      	movs	r0, #36	@ 0x24
 8001bfc:	f000 f86f 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001c00:	200c      	movs	r0, #12
 8001c02:	f000 f86c 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001c06:	200e      	movs	r0, #14
 8001c08:	f000 f869 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001c0c:	2009      	movs	r0, #9
 8001c0e:	f000 f866 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001c12:	204e      	movs	r0, #78	@ 0x4e
 8001c14:	f000 f863 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001c18:	2078      	movs	r0, #120	@ 0x78
 8001c1a:	f000 f860 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001c1e:	203c      	movs	r0, #60	@ 0x3c
 8001c20:	f000 f85d 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001c24:	2009      	movs	r0, #9
 8001c26:	f000 f85a 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001c2a:	2013      	movs	r0, #19
 8001c2c:	f000 f857 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001c30:	2005      	movs	r0, #5
 8001c32:	f000 f854 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001c36:	2017      	movs	r0, #23
 8001c38:	f000 f851 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001c3c:	2011      	movs	r0, #17
 8001c3e:	f000 f84e 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f000 f84b 	bl	8001cde <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001c48:	20e1      	movs	r0, #225	@ 0xe1
 8001c4a:	f000 f83b 	bl	8001cc4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f845 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001c54:	2016      	movs	r0, #22
 8001c56:	f000 f842 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001c5a:	201b      	movs	r0, #27
 8001c5c:	f000 f83f 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001c60:	2004      	movs	r0, #4
 8001c62:	f000 f83c 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001c66:	2011      	movs	r0, #17
 8001c68:	f000 f839 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001c6c:	2007      	movs	r0, #7
 8001c6e:	f000 f836 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001c72:	2031      	movs	r0, #49	@ 0x31
 8001c74:	f000 f833 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001c78:	2033      	movs	r0, #51	@ 0x33
 8001c7a:	f000 f830 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001c7e:	2042      	movs	r0, #66	@ 0x42
 8001c80:	f000 f82d 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001c84:	2005      	movs	r0, #5
 8001c86:	f000 f82a 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001c8a:	200c      	movs	r0, #12
 8001c8c:	f000 f827 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001c90:	200a      	movs	r0, #10
 8001c92:	f000 f824 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001c96:	2028      	movs	r0, #40	@ 0x28
 8001c98:	f000 f821 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001c9c:	202f      	movs	r0, #47	@ 0x2f
 8001c9e:	f000 f81e 	bl	8001cde <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001ca2:	200f      	movs	r0, #15
 8001ca4:	f000 f81b 	bl	8001cde <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001ca8:	2011      	movs	r0, #17
 8001caa:	f000 f80b 	bl	8001cc4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001cae:	20c8      	movs	r0, #200	@ 0xc8
 8001cb0:	f000 f97c 	bl	8001fac <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001cb4:	2029      	movs	r0, #41	@ 0x29
 8001cb6:	f000 f805 	bl	8001cc4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001cba:	202c      	movs	r0, #44	@ 0x2c
 8001cbc:	f000 f802 	bl	8001cc4 <ili9341_Write_Reg>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f949 	bl	8001f68 <LCD_IO_WriteReg>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f91a 	bl	8001f24 <LCD_IO_WriteData>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001cfc:	4819      	ldr	r0, [pc, #100]	@ (8001d64 <SPI_Init+0x6c>)
 8001cfe:	f002 fb4a 	bl	8004396 <HAL_SPI_GetState>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12b      	bne.n	8001d60 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001d08:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <SPI_Init+0x6c>)
 8001d0a:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <SPI_Init+0x70>)
 8001d0c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <SPI_Init+0x6c>)
 8001d10:	2218      	movs	r2, #24
 8001d12:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <SPI_Init+0x6c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d1a:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <SPI_Init+0x6c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d20:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <SPI_Init+0x6c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <SPI_Init+0x6c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <SPI_Init+0x6c>)
 8001d2e:	2207      	movs	r2, #7
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <SPI_Init+0x6c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <SPI_Init+0x6c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <SPI_Init+0x6c>)
 8001d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d44:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <SPI_Init+0x6c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <SPI_Init+0x6c>)
 8001d4e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d52:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <SPI_Init+0x6c>)
 8001d56:	f000 f833 	bl	8001dc0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d5a:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <SPI_Init+0x6c>)
 8001d5c:	f002 f926 	bl	8003fac <HAL_SPI_Init>
  }
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20025920 	.word	0x20025920
 8001d68:	40015000 	.word	0x40015000

08001d6c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <SPI_Write+0x34>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1db9      	adds	r1, r7, #6
 8001d80:	2201      	movs	r2, #1
 8001d82:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <SPI_Write+0x38>)
 8001d84:	f002 f9c3 	bl	800410e <HAL_SPI_Transmit>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001d92:	f000 f809 	bl	8001da8 <SPI_Error>
  }
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000010 	.word	0x20000010
 8001da4:	20025920 	.word	0x20025920

08001da8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001dac:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <SPI_Error+0x14>)
 8001dae:	f002 f986 	bl	80040be <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001db2:	f7ff ffa1 	bl	8001cf8 <SPI_Init>
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20025920 	.word	0x20025920

08001dc0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <SPI_MspInit+0x6c>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	4a16      	ldr	r2, [pc, #88]	@ (8001e2c <SPI_MspInit+0x6c>)
 8001dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <SPI_MspInit+0x6c>)
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <SPI_MspInit+0x6c>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dec:	4a0f      	ldr	r2, [pc, #60]	@ (8001e2c <SPI_MspInit+0x6c>)
 8001dee:	f043 0320 	orr.w	r3, r3, #32
 8001df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <SPI_MspInit+0x6c>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001e00:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001e12:	2305      	movs	r3, #5
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <SPI_MspInit+0x70>)
 8001e1e:	f000 fd29 	bl	8002874 <HAL_GPIO_Init>
}
 8001e22:	bf00      	nop
 8001e24:	3728      	adds	r7, #40	@ 0x28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40021400 	.word	0x40021400

08001e34 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001e3a:	4b36      	ldr	r3, [pc, #216]	@ (8001f14 <LCD_IO_Init+0xe0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d164      	bne.n	8001f0c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001e42:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <LCD_IO_Init+0xe0>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	4a31      	ldr	r2, [pc, #196]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e58:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001e72:	2302      	movs	r3, #2
 8001e74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4827      	ldr	r0, [pc, #156]	@ (8001f1c <LCD_IO_Init+0xe8>)
 8001e7e:	f000 fcf9 	bl	8002874 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001eac:	2302      	movs	r3, #2
 8001eae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4819      	ldr	r0, [pc, #100]	@ (8001f1c <LCD_IO_Init+0xe8>)
 8001eb8:	f000 fcdc 	bl	8002874 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec4:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <LCD_IO_Init+0xe4>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LCD_IO_Init+0xec>)
 8001ef0:	f000 fcc0 	bl	8002874 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4809      	ldr	r0, [pc, #36]	@ (8001f20 <LCD_IO_Init+0xec>)
 8001efa:	f000 ff73 	bl	8002de4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001efe:	2201      	movs	r2, #1
 8001f00:	2104      	movs	r1, #4
 8001f02:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <LCD_IO_Init+0xec>)
 8001f04:	f000 ff6e 	bl	8002de4 <HAL_GPIO_WritePin>

    SPI_Init();
 8001f08:	f7ff fef6 	bl	8001cf8 <SPI_Init>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20025978 	.word	0x20025978
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40020800 	.word	0x40020800

08001f24 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f34:	480a      	ldr	r0, [pc, #40]	@ (8001f60 <LCD_IO_WriteData+0x3c>)
 8001f36:	f000 ff55 	bl	8002de4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	4809      	ldr	r0, [pc, #36]	@ (8001f64 <LCD_IO_WriteData+0x40>)
 8001f40:	f000 ff50 	bl	8002de4 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff10 	bl	8001d6c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2104      	movs	r1, #4
 8001f50:	4804      	ldr	r0, [pc, #16]	@ (8001f64 <LCD_IO_WriteData+0x40>)
 8001f52:	f000 ff47 	bl	8002de4 <HAL_GPIO_WritePin>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40020800 	.word	0x40020800

08001f68 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001f72:	2200      	movs	r2, #0
 8001f74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f78:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <LCD_IO_WriteReg+0x3c>)
 8001f7a:	f000 ff33 	bl	8002de4 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2104      	movs	r1, #4
 8001f82:	4809      	ldr	r0, [pc, #36]	@ (8001fa8 <LCD_IO_WriteReg+0x40>)
 8001f84:	f000 ff2e 	bl	8002de4 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff feed 	bl	8001d6c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f92:	2201      	movs	r2, #1
 8001f94:	2104      	movs	r1, #4
 8001f96:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <LCD_IO_WriteReg+0x40>)
 8001f98:	f000 ff24 	bl	8002de4 <HAL_GPIO_WritePin>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40020800 	.word	0x40020800

08001fac <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 faf5 	bl	80025a4 <HAL_Delay>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc6:	f000 fa7b 	bl	80024c0 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8001fca:	f000 f80b 	bl	8001fe4 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001fce:	f7fe fa85 	bl	80004dc <ApplicationInit>

//  LCD_Visual_Demo();
  GameInit();
 8001fd2:	f7fe fe6b 	bl	8000cac <GameInit>

  HAL_Delay(5000);
 8001fd6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001fda:	f000 fae3 	bl	80025a4 <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001fde:	bf00      	nop
 8001fe0:	e7fd      	b.n	8001fde <main+0x1c>
	...

08001fe4 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b092      	sub	sp, #72	@ 0x48
 8001fe8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <SystemClockOverride+0x7c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <SystemClockOverride+0x7c>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <SystemClockOverride+0x7c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002006:	2301      	movs	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800200e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002010:	2302      	movs	r3, #2
 8002012:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002014:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002018:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800201a:	2308      	movs	r3, #8
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800201e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002022:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002028:	2307      	movs	r3, #7
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4618      	mov	r0, r3
 8002030:	f001 f998 	bl	8003364 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002034:	230f      	movs	r3, #15
 8002036:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002038:	2302      	movs	r3, #2
 800203a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002040:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002044:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800204c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002050:	2105      	movs	r1, #5
 8002052:	4618      	mov	r0, r3
 8002054:	f001 fbfe 	bl	8003854 <HAL_RCC_ClockConfig>
}
 8002058:	bf00      	nop
 800205a:	3748      	adds	r7, #72	@ 0x48
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <Error_Handler+0x8>

08002070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a0f      	ldr	r2, [pc, #60]	@ (80020bc <HAL_MspInit+0x4c>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_MspInit+0x4c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	4a08      	ldr	r2, [pc, #32]	@ (80020bc <HAL_MspInit+0x4c>)
 800209c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_MspInit+0x4c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020ae:	2007      	movs	r0, #7
 80020b0:	f000 fb90 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b09a      	sub	sp, #104	@ 0x68
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020dc:	2230      	movs	r2, #48	@ 0x30
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fa43 	bl	800456c <memset>
  if(hltdc->Instance==LTDC)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a81      	ldr	r2, [pc, #516]	@ (80022f0 <HAL_LTDC_MspInit+0x230>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	f040 80fa 	bne.w	80022e6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020f2:	2308      	movs	r3, #8
 80020f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80020f6:	2332      	movs	r3, #50	@ 0x32
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80020fe:	2300      	movs	r3, #0
 8002100:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002106:	4618      	mov	r0, r3
 8002108:	f001 fd90 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002112:	f7ff ffa7 	bl	8002064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
 800211a:	4b76      	ldr	r3, [pc, #472]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	4a75      	ldr	r2, [pc, #468]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002124:	6453      	str	r3, [r2, #68]	@ 0x44
 8002126:	4b73      	ldr	r3, [pc, #460]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	4b6f      	ldr	r3, [pc, #444]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a6e      	ldr	r2, [pc, #440]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 800213c:	f043 0320 	orr.w	r3, r3, #32
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b6c      	ldr	r3, [pc, #432]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	4b68      	ldr	r3, [pc, #416]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a67      	ldr	r2, [pc, #412]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b65      	ldr	r3, [pc, #404]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	4b61      	ldr	r3, [pc, #388]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a60      	ldr	r2, [pc, #384]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b5e      	ldr	r3, [pc, #376]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b5a      	ldr	r3, [pc, #360]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a59      	ldr	r2, [pc, #356]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b57      	ldr	r3, [pc, #348]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b53      	ldr	r3, [pc, #332]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	4a52      	ldr	r2, [pc, #328]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b2:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4a4b      	ldr	r2, [pc, #300]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ce:	4b49      	ldr	r3, [pc, #292]	@ (80022f4 <HAL_LTDC_MspInit+0x234>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80021da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e8:	2300      	movs	r3, #0
 80021ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021ec:	230e      	movs	r3, #14
 80021ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80021f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021f4:	4619      	mov	r1, r3
 80021f6:	4840      	ldr	r0, [pc, #256]	@ (80022f8 <HAL_LTDC_MspInit+0x238>)
 80021f8:	f000 fb3c 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80021fc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002200:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800220e:	230e      	movs	r3, #14
 8002210:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002216:	4619      	mov	r1, r3
 8002218:	4838      	ldr	r0, [pc, #224]	@ (80022fc <HAL_LTDC_MspInit+0x23c>)
 800221a:	f000 fb2b 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800221e:	2303      	movs	r3, #3
 8002220:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800222e:	2309      	movs	r3, #9
 8002230:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002236:	4619      	mov	r1, r3
 8002238:	4831      	ldr	r0, [pc, #196]	@ (8002300 <HAL_LTDC_MspInit+0x240>)
 800223a:	f000 fb1b 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800223e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002242:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002250:	230e      	movs	r3, #14
 8002252:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002258:	4619      	mov	r1, r3
 800225a:	4829      	ldr	r0, [pc, #164]	@ (8002300 <HAL_LTDC_MspInit+0x240>)
 800225c:	f000 fb0a 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002260:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002264:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002272:	230e      	movs	r3, #14
 8002274:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002276:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800227a:	4619      	mov	r1, r3
 800227c:	4821      	ldr	r0, [pc, #132]	@ (8002304 <HAL_LTDC_MspInit+0x244>)
 800227e:	f000 faf9 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002282:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002286:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002294:	230e      	movs	r3, #14
 8002296:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002298:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800229c:	4619      	mov	r1, r3
 800229e:	481a      	ldr	r0, [pc, #104]	@ (8002308 <HAL_LTDC_MspInit+0x248>)
 80022a0:	f000 fae8 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80022a4:	2348      	movs	r3, #72	@ 0x48
 80022a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022b4:	230e      	movs	r3, #14
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022bc:	4619      	mov	r1, r3
 80022be:	4813      	ldr	r0, [pc, #76]	@ (800230c <HAL_LTDC_MspInit+0x24c>)
 80022c0:	f000 fad8 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80022c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80022d6:	2309      	movs	r3, #9
 80022d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022de:	4619      	mov	r1, r3
 80022e0:	4808      	ldr	r0, [pc, #32]	@ (8002304 <HAL_LTDC_MspInit+0x244>)
 80022e2:	f000 fac7 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80022e6:	bf00      	nop
 80022e8:	3768      	adds	r7, #104	@ 0x68
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40016800 	.word	0x40016800
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40021400 	.word	0x40021400
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40021800 	.word	0x40021800
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00

08002310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a19      	ldr	r2, [pc, #100]	@ (8002394 <HAL_SPI_MspInit+0x84>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12c      	bne.n	800238c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <HAL_SPI_MspInit+0x88>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	4a17      	ldr	r2, [pc, #92]	@ (8002398 <HAL_SPI_MspInit+0x88>)
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002340:	6453      	str	r3, [r2, #68]	@ 0x44
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_SPI_MspInit+0x88>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <HAL_SPI_MspInit+0x88>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a10      	ldr	r2, [pc, #64]	@ (8002398 <HAL_SPI_MspInit+0x88>)
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <HAL_SPI_MspInit+0x88>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800236a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800237c:	2305      	movs	r3, #5
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4805      	ldr	r0, [pc, #20]	@ (800239c <HAL_SPI_MspInit+0x8c>)
 8002388:	f000 fa74 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40015000 	.word	0x40015000
 8002398:	40023800 	.word	0x40023800
 800239c:	40021400 	.word	0x40021400

080023a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_SPI_MspDeInit+0x30>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d10a      	bne.n	80023c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80023b2:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_SPI_MspDeInit+0x34>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_SPI_MspDeInit+0x34>)
 80023b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023bc:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80023be:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80023c2:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <HAL_SPI_MspDeInit+0x38>)
 80023c4:	f000 fc02 	bl	8002bcc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40015000 	.word	0x40015000
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40021400 	.word	0x40021400

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002432:	f000 f897 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}

0800243a <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002470:	f7ff ffea 	bl	8002448 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002476:	490d      	ldr	r1, [pc, #52]	@ (80024ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002478:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800247c:	e002      	b.n	8002484 <LoopCopyDataInit>

0800247e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800247e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002482:	3304      	adds	r3, #4

08002484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002488:	d3f9      	bcc.n	800247e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800248c:	4c0a      	ldr	r4, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002490:	e001      	b.n	8002496 <LoopFillZerobss>

08002492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002494:	3204      	adds	r2, #4

08002496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002498:	d3fb      	bcc.n	8002492 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800249a:	f002 f86f 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff fd90 	bl	8001fc2 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80024b0:	080057cc 	.word	0x080057cc
  ldr r2, =_sbss
 80024b4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80024b8:	20025980 	.word	0x20025980

080024bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <ADC_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002500 <HAL_Init+0x40>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_Init+0x40>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_Init+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	@ (8002500 <HAL_Init+0x40>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 f973 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f808 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f4:	f7ff fdbc 	bl	8002070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f999 	bl	800285a <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 f953 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000014 	.word	0x20000014
 800255c:	2000001c 	.word	0x2000001c
 8002560:	20000018 	.word	0x20000018

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000001c 	.word	0x2000001c
 8002588:	2002597c 	.word	0x2002597c

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2002597c 	.word	0x2002597c

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2000001c 	.word	0x2000001c

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	@ (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	2b00      	cmp	r3, #0
 800269c:	db12      	blt.n	80026c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	490a      	ldr	r1, [pc, #40]	@ (80026d0 <__NVIC_DisableIRQ+0x44>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	2001      	movs	r0, #1
 80026ae:	fa00 f202 	lsl.w	r2, r0, r2
 80026b2:	3320      	adds	r3, #32
 80026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80026b8:	f3bf 8f4f 	dsb	sy
}
 80026bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026be:	f3bf 8f6f 	isb	sy
}
 80026c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	@ (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	@ (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
         );
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	@ 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff8e 	bl	80026d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff05 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff1a 	bl	8002634 <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ff8e 	bl	8002728 <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff5d 	bl	80026d4 <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff0d 	bl	8002650 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff1d 	bl	800268c <__NVIC_DisableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff94 	bl	8002790 <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	@ 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e177      	b.n	8002b80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8166 	bne.w	8002b7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d005      	beq.n	80028c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d130      	bne.n	8002928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0201 	and.w	r2, r3, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d017      	beq.n	8002964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80c0 	beq.w	8002b7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <HAL_GPIO_Init+0x324>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	4a65      	ldr	r2, [pc, #404]	@ (8002b98 <HAL_GPIO_Init+0x324>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0a:	4b63      	ldr	r3, [pc, #396]	@ (8002b98 <HAL_GPIO_Init+0x324>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a61      	ldr	r2, [pc, #388]	@ (8002b9c <HAL_GPIO_Init+0x328>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ba0 <HAL_GPIO_Init+0x32c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d037      	beq.n	8002ab2 <HAL_GPIO_Init+0x23e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a57      	ldr	r2, [pc, #348]	@ (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_GPIO_Init+0x23a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02b      	beq.n	8002aaa <HAL_GPIO_Init+0x236>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a55      	ldr	r2, [pc, #340]	@ (8002bac <HAL_GPIO_Init+0x338>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d025      	beq.n	8002aa6 <HAL_GPIO_Init+0x232>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a54      	ldr	r2, [pc, #336]	@ (8002bb0 <HAL_GPIO_Init+0x33c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01f      	beq.n	8002aa2 <HAL_GPIO_Init+0x22e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a53      	ldr	r2, [pc, #332]	@ (8002bb4 <HAL_GPIO_Init+0x340>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d019      	beq.n	8002a9e <HAL_GPIO_Init+0x22a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a52      	ldr	r2, [pc, #328]	@ (8002bb8 <HAL_GPIO_Init+0x344>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x226>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a51      	ldr	r2, [pc, #324]	@ (8002bbc <HAL_GPIO_Init+0x348>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x222>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a50      	ldr	r2, [pc, #320]	@ (8002bc0 <HAL_GPIO_Init+0x34c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x21e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc4 <HAL_GPIO_Init+0x350>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x21a>
 8002a8a:	2309      	movs	r3, #9
 8002a8c:	e012      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a8e:	230a      	movs	r3, #10
 8002a90:	e010      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a92:	2308      	movs	r3, #8
 8002a94:	e00e      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a96:	2307      	movs	r3, #7
 8002a98:	e00c      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00a      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x240>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4935      	ldr	r1, [pc, #212]	@ (8002b9c <HAL_GPIO_Init+0x328>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af6:	4a34      	ldr	r2, [pc, #208]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002afc:	4b32      	ldr	r3, [pc, #200]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b20:	4a29      	ldr	r2, [pc, #164]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b26:	4b28      	ldr	r3, [pc, #160]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b74:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <HAL_GPIO_Init+0x354>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f ae84 	bls.w	8002890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3724      	adds	r7, #36	@ 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40021400 	.word	0x40021400
 8002bb8:	40021800 	.word	0x40021800
 8002bbc:	40021c00 	.word	0x40021c00
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40022400 	.word	0x40022400
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e0d9      	b.n	8002d9c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	f040 80c9 	bne.w	8002d96 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c04:	4a6b      	ldr	r2, [pc, #428]	@ (8002db4 <HAL_GPIO_DeInit+0x1e8>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	4013      	ands	r3, r2
 8002c24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a63      	ldr	r2, [pc, #396]	@ (8002db8 <HAL_GPIO_DeInit+0x1ec>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d037      	beq.n	8002c9e <HAL_GPIO_DeInit+0xd2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a62      	ldr	r2, [pc, #392]	@ (8002dbc <HAL_GPIO_DeInit+0x1f0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <HAL_GPIO_DeInit+0xce>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a61      	ldr	r2, [pc, #388]	@ (8002dc0 <HAL_GPIO_DeInit+0x1f4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02b      	beq.n	8002c96 <HAL_GPIO_DeInit+0xca>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a60      	ldr	r2, [pc, #384]	@ (8002dc4 <HAL_GPIO_DeInit+0x1f8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d025      	beq.n	8002c92 <HAL_GPIO_DeInit+0xc6>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc8 <HAL_GPIO_DeInit+0x1fc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <HAL_GPIO_DeInit+0xc2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a5e      	ldr	r2, [pc, #376]	@ (8002dcc <HAL_GPIO_DeInit+0x200>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_DeInit+0xbe>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd0 <HAL_GPIO_DeInit+0x204>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_DeInit+0xba>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd4 <HAL_GPIO_DeInit+0x208>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_DeInit+0xb6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd8 <HAL_GPIO_DeInit+0x20c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_DeInit+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a5a      	ldr	r2, [pc, #360]	@ (8002ddc <HAL_GPIO_DeInit+0x210>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_DeInit+0xae>
 8002c76:	2309      	movs	r3, #9
 8002c78:	e012      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	e010      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00e      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e00c      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c86:	2306      	movs	r3, #6
 8002c88:	e00a      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_DeInit+0xd4>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d132      	bne.n	8002d16 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4949      	ldr	r1, [pc, #292]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002cbe:	4b48      	ldr	r3, [pc, #288]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4946      	ldr	r1, [pc, #280]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ccc:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	4942      	ldr	r1, [pc, #264]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002cda:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	493f      	ldr	r1, [pc, #252]	@ (8002de0 <HAL_GPIO_DeInit+0x214>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	220f      	movs	r2, #15
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8002db4 <HAL_GPIO_DeInit+0x1e8>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	43da      	mvns	r2, r3
 8002d08:	482a      	ldr	r0, [pc, #168]	@ (8002db4 <HAL_GPIO_DeInit+0x1e8>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	400a      	ands	r2, r1
 8002d10:	3302      	adds	r3, #2
 8002d12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2103      	movs	r1, #3
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	220f      	movs	r2, #15
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	08d2      	lsrs	r2, r2, #3
 8002d4c:	4019      	ands	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2103      	movs	r1, #3
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	2101      	movs	r1, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2103      	movs	r1, #3
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	401a      	ands	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	f67f af22 	bls.w	8002be8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40013800 	.word	0x40013800
 8002db8:	40020000 	.word	0x40020000
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40020800 	.word	0x40020800
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40021400 	.word	0x40021400
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	40021c00 	.word	0x40021c00
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40022400 	.word	0x40022400
 8002de0:	40013c00 	.word	0x40013c00

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e00:	e003      	b.n	8002e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	041a      	lsls	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0bf      	b.n	8002faa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff f93e 	bl	80020c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699a      	ldr	r2, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002e5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6999      	ldr	r1, [r3, #24]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb4 <HAL_LTDC_Init+0x19c>)
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb4 <HAL_LTDC_Init+0x19c>)
 8002eba:	400b      	ands	r3, r1
 8002ebc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1a      	ldr	r2, [r3, #32]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b33      	ldr	r3, [pc, #204]	@ (8002fb4 <HAL_LTDC_Init+0x19c>)
 8002ee8:	400b      	ands	r3, r1
 8002eea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6919      	ldr	r1, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b27      	ldr	r3, [pc, #156]	@ (8002fb4 <HAL_LTDC_Init+0x19c>)
 8002f16:	400b      	ands	r3, r1
 8002f18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6959      	ldr	r1, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f3e:	021b      	lsls	r3, r3, #8
 8002f40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0206 	orr.w	r2, r2, #6
 8002f86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	f000f800 	.word	0xf000f800

08002fb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_LTDC_ConfigLayer+0x1a>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e02c      	b.n	800302c <HAL_LTDC_ConfigLayer+0x74>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2134      	movs	r1, #52	@ 0x34
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f811 	bl	8003034 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2201      	movs	r2, #1
 8003018:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bdb0      	pop	{r4, r5, r7, pc}

08003034 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	4413      	add	r3, r2
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	01db      	lsls	r3, r3, #7
 8003060:	4413      	add	r3, r2
 8003062:	3384      	adds	r3, #132	@ 0x84
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	4611      	mov	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	01d2      	lsls	r2, r2, #7
 8003070:	440a      	add	r2, r1
 8003072:	3284      	adds	r2, #132	@ 0x84
 8003074:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003078:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800308a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800308c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	01db      	lsls	r3, r3, #7
 8003098:	440b      	add	r3, r1
 800309a:	3384      	adds	r3, #132	@ 0x84
 800309c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b2:	4413      	add	r3, r2
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	01db      	lsls	r3, r3, #7
 80030c2:	4413      	add	r3, r2
 80030c4:	3384      	adds	r3, #132	@ 0x84
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4611      	mov	r1, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	01d2      	lsls	r2, r2, #7
 80030d2:	440a      	add	r2, r1
 80030d4:	3284      	adds	r2, #132	@ 0x84
 80030d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80030da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ea:	4413      	add	r3, r2
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	440b      	add	r3, r1
 80030fa:	3384      	adds	r3, #132	@ 0x84
 80030fc:	4619      	mov	r1, r3
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4313      	orrs	r3, r2
 8003102:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4413      	add	r3, r2
 8003110:	3384      	adds	r3, #132	@ 0x84
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	4611      	mov	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	01d2      	lsls	r2, r2, #7
 800311e:	440a      	add	r2, r1
 8003120:	3284      	adds	r2, #132	@ 0x84
 8003122:	f023 0307 	bic.w	r3, r3, #7
 8003126:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4413      	add	r3, r2
 8003134:	3384      	adds	r3, #132	@ 0x84
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	01db      	lsls	r3, r3, #7
 8003164:	4413      	add	r3, r2
 8003166:	3384      	adds	r3, #132	@ 0x84
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	01db      	lsls	r3, r3, #7
 8003174:	4413      	add	r3, r2
 8003176:	3384      	adds	r3, #132	@ 0x84
 8003178:	461a      	mov	r2, r3
 800317a:	2300      	movs	r3, #0
 800317c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003184:	461a      	mov	r2, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	431a      	orrs	r2, r3
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4619      	mov	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	01db      	lsls	r3, r3, #7
 8003198:	440b      	add	r3, r1
 800319a:	3384      	adds	r3, #132	@ 0x84
 800319c:	4619      	mov	r1, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	01db      	lsls	r3, r3, #7
 80031ae:	4413      	add	r3, r2
 80031b0:	3384      	adds	r3, #132	@ 0x84
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	4611      	mov	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	01d2      	lsls	r2, r2, #7
 80031be:	440a      	add	r2, r1
 80031c0:	3284      	adds	r2, #132	@ 0x84
 80031c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	01db      	lsls	r3, r3, #7
 80031d2:	4413      	add	r3, r2
 80031d4:	3384      	adds	r3, #132	@ 0x84
 80031d6:	461a      	mov	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	01db      	lsls	r3, r3, #7
 80031e8:	4413      	add	r3, r2
 80031ea:	3384      	adds	r3, #132	@ 0x84
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	4611      	mov	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	01d2      	lsls	r2, r2, #7
 80031f8:	440a      	add	r2, r1
 80031fa:	3284      	adds	r2, #132	@ 0x84
 80031fc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003200:	f023 0307 	bic.w	r3, r3, #7
 8003204:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	6809      	ldr	r1, [r1, #0]
 8003212:	4608      	mov	r0, r1
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	01c9      	lsls	r1, r1, #7
 8003218:	4401      	add	r1, r0
 800321a:	3184      	adds	r1, #132	@ 0x84
 800321c:	4313      	orrs	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	01db      	lsls	r3, r3, #7
 800322a:	4413      	add	r3, r2
 800322c:	3384      	adds	r3, #132	@ 0x84
 800322e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	01db      	lsls	r3, r3, #7
 800323a:	4413      	add	r3, r2
 800323c:	3384      	adds	r3, #132	@ 0x84
 800323e:	461a      	mov	r2, r3
 8003240:	2300      	movs	r3, #0
 8003242:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	01db      	lsls	r3, r3, #7
 800324e:	4413      	add	r3, r2
 8003250:	3384      	adds	r3, #132	@ 0x84
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d102      	bne.n	8003268 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003262:	2304      	movs	r3, #4
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e01b      	b.n	80032a0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d102      	bne.n	8003276 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003270:	2303      	movs	r3, #3
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e014      	b.n	80032a0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d00b      	beq.n	8003296 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003282:	2b02      	cmp	r3, #2
 8003284:	d007      	beq.n	8003296 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800328a:	2b03      	cmp	r3, #3
 800328c:	d003      	beq.n	8003296 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003292:	2b07      	cmp	r3, #7
 8003294:	d102      	bne.n	800329c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003296:	2302      	movs	r3, #2
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e001      	b.n	80032a0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800329c:	2301      	movs	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	01db      	lsls	r3, r3, #7
 80032aa:	4413      	add	r3, r2
 80032ac:	3384      	adds	r3, #132	@ 0x84
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	4611      	mov	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	01d2      	lsls	r2, r2, #7
 80032ba:	440a      	add	r2, r1
 80032bc:	3284      	adds	r2, #132	@ 0x84
 80032be:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80032c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	1acb      	subs	r3, r1, r3
 80032da:	69f9      	ldr	r1, [r7, #28]
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	6809      	ldr	r1, [r1, #0]
 80032e6:	4608      	mov	r0, r1
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	01c9      	lsls	r1, r1, #7
 80032ec:	4401      	add	r1, r0
 80032ee:	3184      	adds	r1, #132	@ 0x84
 80032f0:	4313      	orrs	r3, r2
 80032f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	01db      	lsls	r3, r3, #7
 80032fe:	4413      	add	r3, r2
 8003300:	3384      	adds	r3, #132	@ 0x84
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	4611      	mov	r1, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	01d2      	lsls	r2, r2, #7
 800330e:	440a      	add	r2, r1
 8003310:	3284      	adds	r2, #132	@ 0x84
 8003312:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	01db      	lsls	r3, r3, #7
 8003326:	4413      	add	r3, r2
 8003328:	3384      	adds	r3, #132	@ 0x84
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	01db      	lsls	r3, r3, #7
 800333c:	4413      	add	r3, r2
 800333e:	3384      	adds	r3, #132	@ 0x84
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	4611      	mov	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	01d2      	lsls	r2, r2, #7
 800334c:	440a      	add	r2, r1
 800334e:	3284      	adds	r2, #132	@ 0x84
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6013      	str	r3, [r2, #0]
}
 8003356:	bf00      	nop
 8003358:	3724      	adds	r7, #36	@ 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e267      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d075      	beq.n	800346e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003382:	4b88      	ldr	r3, [pc, #544]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d00c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003396:	2b08      	cmp	r3, #8
 8003398:	d112      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b82      	ldr	r3, [pc, #520]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	4b7e      	ldr	r3, [pc, #504]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05b      	beq.n	800346c <HAL_RCC_OscConfig+0x108>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d157      	bne.n	800346c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e242      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x74>
 80033ca:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a75      	ldr	r2, [pc, #468]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b70      	ldr	r3, [pc, #448]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6f      	ldr	r2, [pc, #444]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6c      	ldr	r2, [pc, #432]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033fc:	4b69      	ldr	r3, [pc, #420]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a68      	ldr	r2, [pc, #416]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b66      	ldr	r3, [pc, #408]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a65      	ldr	r2, [pc, #404]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7ff f8b6 	bl	800258c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7ff f8b2 	bl	800258c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e207      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5b      	ldr	r3, [pc, #364]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xc0>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7ff f8a2 	bl	800258c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7ff f89e 	bl	800258c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1f3      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b51      	ldr	r3, [pc, #324]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0xe8>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800347a:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b44      	ldr	r3, [pc, #272]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b41      	ldr	r3, [pc, #260]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c7      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4937      	ldr	r1, [pc, #220]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b34      	ldr	r3, [pc, #208]	@ (80035a8 <HAL_RCC_OscConfig+0x244>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7ff f857 	bl	800258c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7ff f853 	bl	800258c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a8      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4925      	ldr	r1, [pc, #148]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b24      	ldr	r3, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x244>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7ff f836 	bl	800258c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7ff f832 	bl	800258c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e187      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d036      	beq.n	80035bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_RCC_OscConfig+0x248>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7ff f816 	bl	800258c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7ff f812 	bl	800258c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e167      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x200>
 8003582:	e01b      	b.n	80035bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_RCC_OscConfig+0x248>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe ffff 	bl	800258c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	e00e      	b.n	80035b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fffb 	bl	800258c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d907      	bls.n	80035b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e150      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	42470000 	.word	0x42470000
 80035ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ea      	bne.n	8003592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8097 	beq.w	80036f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	4b7d      	ldr	r3, [pc, #500]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	4a7c      	ldr	r2, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ea:	4b7a      	ldr	r3, [pc, #488]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b77      	ldr	r3, [pc, #476]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b74      	ldr	r3, [pc, #464]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe ffbb 	bl	800258c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe ffb7 	bl	800258c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e10c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b6a      	ldr	r3, [pc, #424]	@ (80037d8 <HAL_RCC_OscConfig+0x474>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x2ea>
 8003640:	4b64      	ldr	r3, [pc, #400]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003644:	4a63      	ldr	r2, [pc, #396]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	@ 0x70
 800364c:	e01c      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x30c>
 8003656:	4b5f      	ldr	r3, [pc, #380]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	4a5e      	ldr	r2, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	@ 0x70
 8003662:	4b5c      	ldr	r3, [pc, #368]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003666:	4a5b      	ldr	r2, [pc, #364]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	@ 0x70
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 8003670:	4b58      	ldr	r3, [pc, #352]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a57      	ldr	r2, [pc, #348]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
 800367c:	4b55      	ldr	r3, [pc, #340]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a54      	ldr	r2, [pc, #336]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe ff7c 	bl	800258c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe ff78 	bl	800258c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0cb      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	4b49      	ldr	r3, [pc, #292]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ee      	beq.n	8003698 <HAL_RCC_OscConfig+0x334>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe ff66 	bl	800258c <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe ff62 	bl	800258c <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0b5      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ee      	bne.n	80036c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4a38      	ldr	r2, [pc, #224]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a1 	beq.w	8003844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003702:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d05c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d141      	bne.n	800379a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe ff36 	bl	800258c <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe ff32 	bl	800258c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e087      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	491b      	ldr	r1, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b1b      	ldr	r3, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe ff0b 	bl	800258c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe ff07 	bl	800258c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e05c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x416>
 8003798:	e054      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b10      	ldr	r3, [pc, #64]	@ (80037dc <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fef4 	bl	800258c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe fef0 	bl	800258c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e045      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
 80037c6:	e03d      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e038      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <HAL_RCC_OscConfig+0x4ec>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d028      	beq.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d121      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d11a      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe fe22 	bl	800258c <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe fe1e 	bl	800258c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	@ (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	@ (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fd82 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	080057ac 	.word	0x080057ac
 8003a18:	20000014 	.word	0x20000014
 8003a1c:	20000018 	.word	0x20000018

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b094      	sub	sp, #80	@ 0x50
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a38:	4b79      	ldr	r3, [pc, #484]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d00d      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	f200 80e1 	bhi.w	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a52:	e0db      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a58:	e0db      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5a:	4b73      	ldr	r3, [pc, #460]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5e:	e0d8      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b6a      	ldr	r3, [pc, #424]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	0159      	lsls	r1, r3, #5
 8003aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa4:	0150      	lsls	r0, r2, #5
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4621      	mov	r1, r4
 8003aac:	1a51      	subs	r1, r2, r1
 8003aae:	6139      	str	r1, [r7, #16]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	018b      	lsls	r3, r1, #6
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ace:	4651      	mov	r1, sl
 8003ad0:	018a      	lsls	r2, r1, #6
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ad8:	4659      	mov	r1, fp
 8003ada:	eb63 0901 	sbc.w	r9, r3, r1
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af2:	4690      	mov	r8, r2
 8003af4:	4699      	mov	r9, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	eb18 0303 	adds.w	r3, r8, r3
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	462b      	mov	r3, r5
 8003b00:	eb49 0303 	adc.w	r3, r9, r3
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b12:	4629      	mov	r1, r5
 8003b14:	024b      	lsls	r3, r1, #9
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	024a      	lsls	r2, r1, #9
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b26:	2200      	movs	r2, #0
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b30:	f7fc fb5c 	bl	80001ec <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b3c:	e058      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	4611      	mov	r1, r2
 8003b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	0159      	lsls	r1, r3, #5
 8003b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6a:	0150      	lsls	r0, r2, #5
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4641      	mov	r1, r8
 8003b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b90:	ebb2 040a 	subs.w	r4, r2, sl
 8003b94:	eb63 050b 	sbc.w	r5, r3, fp
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	00eb      	lsls	r3, r5, #3
 8003ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba6:	00e2      	lsls	r2, r4, #3
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	4643      	mov	r3, r8
 8003bae:	18e3      	adds	r3, r4, r3
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	eb45 0303 	adc.w	r3, r5, r3
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	61fa      	str	r2, [r7, #28]
 8003be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be4:	f7fc fb02 	bl	80001ec <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3750      	adds	r7, #80	@ 0x50
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10b      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d075      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c60:	4b91      	ldr	r3, [pc, #580]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c66:	f7fe fc91 	bl	800258c <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c6e:	f7fe fc8d 	bl	800258c <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e189      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c80:	4b8a      	ldr	r3, [pc, #552]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f0      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	019a      	lsls	r2, r3, #6
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	071b      	lsls	r3, r3, #28
 8003ca4:	4981      	ldr	r1, [pc, #516]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cb8:	4b7c      	ldr	r3, [pc, #496]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cbe:	0f1b      	lsrs	r3, r3, #28
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	019a      	lsls	r2, r3, #6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	071b      	lsls	r3, r3, #28
 8003cd8:	4974      	ldr	r1, [pc, #464]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ce0:	4b72      	ldr	r3, [pc, #456]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ce6:	f023 021f 	bic.w	r2, r3, #31
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	496e      	ldr	r1, [pc, #440]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	019a      	lsls	r2, r3, #6
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	071b      	lsls	r3, r3, #28
 8003d18:	4964      	ldr	r1, [pc, #400]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d20:	4b61      	ldr	r3, [pc, #388]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d26:	f7fe fc31 	bl	800258c <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d2e:	f7fe fc2d 	bl	800258c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e129      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d40:	4b5a      	ldr	r3, [pc, #360]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d079      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d64:	4b52      	ldr	r3, [pc, #328]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6a:	f7fe fc0f 	bl	800258c <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d72:	f7fe fc0b 	bl	800258c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e107      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d84:	4b49      	ldr	r3, [pc, #292]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d90:	d0ef      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d020      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d9e:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	0f1b      	lsrs	r3, r3, #28
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	019a      	lsls	r2, r3, #6
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	061b      	lsls	r3, r3, #24
 8003db8:	431a      	orrs	r2, r3
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	493b      	ldr	r1, [pc, #236]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dc6:	4b39      	ldr	r3, [pc, #228]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dcc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	4934      	ldr	r1, [pc, #208]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01e      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dec:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df2:	0e1b      	lsrs	r3, r3, #24
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	019a      	lsls	r2, r3, #6
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	071b      	lsls	r3, r3, #28
 8003e0c:	4927      	ldr	r1, [pc, #156]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e14:	4b25      	ldr	r3, [pc, #148]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	4922      	ldr	r1, [pc, #136]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e2a:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e30:	f7fe fbac 	bl	800258c <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e38:	f7fe fba8 	bl	800258c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0a4      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e4a:	4b18      	ldr	r3, [pc, #96]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e56:	d1ef      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 808b 	beq.w	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a0b      	ldr	r2, [pc, #44]	@ (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e8e:	f7fe fb7d 	bl	800258c <HAL_GetTick>
 8003e92:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003e94:	e010      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7fe fb79 	bl	800258c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d909      	bls.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e075      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003ea8:	42470068 	.word	0x42470068
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	42470070 	.word	0x42470070
 8003eb4:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003eb8:	4b38      	ldr	r3, [pc, #224]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0e8      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec4:	4b36      	ldr	r3, [pc, #216]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ecc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02f      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d028      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eec:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ef8:	4a29      	ldr	r2, [pc, #164]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003efe:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d114      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fb3f 	bl	800258c <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f12:	f7fe fb3b 	bl	800258c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e035      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ee      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f40:	d10d      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f56:	4912      	ldr	r1, [pc, #72]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
 8003f5c:	e005      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f64:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f68:	6093      	str	r3, [r2, #8]
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f6c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f76:	490a      	ldr	r1, [pc, #40]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003f90:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40007000 	.word	0x40007000
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470e40 	.word	0x42470e40
 8003fa8:	424711e0 	.word	0x424711e0

08003fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e07b      	b.n	80040b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fce:	d009      	beq.n	8003fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
 8003fd6:	e005      	b.n	8003fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe f986 	bl	8002310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800401a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004068:	ea42 0103 	orr.w	r1, r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0104 	and.w	r1, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	f003 0210 	and.w	r2, r3, #16
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e01a      	b.n	8004106 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fe f959 	bl	80023a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b088      	sub	sp, #32
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800411e:	f7fe fa35 	bl	800258c <HAL_GetTick>
 8004122:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	d001      	beq.n	8004138 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
 8004136:	e12a      	b.n	800438e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Transmit+0x36>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e122      	b.n	800438e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_SPI_Transmit+0x48>
 8004152:	2302      	movs	r3, #2
 8004154:	e11b      	b.n	800438e <HAL_SPI_Transmit+0x280>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2203      	movs	r2, #3
 8004162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a4:	d10f      	bne.n	80041c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d007      	beq.n	80041e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ec:	d152      	bne.n	8004294 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_SPI_Transmit+0xee>
 80041f6:	8b7b      	ldrh	r3, [r7, #26]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d145      	bne.n	8004288 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	1c9a      	adds	r2, r3, #2
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004216:	b29b      	uxth	r3, r3
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004220:	e032      	b.n	8004288 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b02      	cmp	r3, #2
 800422e:	d112      	bne.n	8004256 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	1c9a      	adds	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004254:	e018      	b.n	8004288 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004256:	f7fe f999 	bl	800258c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d803      	bhi.n	800426e <HAL_SPI_Transmit+0x160>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d102      	bne.n	8004274 <HAL_SPI_Transmit+0x166>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e082      	b.n	800438e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1c7      	bne.n	8004222 <HAL_SPI_Transmit+0x114>
 8004292:	e053      	b.n	800433c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_SPI_Transmit+0x194>
 800429c:	8b7b      	ldrh	r3, [r7, #26]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d147      	bne.n	8004332 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042c8:	e033      	b.n	8004332 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d113      	bne.n	8004300 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	7812      	ldrb	r2, [r2, #0]
 80042e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80042fe:	e018      	b.n	8004332 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004300:	f7fe f944 	bl	800258c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d803      	bhi.n	8004318 <HAL_SPI_Transmit+0x20a>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d102      	bne.n	800431e <HAL_SPI_Transmit+0x210>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e02d      	b.n	800438e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1c6      	bne.n	80042ca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f8bf 	bl	80044c4 <SPI_EndRxTxTransaction>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800438c:	2300      	movs	r3, #0
  }
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043a4:	b2db      	uxtb	r3, r3
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043c4:	f7fe f8e2 	bl	800258c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	4413      	add	r3, r2
 80043d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043d4:	f7fe f8da 	bl	800258c <HAL_GetTick>
 80043d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043da:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	015b      	lsls	r3, r3, #5
 80043e0:	0d1b      	lsrs	r3, r3, #20
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ea:	e054      	b.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d050      	beq.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043f4:	f7fe f8ca 	bl	800258c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	429a      	cmp	r2, r3
 8004402:	d902      	bls.n	800440a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d13d      	bne.n	8004486 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004418:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004422:	d111      	bne.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800442c:	d004      	beq.n	8004438 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004436:	d107      	bne.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004446:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004450:	d10f      	bne.n	8004472 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004470:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e017      	b.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3b01      	subs	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4013      	ands	r3, r2
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d19b      	bne.n	80043ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000014 	.word	0x20000014

080044c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2201      	movs	r2, #1
 80044d8:	2102      	movs	r1, #2
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f7ff ff6a 	bl	80043b4 <SPI_WaitFlagStateUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e032      	b.n	800455c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004564 <SPI_EndRxTxTransaction+0xa0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004568 <SPI_EndRxTxTransaction+0xa4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	0d5b      	lsrs	r3, r3, #21
 8004502:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004514:	d112      	bne.n	800453c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff ff47 	bl	80043b4 <SPI_WaitFlagStateUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d016      	beq.n	800455a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e00f      	b.n	800455c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	3b01      	subs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004552:	2b80      	cmp	r3, #128	@ 0x80
 8004554:	d0f2      	beq.n	800453c <SPI_EndRxTxTransaction+0x78>
 8004556:	e000      	b.n	800455a <SPI_EndRxTxTransaction+0x96>
        break;
 8004558:	bf00      	nop
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20000014 	.word	0x20000014
 8004568:	165e9f81 	.word	0x165e9f81

0800456c <memset>:
 800456c:	4402      	add	r2, r0
 800456e:	4603      	mov	r3, r0
 8004570:	4293      	cmp	r3, r2
 8004572:	d100      	bne.n	8004576 <memset+0xa>
 8004574:	4770      	bx	lr
 8004576:	f803 1b01 	strb.w	r1, [r3], #1
 800457a:	e7f9      	b.n	8004570 <memset+0x4>

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	@ (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	@ (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	@ (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	@ (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 f818 	bl	80045c4 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	080057c4 	.word	0x080057c4
 80045b8:	080057c4 	.word	0x080057c4
 80045bc:	080057c4 	.word	0x080057c4
 80045c0:	080057c8 	.word	0x080057c8

080045c4 <_init>:
 80045c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c6:	bf00      	nop
 80045c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ca:	bc08      	pop	{r3}
 80045cc:	469e      	mov	lr, r3
 80045ce:	4770      	bx	lr

080045d0 <_fini>:
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d2:	bf00      	nop
 80045d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045d6:	bc08      	pop	{r3}
 80045d8:	469e      	mov	lr, r3
 80045da:	4770      	bx	lr
