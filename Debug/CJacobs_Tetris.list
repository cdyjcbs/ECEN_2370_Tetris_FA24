
CJacobs_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a70  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  08008c20  08008c20  00009c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e7c  08009e7c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e84  08009e84  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e88  08009e88  0000ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009e8c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00026028  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200260a4  200260a4  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b84  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea6  00000000  00000000  0001bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001018  00000000  00000000  0001ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c38  00000000  00000000  0001faf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e77  00000000  00000000  00020728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015520  00000000  00000000  0004759f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1cd5  00000000  00000000  0005cabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e794  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004900  00000000  00000000  0013e7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001430d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c08 	.word	0x08008c08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08008c08 	.word	0x08008c08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f004 f984 	bl	8004890 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa38 	bl	80009fc <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f9f5 	bl	800097c <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fbe8 	bl	8000d6c <LCD_Clear>
//    gameStart();
//    timer3Init();


    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f003 f83e 	bl	800361c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f85d 	bl	8000664 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098

080005b4 <EXTI0_IRQHandler>:

void TIM3_App_Start(){
	TIM3_Start();
}

void EXTI0_IRQHandler(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005b8:	2006      	movs	r0, #6
 80005ba:	f004 fc2c 	bl	8004e16 <HAL_NVIC_DisableIRQ>
//	addSchedulerEvent(ROTATE_BLOCK);
	rotateBlock();
 80005be:	f002 fa9d 	bl	8002afc <rotateBlock>
//	eraseCurrentBlock();
//	uint32_t randBlock = GetRandomBlock();
//	uint32_t randOrientation = GetRandomOrientation();
//	updateCurrentBlock(randBlock, 5, 5, randOrientation);
//	drawCurrentBlock();
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80005c2:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <EXTI0_IRQHandler+0x20>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005c8:	2006      	movs	r0, #6
 80005ca:	f004 fc16 	bl	8004dfa <HAL_NVIC_EnableIRQ>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40013c00 	.word	0x40013c00

080005d8 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&TIM3_Config, TIM_FLAG_UPDATE)) {
 80005de:	4b20      	ldr	r3, [pc, #128]	@ (8000660 <TIM3_IRQHandler+0x88>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d135      	bne.n	8000658 <TIM3_IRQHandler+0x80>
	        // Clear the update interrupt flag
	        __HAL_TIM_CLEAR_FLAG(&TIM3_Config, TIM_FLAG_UPDATE);
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <TIM3_IRQHandler+0x88>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f06f 0201 	mvn.w	r2, #1
 80005f4:	611a      	str	r2, [r3, #16]
	        int full = isFull();
 80005f6:	f002 fc1d 	bl	8002e34 <isFull>
 80005fa:	60f8      	str	r0, [r7, #12]

	        if (full != 0){
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d007      	beq.n	8000612 <TIM3_IRQHandler+0x3a>
		        eraseCurrentBlock();
 8000602:	f002 fb83 	bl	8002d0c <eraseCurrentBlock>
				uint16_t currentYpos = updateYpos();
 8000606:	f002 fc03 	bl	8002e10 <updateYpos>
 800060a:	4603      	mov	r3, r0
 800060c:	817b      	strh	r3, [r7, #10]
//		        updateYpos();
				drawCurrentBlock();
 800060e:	f002 fb29 	bl	8002c64 <drawCurrentBlock>
	        }

			if (full == 0){
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d11f      	bne.n	8000658 <TIM3_IRQHandler+0x80>
				uint16_t currentYpos = getCurrentYpos();
 8000618:	f002 fbee 	bl	8002df8 <getCurrentYpos>
 800061c:	4603      	mov	r3, r0
 800061e:	813b      	strh	r3, [r7, #8]
				if (currentYpos <= 1){
 8000620:	893b      	ldrh	r3, [r7, #8]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d804      	bhi.n	8000630 <TIM3_IRQHandler+0x58>
					HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8000626:	201d      	movs	r0, #29
 8000628:	f004 fbf5 	bl	8004e16 <HAL_NVIC_DisableIRQ>
					gameOver();
 800062c:	f000 fd56 	bl	80010dc <gameOver>
				}
				if (currentYpos > 1) {
 8000630:	893b      	ldrh	r3, [r7, #8]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d910      	bls.n	8000658 <TIM3_IRQHandler+0x80>
					updateTop();
 8000636:	f002 fedd 	bl	80033f4 <updateTop>
					checkForTetris();
 800063a:	f002 ff19 	bl	8003470 <checkForTetris>
					uint32_t randBlock = GetRandomBlock();
 800063e:	f003 f823 	bl	8003688 <GetRandomBlock>
 8000642:	4603      	mov	r3, r0
 8000644:	607b      	str	r3, [r7, #4]
					updateCurrentBlock(randBlock, 5, 1, 1);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	b298      	uxth	r0, r3
 800064a:	2301      	movs	r3, #1
 800064c:	2201      	movs	r2, #1
 800064e:	2105      	movs	r1, #5
 8000650:	f002 fbb0 	bl	8002db4 <updateCurrentBlock>
					drawCurrentBlock();
 8000654:	f002 fb06 	bl	8002c64 <drawCurrentBlock>
				}
			}
	 }
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20025e54 	.word	0x20025e54

08000664 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000678:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800067c:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800067e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000682:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6313      	str	r3, [r2, #48]	@ 0x30
 800069c:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <LCDTouchScreenInterruptGPIOInit+0x64>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4807      	ldr	r0, [pc, #28]	@ (80006cc <LCDTouchScreenInterruptGPIOInit+0x68>)
 80006ae:	f004 fbf3 	bl	8004e98 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b2:	2028      	movs	r0, #40	@ 0x28
 80006b4:	f004 fba1 	bl	8004dfa <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006ba:	4a06      	ldr	r2, [pc, #24]	@ (80006d4 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006bc:	601a      	str	r2, [r3, #0]

}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	200000a0 	.word	0x200000a0
 80006d4:	0600000f 	.word	0x0600000f

080006d8 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006de:	2028      	movs	r0, #40	@ 0x28
 80006e0:	f004 fb99 	bl	8004e16 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 80006e8:	4b39      	ldr	r3, [pc, #228]	@ (80007d0 <EXTI15_10_IRQHandler+0xf8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80006ee:	e006      	b.n	80006fe <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 80006f0:	204c      	movs	r0, #76	@ 0x4c
 80006f2:	f003 fe3a 	bl	800436a <STMPE811_Read>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b35      	ldr	r3, [pc, #212]	@ (80007d0 <EXTI15_10_IRQHandler+0xf8>)
 80006fc:	601a      	str	r2, [r3, #0]
	while(count == 0){
 80006fe:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <EXTI15_10_IRQHandler+0xf8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f4      	beq.n	80006f0 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000706:	200a      	movs	r0, #10
 8000708:	f002 ff9e 	bl	8003648 <ReadRegisterFromTouchModule>
 800070c:	4603      	mov	r3, r0
 800070e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000710:	2100      	movs	r1, #0
 8000712:	200a      	movs	r0, #10
 8000714:	f002 ffa6 	bl	8003664 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000718:	200b      	movs	r0, #11
 800071a:	f002 ff95 	bl	8003648 <ReadRegisterFromTouchModule>
 800071e:	4603      	mov	r3, r0
 8000720:	461a      	mov	r2, r3
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <EXTI15_10_IRQHandler+0xfc>)
 8000724:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000726:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <EXTI15_10_IRQHandler+0xfc>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	4619      	mov	r1, r3
 8000734:	200b      	movs	r0, #11
 8000736:	f002 ff95 	bl	8003664 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800073a:	2040      	movs	r0, #64	@ 0x40
 800073c:	f002 ff84 	bl	8003648 <ReadRegisterFromTouchModule>
 8000740:	4603      	mov	r3, r0
 8000742:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000744:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000748:	2b00      	cmp	r3, #0
 800074a:	da01      	bge.n	8000750 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800074c:	2301      	movs	r3, #1
 800074e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d014      	beq.n	8000780 <EXTI15_10_IRQHandler+0xa8>
	{
		printf("\nPressed");
 8000756:	4820      	ldr	r0, [pc, #128]	@ (80007d8 <EXTI15_10_IRQHandler+0x100>)
 8000758:	f007 fb8a 	bl	8007e70 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 800075c:	481f      	ldr	r0, [pc, #124]	@ (80007dc <EXTI15_10_IRQHandler+0x104>)
 800075e:	f002 ff68 	bl	8003632 <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <EXTI15_10_IRQHandler+0x104>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <EXTI15_10_IRQHandler+0x104>)
 800076a:	885b      	ldrh	r3, [r3, #2]
 800076c:	461a      	mov	r2, r3
 800076e:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <EXTI15_10_IRQHandler+0x108>)
 8000770:	f007 fb7e 	bl	8007e70 <iprintf>
		LCD_Clear(0, LCD_COLOR_RED);
 8000774:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8000778:	2000      	movs	r0, #0
 800077a:	f000 faf7 	bl	8000d6c <LCD_Clear>
 800077e:	e007      	b.n	8000790 <EXTI15_10_IRQHandler+0xb8>

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 8000780:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <EXTI15_10_IRQHandler+0x10c>)
 8000782:	f007 fbdd 	bl	8007f40 <puts>
		LCD_Clear(0, LCD_COLOR_GREEN);
 8000786:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 800078a:	2000      	movs	r0, #0
 800078c:	f000 faee 	bl	8000d6c <LCD_Clear>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 8000790:	2101      	movs	r1, #1
 8000792:	204b      	movs	r0, #75	@ 0x4b
 8000794:	f003 fdfa 	bl	800438c <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 8000798:	2100      	movs	r1, #0
 800079a:	204b      	movs	r0, #75	@ 0x4b
 800079c:	f003 fdf6 	bl	800438c <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	4619      	mov	r1, r3
 80007a4:	200a      	movs	r0, #10
 80007a6:	f002 ff5d 	bl	8003664 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80007aa:	2103      	movs	r1, #3
 80007ac:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <EXTI15_10_IRQHandler+0x110>)
 80007ae:	f004 fb5b 	bl	8004e68 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80007b2:	2028      	movs	r0, #40	@ 0x28
 80007b4:	f004 fb49 	bl	8004e4a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b8:	2028      	movs	r0, #40	@ 0x28
 80007ba:	f004 fb1e 	bl	8004dfa <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80007be:	797b      	ldrb	r3, [r7, #5]
 80007c0:	4619      	mov	r1, r3
 80007c2:	200b      	movs	r0, #11
 80007c4:	f002 ff4e 	bl	8003664 <WriteDataToTouchModule>

}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000ac 	.word	0x200000ac
 80007d4:	200000a8 	.word	0x200000a8
 80007d8:	08008c30 	.word	0x08008c30
 80007dc:	20000098 	.word	0x20000098
 80007e0:	08008c3c 	.word	0x08008c3c
 80007e4:	08008c50 	.word	0x08008c50
 80007e8:	200000a0 	.word	0x200000a0

080007ec <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	@ 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000960 <LCD_GPIO_Init+0x174>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	4a59      	ldr	r2, [pc, #356]	@ (8000960 <LCD_GPIO_Init+0x174>)
 80007fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000800:	6453      	str	r3, [r2, #68]	@ 0x44
 8000802:	4b57      	ldr	r3, [pc, #348]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b53      	ldr	r3, [pc, #332]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a52      	ldr	r2, [pc, #328]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b50      	ldr	r3, [pc, #320]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b4c      	ldr	r3, [pc, #304]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a4b      	ldr	r2, [pc, #300]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b49      	ldr	r3, [pc, #292]	@ (8000960 <LCD_GPIO_Init+0x174>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b45      	ldr	r3, [pc, #276]	@ (8000960 <LCD_GPIO_Init+0x174>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a44      	ldr	r2, [pc, #272]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b42      	ldr	r3, [pc, #264]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b3e      	ldr	r3, [pc, #248]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a3d      	ldr	r2, [pc, #244]	@ (8000960 <LCD_GPIO_Init+0x174>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b3b      	ldr	r3, [pc, #236]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b37      	ldr	r3, [pc, #220]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a36      	ldr	r2, [pc, #216]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <LCD_GPIO_Init+0x174>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0320 	and.w	r3, r3, #32
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b30      	ldr	r3, [pc, #192]	@ (8000960 <LCD_GPIO_Init+0x174>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000960 <LCD_GPIO_Init+0x174>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <LCD_GPIO_Init+0x174>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80008b6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80008ba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80008c4:	2302      	movs	r3, #2
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80008c8:	230e      	movs	r3, #14
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4824      	ldr	r0, [pc, #144]	@ (8000964 <LCD_GPIO_Init+0x178>)
 80008d4:	f004 fae0 	bl	8004e98 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80008d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80008dc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4820      	ldr	r0, [pc, #128]	@ (8000968 <LCD_GPIO_Init+0x17c>)
 80008e6:	f004 fad7 	bl	8004e98 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80008ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	481d      	ldr	r0, [pc, #116]	@ (800096c <LCD_GPIO_Init+0x180>)
 80008f8:	f004 face 	bl	8004e98 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80008fc:	2348      	movs	r3, #72	@ 0x48
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481a      	ldr	r0, [pc, #104]	@ (8000970 <LCD_GPIO_Init+0x184>)
 8000908:	f004 fac6 	bl	8004e98 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <LCD_GPIO_Init+0x188>)
 800091a:	f004 fabd 	bl	8004e98 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800091e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000922:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4813      	ldr	r0, [pc, #76]	@ (8000978 <LCD_GPIO_Init+0x18c>)
 800092c:	f004 fab4 	bl	8004e98 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000930:	2303      	movs	r3, #3
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000934:	2309      	movs	r3, #9
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	480a      	ldr	r0, [pc, #40]	@ (8000968 <LCD_GPIO_Init+0x17c>)
 8000940:	f004 faaa 	bl	8004e98 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <LCD_GPIO_Init+0x18c>)
 8000952:	f004 faa1 	bl	8004e98 <HAL_GPIO_Init>
}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	@ 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	40020400 	.word	0x40020400
 800096c:	40020800 	.word	0x40020800
 8000970:	40020c00 	.word	0x40020c00
 8000974:	40021400 	.word	0x40021400
 8000978:	40021800 	.word	0x40021800

0800097c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b090      	sub	sp, #64	@ 0x40
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800098a:	23f0      	movs	r3, #240	@ 0xf0
 800098c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000992:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000996:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800099c:	23ff      	movs	r3, #255	@ 0xff
 800099e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009aa:	2305      	movs	r3, #5
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <LTCD_Layer_Init+0x78>)
 80009b6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80009b8:	23f0      	movs	r3, #240	@ 0xf0
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80009bc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <LTCD_Layer_Init+0x7c>)
 80009de:	f005 fe21 	bl	8006624 <HAL_LTDC_ConfigLayer>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80009e8:	f002 fe12 	bl	8003610 <LCD_Error_Handler>
	}
}
 80009ec:	bf00      	nop
 80009ee:	3740      	adds	r7, #64	@ 0x40
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000644 	.word	0x20000644
 80009f8:	200000b0 	.word	0x200000b0

080009fc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	@ (8000aac <LTCD__Init+0xb0>)
 8000a02:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab0 <LTCD__Init+0xb4>)
 8000a04:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <LTCD__Init+0xb0>)
 8000a08:	2209      	movs	r2, #9
 8000a0a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000a0c:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <LTCD__Init+0xb0>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <LTCD__Init+0xb0>)
 8000a14:	221d      	movs	r2, #29
 8000a16:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000a18:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <LTCD__Init+0xb0>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000a1e:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <LTCD__Init+0xb0>)
 8000a20:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a24:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000a26:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <LTCD__Init+0xb0>)
 8000a28:	f240 1243 	movw	r2, #323	@ 0x143
 8000a2c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <LTCD__Init+0xb0>)
 8000a30:	f240 1217 	movw	r2, #279	@ 0x117
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <LTCD__Init+0xb0>)
 8000a38:	f240 1247 	movw	r2, #327	@ 0x147
 8000a3c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <LTCD__Init+0xb0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <LTCD__Init+0xb0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <LTCD__Init+0xb0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <LTCD__Init+0xb8>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <LTCD__Init+0xb8>)
 8000a5e:	22c0      	movs	r2, #192	@ 0xc0
 8000a60:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <LTCD__Init+0xb8>)
 8000a64:	2204      	movs	r2, #4
 8000a66:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <LTCD__Init+0xb8>)
 8000a6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a6e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a70:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <LTCD__Init+0xb8>)
 8000a72:	f006 fc31 	bl	80072d8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <LTCD__Init+0xb0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <LTCD__Init+0xb0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <LTCD__Init+0xb0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <LTCD__Init+0xb0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000a8e:	f7ff fead 	bl	80007ec <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a92:	4806      	ldr	r0, [pc, #24]	@ (8000aac <LTCD__Init+0xb0>)
 8000a94:	f005 fcf6 	bl	8006484 <HAL_LTDC_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a9e:	f002 fdb7 	bl	8003610 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000aa2:	f002 fe11 	bl	80036c8 <ili9341_Init>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000b0 	.word	0x200000b0
 8000ab0:	40016800 	.word	0x40016800
 8000ab4:	20000158 	.word	0x20000158

08000ab8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000aca:	88ba      	ldrh	r2, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4905      	ldr	r1, [pc, #20]	@ (8000af0 <LCD_Draw_Pixel+0x38>)
 8000adc:	887a      	ldrh	r2, [r7, #2]
 8000ade:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000644 	.word	0x20000644

08000af4 <LCD_Draw_Square_Fill_Border>:
        }
    }
}

void LCD_Draw_Square_Fill_Border(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	460b      	mov	r3, r1
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	807b      	strh	r3, [r7, #2]
	uint16_t x = Xpos*blockSize;
 8000b06:	4b34      	ldr	r3, [pc, #208]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	88fa      	ldrh	r2, [r7, #6]
 8000b0e:	fb12 f303 	smulbb	r3, r2, r3
 8000b12:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000b14:	4b30      	ldr	r3, [pc, #192]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	88ba      	ldrh	r2, [r7, #4]
 8000b1c:	fb12 f303 	smulbb	r3, r2, r3
 8000b20:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000b22:	2301      	movs	r3, #1
 8000b24:	81fb      	strh	r3, [r7, #14]
 8000b26:	e04c      	b.n	8000bc2 <LCD_Draw_Square_Fill_Border+0xce>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000b28:	2301      	movs	r3, #1
 8000b2a:	81bb      	strh	r3, [r7, #12]
 8000b2c:	e03d      	b.n	8000baa <LCD_Draw_Square_Fill_Border+0xb6>
	        {
	            LCD_Draw_Pixel(i+x, j+y, color);
 8000b2e:	89fa      	ldrh	r2, [r7, #14]
 8000b30:	897b      	ldrh	r3, [r7, #10]
 8000b32:	4413      	add	r3, r2
 8000b34:	b298      	uxth	r0, r3
 8000b36:	89ba      	ldrh	r2, [r7, #12]
 8000b38:	893b      	ldrh	r3, [r7, #8]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff ffb9 	bl	8000ab8 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000b46:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	8939      	ldrh	r1, [r7, #8]
 8000b4e:	8978      	ldrh	r0, [r7, #10]
 8000b50:	2300      	movs	r3, #0
 8000b52:	f000 f8bd 	bl	8000cd0 <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,LCD_COLOR_BLACK);
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	897b      	ldrh	r3, [r7, #10]
 8000b5e:	4413      	add	r3, r2
 8000b60:	b298      	uxth	r0, r3
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	8939      	ldrh	r1, [r7, #8]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f000 f8ae 	bl	8000cd0 <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	8939      	ldrh	r1, [r7, #8]
 8000b7c:	8978      	ldrh	r0, [r7, #10]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f000 f8cd 	bl	8000d1e <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,LCD_COLOR_BLACK);
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	893b      	ldrh	r3, [r7, #8]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b299      	uxth	r1, r3
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	8978      	ldrh	r0, [r7, #10]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f000 f8c0 	bl	8000d1e <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000b9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
 8000baa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	ddbb      	ble.n	8000b2e <LCD_Draw_Square_Fill_Border+0x3a>
	for(int16_t i=1; i<=blockSize; i++)
 8000bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	81fb      	strh	r3, [r7, #14]
 8000bc2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <LCD_Draw_Square_Fill_Border+0xe4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	ddac      	ble.n	8000b28 <LCD_Draw_Square_Fill_Border+0x34>
	        }
	    }
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000004 	.word	0x20000004

08000bdc <LCD_Erase_Square>:

void LCD_Erase_Square(uint16_t Xpos, uint16_t Ypos)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	80fb      	strh	r3, [r7, #6]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80bb      	strh	r3, [r7, #4]
	uint16_t x = Xpos*blockSize;
 8000bec:	4b36      	ldr	r3, [pc, #216]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	fb12 f303 	smulbb	r3, r2, r3
 8000bf8:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000bfa:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	fb12 f303 	smulbb	r3, r2, r3
 8000c06:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000c08:	2301      	movs	r3, #1
 8000c0a:	81fb      	strh	r3, [r7, #14]
 8000c0c:	e051      	b.n	8000cb2 <LCD_Erase_Square+0xd6>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000c0e:	2301      	movs	r3, #1
 8000c10:	81bb      	strh	r3, [r7, #12]
 8000c12:	e042      	b.n	8000c9a <LCD_Erase_Square+0xbe>
	        {
	            LCD_Draw_Pixel(i+x, j+y, GameScreenColor);
 8000c14:	89fa      	ldrh	r2, [r7, #14]
 8000c16:	897b      	ldrh	r3, [r7, #10]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	89ba      	ldrh	r2, [r7, #12]
 8000c1e:	893b      	ldrh	r3, [r7, #8]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4a29      	ldr	r2, [pc, #164]	@ (8000ccc <LCD_Erase_Square+0xf0>)
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f7ff ff45 	bl	8000ab8 <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 8000c2e:	4b26      	ldr	r3, [pc, #152]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <LCD_Erase_Square+0xf0>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	8939      	ldrh	r1, [r7, #8]
 8000c3a:	8978      	ldrh	r0, [r7, #10]
 8000c3c:	f000 f848 	bl	8000cd0 <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 8000c40:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	897b      	ldrh	r3, [r7, #10]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b298      	uxth	r0, r3
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	3301      	adds	r3, #1
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <LCD_Erase_Square+0xf0>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	8939      	ldrh	r1, [r7, #8]
 8000c5c:	f000 f838 	bl	8000cd0 <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 8000c60:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <LCD_Erase_Square+0xf0>)
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	8939      	ldrh	r1, [r7, #8]
 8000c6c:	8978      	ldrh	r0, [r7, #10]
 8000c6e:	f000 f856 	bl	8000d1e <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b299      	uxth	r1, r3
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <LCD_Erase_Square+0xf0>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	8978      	ldrh	r0, [r7, #10]
 8000c8a:	f000 f848 	bl	8000d1e <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000c8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	81bb      	strh	r3, [r7, #12]
 8000c9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	ddb6      	ble.n	8000c14 <LCD_Erase_Square+0x38>
	for(int16_t i=1; i<=blockSize; i++)
 8000ca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3301      	adds	r3, #1
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	81fb      	strh	r3, [r7, #14]
 8000cb2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <LCD_Erase_Square+0xec>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dda7      	ble.n	8000c0e <LCD_Erase_Square+0x32>
	        }
	    }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000002 	.word	0x20000002

08000cd0 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4623      	mov	r3, r4
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80bb      	strh	r3, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	807b      	strh	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	81fb      	strh	r3, [r7, #14]
 8000cf2:	e00b      	b.n	8000d0c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000cf4:	89fa      	ldrh	r2, [r7, #14]
 8000cf6:	88bb      	ldrh	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	b299      	uxth	r1, r3
 8000cfc:	883a      	ldrh	r2, [r7, #0]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fed9 	bl	8000ab8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d06:	89fb      	ldrh	r3, [r7, #14]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	81fb      	strh	r3, [r7, #14]
 8000d0c:	89fa      	ldrh	r2, [r7, #14]
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3ef      	bcc.n	8000cf4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}

08000d1e <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000d1e:	b590      	push	{r4, r7, lr}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4604      	mov	r4, r0
 8000d26:	4608      	mov	r0, r1
 8000d28:	4611      	mov	r1, r2
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4623      	mov	r3, r4
 8000d2e:	80fb      	strh	r3, [r7, #6]
 8000d30:	4603      	mov	r3, r0
 8000d32:	80bb      	strh	r3, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	81fb      	strh	r3, [r7, #14]
 8000d40:	e00b      	b.n	8000d5a <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000d42:	89fa      	ldrh	r2, [r7, #14]
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	4413      	add	r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	883a      	ldrh	r2, [r7, #0]
 8000d4c:	88b9      	ldrh	r1, [r7, #4]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff feb2 	bl	8000ab8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000d54:	89fb      	ldrh	r3, [r7, #14]
 8000d56:	3301      	adds	r3, #1
 8000d58:	81fb      	strh	r3, [r7, #14]
 8000d5a:	89fa      	ldrh	r2, [r7, #14]
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3ef      	bcc.n	8000d42 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10e      	bne.n	8000da0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	e007      	b.n	8000d98 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000d88:	4908      	ldr	r1, [pc, #32]	@ (8000dac <LCD_Clear+0x40>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000d9e:	d3f3      	bcc.n	8000d88 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20000644 	.word	0x20000644

08000db0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000dba:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <LCD_SetTextColor+0x1c>)
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	8013      	strh	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20000000 	.word	0x20000000

08000dd0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <LCD_SetFont+0x1c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000188 	.word	0x20000188

08000df0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	603a      	str	r2, [r7, #0]
 8000dfa:	80fb      	strh	r3, [r7, #6]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e04c      	b.n	8000ea8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	e03f      	b.n	8000e94 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <LCD_Draw_Char+0xd0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	889b      	ldrh	r3, [r3, #4]
 8000e26:	4a27      	ldr	r2, [pc, #156]	@ (8000ec4 <LCD_Draw_Char+0xd4>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	2280      	movs	r2, #128	@ 0x80
 8000e34:	409a      	lsls	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	fa42 f303 	asr.w	r3, r2, r3
 8000e3c:	400b      	ands	r3, r1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d104      	bne.n	8000e4c <LCD_Draw_Char+0x5c>
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <LCD_Draw_Char+0xd0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	889b      	ldrh	r3, [r3, #4]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d920      	bls.n	8000e8e <LCD_Draw_Char+0x9e>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	fa42 f303 	asr.w	r3, r2, r3
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d104      	bne.n	8000e70 <LCD_Draw_Char+0x80>
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <LCD_Draw_Char+0xd0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	889b      	ldrh	r3, [r3, #4]
 8000e6c:	2b0c      	cmp	r3, #12
 8000e6e:	d80e      	bhi.n	8000e8e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4413      	add	r3, r2
 8000e78:	b298      	uxth	r0, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <LCD_Draw_Char+0xd8>)
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fe15 	bl	8000ab8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	3301      	adds	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <LCD_Draw_Char+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	889b      	ldrh	r3, [r3, #4]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d3b8      	bcc.n	8000e14 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <LCD_Draw_Char+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	88db      	ldrh	r3, [r3, #6]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d3ab      	bcc.n	8000e0e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000188 	.word	0x20000188
 8000ec4:	aaaaaaab 	.word	0xaaaaaaab
 8000ec8:	20000000 	.word	0x20000000

08000ecc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	80bb      	strh	r3, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	3b20      	subs	r3, #32
 8000ee2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <LCD_DisplayChar+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	78fb      	ldrb	r3, [r7, #3]
 8000eec:	4907      	ldr	r1, [pc, #28]	@ (8000f0c <LCD_DisplayChar+0x40>)
 8000eee:	6809      	ldr	r1, [r1, #0]
 8000ef0:	88c9      	ldrh	r1, [r1, #6]
 8000ef2:	fb01 f303 	mul.w	r3, r1, r3
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	441a      	add	r2, r3
 8000efa:	88b9      	ldrh	r1, [r7, #4]
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff76 	bl	8000df0 <LCD_Draw_Char>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000188 	.word	0x20000188

08000f10 <GameInit>:
	LCD_DisplayChar(140,160,'d');
//	blockOne();
}

void GameInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	uint16_t x;
	uint16_t y;
	uint16_t size = 10;
 8000f16:	230a      	movs	r3, #10
 8000f18:	80fb      	strh	r3, [r7, #6]

	LCD_Clear(0,GameScreenColor);
 8000f1a:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <GameInit+0x154>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff ff23 	bl	8000d6c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000f26:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000f2a:	f7ff ff41 	bl	8000db0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000f2e:	484e      	ldr	r0, [pc, #312]	@ (8001068 <GameInit+0x158>)
 8000f30:	f7ff ff4e 	bl	8000dd0 <LCD_SetFont>

	LCD_DisplayChar(80,140,'W');
 8000f34:	2257      	movs	r2, #87	@ 0x57
 8000f36:	218c      	movs	r1, #140	@ 0x8c
 8000f38:	2050      	movs	r0, #80	@ 0x50
 8000f3a:	f7ff ffc7 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(94,140,'e');
 8000f3e:	2265      	movs	r2, #101	@ 0x65
 8000f40:	218c      	movs	r1, #140	@ 0x8c
 8000f42:	205e      	movs	r0, #94	@ 0x5e
 8000f44:	f7ff ffc2 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(104,140,'l');
 8000f48:	226c      	movs	r2, #108	@ 0x6c
 8000f4a:	218c      	movs	r1, #140	@ 0x8c
 8000f4c:	2068      	movs	r0, #104	@ 0x68
 8000f4e:	f7ff ffbd 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(112,140,'c');
 8000f52:	2263      	movs	r2, #99	@ 0x63
 8000f54:	218c      	movs	r1, #140	@ 0x8c
 8000f56:	2070      	movs	r0, #112	@ 0x70
 8000f58:	f7ff ffb8 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(124,140,'o');
 8000f5c:	226f      	movs	r2, #111	@ 0x6f
 8000f5e:	218c      	movs	r1, #140	@ 0x8c
 8000f60:	207c      	movs	r0, #124	@ 0x7c
 8000f62:	f7ff ffb3 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'m');
 8000f66:	226d      	movs	r2, #109	@ 0x6d
 8000f68:	218c      	movs	r1, #140	@ 0x8c
 8000f6a:	208c      	movs	r0, #140	@ 0x8c
 8000f6c:	f7ff ffae 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'e');
 8000f70:	2265      	movs	r2, #101	@ 0x65
 8000f72:	218c      	movs	r1, #140	@ 0x8c
 8000f74:	209b      	movs	r0, #155	@ 0x9b
 8000f76:	f7ff ffa9 	bl	8000ecc <LCD_DisplayChar>

	LCD_DisplayChar(110,165,'t');
 8000f7a:	2274      	movs	r2, #116	@ 0x74
 8000f7c:	21a5      	movs	r1, #165	@ 0xa5
 8000f7e:	206e      	movs	r0, #110	@ 0x6e
 8000f80:	f7ff ffa4 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(120,165,'o');
 8000f84:	226f      	movs	r2, #111	@ 0x6f
 8000f86:	21a5      	movs	r1, #165	@ 0xa5
 8000f88:	2078      	movs	r0, #120	@ 0x78
 8000f8a:	f7ff ff9f 	bl	8000ecc <LCD_DisplayChar>

	LCD_DisplayChar(95,190,'T');
 8000f8e:	2254      	movs	r2, #84	@ 0x54
 8000f90:	21be      	movs	r1, #190	@ 0xbe
 8000f92:	205f      	movs	r0, #95	@ 0x5f
 8000f94:	f7ff ff9a 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(105,190,'e');
 8000f98:	2265      	movs	r2, #101	@ 0x65
 8000f9a:	21be      	movs	r1, #190	@ 0xbe
 8000f9c:	2069      	movs	r0, #105	@ 0x69
 8000f9e:	f7ff ff95 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(115,190,'t');
 8000fa2:	2274      	movs	r2, #116	@ 0x74
 8000fa4:	21be      	movs	r1, #190	@ 0xbe
 8000fa6:	2073      	movs	r0, #115	@ 0x73
 8000fa8:	f7ff ff90 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(125,190,'r');
 8000fac:	2272      	movs	r2, #114	@ 0x72
 8000fae:	21be      	movs	r1, #190	@ 0xbe
 8000fb0:	207d      	movs	r0, #125	@ 0x7d
 8000fb2:	f7ff ff8b 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(132,190,'i');
 8000fb6:	2269      	movs	r2, #105	@ 0x69
 8000fb8:	21be      	movs	r1, #190	@ 0xbe
 8000fba:	2084      	movs	r0, #132	@ 0x84
 8000fbc:	f7ff ff86 	bl	8000ecc <LCD_DisplayChar>
	LCD_DisplayChar(139,190,'s');
 8000fc0:	2273      	movs	r2, #115	@ 0x73
 8000fc2:	21be      	movs	r1, #190	@ 0xbe
 8000fc4:	208b      	movs	r0, #139	@ 0x8b
 8000fc6:	f7ff ff81 	bl	8000ecc <LCD_DisplayChar>

	blockSize = 10;
 8000fca:	4b28      	ldr	r3, [pc, #160]	@ (800106c <GameInit+0x15c>)
 8000fcc:	220a      	movs	r2, #10
 8000fce:	601a      	str	r2, [r3, #0]
	drawBlockOne(4.5,2.5,1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	2004      	movs	r0, #4
 8000fd6:	f000 f8ef 	bl	80011b8 <drawBlockOne>
//	blockOneH(45,25,10,LCD_COLOR_CYAN);
	drawBlockTwo(9.5,2.5,1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2102      	movs	r1, #2
 8000fde:	2009      	movs	r0, #9
 8000fe0:	f000 f9d2 	bl	8001388 <drawBlockTwo>
//	blockTwo(95,25,10,LCD_COLOR_BLUE);
	drawBlockThree(13.5,2.5,1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	200d      	movs	r0, #13
 8000fea:	f000 fc6d 	bl	80018c8 <drawBlockThree>
//	blockThree(135,25,10,LCD_COLOR_ORANGE);
	drawBlockFour(17.5,2.5,1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	2011      	movs	r0, #17
 8000ff4:	f000 ff18 	bl	8001e28 <drawBlockFour>
//	blockFour(175,25,10,LCD_COLOR_YELLOW);
	drawBlockFive(6.5,5.5,1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2105      	movs	r1, #5
 8000ffc:	2006      	movs	r0, #6
 8000ffe:	f000 ffcf 	bl	8001fa0 <drawBlockFive>
//	blockFive(65,55,10,LCD_COLOR_GREEN);
	drawBlockSix(11.5,5.5,1);
 8001002:	2201      	movs	r2, #1
 8001004:	2105      	movs	r1, #5
 8001006:	200b      	movs	r0, #11
 8001008:	f001 f942 	bl	8002290 <drawBlockSix>
//	blockSix(105,55,10,LCD_COLOR_MAGENTA);
	drawBlockSeven(15.5,5.5,1);
 800100c:	2201      	movs	r2, #1
 800100e:	2105      	movs	r1, #5
 8001010:	200f      	movs	r0, #15
 8001012:	f001 fbd1 	bl	80027b8 <drawBlockSeven>
//	blockSeven(155,55,10,LCD_COLOR_RED);
	screenReset();
 8001016:	f000 f82b 	bl	8001070 <screenReset>
	HAL_Delay(1000);
 800101a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800101e:	f003 fd8f 	bl	8004b40 <HAL_Delay>

	blockSize = 20;
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <GameInit+0x15c>)
 8001024:	2214      	movs	r2, #20
 8001026:	601a      	str	r2, [r3, #0]
	LCD_Clear(0,GameScreenColor);
 8001028:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <GameInit+0x154>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fe9c 	bl	8000d6c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001034:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001038:	f7ff feba 	bl	8000db0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800103c:	480a      	ldr	r0, [pc, #40]	@ (8001068 <GameInit+0x158>)
 800103e:	f7ff fec7 	bl	8000dd0 <LCD_SetFont>

	drawBottomBorder();
 8001042:	f001 fd31 	bl	8002aa8 <drawBottomBorder>
	updateCurrentBlock(1, 4, 2, 1);
 8001046:	2301      	movs	r3, #1
 8001048:	2202      	movs	r2, #2
 800104a:	2104      	movs	r1, #4
 800104c:	2001      	movs	r0, #1
 800104e:	f001 feb1 	bl	8002db4 <updateCurrentBlock>
	drawCurrentBlock();
 8001052:	f001 fe07 	bl	8002c64 <drawCurrentBlock>
	HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	f003 fd72 	bl	8004b40 <HAL_Delay>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000002 	.word	0x20000002
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <screenReset>:
	updateCurrentBlock(1, 4, 2, 1);
	drawCurrentBlock();
	HAL_Delay(1000);
}

void screenReset(){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 16; i++){
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	e021      	b.n	80010c0 <screenReset+0x50>
		for (uint16_t j = 0; j < 12; j++){
 800107c:	2300      	movs	r3, #0
 800107e:	80bb      	strh	r3, [r7, #4]
 8001080:	e018      	b.n	80010b4 <screenReset+0x44>
			Obj_Color[i][j] = 0;
 8001082:	88fa      	ldrh	r2, [r7, #6]
 8001084:	88b9      	ldrh	r1, [r7, #4]
 8001086:	4813      	ldr	r0, [pc, #76]	@ (80010d4 <screenReset+0x64>)
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	2200      	movs	r2, #0
 8001094:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Screen[i][j] = 0;
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	88b9      	ldrh	r1, [r7, #4]
 800109c:	480e      	ldr	r0, [pc, #56]	@ (80010d8 <screenReset+0x68>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for (uint16_t j = 0; j < 12; j++){
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	3301      	adds	r3, #1
 80010b2:	80bb      	strh	r3, [r7, #4]
 80010b4:	88bb      	ldrh	r3, [r7, #4]
 80010b6:	2b0b      	cmp	r3, #11
 80010b8:	d9e3      	bls.n	8001082 <screenReset+0x12>
	for (uint16_t i = 0; i < 16; i++){
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	3301      	adds	r3, #1
 80010be:	80fb      	strh	r3, [r7, #6]
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	d9da      	bls.n	800107c <screenReset+0xc>
		}
	}
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	2000018c 	.word	0x2000018c
 80010d8:	2000030c 	.word	0x2000030c

080010dc <gameOver>:


void gameOver(){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	while(1){
	LCD_Clear(0,LCD_COLOR_BLACK);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fe42 	bl	8000d6c <LCD_Clear>
	HAL_Delay(200);
 80010e8:	20c8      	movs	r0, #200	@ 0xc8
 80010ea:	f003 fd29 	bl	8004b40 <HAL_Delay>
	LCD_SetTextColor(LCD_COLOR_RED);
 80010ee:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80010f2:	f7ff fe5d 	bl	8000db0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80010f6:	482f      	ldr	r0, [pc, #188]	@ (80011b4 <gameOver+0xd8>)
 80010f8:	f7ff fe6a 	bl	8000dd0 <LCD_SetFont>

	LCD_DisplayChar(95,120,'G');
 80010fc:	2247      	movs	r2, #71	@ 0x47
 80010fe:	2178      	movs	r1, #120	@ 0x78
 8001100:	205f      	movs	r0, #95	@ 0x5f
 8001102:	f7ff fee3 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001106:	20c8      	movs	r0, #200	@ 0xc8
 8001108:	f003 fd1a 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(111,120,'a');
 800110c:	2261      	movs	r2, #97	@ 0x61
 800110e:	2178      	movs	r1, #120	@ 0x78
 8001110:	206f      	movs	r0, #111	@ 0x6f
 8001112:	f7ff fedb 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001116:	20c8      	movs	r0, #200	@ 0xc8
 8001118:	f003 fd12 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(125,120,'m');
 800111c:	226d      	movs	r2, #109	@ 0x6d
 800111e:	2178      	movs	r1, #120	@ 0x78
 8001120:	207d      	movs	r0, #125	@ 0x7d
 8001122:	f7ff fed3 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001126:	20c8      	movs	r0, #200	@ 0xc8
 8001128:	f003 fd0a 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(140,120,'e');
 800112c:	2265      	movs	r2, #101	@ 0x65
 800112e:	2178      	movs	r1, #120	@ 0x78
 8001130:	208c      	movs	r0, #140	@ 0x8c
 8001132:	f7ff fecb 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001136:	20c8      	movs	r0, #200	@ 0xc8
 8001138:	f003 fd02 	bl	8004b40 <HAL_Delay>

	LCD_DisplayChar(92,145,'O');
 800113c:	224f      	movs	r2, #79	@ 0x4f
 800113e:	2191      	movs	r1, #145	@ 0x91
 8001140:	205c      	movs	r0, #92	@ 0x5c
 8001142:	f7ff fec3 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001146:	20c8      	movs	r0, #200	@ 0xc8
 8001148:	f003 fcfa 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(107,145,'v');
 800114c:	2276      	movs	r2, #118	@ 0x76
 800114e:	2191      	movs	r1, #145	@ 0x91
 8001150:	206b      	movs	r0, #107	@ 0x6b
 8001152:	f7ff febb 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001156:	20c8      	movs	r0, #200	@ 0xc8
 8001158:	f003 fcf2 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(118,145,'e');
 800115c:	2265      	movs	r2, #101	@ 0x65
 800115e:	2191      	movs	r1, #145	@ 0x91
 8001160:	2076      	movs	r0, #118	@ 0x76
 8001162:	f7ff feb3 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001166:	20c8      	movs	r0, #200	@ 0xc8
 8001168:	f003 fcea 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(129,145,'r');
 800116c:	2272      	movs	r2, #114	@ 0x72
 800116e:	2191      	movs	r1, #145	@ 0x91
 8001170:	2081      	movs	r0, #129	@ 0x81
 8001172:	f7ff feab 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001176:	20c8      	movs	r0, #200	@ 0xc8
 8001178:	f003 fce2 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(135,145,'!');
 800117c:	2221      	movs	r2, #33	@ 0x21
 800117e:	2191      	movs	r1, #145	@ 0x91
 8001180:	2087      	movs	r0, #135	@ 0x87
 8001182:	f7ff fea3 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001186:	20c8      	movs	r0, #200	@ 0xc8
 8001188:	f003 fcda 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(140,145,'!');
 800118c:	2221      	movs	r2, #33	@ 0x21
 800118e:	2191      	movs	r1, #145	@ 0x91
 8001190:	208c      	movs	r0, #140	@ 0x8c
 8001192:	f7ff fe9b 	bl	8000ecc <LCD_DisplayChar>
	HAL_Delay(200);
 8001196:	20c8      	movs	r0, #200	@ 0xc8
 8001198:	f003 fcd2 	bl	8004b40 <HAL_Delay>
	LCD_DisplayChar(145,145,'!');
 800119c:	2221      	movs	r2, #33	@ 0x21
 800119e:	2191      	movs	r1, #145	@ 0x91
 80011a0:	2091      	movs	r0, #145	@ 0x91
 80011a2:	f7ff fe93 	bl	8000ecc <LCD_DisplayChar>


	HAL_Delay(1000);
 80011a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011aa:	f003 fcc9 	bl	8004b40 <HAL_Delay>
	LCD_Clear(0,LCD_COLOR_BLACK);
 80011ae:	bf00      	nop
 80011b0:	e796      	b.n	80010e0 <gameOver+0x4>
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008

080011b8 <drawBlockOne>:
	}
}

void drawBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	460b      	mov	r3, r1
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d002      	beq.n	80011d6 <drawBlockOne+0x1e>
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d129      	bne.n	800122a <drawBlockOne+0x72>
		for (int i = Xpos; i < (Xpos+4); i++){
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e021      	b.n	8001220 <drawBlockOne+0x68>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_CYAN);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	88b9      	ldrh	r1, [r7, #4]
 80011e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fc84 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	492b      	ldr	r1, [pc, #172]	@ (800129c <drawBlockOne+0xe4>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	2201      	movs	r2, #1
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_CYAN;
 8001202:	88ba      	ldrh	r2, [r7, #4]
 8001204:	4926      	ldr	r1, [pc, #152]	@ (80012a0 <drawBlockOne+0xe8>)
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001216:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	3303      	adds	r3, #3
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	429a      	cmp	r2, r3
 8001228:	ddd8      	ble.n	80011dc <drawBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d002      	beq.n	8001236 <drawBlockOne+0x7e>
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d12e      	bne.n	8001294 <drawBlockOne+0xdc>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	e025      	b.n	800128a <drawBlockOne+0xd2>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_CYAN);
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	3301      	adds	r3, #1
 8001242:	b29b      	uxth	r3, r3
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	b291      	uxth	r1, r2
 8001248:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fc51 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	1c59      	adds	r1, r3, #1
 8001256:	4811      	ldr	r0, [pc, #68]	@ (800129c <drawBlockOne+0xe4>)
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	2201      	movs	r2, #1
 8001266:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_CYAN;
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	1c59      	adds	r1, r3, #1
 800126e:	480c      	ldr	r0, [pc, #48]	@ (80012a0 <drawBlockOne+0xe8>)
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001280:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	3301      	adds	r3, #1
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	3302      	adds	r3, #2
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	429a      	cmp	r2, r3
 8001292:	ddd4      	ble.n	800123e <drawBlockOne+0x86>
		}
	}
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000030c 	.word	0x2000030c
 80012a0:	2000018c 	.word	0x2000018c

080012a4 <eraseBlockOne>:

void eraseBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	460b      	mov	r3, r1
 80012b0:	80bb      	strh	r3, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d002      	beq.n	80012c2 <eraseBlockOne+0x1e>
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d127      	bne.n	8001312 <eraseBlockOne+0x6e>
		for (int i = Xpos; i < (Xpos+4); i++){
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e01f      	b.n	8001308 <eraseBlockOne+0x64>
			LCD_Erase_Square(i, Ypos);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	88ba      	ldrh	r2, [r7, #4]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fc83 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80012d6:	88ba      	ldrh	r2, [r7, #4]
 80012d8:	4929      	ldr	r1, [pc, #164]	@ (8001380 <eraseBlockOne+0xdc>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	2200      	movs	r2, #0
 80012e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 80012ec:	88ba      	ldrh	r2, [r7, #4]
 80012ee:	4925      	ldr	r1, [pc, #148]	@ (8001384 <eraseBlockOne+0xe0>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	2200      	movs	r2, #0
 80012fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	3303      	adds	r3, #3
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	429a      	cmp	r2, r3
 8001310:	ddda      	ble.n	80012c8 <eraseBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d002      	beq.n	800131e <eraseBlockOne+0x7a>
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	2b04      	cmp	r3, #4
 800131c:	d12c      	bne.n	8001378 <eraseBlockOne+0xd4>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	3b01      	subs	r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	e023      	b.n	800136e <eraseBlockOne+0xca>
			LCD_Erase_Square(Xpos+1, i);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	3301      	adds	r3, #1
 800132a:	b29b      	uxth	r3, r3
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	b292      	uxth	r2, r2
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fc52 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	1c59      	adds	r1, r3, #1
 800133c:	4810      	ldr	r0, [pc, #64]	@ (8001380 <eraseBlockOne+0xdc>)
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	2200      	movs	r2, #0
 800134c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = 0;
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	1c59      	adds	r1, r3, #1
 8001354:	480b      	ldr	r0, [pc, #44]	@ (8001384 <eraseBlockOne+0xe0>)
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	2200      	movs	r2, #0
 8001364:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3301      	adds	r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	3302      	adds	r3, #2
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	429a      	cmp	r2, r3
 8001376:	ddd6      	ble.n	8001326 <eraseBlockOne+0x82>
		}
	}
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000030c 	.word	0x2000030c
 8001384:	2000018c 	.word	0x2000018c

08001388 <drawBlockTwo>:

void drawBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	80fb      	strh	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d147      	bne.n	8001430 <drawBlockTwo+0xa8>
		for (int i = Xpos; i < (Xpos+3); i++){
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	e01f      	b.n	80013e6 <drawBlockTwo+0x5e>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	88b9      	ldrh	r1, [r7, #4]
 80013ac:	221f      	movs	r2, #31
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fba0 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80013b4:	88ba      	ldrh	r2, [r7, #4]
 80013b6:	499a      	ldr	r1, [pc, #616]	@ (8001620 <drawBlockTwo+0x298>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	2201      	movs	r2, #1
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_BLUE;
 80013ca:	88ba      	ldrh	r2, [r7, #4]
 80013cc:	4995      	ldr	r1, [pc, #596]	@ (8001624 <drawBlockTwo+0x29c>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4413      	add	r3, r2
 80013da:	221f      	movs	r2, #31
 80013dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	3302      	adds	r3, #2
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	ddda      	ble.n	80013a6 <drawBlockTwo+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_BLUE);
 80013f0:	88bb      	ldrh	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b299      	uxth	r1, r3
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	221f      	movs	r2, #31
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fb7a 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	1e5a      	subs	r2, r3, #1
 8001404:	88f9      	ldrh	r1, [r7, #6]
 8001406:	4886      	ldr	r0, [pc, #536]	@ (8001620 <drawBlockTwo+0x298>)
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	2201      	movs	r2, #1
 8001414:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_BLUE;
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	1e5a      	subs	r2, r3, #1
 800141c:	88f9      	ldrh	r1, [r7, #6]
 800141e:	4881      	ldr	r0, [pc, #516]	@ (8001624 <drawBlockTwo+0x29c>)
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	221f      	movs	r2, #31
 800142c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d150      	bne.n	80014d8 <drawBlockTwo+0x150>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001436:	88bb      	ldrh	r3, [r7, #4]
 8001438:	3b01      	subs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	e023      	b.n	8001486 <drawBlockTwo+0xfe>
				LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	3301      	adds	r3, #1
 8001442:	b29b      	uxth	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	b291      	uxth	r1, r2
 8001448:	221f      	movs	r2, #31
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fb52 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[i][Xpos+1] = 1;
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	1c59      	adds	r1, r3, #1
 8001454:	4872      	ldr	r0, [pc, #456]	@ (8001620 <drawBlockTwo+0x298>)
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	2201      	movs	r2, #1
 8001464:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos+1] = LCD_COLOR_BLUE;
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	1c59      	adds	r1, r3, #1
 800146c:	486d      	ldr	r0, [pc, #436]	@ (8001624 <drawBlockTwo+0x29c>)
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	221f      	movs	r2, #31
 800147c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	3301      	adds	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	3301      	adds	r3, #1
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	429a      	cmp	r2, r3
 800148e:	ddd6      	ble.n	800143e <drawBlockTwo+0xb6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_BLUE);
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	3302      	adds	r3, #2
 8001494:	b298      	uxth	r0, r3
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	3b01      	subs	r3, #1
 800149a:	b29b      	uxth	r3, r3
 800149c:	221f      	movs	r2, #31
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb28 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][Xpos+2] = 1;
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	1c99      	adds	r1, r3, #2
 80014ac:	485c      	ldr	r0, [pc, #368]	@ (8001620 <drawBlockTwo+0x298>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	2201      	movs	r2, #1
 80014ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][Xpos+2] = LCD_COLOR_BLUE;
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	1c99      	adds	r1, r3, #2
 80014c6:	4857      	ldr	r0, [pc, #348]	@ (8001624 <drawBlockTwo+0x29c>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	221f      	movs	r2, #31
 80014d4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d14b      	bne.n	8001576 <drawBlockTwo+0x1ee>
		for (int i = Xpos; i < (Xpos+3); i++){
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e01f      	b.n	8001524 <drawBlockTwo+0x19c>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	88b9      	ldrh	r1, [r7, #4]
 80014ea:	221f      	movs	r2, #31
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb01 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	494a      	ldr	r1, [pc, #296]	@ (8001620 <drawBlockTwo+0x298>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	2201      	movs	r2, #1
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_BLUE;
 8001508:	88ba      	ldrh	r2, [r7, #4]
 800150a:	4946      	ldr	r1, [pc, #280]	@ (8001624 <drawBlockTwo+0x29c>)
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	221f      	movs	r2, #31
 800151a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	3302      	adds	r3, #2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	429a      	cmp	r2, r3
 800152c:	ddda      	ble.n	80014e4 <drawBlockTwo+0x15c>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_BLUE);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3302      	adds	r3, #2
 8001532:	b298      	uxth	r0, r3
 8001534:	88bb      	ldrh	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	b29b      	uxth	r3, r3
 800153a:	221f      	movs	r2, #31
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fad9 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos+2] = 1;
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	1c99      	adds	r1, r3, #2
 800154a:	4835      	ldr	r0, [pc, #212]	@ (8001620 <drawBlockTwo+0x298>)
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	440b      	add	r3, r1
 8001556:	2201      	movs	r2, #1
 8001558:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+2] = LCD_COLOR_BLUE;
 800155c:	88bb      	ldrh	r3, [r7, #4]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	1c99      	adds	r1, r3, #2
 8001564:	482f      	ldr	r0, [pc, #188]	@ (8001624 <drawBlockTwo+0x29c>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	221f      	movs	r2, #31
 8001572:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d14c      	bne.n	8001616 <drawBlockTwo+0x28e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	e023      	b.n	80015cc <drawBlockTwo+0x244>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	3301      	adds	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	b291      	uxth	r1, r2
 800158e:	221f      	movs	r2, #31
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff faaf 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	4821      	ldr	r0, [pc, #132]	@ (8001620 <drawBlockTwo+0x298>)
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	2201      	movs	r2, #1
 80015aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_BLUE;
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	1c59      	adds	r1, r3, #1
 80015b2:	481c      	ldr	r0, [pc, #112]	@ (8001624 <drawBlockTwo+0x29c>)
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	221f      	movs	r2, #31
 80015c2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	3301      	adds	r3, #1
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	ddd6      	ble.n	8001584 <drawBlockTwo+0x1fc>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_BLUE);
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	b299      	uxth	r1, r3
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	221f      	movs	r2, #31
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fa87 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	88f9      	ldrh	r1, [r7, #6]
 80015ec:	480c      	ldr	r0, [pc, #48]	@ (8001620 <drawBlockTwo+0x298>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	2201      	movs	r2, #1
 80015fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_BLUE;
 80015fe:	88bb      	ldrh	r3, [r7, #4]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	88f9      	ldrh	r1, [r7, #6]
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <drawBlockTwo+0x29c>)
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	221f      	movs	r2, #31
 8001612:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000030c 	.word	0x2000030c
 8001624:	2000018c 	.word	0x2000018c

08001628 <eraseBlockTwo>:

void eraseBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
 8001632:	460b      	mov	r3, r1
 8001634:	80bb      	strh	r3, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d147      	bne.n	80016d0 <eraseBlockTwo+0xa8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e01f      	b.n	8001686 <eraseBlockTwo+0x5e>
			LCD_Erase_Square(i,Ypos);
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	b29b      	uxth	r3, r3
 800164a:	88ba      	ldrh	r2, [r7, #4]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fac4 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	499a      	ldr	r1, [pc, #616]	@ (80018c0 <eraseBlockTwo+0x298>)
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4413      	add	r3, r2
 8001664:	2200      	movs	r2, #0
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 800166a:	88ba      	ldrh	r2, [r7, #4]
 800166c:	4995      	ldr	r1, [pc, #596]	@ (80018c4 <eraseBlockTwo+0x29c>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4413      	add	r3, r2
 800167a:	2200      	movs	r2, #0
 800167c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	3302      	adds	r3, #2
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	429a      	cmp	r2, r3
 800168e:	ddda      	ble.n	8001646 <eraseBlockTwo+0x1e>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	b29a      	uxth	r2, r3
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fa9e 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	88f9      	ldrh	r1, [r7, #6]
 80016a6:	4886      	ldr	r0, [pc, #536]	@ (80018c0 <eraseBlockTwo+0x298>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	2200      	movs	r2, #0
 80016b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = 0;
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	1e5a      	subs	r2, r3, #1
 80016bc:	88f9      	ldrh	r1, [r7, #6]
 80016be:	4881      	ldr	r0, [pc, #516]	@ (80018c4 <eraseBlockTwo+0x29c>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	2200      	movs	r2, #0
 80016cc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d150      	bne.n	8001778 <eraseBlockTwo+0x150>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	3b01      	subs	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	e023      	b.n	8001726 <eraseBlockTwo+0xfe>
				LCD_Erase_Square(Xpos+1,i);
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	b292      	uxth	r2, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fa76 	bl	8000bdc <LCD_Erase_Square>
				LCD_Screen[i][Xpos+1] = 0;
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	1c59      	adds	r1, r3, #1
 80016f4:	4872      	ldr	r0, [pc, #456]	@ (80018c0 <eraseBlockTwo+0x298>)
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	2200      	movs	r2, #0
 8001704:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos+1] = 0;
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	486d      	ldr	r0, [pc, #436]	@ (80018c4 <eraseBlockTwo+0x29c>)
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	2200      	movs	r2, #0
 800171c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	3301      	adds	r3, #1
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	3301      	adds	r3, #1
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	ddd6      	ble.n	80016de <eraseBlockTwo+0xb6>
			}
			LCD_Erase_Square(Xpos+2,Ypos-1);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	3302      	adds	r3, #2
 8001734:	b29a      	uxth	r2, r3
 8001736:	88bb      	ldrh	r3, [r7, #4]
 8001738:	3b01      	subs	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff fa4c 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][Xpos+2] = 0;
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	1c99      	adds	r1, r3, #2
 800174c:	485c      	ldr	r0, [pc, #368]	@ (80018c0 <eraseBlockTwo+0x298>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	2200      	movs	r2, #0
 800175a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][Xpos+2] = 0;
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	1c99      	adds	r1, r3, #2
 8001766:	4857      	ldr	r0, [pc, #348]	@ (80018c4 <eraseBlockTwo+0x29c>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	2200      	movs	r2, #0
 8001774:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d14b      	bne.n	8001816 <eraseBlockTwo+0x1ee>
		for (int i = Xpos; i < (Xpos+3); i++){
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e01f      	b.n	80017c4 <eraseBlockTwo+0x19c>
			LCD_Erase_Square(i,Ypos);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b29b      	uxth	r3, r3
 8001788:	88ba      	ldrh	r2, [r7, #4]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa25 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001792:	88ba      	ldrh	r2, [r7, #4]
 8001794:	494a      	ldr	r1, [pc, #296]	@ (80018c0 <eraseBlockTwo+0x298>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	2200      	movs	r2, #0
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 80017a8:	88ba      	ldrh	r2, [r7, #4]
 80017aa:	4946      	ldr	r1, [pc, #280]	@ (80018c4 <eraseBlockTwo+0x29c>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	2200      	movs	r2, #0
 80017ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	3302      	adds	r3, #2
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	ddda      	ble.n	8001784 <eraseBlockTwo+0x15c>
		}
		LCD_Erase_Square(Xpos+2,Ypos+1);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	3302      	adds	r3, #2
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	4610      	mov	r0, r2
 80017de:	f7ff f9fd 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos+2] = 0;
 80017e2:	88bb      	ldrh	r3, [r7, #4]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1c99      	adds	r1, r3, #2
 80017ea:	4835      	ldr	r0, [pc, #212]	@ (80018c0 <eraseBlockTwo+0x298>)
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	2200      	movs	r2, #0
 80017f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+2] = 0;
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	1c99      	adds	r1, r3, #2
 8001804:	482f      	ldr	r0, [pc, #188]	@ (80018c4 <eraseBlockTwo+0x29c>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	2200      	movs	r2, #0
 8001812:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001816:	887b      	ldrh	r3, [r7, #2]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d14c      	bne.n	80018b6 <eraseBlockTwo+0x28e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	e023      	b.n	800186c <eraseBlockTwo+0x244>
			LCD_Erase_Square(Xpos+1,i);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	3301      	adds	r3, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	b292      	uxth	r2, r2
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f9d3 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	1c59      	adds	r1, r3, #1
 800183a:	4821      	ldr	r0, [pc, #132]	@ (80018c0 <eraseBlockTwo+0x298>)
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	2200      	movs	r2, #0
 800184a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = 0;
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	1c59      	adds	r1, r3, #1
 8001852:	481c      	ldr	r0, [pc, #112]	@ (80018c4 <eraseBlockTwo+0x29c>)
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	4613      	mov	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	2200      	movs	r2, #0
 8001862:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	3301      	adds	r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	ddd6      	ble.n	8001824 <eraseBlockTwo+0x1fc>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	3301      	adds	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f9ab 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	88f9      	ldrh	r1, [r7, #6]
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <eraseBlockTwo+0x298>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	2200      	movs	r2, #0
 800189a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = 0;
 800189e:	88bb      	ldrh	r3, [r7, #4]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	88f9      	ldrh	r1, [r7, #6]
 80018a4:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <eraseBlockTwo+0x29c>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000030c 	.word	0x2000030c
 80018c4:	2000018c 	.word	0x2000018c

080018c8 <drawBlockThree>:

void drawBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	80fb      	strh	r3, [r7, #6]
 80018d2:	460b      	mov	r3, r1
 80018d4:	80bb      	strh	r3, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d14f      	bne.n	8001980 <drawBlockThree+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e021      	b.n	800192a <drawBlockThree+0x62>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	88b9      	ldrh	r1, [r7, #4]
 80018ec:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f8ff 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80018f6:	88ba      	ldrh	r2, [r7, #4]
 80018f8:	49a1      	ldr	r1, [pc, #644]	@ (8001b80 <drawBlockThree+0x2b8>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4413      	add	r3, r2
 8001906:	2201      	movs	r2, #1
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_ORANGE;
 800190c:	88ba      	ldrh	r2, [r7, #4]
 800190e:	499d      	ldr	r1, [pc, #628]	@ (8001b84 <drawBlockThree+0x2bc>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4413      	add	r3, r2
 800191c:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001920:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	3302      	adds	r3, #2
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	429a      	cmp	r2, r3
 8001932:	ddd8      	ble.n	80018e6 <drawBlockThree+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_ORANGE);
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	3302      	adds	r3, #2
 8001938:	b298      	uxth	r0, r3
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	3b01      	subs	r3, #1
 800193e:	b29b      	uxth	r3, r3
 8001940:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f8d5 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos+2] = 1;
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	1c99      	adds	r1, r3, #2
 8001952:	488b      	ldr	r0, [pc, #556]	@ (8001b80 <drawBlockThree+0x2b8>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	2201      	movs	r2, #1
 8001960:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+2] = LCD_COLOR_ORANGE;
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	1e5a      	subs	r2, r3, #1
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	1c99      	adds	r1, r3, #2
 800196c:	4885      	ldr	r0, [pc, #532]	@ (8001b84 <drawBlockThree+0x2bc>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800197c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d154      	bne.n	8001a30 <drawBlockThree+0x168>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001986:	88bb      	ldrh	r3, [r7, #4]
 8001988:	3b01      	subs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	e025      	b.n	80019da <drawBlockThree+0x112>
				LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	3301      	adds	r3, #1
 8001992:	b29b      	uxth	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	b291      	uxth	r1, r2
 8001998:	f64f 7280 	movw	r2, #65408	@ 0xff80
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff f8a9 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[i][Xpos+1] = 1;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	1c59      	adds	r1, r3, #1
 80019a6:	4876      	ldr	r0, [pc, #472]	@ (8001b80 <drawBlockThree+0x2b8>)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	2201      	movs	r2, #1
 80019b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos+1] = LCD_COLOR_ORANGE;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	1c59      	adds	r1, r3, #1
 80019be:	4871      	ldr	r0, [pc, #452]	@ (8001b84 <drawBlockThree+0x2bc>)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80019d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	ddd4      	ble.n	800198e <drawBlockThree+0xc6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_ORANGE);
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	3302      	adds	r3, #2
 80019e8:	b298      	uxth	r0, r3
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f64f 7280 	movw	r2, #65408	@ 0xff80
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f87d 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos+1][Xpos+2] = 1;
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	1c99      	adds	r1, r3, #2
 8001a02:	485f      	ldr	r0, [pc, #380]	@ (8001b80 <drawBlockThree+0x2b8>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos+1][Xpos+2] = LCD_COLOR_ORANGE;
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	1c99      	adds	r1, r3, #2
 8001a1c:	4859      	ldr	r0, [pc, #356]	@ (8001b84 <drawBlockThree+0x2bc>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a2c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d14b      	bne.n	8001ace <drawBlockThree+0x206>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e021      	b.n	8001a80 <drawBlockThree+0x1b8>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	88b9      	ldrh	r1, [r7, #4]
 8001a42:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f854 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001a4c:	88ba      	ldrh	r2, [r7, #4]
 8001a4e:	494c      	ldr	r1, [pc, #304]	@ (8001b80 <drawBlockThree+0x2b8>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_ORANGE;
 8001a62:	88ba      	ldrh	r2, [r7, #4]
 8001a64:	4947      	ldr	r1, [pc, #284]	@ (8001b84 <drawBlockThree+0x2bc>)
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	3302      	adds	r3, #2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	ddd8      	ble.n	8001a3c <drawBlockThree+0x174>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_ORANGE);
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b299      	uxth	r1, r3
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f82c 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 8001a9c:	88bb      	ldrh	r3, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	88f9      	ldrh	r1, [r7, #6]
 8001aa2:	4837      	ldr	r0, [pc, #220]	@ (8001b80 <drawBlockThree+0x2b8>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_ORANGE;
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	88f9      	ldrh	r1, [r7, #6]
 8001aba:	4832      	ldr	r0, [pc, #200]	@ (8001b84 <drawBlockThree+0x2bc>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001aca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d150      	bne.n	8001b76 <drawBlockThree+0x2ae>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	e025      	b.n	8001b28 <drawBlockThree+0x260>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	b291      	uxth	r1, r2
 8001ae6:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f802 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	4822      	ldr	r0, [pc, #136]	@ (8001b80 <drawBlockThree+0x2b8>)
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	2201      	movs	r2, #1
 8001b04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_ORANGE;
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	1c59      	adds	r1, r3, #1
 8001b0c:	481d      	ldr	r0, [pc, #116]	@ (8001b84 <drawBlockThree+0x2bc>)
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001b1e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3301      	adds	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	ddd4      	ble.n	8001adc <drawBlockThree+0x214>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_ORANGE);
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b299      	uxth	r1, r3
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ffd8 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 8001b44:	88bb      	ldrh	r3, [r7, #4]
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	88f9      	ldrh	r1, [r7, #6]
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <drawBlockThree+0x2b8>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	440b      	add	r3, r1
 8001b56:	2201      	movs	r2, #1
 8001b58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_ORANGE;
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	88f9      	ldrh	r1, [r7, #6]
 8001b62:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <drawBlockThree+0x2bc>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001b72:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000030c 	.word	0x2000030c
 8001b84:	2000018c 	.word	0x2000018c

08001b88 <eraseBlockThree>:

void eraseBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	80bb      	strh	r3, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001b9a:	887b      	ldrh	r3, [r7, #2]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d14b      	bne.n	8001c38 <eraseBlockThree+0xb0>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e01f      	b.n	8001be6 <eraseBlockThree+0x5e>
			LCD_Erase_Square(i,Ypos);
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	88ba      	ldrh	r2, [r7, #4]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f814 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001bb4:	88ba      	ldrh	r2, [r7, #4]
 8001bb6:	499a      	ldr	r1, [pc, #616]	@ (8001e20 <eraseBlockThree+0x298>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8001bca:	88ba      	ldrh	r2, [r7, #4]
 8001bcc:	4995      	ldr	r1, [pc, #596]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	3301      	adds	r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	3302      	adds	r3, #2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	ddda      	ble.n	8001ba6 <eraseBlockThree+0x1e>
		}
		LCD_Erase_Square(Xpos+2,Ypos-1);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f7fe ffec 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos+2] = 0;
 8001c04:	88bb      	ldrh	r3, [r7, #4]
 8001c06:	1e5a      	subs	r2, r3, #1
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	1c99      	adds	r1, r3, #2
 8001c0c:	4884      	ldr	r0, [pc, #528]	@ (8001e20 <eraseBlockThree+0x298>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+2] = 0;
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	1c99      	adds	r1, r3, #2
 8001c26:	487f      	ldr	r0, [pc, #508]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	2200      	movs	r2, #0
 8001c34:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001c38:	887b      	ldrh	r3, [r7, #2]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d150      	bne.n	8001ce0 <eraseBlockThree+0x158>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001c3e:	88bb      	ldrh	r3, [r7, #4]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	e023      	b.n	8001c8e <eraseBlockThree+0x106>
				LCD_Erase_Square(Xpos+1,i);
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe ffc2 	bl	8000bdc <LCD_Erase_Square>
				LCD_Screen[i][Xpos+1] = 0;
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	4870      	ldr	r0, [pc, #448]	@ (8001e20 <eraseBlockThree+0x298>)
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos+1] = 0;
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	1c59      	adds	r1, r3, #1
 8001c74:	486b      	ldr	r0, [pc, #428]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	2200      	movs	r2, #0
 8001c84:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	3301      	adds	r3, #1
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	ddd6      	ble.n	8001c46 <eraseBlockThree+0xbe>
			}
			LCD_Erase_Square(Xpos+2,Ypos+1);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7fe ff98 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos+1][Xpos+2] = 0;
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	1c99      	adds	r1, r3, #2
 8001cb4:	485a      	ldr	r0, [pc, #360]	@ (8001e20 <eraseBlockThree+0x298>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos+1][Xpos+2] = 0;
 8001cc6:	88bb      	ldrh	r3, [r7, #4]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	1c99      	adds	r1, r3, #2
 8001cce:	4855      	ldr	r0, [pc, #340]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d147      	bne.n	8001d76 <eraseBlockThree+0x1ee>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e01f      	b.n	8001d2c <eraseBlockThree+0x1a4>
			LCD_Erase_Square(i,Ypos);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	88ba      	ldrh	r2, [r7, #4]
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe ff71 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001cfa:	88ba      	ldrh	r2, [r7, #4]
 8001cfc:	4948      	ldr	r1, [pc, #288]	@ (8001e20 <eraseBlockThree+0x298>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8001d10:	88ba      	ldrh	r2, [r7, #4]
 8001d12:	4944      	ldr	r1, [pc, #272]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	2200      	movs	r2, #0
 8001d22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	ddda      	ble.n	8001cec <eraseBlockThree+0x164>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ff4b 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 8001d46:	88bb      	ldrh	r3, [r7, #4]
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	88f9      	ldrh	r1, [r7, #6]
 8001d4c:	4834      	ldr	r0, [pc, #208]	@ (8001e20 <eraseBlockThree+0x298>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = 0;
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	88f9      	ldrh	r1, [r7, #6]
 8001d64:	482f      	ldr	r0, [pc, #188]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d14c      	bne.n	8001e16 <eraseBlockThree+0x28e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	e023      	b.n	8001dcc <eraseBlockThree+0x244>
			LCD_Erase_Square(Xpos+1,i);
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	b292      	uxth	r2, r2
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe ff23 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	1c59      	adds	r1, r3, #1
 8001d9a:	4821      	ldr	r0, [pc, #132]	@ (8001e20 <eraseBlockThree+0x298>)
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	2200      	movs	r2, #0
 8001daa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = 0;
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	1c59      	adds	r1, r3, #1
 8001db2:	481c      	ldr	r0, [pc, #112]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	ddd6      	ble.n	8001d84 <eraseBlockThree+0x1fc>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001dd6:	88bb      	ldrh	r3, [r7, #4]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fefb 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 8001de6:	88bb      	ldrh	r3, [r7, #4]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	88f9      	ldrh	r1, [r7, #6]
 8001dec:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <eraseBlockThree+0x298>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = 0;
 8001dfe:	88bb      	ldrh	r3, [r7, #4]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	88f9      	ldrh	r1, [r7, #6]
 8001e04:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <eraseBlockThree+0x29c>)
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	2200      	movs	r2, #0
 8001e12:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000030c 	.word	0x2000030c
 8001e24:	2000018c 	.word	0x2000018c

08001e28 <drawBlockFour>:

void drawBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	80fb      	strh	r3, [r7, #6]
 8001e32:	460b      	mov	r3, r1
 8001e34:	80bb      	strh	r3, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	e044      	b.n	8001eca <drawBlockFour+0xa2>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_YELLOW);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	88b9      	ldrh	r1, [r7, #4]
 8001e46:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fe52 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001e50:	88ba      	ldrh	r2, [r7, #4]
 8001e52:	4923      	ldr	r1, [pc, #140]	@ (8001ee0 <drawBlockFour+0xb8>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	2201      	movs	r2, #1
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_YELLOW;
 8001e66:	88ba      	ldrh	r2, [r7, #4]
 8001e68:	491e      	ldr	r1, [pc, #120]	@ (8001ee4 <drawBlockFour+0xbc>)
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4413      	add	r3, r2
 8001e76:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001e7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_YELLOW);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	b298      	uxth	r0, r3
 8001e82:	88bb      	ldrh	r3, [r7, #4]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fe31 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i] = 1;
 8001e92:	88bb      	ldrh	r3, [r7, #4]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	4912      	ldr	r1, [pc, #72]	@ (8001ee0 <drawBlockFour+0xb8>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = LCD_COLOR_YELLOW;
 8001eaa:	88bb      	ldrh	r3, [r7, #4]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	490d      	ldr	r1, [pc, #52]	@ (8001ee4 <drawBlockFour+0xbc>)
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001ec0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	ddb5      	ble.n	8001e40 <drawBlockFour+0x18>
		}
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000030c 	.word	0x2000030c
 8001ee4:	2000018c 	.word	0x2000018c

08001ee8 <eraseBlockFour>:

void eraseBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	80bb      	strh	r3, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e040      	b.n	8001f82 <eraseBlockFour+0x9a>
			LCD_Erase_Square(i,Ypos);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	88ba      	ldrh	r2, [r7, #4]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fe67 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001f0e:	88ba      	ldrh	r2, [r7, #4]
 8001f10:	4921      	ldr	r1, [pc, #132]	@ (8001f98 <eraseBlockFour+0xb0>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8001f24:	88ba      	ldrh	r2, [r7, #4]
 8001f26:	491d      	ldr	r1, [pc, #116]	@ (8001f9c <eraseBlockFour+0xb4>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	2200      	movs	r2, #0
 8001f36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i,Ypos-1);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f7fe fe48 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i] = 0;
 8001f4c:	88bb      	ldrh	r3, [r7, #4]
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	4911      	ldr	r1, [pc, #68]	@ (8001f98 <eraseBlockFour+0xb0>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = 0;
 8001f64:	88bb      	ldrh	r3, [r7, #4]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <eraseBlockFour+0xb4>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	3301      	adds	r3, #1
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	ddb9      	ble.n	8001f00 <eraseBlockFour+0x18>
		}
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000030c 	.word	0x2000030c
 8001f9c:	2000018c 	.word	0x2000018c

08001fa0 <drawBlockFive>:

void drawBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
 8001faa:	460b      	mov	r3, r1
 8001fac:	80bb      	strh	r3, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d002      	beq.n	8001fbe <drawBlockFive+0x1e>
 8001fb8:	887b      	ldrh	r3, [r7, #2]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d150      	bne.n	8002060 <drawBlockFive+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e048      	b.n	8002056 <drawBlockFive+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_GREEN);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	88b9      	ldrh	r1, [r7, #4]
 8001fca:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fd90 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001fd4:	88ba      	ldrh	r2, [r7, #4]
 8001fd6:	4950      	ldr	r1, [pc, #320]	@ (8002118 <drawBlockFive+0x178>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_GREEN;
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	494b      	ldr	r1, [pc, #300]	@ (800211c <drawBlockFive+0x17c>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ffe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i+1,Ypos-1,LCD_COLOR_GREEN);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	b29b      	uxth	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	b298      	uxth	r0, r3
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	3b01      	subs	r3, #1
 800200e:	b29b      	uxth	r3, r3
 8002010:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002014:	4619      	mov	r1, r3
 8002016:	f7fe fd6d 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i+1] = 1;
 800201a:	88bb      	ldrh	r3, [r7, #4]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1c59      	adds	r1, r3, #1
 8002022:	483d      	ldr	r0, [pc, #244]	@ (8002118 <drawBlockFive+0x178>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	2201      	movs	r2, #1
 8002030:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i+1] = LCD_COLOR_GREEN;
 8002034:	88bb      	ldrh	r3, [r7, #4]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	4837      	ldr	r0, [pc, #220]	@ (800211c <drawBlockFive+0x17c>)
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800204c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	3301      	adds	r3, #1
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	ddb1      	ble.n	8001fc4 <drawBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d002      	beq.n	800206c <drawBlockFive+0xcc>
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d150      	bne.n	800210e <drawBlockFive+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 800206c:	88bb      	ldrh	r3, [r7, #4]
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	e048      	b.n	8002104 <drawBlockFive+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i-1,LCD_COLOR_GREEN);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b299      	uxth	r1, r3
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fd37 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Xpos] = 1;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	88f9      	ldrh	r1, [r7, #6]
 800208c:	4822      	ldr	r0, [pc, #136]	@ (8002118 <drawBlockFive+0x178>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	2201      	movs	r2, #1
 800209a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos] = LCD_COLOR_GREEN;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	88f9      	ldrh	r1, [r7, #6]
 80020a4:	481d      	ldr	r0, [pc, #116]	@ (800211c <drawBlockFive+0x17c>)
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80020b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_GREEN);
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	b291      	uxth	r1, r2
 80020c2:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fd14 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	4811      	ldr	r0, [pc, #68]	@ (8002118 <drawBlockFive+0x178>)
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	4613      	mov	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	2201      	movs	r2, #1
 80020e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_GREEN;
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	1c59      	adds	r1, r3, #1
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <drawBlockFive+0x17c>)
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80020fa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	3301      	adds	r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	88bb      	ldrh	r3, [r7, #4]
 8002106:	3301      	adds	r3, #1
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	ddb1      	ble.n	8002072 <drawBlockFive+0xd2>
		}
	}
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000030c 	.word	0x2000030c
 800211c:	2000018c 	.word	0x2000018c

08002120 <eraseBlockFive>:

void eraseBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	80fb      	strh	r3, [r7, #6]
 800212a:	460b      	mov	r3, r1
 800212c:	80bb      	strh	r3, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d002      	beq.n	800213e <eraseBlockFive+0x1e>
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d14c      	bne.n	80021d8 <eraseBlockFive+0xb8>
		for (int i = Xpos; i < (Xpos+2); i++){
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e044      	b.n	80021ce <eraseBlockFive+0xae>
			LCD_Erase_Square(i,Ypos);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	b29b      	uxth	r3, r3
 8002148:	88ba      	ldrh	r2, [r7, #4]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fd45 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002152:	88ba      	ldrh	r2, [r7, #4]
 8002154:	494c      	ldr	r1, [pc, #304]	@ (8002288 <eraseBlockFive+0x168>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4413      	add	r3, r2
 8002162:	2200      	movs	r2, #0
 8002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8002168:	88ba      	ldrh	r2, [r7, #4]
 800216a:	4948      	ldr	r1, [pc, #288]	@ (800228c <eraseBlockFive+0x16c>)
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	2200      	movs	r2, #0
 800217a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i+1,Ypos-1);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	b29b      	uxth	r3, r3
 8002182:	3301      	adds	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7fe fd24 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i+1] = 0;
 8002194:	88bb      	ldrh	r3, [r7, #4]
 8002196:	1e5a      	subs	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	483a      	ldr	r0, [pc, #232]	@ (8002288 <eraseBlockFive+0x168>)
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	2200      	movs	r2, #0
 80021aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i+1] = 0;
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	4835      	ldr	r0, [pc, #212]	@ (800228c <eraseBlockFive+0x16c>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	2200      	movs	r2, #0
 80021c4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	3301      	adds	r3, #1
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	ddb5      	ble.n	8002144 <eraseBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d002      	beq.n	80021e4 <eraseBlockFive+0xc4>
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d14c      	bne.n	800227e <eraseBlockFive+0x15e>
		for (int i = Ypos; i < (Ypos+2); i++){
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	e044      	b.n	8002274 <eraseBlockFive+0x154>
			LCD_Erase_Square(Xpos,i-1);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fcf0 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i-1][Xpos] = 0;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	1e5a      	subs	r2, r3, #1
 8002200:	88f9      	ldrh	r1, [r7, #6]
 8002202:	4821      	ldr	r0, [pc, #132]	@ (8002288 <eraseBlockFive+0x168>)
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	2200      	movs	r2, #0
 8002210:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos] = 0;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	88f9      	ldrh	r1, [r7, #6]
 800221a:	481c      	ldr	r0, [pc, #112]	@ (800228c <eraseBlockFive+0x16c>)
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	2200      	movs	r2, #0
 8002228:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i);
 800222c:	88fb      	ldrh	r3, [r7, #6]
 800222e:	3301      	adds	r3, #1
 8002230:	b29b      	uxth	r3, r3
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	b292      	uxth	r2, r2
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fccf 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	4811      	ldr	r0, [pc, #68]	@ (8002288 <eraseBlockFive+0x168>)
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	2200      	movs	r2, #0
 8002252:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = 0;
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	1c59      	adds	r1, r3, #1
 800225a:	480c      	ldr	r0, [pc, #48]	@ (800228c <eraseBlockFive+0x16c>)
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	2200      	movs	r2, #0
 800226a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3301      	adds	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	3301      	adds	r3, #1
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	429a      	cmp	r2, r3
 800227c:	ddb5      	ble.n	80021ea <eraseBlockFive+0xca>
		}
	}
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000030c 	.word	0x2000030c
 800228c:	2000018c 	.word	0x2000018c

08002290 <drawBlockSix>:

void drawBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	80fb      	strh	r3, [r7, #6]
 800229a:	460b      	mov	r3, r1
 800229c:	80bb      	strh	r3, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d14c      	bne.n	8002342 <drawBlockSix+0xb2>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e021      	b.n	80022f4 <drawBlockSix+0x64>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	88b9      	ldrh	r1, [r7, #4]
 80022b6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fc1a 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80022c0:	88ba      	ldrh	r2, [r7, #4]
 80022c2:	499a      	ldr	r1, [pc, #616]	@ (800252c <drawBlockSix+0x29c>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4413      	add	r3, r2
 80022d0:	2201      	movs	r2, #1
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_MAGENTA;
 80022d6:	88ba      	ldrh	r2, [r7, #4]
 80022d8:	4995      	ldr	r1, [pc, #596]	@ (8002530 <drawBlockSix+0x2a0>)
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4413      	add	r3, r2
 80022e6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80022ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	3301      	adds	r3, #1
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	ddd8      	ble.n	80022b0 <drawBlockSix+0x20>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_MAGENTA);
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	3b01      	subs	r3, #1
 8002302:	b299      	uxth	r1, r3
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fbf2 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	88f9      	ldrh	r1, [r7, #6]
 8002316:	4885      	ldr	r0, [pc, #532]	@ (800252c <drawBlockSix+0x29c>)
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	2201      	movs	r2, #1
 8002324:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_MAGENTA;
 8002328:	88bb      	ldrh	r3, [r7, #4]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	88f9      	ldrh	r1, [r7, #6]
 800232e:	4880      	ldr	r0, [pc, #512]	@ (8002530 <drawBlockSix+0x2a0>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800233e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d14c      	bne.n	80023e2 <drawBlockSix+0x152>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	3b01      	subs	r3, #1
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e021      	b.n	8002394 <drawBlockSix+0x104>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	b29b      	uxth	r3, r3
 8002354:	88b9      	ldrh	r1, [r7, #4]
 8002356:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fbca 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8002360:	88ba      	ldrh	r2, [r7, #4]
 8002362:	4972      	ldr	r1, [pc, #456]	@ (800252c <drawBlockSix+0x29c>)
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	2201      	movs	r2, #1
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_MAGENTA;
 8002376:	88ba      	ldrh	r2, [r7, #4]
 8002378:	496d      	ldr	r1, [pc, #436]	@ (8002530 <drawBlockSix+0x2a0>)
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800238a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	3301      	adds	r3, #1
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	3301      	adds	r3, #1
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	429a      	cmp	r2, r3
 800239c:	ddd8      	ble.n	8002350 <drawBlockSix+0xc0>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_MAGENTA);
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b299      	uxth	r1, r3
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fba2 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	88f9      	ldrh	r1, [r7, #6]
 80023b6:	485d      	ldr	r0, [pc, #372]	@ (800252c <drawBlockSix+0x29c>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	2201      	movs	r2, #1
 80023c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_MAGENTA;
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	88f9      	ldrh	r1, [r7, #6]
 80023ce:	4858      	ldr	r0, [pc, #352]	@ (8002530 <drawBlockSix+0x2a0>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80023de:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d14c      	bne.n	8002482 <drawBlockSix+0x1f2>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e021      	b.n	8002434 <drawBlockSix+0x1a4>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	b299      	uxth	r1, r3
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe fb7a 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 8002400:	88f9      	ldrh	r1, [r7, #6]
 8002402:	484a      	ldr	r0, [pc, #296]	@ (800252c <drawBlockSix+0x29c>)
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	2201      	movs	r2, #1
 8002412:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_MAGENTA;
 8002416:	88f9      	ldrh	r1, [r7, #6]
 8002418:	4845      	ldr	r0, [pc, #276]	@ (8002530 <drawBlockSix+0x2a0>)
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800242a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3301      	adds	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	88bb      	ldrh	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	429a      	cmp	r2, r3
 800243c:	ddd8      	ble.n	80023f0 <drawBlockSix+0x160>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos,LCD_COLOR_MAGENTA);
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	3301      	adds	r3, #1
 8002442:	b29b      	uxth	r3, r3
 8002444:	88b9      	ldrh	r1, [r7, #4]
 8002446:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fb52 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos][Xpos+1] = 1;
 8002450:	88ba      	ldrh	r2, [r7, #4]
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	1c59      	adds	r1, r3, #1
 8002456:	4835      	ldr	r0, [pc, #212]	@ (800252c <drawBlockSix+0x29c>)
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	2201      	movs	r2, #1
 8002464:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos+1] = LCD_COLOR_MAGENTA;
 8002468:	88ba      	ldrh	r2, [r7, #4]
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	1c59      	adds	r1, r3, #1
 800246e:	4830      	ldr	r0, [pc, #192]	@ (8002530 <drawBlockSix+0x2a0>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800247e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	2b04      	cmp	r3, #4
 8002486:	d14c      	bne.n	8002522 <drawBlockSix+0x292>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002488:	88bb      	ldrh	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	e021      	b.n	80024d4 <drawBlockSix+0x244>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	b299      	uxth	r1, r3
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fb2a 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 80024a0:	88f9      	ldrh	r1, [r7, #6]
 80024a2:	4822      	ldr	r0, [pc, #136]	@ (800252c <drawBlockSix+0x29c>)
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	2201      	movs	r2, #1
 80024b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_MAGENTA;
 80024b6:	88f9      	ldrh	r1, [r7, #6]
 80024b8:	481d      	ldr	r0, [pc, #116]	@ (8002530 <drawBlockSix+0x2a0>)
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024ca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	3301      	adds	r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	88bb      	ldrh	r3, [r7, #4]
 80024d6:	3301      	adds	r3, #1
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	429a      	cmp	r2, r3
 80024dc:	ddd8      	ble.n	8002490 <drawBlockSix+0x200>
		}
		LCD_Draw_Square_Fill_Border(Xpos-1,Ypos,LCD_COLOR_MAGENTA);
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	88b9      	ldrh	r1, [r7, #4]
 80024e6:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fb02 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos][Xpos-1] = 1;
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	1e59      	subs	r1, r3, #1
 80024f6:	480d      	ldr	r0, [pc, #52]	@ (800252c <drawBlockSix+0x29c>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	2201      	movs	r2, #1
 8002504:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos-1] = LCD_COLOR_MAGENTA;
 8002508:	88ba      	ldrh	r2, [r7, #4]
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	1e59      	subs	r1, r3, #1
 800250e:	4808      	ldr	r0, [pc, #32]	@ (8002530 <drawBlockSix+0x2a0>)
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800251e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000030c 	.word	0x2000030c
 8002530:	2000018c 	.word	0x2000018c

08002534 <eraseBlockSix>:

void eraseBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	80bb      	strh	r3, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d148      	bne.n	80025de <eraseBlockSix+0xaa>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 800254c:	88fb      	ldrh	r3, [r7, #6]
 800254e:	3b01      	subs	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e01f      	b.n	8002594 <eraseBlockSix+0x60>
			LCD_Erase_Square(i,Ypos);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	b29b      	uxth	r3, r3
 8002558:	88ba      	ldrh	r2, [r7, #4]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fb3d 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002562:	88ba      	ldrh	r2, [r7, #4]
 8002564:	4992      	ldr	r1, [pc, #584]	@ (80027b0 <eraseBlockSix+0x27c>)
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4413      	add	r3, r2
 8002572:	2200      	movs	r2, #0
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8002578:	88ba      	ldrh	r2, [r7, #4]
 800257a:	498e      	ldr	r1, [pc, #568]	@ (80027b4 <eraseBlockSix+0x280>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4413      	add	r3, r2
 8002588:	2200      	movs	r2, #0
 800258a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	3301      	adds	r3, #1
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	429a      	cmp	r2, r3
 800259c:	ddda      	ble.n	8002554 <eraseBlockSix+0x20>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 800259e:	88bb      	ldrh	r3, [r7, #4]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fb17 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 80025ae:	88bb      	ldrh	r3, [r7, #4]
 80025b0:	1e5a      	subs	r2, r3, #1
 80025b2:	88f9      	ldrh	r1, [r7, #6]
 80025b4:	487e      	ldr	r0, [pc, #504]	@ (80027b0 <eraseBlockSix+0x27c>)
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	2200      	movs	r2, #0
 80025c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = 0;
 80025c6:	88bb      	ldrh	r3, [r7, #4]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	88f9      	ldrh	r1, [r7, #6]
 80025cc:	4879      	ldr	r0, [pc, #484]	@ (80027b4 <eraseBlockSix+0x280>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	2200      	movs	r2, #0
 80025da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d148      	bne.n	8002676 <eraseBlockSix+0x142>
		for (int i = Xpos-1; i < (Xpos+2); i++){
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	e01f      	b.n	800262c <eraseBlockSix+0xf8>
			LCD_Erase_Square(i,Ypos);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	88ba      	ldrh	r2, [r7, #4]
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe faf1 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80025fa:	88ba      	ldrh	r2, [r7, #4]
 80025fc:	496c      	ldr	r1, [pc, #432]	@ (80027b0 <eraseBlockSix+0x27c>)
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	2200      	movs	r2, #0
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8002610:	88ba      	ldrh	r2, [r7, #4]
 8002612:	4968      	ldr	r1, [pc, #416]	@ (80027b4 <eraseBlockSix+0x280>)
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	2200      	movs	r2, #0
 8002622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos-1; i < (Xpos+2); i++){
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	3301      	adds	r3, #1
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	429a      	cmp	r2, r3
 8002634:	ddda      	ble.n	80025ec <eraseBlockSix+0xb8>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 8002636:	88bb      	ldrh	r3, [r7, #4]
 8002638:	3301      	adds	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe facb 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	88f9      	ldrh	r1, [r7, #6]
 800264c:	4858      	ldr	r0, [pc, #352]	@ (80027b0 <eraseBlockSix+0x27c>)
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	2200      	movs	r2, #0
 800265a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = 0;
 800265e:	88bb      	ldrh	r3, [r7, #4]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	88f9      	ldrh	r1, [r7, #6]
 8002664:	4853      	ldr	r0, [pc, #332]	@ (80027b4 <eraseBlockSix+0x280>)
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	2200      	movs	r2, #0
 8002672:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d148      	bne.n	800270e <eraseBlockSix+0x1da>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800267c:	88bb      	ldrh	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	e01f      	b.n	80026c4 <eraseBlockSix+0x190>
			LCD_Erase_Square(Xpos,i);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	b29a      	uxth	r2, r3
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe faa5 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8002692:	88f9      	ldrh	r1, [r7, #6]
 8002694:	4846      	ldr	r0, [pc, #280]	@ (80027b0 <eraseBlockSix+0x27c>)
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = 0;
 80026a8:	88f9      	ldrh	r1, [r7, #6]
 80026aa:	4842      	ldr	r0, [pc, #264]	@ (80027b4 <eraseBlockSix+0x280>)
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3301      	adds	r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	88bb      	ldrh	r3, [r7, #4]
 80026c6:	3301      	adds	r3, #1
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	ddda      	ble.n	8002684 <eraseBlockSix+0x150>
		}
		LCD_Erase_Square(Xpos+1,Ypos);
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	3301      	adds	r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	88ba      	ldrh	r2, [r7, #4]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fa7f 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos][Xpos+1] = 0;
 80026de:	88ba      	ldrh	r2, [r7, #4]
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	4832      	ldr	r0, [pc, #200]	@ (80027b0 <eraseBlockSix+0x27c>)
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	2200      	movs	r2, #0
 80026f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos+1] = 0;
 80026f6:	88ba      	ldrh	r2, [r7, #4]
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	1c59      	adds	r1, r3, #1
 80026fc:	482d      	ldr	r0, [pc, #180]	@ (80027b4 <eraseBlockSix+0x280>)
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	2200      	movs	r2, #0
 800270a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	2b04      	cmp	r3, #4
 8002712:	d148      	bne.n	80027a6 <eraseBlockSix+0x272>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002714:	88bb      	ldrh	r3, [r7, #4]
 8002716:	3b01      	subs	r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	e01f      	b.n	800275c <eraseBlockSix+0x228>
			LCD_Erase_Square(Xpos,i);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	b29a      	uxth	r2, r3
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fa59 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 800272a:	88f9      	ldrh	r1, [r7, #6]
 800272c:	4820      	ldr	r0, [pc, #128]	@ (80027b0 <eraseBlockSix+0x27c>)
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	2200      	movs	r2, #0
 800273c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = 0;
 8002740:	88f9      	ldrh	r1, [r7, #6]
 8002742:	481c      	ldr	r0, [pc, #112]	@ (80027b4 <eraseBlockSix+0x280>)
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	2200      	movs	r2, #0
 8002752:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3301      	adds	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	88bb      	ldrh	r3, [r7, #4]
 800275e:	3301      	adds	r3, #1
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	ddda      	ble.n	800271c <eraseBlockSix+0x1e8>
		}
		LCD_Erase_Square(Xpos-1,Ypos);
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	3b01      	subs	r3, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	88ba      	ldrh	r2, [r7, #4]
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fa33 	bl	8000bdc <LCD_Erase_Square>
		LCD_Screen[Ypos][Xpos-1] = 0;
 8002776:	88ba      	ldrh	r2, [r7, #4]
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	1e59      	subs	r1, r3, #1
 800277c:	480c      	ldr	r0, [pc, #48]	@ (80027b0 <eraseBlockSix+0x27c>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	2200      	movs	r2, #0
 800278a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos-1] = 0;
 800278e:	88ba      	ldrh	r2, [r7, #4]
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	1e59      	subs	r1, r3, #1
 8002794:	4807      	ldr	r0, [pc, #28]	@ (80027b4 <eraseBlockSix+0x280>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	2200      	movs	r2, #0
 80027a2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000030c 	.word	0x2000030c
 80027b4:	2000018c 	.word	0x2000018c

080027b8 <drawBlockSeven>:

void drawBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
 80027c2:	460b      	mov	r3, r1
 80027c4:	80bb      	strh	r3, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <drawBlockSeven+0x1e>
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d150      	bne.n	8002878 <drawBlockSeven+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e048      	b.n	800286e <drawBlockSeven+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_RED);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	88b9      	ldrh	r1, [r7, #4]
 80027e2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe f984 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80027ec:	88ba      	ldrh	r2, [r7, #4]
 80027ee:	4950      	ldr	r1, [pc, #320]	@ (8002930 <drawBlockSeven+0x178>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	2201      	movs	r2, #1
 80027fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_RED;
 8002802:	88ba      	ldrh	r2, [r7, #4]
 8002804:	494b      	ldr	r1, [pc, #300]	@ (8002934 <drawBlockSeven+0x17c>)
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4413      	add	r3, r2
 8002812:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002816:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i-1,Ypos-1,LCD_COLOR_RED);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b298      	uxth	r0, r3
 8002822:	88bb      	ldrh	r3, [r7, #4]
 8002824:	3b01      	subs	r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe f961 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i-1] = 1;
 8002832:	88bb      	ldrh	r3, [r7, #4]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1e59      	subs	r1, r3, #1
 800283a:	483d      	ldr	r0, [pc, #244]	@ (8002930 <drawBlockSeven+0x178>)
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	2201      	movs	r2, #1
 8002848:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i-1] = LCD_COLOR_RED;
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e59      	subs	r1, r3, #1
 8002854:	4837      	ldr	r0, [pc, #220]	@ (8002934 <drawBlockSeven+0x17c>)
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002864:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3301      	adds	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	3301      	adds	r3, #1
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	429a      	cmp	r2, r3
 8002876:	ddb1      	ble.n	80027dc <drawBlockSeven+0x24>
	// Y-1	1	1
	//   Y	    1	1
	// Y+1
	// Y+2
	//	   X-1  X  X+1  X+2
	if (orientation == 2 || orientation == 4){
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d002      	beq.n	8002884 <drawBlockSeven+0xcc>
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d150      	bne.n	8002926 <drawBlockSeven+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002884:	88bb      	ldrh	r3, [r7, #4]
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	e048      	b.n	800291c <drawBlockSeven+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_RED);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	b299      	uxth	r1, r3
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe f92d 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 800289a:	88f9      	ldrh	r1, [r7, #6]
 800289c:	4824      	ldr	r0, [pc, #144]	@ (8002930 <drawBlockSeven+0x178>)
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4613      	mov	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	2201      	movs	r2, #1
 80028ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_RED;
 80028b0:	88f9      	ldrh	r1, [r7, #6]
 80028b2:	4820      	ldr	r0, [pc, #128]	@ (8002934 <drawBlockSeven+0x17c>)
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028c4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i-1,LCD_COLOR_RED);
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	3301      	adds	r3, #1
 80028cc:	b298      	uxth	r0, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f90a 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Xpos+1] = 1;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1e5a      	subs	r2, r3, #1
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	4811      	ldr	r0, [pc, #68]	@ (8002930 <drawBlockSeven+0x178>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	2201      	movs	r2, #1
 80028f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos+1] = LCD_COLOR_RED;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	1c59      	adds	r1, r3, #1
 8002902:	480c      	ldr	r0, [pc, #48]	@ (8002934 <drawBlockSeven+0x17c>)
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002912:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3301      	adds	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	3301      	adds	r3, #1
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	ddb1      	ble.n	800288a <drawBlockSeven+0xd2>
//   Y	    1	1
// Y+1		1
// Y+2
//	   X-1  X  X+1  X+2
	}
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	2000030c 	.word	0x2000030c
 8002934:	2000018c 	.word	0x2000018c

08002938 <eraseBlockSeven>:

void eraseBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
 8002942:	460b      	mov	r3, r1
 8002944:	80bb      	strh	r3, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <eraseBlockSeven+0x1e>
 8002950:	887b      	ldrh	r3, [r7, #2]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d14c      	bne.n	80029f0 <eraseBlockSeven+0xb8>
		for (int i = Xpos; i < (Xpos+2); i++){
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e044      	b.n	80029e6 <eraseBlockSeven+0xae>
			LCD_Erase_Square(i,Ypos);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	b29b      	uxth	r3, r3
 8002960:	88ba      	ldrh	r2, [r7, #4]
 8002962:	4611      	mov	r1, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe f939 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 800296a:	88ba      	ldrh	r2, [r7, #4]
 800296c:	494c      	ldr	r1, [pc, #304]	@ (8002aa0 <eraseBlockSeven+0x168>)
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	2200      	movs	r2, #0
 800297c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = 0;
 8002980:	88ba      	ldrh	r2, [r7, #4]
 8002982:	4948      	ldr	r1, [pc, #288]	@ (8002aa4 <eraseBlockSeven+0x16c>)
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i-1,Ypos-1);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	88bb      	ldrh	r3, [r7, #4]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7fe f918 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i-1] = 0;
 80029ac:	88bb      	ldrh	r3, [r7, #4]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e59      	subs	r1, r3, #1
 80029b4:	483a      	ldr	r0, [pc, #232]	@ (8002aa0 <eraseBlockSeven+0x168>)
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	2200      	movs	r2, #0
 80029c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i-1] = 0;
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1e59      	subs	r1, r3, #1
 80029ce:	4835      	ldr	r0, [pc, #212]	@ (8002aa4 <eraseBlockSeven+0x16c>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	3301      	adds	r3, #1
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	ddb5      	ble.n	800295c <eraseBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d002      	beq.n	80029fc <eraseBlockSeven+0xc4>
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d14c      	bne.n	8002a96 <eraseBlockSeven+0x15e>
		for (int i = Ypos; i < (Ypos+2); i++){
 80029fc:	88bb      	ldrh	r3, [r7, #4]
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	e044      	b.n	8002a8c <eraseBlockSeven+0x154>
			LCD_Erase_Square(Xpos,i);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe f8e6 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8002a10:	88f9      	ldrh	r1, [r7, #6]
 8002a12:	4823      	ldr	r0, [pc, #140]	@ (8002aa0 <eraseBlockSeven+0x168>)
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	2200      	movs	r2, #0
 8002a22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = 0;
 8002a26:	88f9      	ldrh	r1, [r7, #6]
 8002a28:	481e      	ldr	r0, [pc, #120]	@ (8002aa4 <eraseBlockSeven+0x16c>)
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	2200      	movs	r2, #0
 8002a38:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i-1);
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f7fe f8c5 	bl	8000bdc <LCD_Erase_Square>
			LCD_Screen[i-1][Xpos+1] = 0;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	1c59      	adds	r1, r3, #1
 8002a5a:	4811      	ldr	r0, [pc, #68]	@ (8002aa0 <eraseBlockSeven+0x168>)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos+1] = 0;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1e5a      	subs	r2, r3, #1
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	480b      	ldr	r0, [pc, #44]	@ (8002aa4 <eraseBlockSeven+0x16c>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	2200      	movs	r2, #0
 8002a82:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	88bb      	ldrh	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	ddb5      	ble.n	8002a02 <eraseBlockSeven+0xca>
		}
	}
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000030c 	.word	0x2000030c
 8002aa4:	2000018c 	.word	0x2000018c

08002aa8 <drawBottomBorder>:
				}
			}
		}
}

void drawBottomBorder(){
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 12; i++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	80fb      	strh	r3, [r7, #6]
 8002ab2:	e014      	b.n	8002ade <drawBottomBorder+0x36>
		LCD_Draw_Square_Fill_Border(i, 15, LCD_COLOR_BLACK);
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210f      	movs	r1, #15
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe f81a 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[15][i] = 1;
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8002af4 <drawBottomBorder+0x4c>)
 8002ac4:	33b4      	adds	r3, #180	@ 0xb4
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Obj_Color[15][i] = LCD_COLOR_BLACK;
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <drawBottomBorder+0x50>)
 8002ad0:	33b4      	adds	r3, #180	@ 0xb4
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < 12; i++){
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	3301      	adds	r3, #1
 8002adc:	80fb      	strh	r3, [r7, #6]
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b0b      	cmp	r3, #11
 8002ae2:	d9e7      	bls.n	8002ab4 <drawBottomBorder+0xc>
	}
	HAL_Delay(1000);
 8002ae4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ae8:	f002 f82a 	bl	8004b40 <HAL_Delay>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000030c 	.word	0x2000030c
 8002af8:	2000018c 	.word	0x2000018c

08002afc <rotateBlock>:

void rotateBlock(){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002b02:	4b57      	ldr	r3, [pc, #348]	@ (8002c60 <rotateBlock+0x164>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpos = CurrentBlock[1];
 8002b08:	4b55      	ldr	r3, [pc, #340]	@ (8002c60 <rotateBlock+0x164>)
 8002b0a:	885b      	ldrh	r3, [r3, #2]
 8002b0c:	817b      	strh	r3, [r7, #10]
	uint16_t Ypos = CurrentBlock[2];
 8002b0e:	4b54      	ldr	r3, [pc, #336]	@ (8002c60 <rotateBlock+0x164>)
 8002b10:	889b      	ldrh	r3, [r3, #4]
 8002b12:	813b      	strh	r3, [r7, #8]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002b14:	4b52      	ldr	r3, [pc, #328]	@ (8002c60 <rotateBlock+0x164>)
 8002b16:	88db      	ldrh	r3, [r3, #6]
 8002b18:	80fb      	strh	r3, [r7, #6]
	uint16_t NewOrientation;
	if (OrgOrientation < 4){
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d803      	bhi.n	8002b28 <rotateBlock+0x2c>
		NewOrientation = OrgOrientation + 1;
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	3301      	adds	r3, #1
 8002b24:	81fb      	strh	r3, [r7, #14]
 8002b26:	e004      	b.n	8002b32 <rotateBlock+0x36>
	}
	else if (OrgOrientation >= 4){
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d901      	bls.n	8002b32 <rotateBlock+0x36>
		NewOrientation = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	81fb      	strh	r3, [r7, #14]
	}

	if (BlockNum == 1){
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d111      	bne.n	8002b5c <rotateBlock+0x60>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	8939      	ldrh	r1, [r7, #8]
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fbb0 	bl	80012a4 <eraseBlockOne>
		drawBlockOne(Xpos, Ypos, NewOrientation);
 8002b44:	89fa      	ldrh	r2, [r7, #14]
 8002b46:	8939      	ldrh	r1, [r7, #8]
 8002b48:	897b      	ldrh	r3, [r7, #10]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fb34 	bl	80011b8 <drawBlockOne>
		updateCurrentBlock(1, Xpos, Ypos, NewOrientation);
 8002b50:	89fb      	ldrh	r3, [r7, #14]
 8002b52:	893a      	ldrh	r2, [r7, #8]
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	2001      	movs	r0, #1
 8002b58:	f000 f92c 	bl	8002db4 <updateCurrentBlock>
	}
	if (BlockNum == 2){
 8002b5c:	89bb      	ldrh	r3, [r7, #12]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d111      	bne.n	8002b86 <rotateBlock+0x8a>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 8002b62:	88fa      	ldrh	r2, [r7, #6]
 8002b64:	8939      	ldrh	r1, [r7, #8]
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fd5d 	bl	8001628 <eraseBlockTwo>
		drawBlockTwo(Xpos, Ypos, NewOrientation);
 8002b6e:	89fa      	ldrh	r2, [r7, #14]
 8002b70:	8939      	ldrh	r1, [r7, #8]
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe fc07 	bl	8001388 <drawBlockTwo>
		updateCurrentBlock(2, Xpos, Ypos, NewOrientation);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	8979      	ldrh	r1, [r7, #10]
 8002b80:	2002      	movs	r0, #2
 8002b82:	f000 f917 	bl	8002db4 <updateCurrentBlock>
		}
	if (BlockNum == 3){
 8002b86:	89bb      	ldrh	r3, [r7, #12]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d111      	bne.n	8002bb0 <rotateBlock+0xb4>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8002b8c:	88fa      	ldrh	r2, [r7, #6]
 8002b8e:	8939      	ldrh	r1, [r7, #8]
 8002b90:	897b      	ldrh	r3, [r7, #10]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fff8 	bl	8001b88 <eraseBlockThree>
		drawBlockThree(Xpos, Ypos, NewOrientation);
 8002b98:	89fa      	ldrh	r2, [r7, #14]
 8002b9a:	8939      	ldrh	r1, [r7, #8]
 8002b9c:	897b      	ldrh	r3, [r7, #10]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fe92 	bl	80018c8 <drawBlockThree>
		updateCurrentBlock(3, Xpos, Ypos, NewOrientation);
 8002ba4:	89fb      	ldrh	r3, [r7, #14]
 8002ba6:	893a      	ldrh	r2, [r7, #8]
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2003      	movs	r0, #3
 8002bac:	f000 f902 	bl	8002db4 <updateCurrentBlock>
		}
	if (BlockNum == 4){
 8002bb0:	89bb      	ldrh	r3, [r7, #12]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d111      	bne.n	8002bda <rotateBlock+0xde>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	8939      	ldrh	r1, [r7, #8]
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff f993 	bl	8001ee8 <eraseBlockFour>
		drawBlockFour(Xpos, Ypos, NewOrientation);
 8002bc2:	89fa      	ldrh	r2, [r7, #14]
 8002bc4:	8939      	ldrh	r1, [r7, #8]
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f92d 	bl	8001e28 <drawBlockFour>
		updateCurrentBlock(4, Xpos, Ypos, NewOrientation);
 8002bce:	89fb      	ldrh	r3, [r7, #14]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	2004      	movs	r0, #4
 8002bd6:	f000 f8ed 	bl	8002db4 <updateCurrentBlock>
		}
	if (BlockNum == 5){
 8002bda:	89bb      	ldrh	r3, [r7, #12]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d111      	bne.n	8002c04 <rotateBlock+0x108>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 8002be0:	88fa      	ldrh	r2, [r7, #6]
 8002be2:	8939      	ldrh	r1, [r7, #8]
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fa9a 	bl	8002120 <eraseBlockFive>
		drawBlockFive(Xpos, Ypos, NewOrientation);
 8002bec:	89fa      	ldrh	r2, [r7, #14]
 8002bee:	8939      	ldrh	r1, [r7, #8]
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f9d4 	bl	8001fa0 <drawBlockFive>
		updateCurrentBlock(5, Xpos, Ypos, NewOrientation);
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	893a      	ldrh	r2, [r7, #8]
 8002bfc:	8979      	ldrh	r1, [r7, #10]
 8002bfe:	2005      	movs	r0, #5
 8002c00:	f000 f8d8 	bl	8002db4 <updateCurrentBlock>
		}
	if (BlockNum == 6){
 8002c04:	89bb      	ldrh	r3, [r7, #12]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d111      	bne.n	8002c2e <rotateBlock+0x132>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	8939      	ldrh	r1, [r7, #8]
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc8f 	bl	8002534 <eraseBlockSix>
		drawBlockSix(Xpos, Ypos, NewOrientation);
 8002c16:	89fa      	ldrh	r2, [r7, #14]
 8002c18:	8939      	ldrh	r1, [r7, #8]
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fb37 	bl	8002290 <drawBlockSix>
		updateCurrentBlock(6, Xpos, Ypos, NewOrientation);
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	893a      	ldrh	r2, [r7, #8]
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	2006      	movs	r0, #6
 8002c2a:	f000 f8c3 	bl	8002db4 <updateCurrentBlock>
		}
	if (BlockNum == 7){
 8002c2e:	89bb      	ldrh	r3, [r7, #12]
 8002c30:	2b07      	cmp	r3, #7
 8002c32:	d111      	bne.n	8002c58 <rotateBlock+0x15c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	8939      	ldrh	r1, [r7, #8]
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fe7c 	bl	8002938 <eraseBlockSeven>
		drawBlockSeven(Xpos, Ypos, NewOrientation);
 8002c40:	89fa      	ldrh	r2, [r7, #14]
 8002c42:	8939      	ldrh	r1, [r7, #8]
 8002c44:	897b      	ldrh	r3, [r7, #10]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fdb6 	bl	80027b8 <drawBlockSeven>
		updateCurrentBlock(7, Xpos, Ypos, NewOrientation);
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	893a      	ldrh	r2, [r7, #8]
 8002c50:	8979      	ldrh	r1, [r7, #10]
 8002c52:	2007      	movs	r0, #7
 8002c54:	f000 f8ae 	bl	8002db4 <updateCurrentBlock>
		}
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000063c 	.word	0x2000063c

08002c64 <drawCurrentBlock>:

void drawCurrentBlock(){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002c6a:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <drawCurrentBlock+0xa4>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8002c70:	4b25      	ldr	r3, [pc, #148]	@ (8002d08 <drawCurrentBlock+0xa4>)
 8002c72:	885b      	ldrh	r3, [r3, #2]
 8002c74:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002c76:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <drawCurrentBlock+0xa4>)
 8002c78:	889b      	ldrh	r3, [r3, #4]
 8002c7a:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002c7c:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <drawCurrentBlock+0xa4>)
 8002c7e:	88db      	ldrh	r3, [r3, #6]
 8002c80:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <drawCurrentBlock+0x30>
		drawBlockOne(Xpos, Ypos, OrgOrientation);
 8002c88:	883a      	ldrh	r2, [r7, #0]
 8002c8a:	8879      	ldrh	r1, [r7, #2]
 8002c8c:	88bb      	ldrh	r3, [r7, #4]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fa92 	bl	80011b8 <drawBlockOne>
	}
	if (BlockNum == 2){
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d105      	bne.n	8002ca6 <drawCurrentBlock+0x42>
		drawBlockTwo(Xpos, Ypos, OrgOrientation);
 8002c9a:	883a      	ldrh	r2, [r7, #0]
 8002c9c:	8879      	ldrh	r1, [r7, #2]
 8002c9e:	88bb      	ldrh	r3, [r7, #4]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fb71 	bl	8001388 <drawBlockTwo>
	}
	if (BlockNum == 3){
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d105      	bne.n	8002cb8 <drawCurrentBlock+0x54>
		drawBlockThree(Xpos, Ypos, OrgOrientation);
 8002cac:	883a      	ldrh	r2, [r7, #0]
 8002cae:	8879      	ldrh	r1, [r7, #2]
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fe08 	bl	80018c8 <drawBlockThree>
	}
	if (BlockNum == 4){
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d105      	bne.n	8002cca <drawCurrentBlock+0x66>
		drawBlockFour(Xpos, Ypos, OrgOrientation);
 8002cbe:	883a      	ldrh	r2, [r7, #0]
 8002cc0:	8879      	ldrh	r1, [r7, #2]
 8002cc2:	88bb      	ldrh	r3, [r7, #4]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f8af 	bl	8001e28 <drawBlockFour>
	}
	if (BlockNum == 5){
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d105      	bne.n	8002cdc <drawCurrentBlock+0x78>
		drawBlockFive(Xpos, Ypos, OrgOrientation);
 8002cd0:	883a      	ldrh	r2, [r7, #0]
 8002cd2:	8879      	ldrh	r1, [r7, #2]
 8002cd4:	88bb      	ldrh	r3, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff f962 	bl	8001fa0 <drawBlockFive>
	}
	if (BlockNum == 6){
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d105      	bne.n	8002cee <drawCurrentBlock+0x8a>
		drawBlockSix(Xpos, Ypos, OrgOrientation);
 8002ce2:	883a      	ldrh	r2, [r7, #0]
 8002ce4:	8879      	ldrh	r1, [r7, #2]
 8002ce6:	88bb      	ldrh	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fad1 	bl	8002290 <drawBlockSix>
	}
	if (BlockNum == 7){
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	d105      	bne.n	8002d00 <drawCurrentBlock+0x9c>
		drawBlockSeven(Xpos, Ypos, OrgOrientation);
 8002cf4:	883a      	ldrh	r2, [r7, #0]
 8002cf6:	8879      	ldrh	r1, [r7, #2]
 8002cf8:	88bb      	ldrh	r3, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fd5c 	bl	80027b8 <drawBlockSeven>
	}
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000063c 	.word	0x2000063c

08002d0c <eraseCurrentBlock>:

void eraseCurrentBlock(){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002d12:	4b27      	ldr	r3, [pc, #156]	@ (8002db0 <eraseCurrentBlock+0xa4>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8002d18:	4b25      	ldr	r3, [pc, #148]	@ (8002db0 <eraseCurrentBlock+0xa4>)
 8002d1a:	885b      	ldrh	r3, [r3, #2]
 8002d1c:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002d1e:	4b24      	ldr	r3, [pc, #144]	@ (8002db0 <eraseCurrentBlock+0xa4>)
 8002d20:	889b      	ldrh	r3, [r3, #4]
 8002d22:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002d24:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <eraseCurrentBlock+0xa4>)
 8002d26:	88db      	ldrh	r3, [r3, #6]
 8002d28:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <eraseCurrentBlock+0x30>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 8002d30:	883a      	ldrh	r2, [r7, #0]
 8002d32:	8879      	ldrh	r1, [r7, #2]
 8002d34:	88bb      	ldrh	r3, [r7, #4]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fab4 	bl	80012a4 <eraseBlockOne>
	}
	if (BlockNum == 2){
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d105      	bne.n	8002d4e <eraseCurrentBlock+0x42>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 8002d42:	883a      	ldrh	r2, [r7, #0]
 8002d44:	8879      	ldrh	r1, [r7, #2]
 8002d46:	88bb      	ldrh	r3, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fc6d 	bl	8001628 <eraseBlockTwo>
	}
	if (BlockNum == 3){
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d105      	bne.n	8002d60 <eraseCurrentBlock+0x54>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8002d54:	883a      	ldrh	r2, [r7, #0]
 8002d56:	8879      	ldrh	r1, [r7, #2]
 8002d58:	88bb      	ldrh	r3, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe ff14 	bl	8001b88 <eraseBlockThree>
	}
	if (BlockNum == 4){
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d105      	bne.n	8002d72 <eraseCurrentBlock+0x66>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 8002d66:	883a      	ldrh	r2, [r7, #0]
 8002d68:	8879      	ldrh	r1, [r7, #2]
 8002d6a:	88bb      	ldrh	r3, [r7, #4]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff f8bb 	bl	8001ee8 <eraseBlockFour>
	}
	if (BlockNum == 5){
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d105      	bne.n	8002d84 <eraseCurrentBlock+0x78>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 8002d78:	883a      	ldrh	r2, [r7, #0]
 8002d7a:	8879      	ldrh	r1, [r7, #2]
 8002d7c:	88bb      	ldrh	r3, [r7, #4]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f9ce 	bl	8002120 <eraseBlockFive>
	}
	if (BlockNum == 6){
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d105      	bne.n	8002d96 <eraseCurrentBlock+0x8a>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 8002d8a:	883a      	ldrh	r2, [r7, #0]
 8002d8c:	8879      	ldrh	r1, [r7, #2]
 8002d8e:	88bb      	ldrh	r3, [r7, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fbcf 	bl	8002534 <eraseBlockSix>
	}
	if (BlockNum == 7){
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b07      	cmp	r3, #7
 8002d9a:	d105      	bne.n	8002da8 <eraseCurrentBlock+0x9c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 8002d9c:	883a      	ldrh	r2, [r7, #0]
 8002d9e:	8879      	ldrh	r1, [r7, #2]
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fdc8 	bl	8002938 <eraseBlockSeven>
	}
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	2000063c 	.word	0x2000063c

08002db4 <updateCurrentBlock>:

void updateCurrentBlock(uint16_t BlockNum, uint16_t Xpos, uint16_t Ypos, uint16_t Orientation){
 8002db4:	b490      	push	{r4, r7}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4604      	mov	r4, r0
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	80fb      	strh	r3, [r7, #6]
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80bb      	strh	r3, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	807b      	strh	r3, [r7, #2]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	803b      	strh	r3, [r7, #0]
	CurrentBlock[0] = BlockNum;
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <updateCurrentBlock+0x40>)
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	8013      	strh	r3, [r2, #0]
	CurrentBlock[1] = Xpos;
 8002dd8:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <updateCurrentBlock+0x40>)
 8002dda:	88bb      	ldrh	r3, [r7, #4]
 8002ddc:	8053      	strh	r3, [r2, #2]
	CurrentBlock[2] = Ypos;
 8002dde:	4a05      	ldr	r2, [pc, #20]	@ (8002df4 <updateCurrentBlock+0x40>)
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	8093      	strh	r3, [r2, #4]
	CurrentBlock[3] = Orientation;
 8002de4:	4a03      	ldr	r2, [pc, #12]	@ (8002df4 <updateCurrentBlock+0x40>)
 8002de6:	883b      	ldrh	r3, [r7, #0]
 8002de8:	80d3      	strh	r3, [r2, #6]
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc90      	pop	{r4, r7}
 8002df2:	4770      	bx	lr
 8002df4:	2000063c 	.word	0x2000063c

08002df8 <getCurrentYpos>:

uint16_t getCurrentYpos(){
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
	return CurrentBlock[2];
 8002dfc:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <getCurrentYpos+0x14>)
 8002dfe:	889b      	ldrh	r3, [r3, #4]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000063c 	.word	0x2000063c

08002e10 <updateYpos>:

uint16_t updateYpos(){
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
	CurrentBlock[2] += 1;
 8002e14:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <updateYpos+0x20>)
 8002e16:	889b      	ldrh	r3, [r3, #4]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <updateYpos+0x20>)
 8002e1e:	809a      	strh	r2, [r3, #4]
	return CurrentBlock[2];
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <updateYpos+0x20>)
 8002e22:	889b      	ldrh	r3, [r3, #4]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000063c 	.word	0x2000063c

08002e34 <isFull>:
		}
		return 0;
	}
}

int isFull(){
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002e3a:	4ba4      	ldr	r3, [pc, #656]	@ (80030cc <isFull+0x298>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8002e40:	4ba2      	ldr	r3, [pc, #648]	@ (80030cc <isFull+0x298>)
 8002e42:	885b      	ldrh	r3, [r3, #2]
 8002e44:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002e46:	4ba1      	ldr	r3, [pc, #644]	@ (80030cc <isFull+0x298>)
 8002e48:	889b      	ldrh	r3, [r3, #4]
 8002e4a:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8002e4c:	4b9f      	ldr	r3, [pc, #636]	@ (80030cc <isFull+0x298>)
 8002e4e:	88db      	ldrh	r3, [r3, #6]
 8002e50:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d137      	bne.n	8002ec8 <isFull+0x94>
		if (Orientation == 1 || Orientation == 3){
 8002e58:	883b      	ldrh	r3, [r7, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d002      	beq.n	8002e64 <isFull+0x30>
 8002e5e:	883b      	ldrh	r3, [r7, #0]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d119      	bne.n	8002e98 <isFull+0x64>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	81fb      	strh	r3, [r7, #14]
 8002e68:	e011      	b.n	8002e8e <isFull+0x5a>
				if (LCD_Screen[Ypos+1][i] == 1){
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	89f9      	ldrh	r1, [r7, #14]
 8002e70:	4897      	ldr	r0, [pc, #604]	@ (80030d0 <isFull+0x29c>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <isFull+0x54>
					return 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e2ad      	b.n	80033e4 <isFull+0x5b0>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	81fb      	strh	r3, [r7, #14]
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	1cda      	adds	r2, r3, #3
 8002e92:	89fb      	ldrh	r3, [r7, #14]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dae8      	bge.n	8002e6a <isFull+0x36>
				}
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8002e98:	883b      	ldrh	r3, [r7, #0]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d002      	beq.n	8002ea4 <isFull+0x70>
 8002e9e:	883b      	ldrh	r3, [r7, #0]
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d10f      	bne.n	8002ec4 <isFull+0x90>
			if (LCD_Screen[Ypos+3][Xpos+1] == 1){
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	1cda      	adds	r2, r3, #3
 8002ea8:	88bb      	ldrh	r3, [r7, #4]
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	4888      	ldr	r0, [pc, #544]	@ (80030d0 <isFull+0x29c>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <isFull+0x90>
				return 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e28f      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		return 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e28d      	b.n	80033e4 <isFull+0x5b0>
	}

	if (BlockNum == 2){
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	f040 808d 	bne.w	8002fea <isFull+0x1b6>
		if (Orientation == 1){
 8002ed0:	883b      	ldrh	r3, [r7, #0]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d119      	bne.n	8002f0a <isFull+0xd6>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002ed6:	88bb      	ldrh	r3, [r7, #4]
 8002ed8:	81bb      	strh	r3, [r7, #12]
 8002eda:	e011      	b.n	8002f00 <isFull+0xcc>
				if (LCD_Screen[Ypos+1][i] == 1)
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	89b9      	ldrh	r1, [r7, #12]
 8002ee2:	487b      	ldr	r0, [pc, #492]	@ (80030d0 <isFull+0x29c>)
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <isFull+0xc6>
				{
					return 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e274      	b.n	80033e4 <isFull+0x5b0>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002efa:	89bb      	ldrh	r3, [r7, #12]
 8002efc:	3301      	adds	r3, #1
 8002efe:	81bb      	strh	r3, [r7, #12]
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	89bb      	ldrh	r3, [r7, #12]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	dae8      	bge.n	8002edc <isFull+0xa8>
				}
			}
		}
		if (Orientation == 2){
 8002f0a:	883b      	ldrh	r3, [r7, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11c      	bne.n	8002f4a <isFull+0x116>
			if (LCD_Screen[Ypos+2][Xpos+1] == 1 || LCD_Screen[Ypos][Xpos+2]){
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	88bb      	ldrh	r3, [r7, #4]
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	486d      	ldr	r0, [pc, #436]	@ (80030d0 <isFull+0x29c>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d00c      	beq.n	8002f46 <isFull+0x112>
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	88bb      	ldrh	r3, [r7, #4]
 8002f30:	1c99      	adds	r1, r3, #2
 8002f32:	4867      	ldr	r0, [pc, #412]	@ (80030d0 <isFull+0x29c>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <isFull+0x116>
				return 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e24c      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		if (Orientation == 3){
 8002f4a:	883b      	ldrh	r3, [r7, #0]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d12a      	bne.n	8002fa6 <isFull+0x172>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+2][Xpos+2] == 1) {
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	88b9      	ldrh	r1, [r7, #4]
 8002f56:	485e      	ldr	r0, [pc, #376]	@ (80030d0 <isFull+0x29c>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d01b      	beq.n	8002fa2 <isFull+0x16e>
 8002f6a:	887b      	ldrh	r3, [r7, #2]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	88bb      	ldrh	r3, [r7, #4]
 8002f70:	1c59      	adds	r1, r3, #1
 8002f72:	4857      	ldr	r0, [pc, #348]	@ (80030d0 <isFull+0x29c>)
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d00d      	beq.n	8002fa2 <isFull+0x16e>
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	88bb      	ldrh	r3, [r7, #4]
 8002f8c:	1c99      	adds	r1, r3, #2
 8002f8e:	4850      	ldr	r0, [pc, #320]	@ (80030d0 <isFull+0x29c>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <isFull+0x172>
				return 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e21e      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		if (Orientation == 4){
 8002fa6:	883b      	ldrh	r3, [r7, #0]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d11c      	bne.n	8002fe6 <isFull+0x1b2>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1){
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	88b9      	ldrh	r1, [r7, #4]
 8002fb2:	4847      	ldr	r0, [pc, #284]	@ (80030d0 <isFull+0x29c>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d00d      	beq.n	8002fe2 <isFull+0x1ae>
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	1c9a      	adds	r2, r3, #2
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	1c59      	adds	r1, r3, #1
 8002fce:	4840      	ldr	r0, [pc, #256]	@ (80030d0 <isFull+0x29c>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <isFull+0x1b2>
				return 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e1fe      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		return 1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e1fc      	b.n	80033e4 <isFull+0x5b0>
	}

	if (BlockNum == 3){
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	f040 8092 	bne.w	8003116 <isFull+0x2e2>
		if (Orientation == 1){
 8002ff2:	883b      	ldrh	r3, [r7, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d119      	bne.n	800302c <isFull+0x1f8>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8002ff8:	88bb      	ldrh	r3, [r7, #4]
 8002ffa:	817b      	strh	r3, [r7, #10]
 8002ffc:	e011      	b.n	8003022 <isFull+0x1ee>
				if (LCD_Screen[Ypos+1][i] == 1)
 8002ffe:	887b      	ldrh	r3, [r7, #2]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	4832      	ldr	r0, [pc, #200]	@ (80030d0 <isFull+0x29c>)
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <isFull+0x1e8>
				{
					return 0;
 8003018:	2300      	movs	r3, #0
 800301a:	e1e3      	b.n	80033e4 <isFull+0x5b0>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 800301c:	897b      	ldrh	r3, [r7, #10]
 800301e:	3301      	adds	r3, #1
 8003020:	817b      	strh	r3, [r7, #10]
 8003022:	88bb      	ldrh	r3, [r7, #4]
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	897b      	ldrh	r3, [r7, #10]
 8003028:	429a      	cmp	r2, r3
 800302a:	dae8      	bge.n	8002ffe <isFull+0x1ca>
				}
			}
		}
		if (Orientation == 2){
 800302c:	883b      	ldrh	r3, [r7, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d11d      	bne.n	800306e <isFull+0x23a>
			if (LCD_Screen[Ypos+2][Xpos+1] == 1 || LCD_Screen[Ypos+2][Xpos+2]){
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	88bb      	ldrh	r3, [r7, #4]
 8003038:	1c59      	adds	r1, r3, #1
 800303a:	4825      	ldr	r0, [pc, #148]	@ (80030d0 <isFull+0x29c>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d00d      	beq.n	800306a <isFull+0x236>
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	1c9a      	adds	r2, r3, #2
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	1c99      	adds	r1, r3, #2
 8003056:	481e      	ldr	r0, [pc, #120]	@ (80030d0 <isFull+0x29c>)
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <isFull+0x23a>
				return 0;
 800306a:	2300      	movs	r3, #0
 800306c:	e1ba      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		if (Orientation == 3){
 800306e:	883b      	ldrh	r3, [r7, #0]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d12f      	bne.n	80030d4 <isFull+0x2a0>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1) {
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	1c9a      	adds	r2, r3, #2
 8003078:	88b9      	ldrh	r1, [r7, #4]
 800307a:	4815      	ldr	r0, [pc, #84]	@ (80030d0 <isFull+0x29c>)
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d01b      	beq.n	80030c6 <isFull+0x292>
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	88bb      	ldrh	r3, [r7, #4]
 8003094:	1c59      	adds	r1, r3, #1
 8003096:	480e      	ldr	r0, [pc, #56]	@ (80030d0 <isFull+0x29c>)
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d00d      	beq.n	80030c6 <isFull+0x292>
 80030aa:	887b      	ldrh	r3, [r7, #2]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	88bb      	ldrh	r3, [r7, #4]
 80030b0:	1c99      	adds	r1, r3, #2
 80030b2:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <isFull+0x29c>)
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d106      	bne.n	80030d4 <isFull+0x2a0>
				return 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e18c      	b.n	80033e4 <isFull+0x5b0>
 80030ca:	bf00      	nop
 80030cc:	2000063c 	.word	0x2000063c
 80030d0:	2000030c 	.word	0x2000030c
			}
		}
		if (Orientation == 4){
 80030d4:	883b      	ldrh	r3, [r7, #0]
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d11b      	bne.n	8003112 <isFull+0x2de>
			if (LCD_Screen[Ypos][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1) {
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	88b9      	ldrh	r1, [r7, #4]
 80030de:	48ad      	ldr	r0, [pc, #692]	@ (8003394 <isFull+0x560>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d00d      	beq.n	800310e <isFull+0x2da>
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	1c59      	adds	r1, r3, #1
 80030fa:	48a6      	ldr	r0, [pc, #664]	@ (8003394 <isFull+0x560>)
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <isFull+0x2de>
				return 0;
 800310e:	2300      	movs	r3, #0
 8003110:	e168      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		return 1;
 8003112:	2301      	movs	r3, #1
 8003114:	e166      	b.n	80033e4 <isFull+0x5b0>
	}

	if (BlockNum == 4){
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d11e      	bne.n	800315a <isFull+0x326>
		if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	88b9      	ldrh	r1, [r7, #4]
 8003122:	489c      	ldr	r0, [pc, #624]	@ (8003394 <isFull+0x560>)
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d00d      	beq.n	8003152 <isFull+0x31e>
 8003136:	887b      	ldrh	r3, [r7, #2]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	88bb      	ldrh	r3, [r7, #4]
 800313c:	1c59      	adds	r1, r3, #1
 800313e:	4895      	ldr	r0, [pc, #596]	@ (8003394 <isFull+0x560>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <isFull+0x322>
			return 0;
 8003152:	2300      	movs	r3, #0
 8003154:	e146      	b.n	80033e4 <isFull+0x5b0>
		}
		return 1;
 8003156:	2301      	movs	r3, #1
 8003158:	e144      	b.n	80033e4 <isFull+0x5b0>
	}

	if (BlockNum == 5){
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d154      	bne.n	800320a <isFull+0x3d6>
		if (Orientation == 1 || Orientation == 3){
 8003160:	883b      	ldrh	r3, [r7, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d002      	beq.n	800316c <isFull+0x338>
 8003166:	883b      	ldrh	r3, [r7, #0]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d129      	bne.n	80031c0 <isFull+0x38c>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos][Xpos+2] == 1) {
 800316c:	887b      	ldrh	r3, [r7, #2]
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	88b9      	ldrh	r1, [r7, #4]
 8003172:	4888      	ldr	r0, [pc, #544]	@ (8003394 <isFull+0x560>)
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d01a      	beq.n	80031bc <isFull+0x388>
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	88bb      	ldrh	r3, [r7, #4]
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	4881      	ldr	r0, [pc, #516]	@ (8003394 <isFull+0x560>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d00c      	beq.n	80031bc <isFull+0x388>
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	88bb      	ldrh	r3, [r7, #4]
 80031a6:	1c99      	adds	r1, r3, #2
 80031a8:	487a      	ldr	r0, [pc, #488]	@ (8003394 <isFull+0x560>)
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <isFull+0x38c>
				return 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	e111      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 80031c0:	883b      	ldrh	r3, [r7, #0]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d002      	beq.n	80031cc <isFull+0x398>
 80031c6:	883b      	ldrh	r3, [r7, #0]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d11c      	bne.n	8003206 <isFull+0x3d2>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1) {
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	88b9      	ldrh	r1, [r7, #4]
 80031d2:	4870      	ldr	r0, [pc, #448]	@ (8003394 <isFull+0x560>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d00d      	beq.n	8003202 <isFull+0x3ce>
 80031e6:	887b      	ldrh	r3, [r7, #2]
 80031e8:	1c9a      	adds	r2, r3, #2
 80031ea:	88bb      	ldrh	r3, [r7, #4]
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	4869      	ldr	r0, [pc, #420]	@ (8003394 <isFull+0x560>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <isFull+0x3d2>
				return 0;
 8003202:	2300      	movs	r3, #0
 8003204:	e0ee      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		return 1;
 8003206:	2301      	movs	r3, #1
 8003208:	e0ec      	b.n	80033e4 <isFull+0x5b0>
	}

	if (BlockNum == 6){
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b06      	cmp	r3, #6
 800320e:	f040 808e 	bne.w	800332e <isFull+0x4fa>
		if (Orientation == 1){
 8003212:	883b      	ldrh	r3, [r7, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d11a      	bne.n	800324e <isFull+0x41a>
			for (uint16_t i = Xpos-1; i < Xpos+2; i++){
 8003218:	88bb      	ldrh	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	813b      	strh	r3, [r7, #8]
 800321e:	e011      	b.n	8003244 <isFull+0x410>
				if (LCD_Screen[Ypos+1][i] == 1){
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	8939      	ldrh	r1, [r7, #8]
 8003226:	485b      	ldr	r0, [pc, #364]	@ (8003394 <isFull+0x560>)
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <isFull+0x40a>
					return 0;
 800323a:	2300      	movs	r3, #0
 800323c:	e0d2      	b.n	80033e4 <isFull+0x5b0>
			for (uint16_t i = Xpos-1; i < Xpos+2; i++){
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	3301      	adds	r3, #1
 8003242:	813b      	strh	r3, [r7, #8]
 8003244:	88bb      	ldrh	r3, [r7, #4]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	893b      	ldrh	r3, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	dae8      	bge.n	8003220 <isFull+0x3ec>
				}
			}
		}
		if (Orientation == 2){
 800324e:	883b      	ldrh	r3, [r7, #0]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d11c      	bne.n	800328e <isFull+0x45a>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1){
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	1c9a      	adds	r2, r3, #2
 8003258:	88b9      	ldrh	r1, [r7, #4]
 800325a:	484e      	ldr	r0, [pc, #312]	@ (8003394 <isFull+0x560>)
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d00d      	beq.n	800328a <isFull+0x456>
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	88bb      	ldrh	r3, [r7, #4]
 8003274:	1c59      	adds	r1, r3, #1
 8003276:	4847      	ldr	r0, [pc, #284]	@ (8003394 <isFull+0x560>)
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <isFull+0x45a>
				return 0;
 800328a:	2300      	movs	r3, #0
 800328c:	e0aa      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		if (Orientation == 3){
 800328e:	883b      	ldrh	r3, [r7, #0]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d12a      	bne.n	80032ea <isFull+0x4b6>
			if (LCD_Screen[Ypos+1][Xpos-1] == 1 || LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1){
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	88bb      	ldrh	r3, [r7, #4]
 800329a:	1e59      	subs	r1, r3, #1
 800329c:	483d      	ldr	r0, [pc, #244]	@ (8003394 <isFull+0x560>)
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d01a      	beq.n	80032e6 <isFull+0x4b2>
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	88b9      	ldrh	r1, [r7, #4]
 80032b6:	4837      	ldr	r0, [pc, #220]	@ (8003394 <isFull+0x560>)
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d00d      	beq.n	80032e6 <isFull+0x4b2>
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	88bb      	ldrh	r3, [r7, #4]
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	4830      	ldr	r0, [pc, #192]	@ (8003394 <isFull+0x560>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <isFull+0x4b6>
				return 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e07c      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		if (Orientation == 4){
 80032ea:	883b      	ldrh	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d11c      	bne.n	800332a <isFull+0x4f6>
			if (LCD_Screen[Ypos+1][Xpos-1] == 1 || LCD_Screen[Ypos+2][Xpos] == 1){
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	88bb      	ldrh	r3, [r7, #4]
 80032f6:	1e59      	subs	r1, r3, #1
 80032f8:	4826      	ldr	r0, [pc, #152]	@ (8003394 <isFull+0x560>)
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d00c      	beq.n	8003326 <isFull+0x4f2>
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	88b9      	ldrh	r1, [r7, #4]
 8003312:	4820      	ldr	r0, [pc, #128]	@ (8003394 <isFull+0x560>)
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <isFull+0x4f6>
				return 0;
 8003326:	2300      	movs	r3, #0
 8003328:	e05c      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		return 1;
 800332a:	2301      	movs	r3, #1
 800332c:	e05a      	b.n	80033e4 <isFull+0x5b0>
	}

	if (BlockNum == 7){
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b07      	cmp	r3, #7
 8003332:	d156      	bne.n	80033e2 <isFull+0x5ae>
		if (Orientation == 1 || Orientation == 3){
 8003334:	883b      	ldrh	r3, [r7, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d002      	beq.n	8003340 <isFull+0x50c>
 800333a:	883b      	ldrh	r3, [r7, #0]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d12b      	bne.n	8003398 <isFull+0x564>
			if (LCD_Screen[Ypos][Xpos-1] == 1 || LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	88bb      	ldrh	r3, [r7, #4]
 8003344:	1e59      	subs	r1, r3, #1
 8003346:	4813      	ldr	r0, [pc, #76]	@ (8003394 <isFull+0x560>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d01a      	beq.n	8003390 <isFull+0x55c>
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	88b9      	ldrh	r1, [r7, #4]
 8003360:	480c      	ldr	r0, [pc, #48]	@ (8003394 <isFull+0x560>)
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d00d      	beq.n	8003390 <isFull+0x55c>
 8003374:	887b      	ldrh	r3, [r7, #2]
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	88bb      	ldrh	r3, [r7, #4]
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	4805      	ldr	r0, [pc, #20]	@ (8003394 <isFull+0x560>)
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d103      	bne.n	8003398 <isFull+0x564>
				return 0;
 8003390:	2300      	movs	r3, #0
 8003392:	e027      	b.n	80033e4 <isFull+0x5b0>
 8003394:	2000030c 	.word	0x2000030c
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8003398:	883b      	ldrh	r3, [r7, #0]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d002      	beq.n	80033a4 <isFull+0x570>
 800339e:	883b      	ldrh	r3, [r7, #0]
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d11c      	bne.n	80033de <isFull+0x5aa>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	1c9a      	adds	r2, r3, #2
 80033a8:	88b9      	ldrh	r1, [r7, #4]
 80033aa:	4811      	ldr	r0, [pc, #68]	@ (80033f0 <isFull+0x5bc>)
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d00d      	beq.n	80033da <isFull+0x5a6>
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	1c59      	adds	r1, r3, #1
 80033c6:	480a      	ldr	r0, [pc, #40]	@ (80033f0 <isFull+0x5bc>)
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <isFull+0x5aa>
				return 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	e002      	b.n	80033e4 <isFull+0x5b0>
			}
		}
		return 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <isFull+0x5b0>
	}
	return 1;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	2000030c 	.word	0x2000030c

080033f4 <updateTop>:

void updateTop(){
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
//	uint16_t BlockNum = CurrentBlock[0];
//	uint16_t Xpos = CurrentBlock[1];
	uint16_t Ypos = CurrentBlock[2];
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <updateTop+0x70>)
 80033fc:	889b      	ldrh	r3, [r3, #4]
 80033fe:	80fb      	strh	r3, [r7, #6]
//	uint16_t Orientation = CurrentBlock[3];

	for (int i = Ypos; i > 0; i++){
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e023      	b.n	800344e <updateTop+0x5a>
		for (int j = 0; j < 12; j++){
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	e01a      	b.n	8003442 <updateTop+0x4e>
			if (LCD_Screen[i][j] == 1){
 800340c:	4916      	ldr	r1, [pc, #88]	@ (8003468 <updateTop+0x74>)
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	4413      	add	r3, r2
 800341c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d10b      	bne.n	800343c <updateTop+0x48>
				if (i > topRow[j]){
 8003424:	4a11      	ldr	r2, [pc, #68]	@ (800346c <updateTop+0x78>)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	429a      	cmp	r2, r3
 8003430:	dd04      	ble.n	800343c <updateTop+0x48>
					topRow[j] = i;
 8003432:	490e      	ldr	r1, [pc, #56]	@ (800346c <updateTop+0x78>)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 12; j++){
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b0b      	cmp	r3, #11
 8003446:	dde1      	ble.n	800340c <updateTop+0x18>
	for (int i = Ypos; i > 0; i++){
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	dcd8      	bgt.n	8003406 <updateTop+0x12>
				}
			}
		}
	}
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000063c 	.word	0x2000063c
 8003468:	2000030c 	.word	0x2000030c
 800346c:	2000060c 	.word	0x2000060c

08003470 <checkForTetris>:

void checkForTetris(){
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
	int rowComplete = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]

	for (int i = 1; i < 5; i++){
 800347a:	2301      	movs	r3, #1
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	e021      	b.n	80034c4 <checkForTetris+0x54>
		for (int j = 0; j < 12; j++){
 8003480:	2300      	movs	r3, #0
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e013      	b.n	80034ae <checkForTetris+0x3e>
			if (LCD_Screen[i][j] == 1){
 8003486:	4913      	ldr	r1, [pc, #76]	@ (80034d4 <checkForTetris+0x64>)
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <checkForTetris+0x34>
				 rowComplete = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	e001      	b.n	80034a8 <checkForTetris+0x38>
			}
			else rowComplete = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
		for (int j = 0; j < 12; j++){
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3301      	adds	r3, #1
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0b      	cmp	r3, #11
 80034b2:	dde8      	ble.n	8003486 <checkForTetris+0x16>
		}
		if (rowComplete == 1)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <checkForTetris+0x4e>
		{
			shiftRowDown();
 80034ba:	f000 f80d 	bl	80034d8 <shiftRowDown>
	for (int i = 1; i < 5; i++){
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	3301      	adds	r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	ddda      	ble.n	8003480 <checkForTetris+0x10>
		}
	}
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	2000030c 	.word	0x2000030c

080034d8 <shiftRowDown>:

void shiftRowDown(){
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
	int Highest_Row = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 12; i++){
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e00e      	b.n	8003506 <shiftRowDown+0x2e>
		if (topRow[i] > Highest_Row){
 80034e8:	4a46      	ldr	r2, [pc, #280]	@ (8003604 <shiftRowDown+0x12c>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	da04      	bge.n	8003500 <shiftRowDown+0x28>
			Highest_Row = topRow[i];
 80034f6:	4a43      	ldr	r2, [pc, #268]	@ (8003604 <shiftRowDown+0x12c>)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fe:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 12; i++){
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3301      	adds	r3, #1
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b0b      	cmp	r3, #11
 800350a:	dded      	ble.n	80034e8 <shiftRowDown+0x10>
		}
	}

	for (int j = 1; j <= Highest_Row; j++){
 800350c:	2301      	movs	r3, #1
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e048      	b.n	80035a4 <shiftRowDown+0xcc>
		for (int k = 0; k < 12; k++){
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	e03f      	b.n	8003598 <shiftRowDown+0xc0>
			LCD_Screen[j][k] = LCD_Screen[j+1][k];
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	493a      	ldr	r1, [pc, #232]	@ (8003608 <shiftRowDown+0x130>)
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800352e:	4836      	ldr	r0, [pc, #216]	@ (8003608 <shiftRowDown+0x130>)
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4413      	add	r3, r2
 800353e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			Obj_Color[j][k] = Obj_Color[j+1][k];
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	4931      	ldr	r1, [pc, #196]	@ (800360c <shiftRowDown+0x134>)
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	4413      	add	r3, r2
 8003554:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8003558:	492c      	ldr	r1, [pc, #176]	@ (800360c <shiftRowDown+0x134>)
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	4413      	add	r3, r2
 8003568:	4602      	mov	r2, r0
 800356a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(k,j,Obj_Color[j+1][k]);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	b298      	uxth	r0, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	b299      	uxth	r1, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	4c24      	ldr	r4, [pc, #144]	@ (800360c <shiftRowDown+0x134>)
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	4413      	add	r3, r2
 8003588:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800358c:	461a      	mov	r2, r3
 800358e:	f7fd fab1 	bl	8000af4 <LCD_Draw_Square_Fill_Border>
		for (int k = 0; k < 12; k++){
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b0b      	cmp	r3, #11
 800359c:	ddbc      	ble.n	8003518 <shiftRowDown+0x40>
	for (int j = 1; j <= Highest_Row; j++){
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3301      	adds	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	ddb2      	ble.n	8003512 <shiftRowDown+0x3a>

		}
	}

	for (int l = 0; l < 12; l++){
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e020      	b.n	80035f4 <shiftRowDown+0x11c>
		LCD_Screen[Highest_Row][l] = 0;
 80035b2:	4915      	ldr	r1, [pc, #84]	@ (8003608 <shiftRowDown+0x130>)
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	2200      	movs	r2, #0
 80035c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Obj_Color[Highest_Row][l] = 0;
 80035c8:	4910      	ldr	r1, [pc, #64]	@ (800360c <shiftRowDown+0x134>)
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	2200      	movs	r2, #0
 80035da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		LCD_Erase_Square(l,Highest_Row);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	b292      	uxth	r2, r2
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd faf7 	bl	8000bdc <LCD_Erase_Square>
	for (int l = 0; l < 12; l++){
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3301      	adds	r3, #1
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b0b      	cmp	r3, #11
 80035f8:	dddb      	ble.n	80035b2 <shiftRowDown+0xda>
	}
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}
 8003604:	2000060c 	.word	0x2000060c
 8003608:	2000030c 	.word	0x2000030c
 800360c:	2000018c 	.word	0x2000018c

08003610 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003614:	b672      	cpsid	i
}
 8003616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <LCD_Error_Handler+0x8>

0800361c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8003620:	f000 fddc 	bl	80041dc <STMPE811_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b02      	cmp	r3, #2
 8003628:	d001      	beq.n	800362e <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800362a:	bf00      	nop
 800362c:	e7fd      	b.n	800362a <InitializeLCDTouch+0xe>
  }
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}

08003632 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 feb8 	bl	80043b0 <STMPE811_DetermineTouchPosition>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fe88 	bl	800436a <STMPE811_Read>
 800365a:	4603      	mov	r3, r0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	460a      	mov	r2, r1
 800366e:	71fb      	strb	r3, [r7, #7]
 8003670:	4613      	mov	r3, r2
 8003672:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8003674:	79ba      	ldrb	r2, [r7, #6]
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fe86 	bl	800438c <STMPE811_Write>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <GetRandomBlock>:
	if (HAL_RNG_Init(&RNG_Config) != HAL_OK){
		for (;;);
	}
}

uint32_t GetRandomBlock(){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
	uint32_t random_num = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
	random_num = HAL_RNG_GetRandomNumber(&RNG_Config);
 8003692:	480b      	ldr	r0, [pc, #44]	@ (80036c0 <GetRandomBlock+0x38>)
 8003694:	f004 f836 	bl	8007704 <HAL_RNG_GetRandomNumber>
 8003698:	6078      	str	r0, [r7, #4]
	random_num = (random_num % 7) + 1;
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <GetRandomBlock+0x3c>)
 800369e:	fba3 2301 	umull	r2, r3, r3, r1
 80036a2:	1aca      	subs	r2, r1, r3
 80036a4:	0852      	lsrs	r2, r2, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	089a      	lsrs	r2, r3, #2
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	1aca      	subs	r2, r1, r3
 80036b2:	1c53      	adds	r3, r2, #1
 80036b4:	607b      	str	r3, [r7, #4]
	return random_num;
 80036b6:	687b      	ldr	r3, [r7, #4]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20025e44 	.word	0x20025e44
 80036c4:	24924925 	.word	0x24924925

080036c8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80036cc:	f000 f9fe 	bl	8003acc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80036d0:	20ca      	movs	r0, #202	@ 0xca
 80036d2:	f000 f943 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80036d6:	20c3      	movs	r0, #195	@ 0xc3
 80036d8:	f000 f94d 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80036dc:	2008      	movs	r0, #8
 80036de:	f000 f94a 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80036e2:	2050      	movs	r0, #80	@ 0x50
 80036e4:	f000 f947 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80036e8:	20cf      	movs	r0, #207	@ 0xcf
 80036ea:	f000 f937 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80036ee:	2000      	movs	r0, #0
 80036f0:	f000 f941 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80036f4:	20c1      	movs	r0, #193	@ 0xc1
 80036f6:	f000 f93e 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80036fa:	2030      	movs	r0, #48	@ 0x30
 80036fc:	f000 f93b 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8003700:	20ed      	movs	r0, #237	@ 0xed
 8003702:	f000 f92b 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8003706:	2064      	movs	r0, #100	@ 0x64
 8003708:	f000 f935 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800370c:	2003      	movs	r0, #3
 800370e:	f000 f932 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8003712:	2012      	movs	r0, #18
 8003714:	f000 f92f 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8003718:	2081      	movs	r0, #129	@ 0x81
 800371a:	f000 f92c 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800371e:	20e8      	movs	r0, #232	@ 0xe8
 8003720:	f000 f91c 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8003724:	2085      	movs	r0, #133	@ 0x85
 8003726:	f000 f926 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800372a:	2000      	movs	r0, #0
 800372c:	f000 f923 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003730:	2078      	movs	r0, #120	@ 0x78
 8003732:	f000 f920 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8003736:	20cb      	movs	r0, #203	@ 0xcb
 8003738:	f000 f910 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800373c:	2039      	movs	r0, #57	@ 0x39
 800373e:	f000 f91a 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8003742:	202c      	movs	r0, #44	@ 0x2c
 8003744:	f000 f917 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003748:	2000      	movs	r0, #0
 800374a:	f000 f914 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800374e:	2034      	movs	r0, #52	@ 0x34
 8003750:	f000 f911 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8003754:	2002      	movs	r0, #2
 8003756:	f000 f90e 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800375a:	20f7      	movs	r0, #247	@ 0xf7
 800375c:	f000 f8fe 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003760:	2020      	movs	r0, #32
 8003762:	f000 f908 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8003766:	20ea      	movs	r0, #234	@ 0xea
 8003768:	f000 f8f8 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f000 f902 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003772:	2000      	movs	r0, #0
 8003774:	f000 f8ff 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003778:	20b1      	movs	r0, #177	@ 0xb1
 800377a:	f000 f8ef 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800377e:	2000      	movs	r0, #0
 8003780:	f000 f8f9 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8003784:	201b      	movs	r0, #27
 8003786:	f000 f8f6 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800378a:	20b6      	movs	r0, #182	@ 0xb6
 800378c:	f000 f8e6 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003790:	200a      	movs	r0, #10
 8003792:	f000 f8f0 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8003796:	20a2      	movs	r0, #162	@ 0xa2
 8003798:	f000 f8ed 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800379c:	20c0      	movs	r0, #192	@ 0xc0
 800379e:	f000 f8dd 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80037a2:	2010      	movs	r0, #16
 80037a4:	f000 f8e7 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80037a8:	20c1      	movs	r0, #193	@ 0xc1
 80037aa:	f000 f8d7 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80037ae:	2010      	movs	r0, #16
 80037b0:	f000 f8e1 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80037b4:	20c5      	movs	r0, #197	@ 0xc5
 80037b6:	f000 f8d1 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80037ba:	2045      	movs	r0, #69	@ 0x45
 80037bc:	f000 f8db 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80037c0:	2015      	movs	r0, #21
 80037c2:	f000 f8d8 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80037c6:	20c7      	movs	r0, #199	@ 0xc7
 80037c8:	f000 f8c8 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80037cc:	2090      	movs	r0, #144	@ 0x90
 80037ce:	f000 f8d2 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80037d2:	2036      	movs	r0, #54	@ 0x36
 80037d4:	f000 f8c2 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80037d8:	20c8      	movs	r0, #200	@ 0xc8
 80037da:	f000 f8cc 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80037de:	20f2      	movs	r0, #242	@ 0xf2
 80037e0:	f000 f8bc 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f000 f8c6 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80037ea:	20b0      	movs	r0, #176	@ 0xb0
 80037ec:	f000 f8b6 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80037f0:	20c2      	movs	r0, #194	@ 0xc2
 80037f2:	f000 f8c0 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80037f6:	20b6      	movs	r0, #182	@ 0xb6
 80037f8:	f000 f8b0 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80037fc:	200a      	movs	r0, #10
 80037fe:	f000 f8ba 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8003802:	20a7      	movs	r0, #167	@ 0xa7
 8003804:	f000 f8b7 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8003808:	2027      	movs	r0, #39	@ 0x27
 800380a:	f000 f8b4 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800380e:	2004      	movs	r0, #4
 8003810:	f000 f8b1 	bl	8003976 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8003814:	202a      	movs	r0, #42	@ 0x2a
 8003816:	f000 f8a1 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800381a:	2000      	movs	r0, #0
 800381c:	f000 f8ab 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003820:	2000      	movs	r0, #0
 8003822:	f000 f8a8 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003826:	2000      	movs	r0, #0
 8003828:	f000 f8a5 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800382c:	20ef      	movs	r0, #239	@ 0xef
 800382e:	f000 f8a2 	bl	8003976 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8003832:	202b      	movs	r0, #43	@ 0x2b
 8003834:	f000 f892 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003838:	2000      	movs	r0, #0
 800383a:	f000 f89c 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800383e:	2000      	movs	r0, #0
 8003840:	f000 f899 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8003844:	2001      	movs	r0, #1
 8003846:	f000 f896 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800384a:	203f      	movs	r0, #63	@ 0x3f
 800384c:	f000 f893 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003850:	20f6      	movs	r0, #246	@ 0xf6
 8003852:	f000 f883 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003856:	2001      	movs	r0, #1
 8003858:	f000 f88d 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800385c:	2000      	movs	r0, #0
 800385e:	f000 f88a 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8003862:	2006      	movs	r0, #6
 8003864:	f000 f887 	bl	8003976 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003868:	202c      	movs	r0, #44	@ 0x2c
 800386a:	f000 f877 	bl	800395c <ili9341_Write_Reg>
  LCD_Delay(200);
 800386e:	20c8      	movs	r0, #200	@ 0xc8
 8003870:	f000 f9e8 	bl	8003c44 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8003874:	2026      	movs	r0, #38	@ 0x26
 8003876:	f000 f871 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800387a:	2001      	movs	r0, #1
 800387c:	f000 f87b 	bl	8003976 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003880:	20e0      	movs	r0, #224	@ 0xe0
 8003882:	f000 f86b 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8003886:	200f      	movs	r0, #15
 8003888:	f000 f875 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800388c:	2029      	movs	r0, #41	@ 0x29
 800388e:	f000 f872 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8003892:	2024      	movs	r0, #36	@ 0x24
 8003894:	f000 f86f 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003898:	200c      	movs	r0, #12
 800389a:	f000 f86c 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800389e:	200e      	movs	r0, #14
 80038a0:	f000 f869 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80038a4:	2009      	movs	r0, #9
 80038a6:	f000 f866 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80038aa:	204e      	movs	r0, #78	@ 0x4e
 80038ac:	f000 f863 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80038b0:	2078      	movs	r0, #120	@ 0x78
 80038b2:	f000 f860 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80038b6:	203c      	movs	r0, #60	@ 0x3c
 80038b8:	f000 f85d 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80038bc:	2009      	movs	r0, #9
 80038be:	f000 f85a 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80038c2:	2013      	movs	r0, #19
 80038c4:	f000 f857 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80038c8:	2005      	movs	r0, #5
 80038ca:	f000 f854 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80038ce:	2017      	movs	r0, #23
 80038d0:	f000 f851 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80038d4:	2011      	movs	r0, #17
 80038d6:	f000 f84e 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80038da:	2000      	movs	r0, #0
 80038dc:	f000 f84b 	bl	8003976 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80038e0:	20e1      	movs	r0, #225	@ 0xe1
 80038e2:	f000 f83b 	bl	800395c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f000 f845 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80038ec:	2016      	movs	r0, #22
 80038ee:	f000 f842 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80038f2:	201b      	movs	r0, #27
 80038f4:	f000 f83f 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80038f8:	2004      	movs	r0, #4
 80038fa:	f000 f83c 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80038fe:	2011      	movs	r0, #17
 8003900:	f000 f839 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8003904:	2007      	movs	r0, #7
 8003906:	f000 f836 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800390a:	2031      	movs	r0, #49	@ 0x31
 800390c:	f000 f833 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8003910:	2033      	movs	r0, #51	@ 0x33
 8003912:	f000 f830 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8003916:	2042      	movs	r0, #66	@ 0x42
 8003918:	f000 f82d 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800391c:	2005      	movs	r0, #5
 800391e:	f000 f82a 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003922:	200c      	movs	r0, #12
 8003924:	f000 f827 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8003928:	200a      	movs	r0, #10
 800392a:	f000 f824 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800392e:	2028      	movs	r0, #40	@ 0x28
 8003930:	f000 f821 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8003934:	202f      	movs	r0, #47	@ 0x2f
 8003936:	f000 f81e 	bl	8003976 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800393a:	200f      	movs	r0, #15
 800393c:	f000 f81b 	bl	8003976 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003940:	2011      	movs	r0, #17
 8003942:	f000 f80b 	bl	800395c <ili9341_Write_Reg>
  LCD_Delay(200);
 8003946:	20c8      	movs	r0, #200	@ 0xc8
 8003948:	f000 f97c 	bl	8003c44 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800394c:	2029      	movs	r0, #41	@ 0x29
 800394e:	f000 f805 	bl	800395c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8003952:	202c      	movs	r0, #44	@ 0x2c
 8003954:	f000 f802 	bl	800395c <ili9341_Write_Reg>
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}

0800395c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f949 	bl	8003c00 <LCD_IO_WriteReg>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b082      	sub	sp, #8
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f91a 	bl	8003bbc <LCD_IO_WriteData>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003994:	4819      	ldr	r0, [pc, #100]	@ (80039fc <SPI_Init+0x6c>)
 8003996:	f004 f8bf 	bl	8007b18 <HAL_SPI_GetState>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d12b      	bne.n	80039f8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80039a0:	4b16      	ldr	r3, [pc, #88]	@ (80039fc <SPI_Init+0x6c>)
 80039a2:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <SPI_Init+0x70>)
 80039a4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <SPI_Init+0x6c>)
 80039a8:	2218      	movs	r2, #24
 80039aa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80039ac:	4b13      	ldr	r3, [pc, #76]	@ (80039fc <SPI_Init+0x6c>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <SPI_Init+0x6c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80039b8:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <SPI_Init+0x6c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <SPI_Init+0x6c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80039c4:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <SPI_Init+0x6c>)
 80039c6:	2207      	movs	r2, #7
 80039c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80039ca:	4b0c      	ldr	r3, [pc, #48]	@ (80039fc <SPI_Init+0x6c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80039d0:	4b0a      	ldr	r3, [pc, #40]	@ (80039fc <SPI_Init+0x6c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80039d6:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <SPI_Init+0x6c>)
 80039d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039dc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <SPI_Init+0x6c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <SPI_Init+0x6c>)
 80039e6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039ea:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80039ec:	4803      	ldr	r0, [pc, #12]	@ (80039fc <SPI_Init+0x6c>)
 80039ee:	f000 f833 	bl	8003a58 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80039f2:	4802      	ldr	r0, [pc, #8]	@ (80039fc <SPI_Init+0x6c>)
 80039f4:	f003 fe9b 	bl	800772e <HAL_SPI_Init>
  }
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20025e9c 	.word	0x20025e9c
 8003a00:	40015000 	.word	0x40015000

08003a04 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <SPI_Write+0x34>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1db9      	adds	r1, r7, #6
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4808      	ldr	r0, [pc, #32]	@ (8003a3c <SPI_Write+0x38>)
 8003a1c:	f003 ff38 	bl	8007890 <HAL_SPI_Transmit>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8003a2a:	f000 f809 	bl	8003a40 <SPI_Error>
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000010 	.word	0x20000010
 8003a3c:	20025e9c 	.word	0x20025e9c

08003a40 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003a44:	4803      	ldr	r0, [pc, #12]	@ (8003a54 <SPI_Error+0x14>)
 8003a46:	f003 fefb 	bl	8007840 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003a4a:	f7ff ffa1 	bl	8003990 <SPI_Init>
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20025e9c 	.word	0x20025e9c

08003a58 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	@ 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <SPI_MspInit+0x6c>)
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	4a16      	ldr	r2, [pc, #88]	@ (8003ac4 <SPI_MspInit+0x6c>)
 8003a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <SPI_MspInit+0x6c>)
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <SPI_MspInit+0x6c>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac4 <SPI_MspInit+0x6c>)
 8003a86:	f043 0320 	orr.w	r3, r3, #32
 8003a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <SPI_MspInit+0x6c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003a98:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003aaa:	2305      	movs	r3, #5
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4804      	ldr	r0, [pc, #16]	@ (8003ac8 <SPI_MspInit+0x70>)
 8003ab6:	f001 f9ef 	bl	8004e98 <HAL_GPIO_Init>
}
 8003aba:	bf00      	nop
 8003abc:	3728      	adds	r7, #40	@ 0x28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40021400 	.word	0x40021400

08003acc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <LCD_IO_Init+0xe0>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d164      	bne.n	8003ba4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003ada:	4b34      	ldr	r3, [pc, #208]	@ (8003bac <LCD_IO_Init+0xe0>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	4b32      	ldr	r3, [pc, #200]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	4a31      	ldr	r2, [pc, #196]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003aea:	f043 0308 	orr.w	r3, r3, #8
 8003aee:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af0:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003afc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b02:	2301      	movs	r3, #1
 8003b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003b0e:	f107 030c 	add.w	r3, r7, #12
 8003b12:	4619      	mov	r1, r3
 8003b14:	4827      	ldr	r0, [pc, #156]	@ (8003bb4 <LCD_IO_Init+0xe8>)
 8003b16:	f001 f9bf 	bl	8004e98 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	4b24      	ldr	r3, [pc, #144]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	4a23      	ldr	r2, [pc, #140]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2a:	4b21      	ldr	r3, [pc, #132]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b44:	2302      	movs	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4819      	ldr	r0, [pc, #100]	@ (8003bb4 <LCD_IO_Init+0xe8>)
 8003b50:	f001 f9a2 	bl	8004e98 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003b54:	2300      	movs	r3, #0
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	4a14      	ldr	r2, [pc, #80]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <LCD_IO_Init+0xe4>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003b70:	2304      	movs	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b74:	2301      	movs	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4619      	mov	r1, r3
 8003b86:	480c      	ldr	r0, [pc, #48]	@ (8003bb8 <LCD_IO_Init+0xec>)
 8003b88:	f001 f986 	bl	8004e98 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2104      	movs	r1, #4
 8003b90:	4809      	ldr	r0, [pc, #36]	@ (8003bb8 <LCD_IO_Init+0xec>)
 8003b92:	f001 fc39 	bl	8005408 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003b96:	2201      	movs	r2, #1
 8003b98:	2104      	movs	r1, #4
 8003b9a:	4807      	ldr	r0, [pc, #28]	@ (8003bb8 <LCD_IO_Init+0xec>)
 8003b9c:	f001 fc34 	bl	8005408 <HAL_GPIO_WritePin>

    SPI_Init();
 8003ba0:	f7ff fef6 	bl	8003990 <SPI_Init>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20025ef4 	.word	0x20025ef4
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020c00 	.word	0x40020c00
 8003bb8:	40020800 	.word	0x40020800

08003bbc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bcc:	480a      	ldr	r0, [pc, #40]	@ (8003bf8 <LCD_IO_WriteData+0x3c>)
 8003bce:	f001 fc1b 	bl	8005408 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2104      	movs	r1, #4
 8003bd6:	4809      	ldr	r0, [pc, #36]	@ (8003bfc <LCD_IO_WriteData+0x40>)
 8003bd8:	f001 fc16 	bl	8005408 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ff10 	bl	8003a04 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003be4:	2201      	movs	r2, #1
 8003be6:	2104      	movs	r1, #4
 8003be8:	4804      	ldr	r0, [pc, #16]	@ (8003bfc <LCD_IO_WriteData+0x40>)
 8003bea:	f001 fc0d 	bl	8005408 <HAL_GPIO_WritePin>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40020c00 	.word	0x40020c00
 8003bfc:	40020800 	.word	0x40020800

08003c00 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c10:	480a      	ldr	r0, [pc, #40]	@ (8003c3c <LCD_IO_WriteReg+0x3c>)
 8003c12:	f001 fbf9 	bl	8005408 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003c16:	2200      	movs	r2, #0
 8003c18:	2104      	movs	r1, #4
 8003c1a:	4809      	ldr	r0, [pc, #36]	@ (8003c40 <LCD_IO_WriteReg+0x40>)
 8003c1c:	f001 fbf4 	bl	8005408 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003c20:	79fb      	ldrb	r3, [r7, #7]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff feed 	bl	8003a04 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4804      	ldr	r0, [pc, #16]	@ (8003c40 <LCD_IO_WriteReg+0x40>)
 8003c30:	f001 fbea 	bl	8005408 <HAL_GPIO_WritePin>
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40020c00 	.word	0x40020c00
 8003c40:	40020800 	.word	0x40020800

08003c44 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 ff77 	bl	8004b40 <HAL_Delay>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c5e:	f000 fefd 	bl	8004a5c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8003c62:	f000 f807 	bl	8003c74 <SystemClockOverride>

//  I2C3_GPIO_Init();
//  I2C3_Init();

  ApplicationInit(); // Initializes the LCD functionality
 8003c66:	f7fc fc8b 	bl	8000580 <ApplicationInit>
//  TIM3_App_Start();
//  LCD_Visual_Demo();
  GameInit();
 8003c6a:	f7fd f951 	bl	8000f10 <GameInit>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  //LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <main+0x14>
	...

08003c74 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b092      	sub	sp, #72	@ 0x48
 8003c78:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf0 <SystemClockOverride+0x7c>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf0 <SystemClockOverride+0x7c>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c8a:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <SystemClockOverride+0x7c>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c9e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ca4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003ca8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003caa:	2308      	movs	r3, #8
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003cae:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003cb8:	2307      	movs	r3, #7
 8003cba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003cbc:	1d3b      	adds	r3, r7, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f002 fe86 	bl	80069d0 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003cdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003ce0:	2105      	movs	r1, #5
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f003 f8ec 	bl	8006ec0 <HAL_RCC_ClockConfig>
}
 8003ce8:	bf00      	nop
 8003cea:	3748      	adds	r7, #72	@ 0x48
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf8:	b672      	cpsid	i
}
 8003cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <Error_Handler+0x8>

08003d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_MspInit+0x4c>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d4c <HAL_MspInit+0x4c>)
 8003d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_MspInit+0x4c>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <HAL_MspInit+0x4c>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	4a08      	ldr	r2, [pc, #32]	@ (8003d4c <HAL_MspInit+0x4c>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <HAL_MspInit+0x4c>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d3e:	2007      	movs	r0, #7
 8003d40:	f001 f834 	bl	8004dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800

08003d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	@ 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	@ (8003e14 <HAL_I2C_MspInit+0xc4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d14b      	bne.n	8003e0a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	4b28      	ldr	r3, [pc, #160]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	4a27      	ldr	r2, [pc, #156]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003d7c:	f043 0304 	orr.w	r3, r3, #4
 8003d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d82:	4b25      	ldr	r3, [pc, #148]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	4b21      	ldr	r3, [pc, #132]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	4a20      	ldr	r2, [pc, #128]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003daa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db0:	2312      	movs	r3, #18
 8003db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4815      	ldr	r0, [pc, #84]	@ (8003e1c <HAL_I2C_MspInit+0xcc>)
 8003dc8:	f001 f866 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd2:	2312      	movs	r3, #18
 8003dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003dde:	2304      	movs	r3, #4
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	4619      	mov	r1, r3
 8003de8:	480d      	ldr	r0, [pc, #52]	@ (8003e20 <HAL_I2C_MspInit+0xd0>)
 8003dea:	f001 f855 	bl	8004e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df6:	4a08      	ldr	r2, [pc, #32]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003df8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfe:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_I2C_MspInit+0xc8>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003e0a:	bf00      	nop
 8003e0c:	3728      	adds	r7, #40	@ 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40005c00 	.word	0x40005c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	40020000 	.word	0x40020000

08003e24 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b09a      	sub	sp, #104	@ 0x68
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e40:	2230      	movs	r2, #48	@ 0x30
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 f95b 	bl	8008100 <memset>
  if(hltdc->Instance==LTDC)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a81      	ldr	r2, [pc, #516]	@ (8004054 <HAL_LTDC_MspInit+0x230>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	f040 80fa 	bne.w	800404a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003e56:	2308      	movs	r3, #8
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003e5a:	2332      	movs	r3, #50	@ 0x32
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003e62:	2300      	movs	r3, #0
 8003e64:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fa34 	bl	80072d8 <HAL_RCCEx_PeriphCLKConfig>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003e76:	f7ff ff3d 	bl	8003cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	4b76      	ldr	r3, [pc, #472]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	4a75      	ldr	r2, [pc, #468]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003e84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e8a:	4b73      	ldr	r3, [pc, #460]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e92:	623b      	str	r3, [r7, #32]
 8003e94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ea0:	f043 0320 	orr.w	r3, r3, #32
 8003ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ea6:	4b6c      	ldr	r3, [pc, #432]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	4b68      	ldr	r3, [pc, #416]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	4a67      	ldr	r2, [pc, #412]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec2:	4b65      	ldr	r3, [pc, #404]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	4b61      	ldr	r3, [pc, #388]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed6:	4a60      	ldr	r2, [pc, #384]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ede:	4b5e      	ldr	r3, [pc, #376]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	4b5a      	ldr	r3, [pc, #360]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	4a59      	ldr	r2, [pc, #356]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003efa:	4b57      	ldr	r3, [pc, #348]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	4b53      	ldr	r3, [pc, #332]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	4a52      	ldr	r2, [pc, #328]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f16:	4b50      	ldr	r3, [pc, #320]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	4b4c      	ldr	r3, [pc, #304]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	4a4b      	ldr	r2, [pc, #300]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003f2c:	f043 0308 	orr.w	r3, r3, #8
 8003f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f32:	4b49      	ldr	r3, [pc, #292]	@ (8004058 <HAL_LTDC_MspInit+0x234>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8003f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f42:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f44:	2302      	movs	r3, #2
 8003f46:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f50:	230e      	movs	r3, #14
 8003f52:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003f54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4840      	ldr	r0, [pc, #256]	@ (800405c <HAL_LTDC_MspInit+0x238>)
 8003f5c:	f000 ff9c 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8003f60:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003f64:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f66:	2302      	movs	r3, #2
 8003f68:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003f72:	230e      	movs	r3, #14
 8003f74:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4838      	ldr	r0, [pc, #224]	@ (8004060 <HAL_LTDC_MspInit+0x23c>)
 8003f7e:	f000 ff8b 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8003f82:	2303      	movs	r3, #3
 8003f84:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003f92:	2309      	movs	r3, #9
 8003f94:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4831      	ldr	r0, [pc, #196]	@ (8004064 <HAL_LTDC_MspInit+0x240>)
 8003f9e:	f000 ff7b 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8003fa2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003fa6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fb4:	230e      	movs	r3, #14
 8003fb6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4829      	ldr	r0, [pc, #164]	@ (8004064 <HAL_LTDC_MspInit+0x240>)
 8003fc0:	f000 ff6a 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8003fc4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8003fc8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003fd6:	230e      	movs	r3, #14
 8003fd8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4821      	ldr	r0, [pc, #132]	@ (8004068 <HAL_LTDC_MspInit+0x244>)
 8003fe2:	f000 ff59 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003fe6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003fea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fec:	2302      	movs	r3, #2
 8003fee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003ff8:	230e      	movs	r3, #14
 8003ffa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004000:	4619      	mov	r1, r3
 8004002:	481a      	ldr	r0, [pc, #104]	@ (800406c <HAL_LTDC_MspInit+0x248>)
 8004004:	f000 ff48 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8004008:	2348      	movs	r3, #72	@ 0x48
 800400a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004014:	2300      	movs	r3, #0
 8004016:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004018:	230e      	movs	r3, #14
 800401a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800401c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004020:	4619      	mov	r1, r3
 8004022:	4813      	ldr	r0, [pc, #76]	@ (8004070 <HAL_LTDC_MspInit+0x24c>)
 8004024:	f000 ff38 	bl	8004e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004028:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800402c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402e:	2302      	movs	r3, #2
 8004030:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004032:	2300      	movs	r3, #0
 8004034:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004036:	2300      	movs	r3, #0
 8004038:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800403a:	2309      	movs	r3, #9
 800403c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800403e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004042:	4619      	mov	r1, r3
 8004044:	4808      	ldr	r0, [pc, #32]	@ (8004068 <HAL_LTDC_MspInit+0x244>)
 8004046:	f000 ff27 	bl	8004e98 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800404a:	bf00      	nop
 800404c:	3768      	adds	r7, #104	@ 0x68
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40016800 	.word	0x40016800
 8004058:	40023800 	.word	0x40023800
 800405c:	40021400 	.word	0x40021400
 8004060:	40020000 	.word	0x40020000
 8004064:	40020400 	.word	0x40020400
 8004068:	40021800 	.word	0x40021800
 800406c:	40020800 	.word	0x40020800
 8004070:	40020c00 	.word	0x40020c00

08004074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a19      	ldr	r2, [pc, #100]	@ (80040f8 <HAL_SPI_MspInit+0x84>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12c      	bne.n	80040f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <HAL_SPI_MspInit+0x88>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	4a17      	ldr	r2, [pc, #92]	@ (80040fc <HAL_SPI_MspInit+0x88>)
 80040a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040a6:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <HAL_SPI_MspInit+0x88>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <HAL_SPI_MspInit+0x88>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	4a10      	ldr	r2, [pc, #64]	@ (80040fc <HAL_SPI_MspInit+0x88>)
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c2:	4b0e      	ldr	r3, [pc, #56]	@ (80040fc <HAL_SPI_MspInit+0x88>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80040ce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80040d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040dc:	2300      	movs	r3, #0
 80040de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80040e0:	2305      	movs	r3, #5
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	4619      	mov	r1, r3
 80040ea:	4805      	ldr	r0, [pc, #20]	@ (8004100 <HAL_SPI_MspInit+0x8c>)
 80040ec:	f000 fed4 	bl	8004e98 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80040f0:	bf00      	nop
 80040f2:	3728      	adds	r7, #40	@ 0x28
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40015000 	.word	0x40015000
 80040fc:	40023800 	.word	0x40023800
 8004100:	40021400 	.word	0x40021400

08004104 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_SPI_MspDeInit+0x30>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10a      	bne.n	800412c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_SPI_MspDeInit+0x34>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	4a07      	ldr	r2, [pc, #28]	@ (8004138 <HAL_SPI_MspDeInit+0x34>)
 800411c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004120:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004122:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8004126:	4805      	ldr	r0, [pc, #20]	@ (800413c <HAL_SPI_MspDeInit+0x38>)
 8004128:	f001 f862 	bl	80051f0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40015000 	.word	0x40015000
 8004138:	40023800 	.word	0x40023800
 800413c:	40021400 	.word	0x40021400

08004140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <NMI_Handler+0x4>

08004148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <HardFault_Handler+0x4>

08004150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <MemManage_Handler+0x4>

08004158 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <BusFault_Handler+0x4>

08004160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <UsageFault_Handler+0x4>

08004168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004196:	f000 fcb3 	bl	8004b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	@ (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80041e2:	f000 f9df 	bl	80045a4 <I2C3_MspInit>
//    I2C3_GPIO_Init();
    /* Initialize I2C */
    I2C3_Init();
 80041e6:	f000 f99d 	bl	8004524 <I2C3_Init>
//    I2C3__Init();

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80041ea:	2202      	movs	r2, #2
 80041ec:	2103      	movs	r1, #3
 80041ee:	2082      	movs	r0, #130	@ 0x82
 80041f0:	f000 fa2c 	bl	800464c <I2C3_Write>
    HAL_Delay(5);
 80041f4:	2005      	movs	r0, #5
 80041f6:	f000 fca3 	bl	8004b40 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2103      	movs	r1, #3
 80041fe:	2082      	movs	r0, #130	@ 0x82
 8004200:	f000 fa24 	bl	800464c <I2C3_Write>
    HAL_Delay(2);
 8004204:	2002      	movs	r0, #2
 8004206:	f000 fc9b 	bl	8004b40 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800420a:	1cba      	adds	r2, r7, #2
 800420c:	2302      	movs	r3, #2
 800420e:	2100      	movs	r1, #0
 8004210:	2082      	movs	r0, #130	@ 0x82
 8004212:	f000 fa6b 	bl	80046ec <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	021b      	lsls	r3, r3, #8
 800421a:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	b29a      	uxth	r2, r3
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	4313      	orrs	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	f640 0211 	movw	r2, #2065	@ 0x811
 800422e:	4293      	cmp	r3, r2
 8004230:	d001      	beq.n	8004236 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8004232:	2303      	movs	r3, #3
 8004234:	e095      	b.n	8004362 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8004236:	2202      	movs	r2, #2
 8004238:	2103      	movs	r1, #3
 800423a:	2082      	movs	r0, #130	@ 0x82
 800423c:	f000 fa06 	bl	800464c <I2C3_Write>
    HAL_Delay(5);
 8004240:	2005      	movs	r0, #5
 8004242:	f000 fc7d 	bl	8004b40 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004246:	2200      	movs	r2, #0
 8004248:	2103      	movs	r1, #3
 800424a:	2082      	movs	r0, #130	@ 0x82
 800424c:	f000 f9fe 	bl	800464c <I2C3_Write>
    HAL_Delay(2);
 8004250:	2002      	movs	r0, #2
 8004252:	f000 fc75 	bl	8004b40 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004256:	2004      	movs	r0, #4
 8004258:	f000 f887 	bl	800436a <STMPE811_Read>
 800425c:	4603      	mov	r3, r0
 800425e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8004260:	797b      	ldrb	r3, [r7, #5]
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004268:	797b      	ldrb	r3, [r7, #5]
 800426a:	461a      	mov	r2, r3
 800426c:	2104      	movs	r1, #4
 800426e:	2082      	movs	r0, #130	@ 0x82
 8004270:	f000 f9ec 	bl	800464c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8004274:	2004      	movs	r0, #4
 8004276:	f000 f878 	bl	800436a <STMPE811_Read>
 800427a:	4603      	mov	r3, r0
 800427c:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800427e:	797b      	ldrb	r3, [r7, #5]
 8004280:	f023 0302 	bic.w	r3, r3, #2
 8004284:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8004286:	797b      	ldrb	r3, [r7, #5]
 8004288:	461a      	mov	r2, r3
 800428a:	2104      	movs	r1, #4
 800428c:	2082      	movs	r0, #130	@ 0x82
 800428e:	f000 f9dd 	bl	800464c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8004292:	2249      	movs	r2, #73	@ 0x49
 8004294:	2120      	movs	r1, #32
 8004296:	2082      	movs	r0, #130	@ 0x82
 8004298:	f000 f9d8 	bl	800464c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800429c:	2002      	movs	r0, #2
 800429e:	f000 fc4f 	bl	8004b40 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80042a2:	2201      	movs	r2, #1
 80042a4:	2121      	movs	r1, #33	@ 0x21
 80042a6:	2082      	movs	r0, #130	@ 0x82
 80042a8:	f000 f9d0 	bl	800464c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80042ac:	2017      	movs	r0, #23
 80042ae:	f000 f85c 	bl	800436a <STMPE811_Read>
 80042b2:	4603      	mov	r3, r0
 80042b4:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80042b6:	797b      	ldrb	r3, [r7, #5]
 80042b8:	f043 031e 	orr.w	r3, r3, #30
 80042bc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80042be:	797b      	ldrb	r3, [r7, #5]
 80042c0:	461a      	mov	r2, r3
 80042c2:	2117      	movs	r1, #23
 80042c4:	2082      	movs	r0, #130	@ 0x82
 80042c6:	f000 f9c1 	bl	800464c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80042ca:	229a      	movs	r2, #154	@ 0x9a
 80042cc:	2141      	movs	r1, #65	@ 0x41
 80042ce:	2082      	movs	r0, #130	@ 0x82
 80042d0:	f000 f9bc 	bl	800464c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80042d4:	2201      	movs	r2, #1
 80042d6:	214a      	movs	r1, #74	@ 0x4a
 80042d8:	2082      	movs	r0, #130	@ 0x82
 80042da:	f000 f9b7 	bl	800464c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80042de:	2201      	movs	r2, #1
 80042e0:	214b      	movs	r1, #75	@ 0x4b
 80042e2:	2082      	movs	r0, #130	@ 0x82
 80042e4:	f000 f9b2 	bl	800464c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80042e8:	2200      	movs	r2, #0
 80042ea:	214b      	movs	r1, #75	@ 0x4b
 80042ec:	2082      	movs	r0, #130	@ 0x82
 80042ee:	f000 f9ad 	bl	800464c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80042f2:	2201      	movs	r2, #1
 80042f4:	2156      	movs	r1, #86	@ 0x56
 80042f6:	2082      	movs	r0, #130	@ 0x82
 80042f8:	f000 f9a8 	bl	800464c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80042fc:	2201      	movs	r2, #1
 80042fe:	2158      	movs	r1, #88	@ 0x58
 8004300:	2082      	movs	r0, #130	@ 0x82
 8004302:	f000 f9a3 	bl	800464c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8004306:	2203      	movs	r2, #3
 8004308:	2140      	movs	r1, #64	@ 0x40
 800430a:	2082      	movs	r0, #130	@ 0x82
 800430c:	f000 f99e 	bl	800464c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8004310:	22ff      	movs	r2, #255	@ 0xff
 8004312:	210b      	movs	r1, #11
 8004314:	2082      	movs	r0, #130	@ 0x82
 8004316:	f000 f999 	bl	800464c <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800431a:	f000 f8c1 	bl	80044a0 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 800431e:	2009      	movs	r0, #9
 8004320:	f000 f823 	bl	800436a <STMPE811_Read>
 8004324:	4603      	mov	r3, r0
 8004326:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004328:	797b      	ldrb	r3, [r7, #5]
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8004330:	797b      	ldrb	r3, [r7, #5]
 8004332:	461a      	mov	r2, r3
 8004334:	2109      	movs	r1, #9
 8004336:	2082      	movs	r0, #130	@ 0x82
 8004338:	f000 f988 	bl	800464c <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 800433c:	200a      	movs	r0, #10
 800433e:	f000 f814 	bl	800436a <STMPE811_Read>
 8004342:	4603      	mov	r3, r0
 8004344:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8004346:	797b      	ldrb	r3, [r7, #5]
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800434e:	797b      	ldrb	r3, [r7, #5]
 8004350:	461a      	mov	r2, r3
 8004352:	210a      	movs	r1, #10
 8004354:	2082      	movs	r0, #130	@ 0x82
 8004356:	f000 f979 	bl	800464c <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800435a:	20c8      	movs	r0, #200	@ 0xc8
 800435c:	f000 fbf0 	bl	8004b40 <HAL_Delay>

    return STMPE811_State_Ok;
 8004360:	2302      	movs	r3, #2

}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8004374:	f107 020f 	add.w	r2, r7, #15
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	4619      	mov	r1, r3
 800437c:	2082      	movs	r0, #130	@ 0x82
 800437e:	f000 f98f 	bl	80046a0 <I2C3_Read>

    return readData;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	460a      	mov	r2, r1
 8004396:	71fb      	strb	r3, [r7, #7]
 8004398:	4613      	mov	r3, r2
 800439a:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 800439c:	79ba      	ldrb	r2, [r7, #6]
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	4619      	mov	r1, r3
 80043a2:	2082      	movs	r0, #130	@ 0x82
 80043a4:	f000 f952 	bl	800464c <I2C3_Write>
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	799b      	ldrb	r3, [r3, #6]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d117      	bne.n	80043f0 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f9b3 	bl	8004730 <TM_STMPE811_ReadX>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	885b      	ldrh	r3, [r3, #2]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fa06 	bl	80047ec <TM_STMPE811_ReadY>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80043e6:	3301      	adds	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	805a      	strh	r2, [r3, #2]
 80043ee:	e048      	b.n	8004482 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	799b      	ldrb	r3, [r3, #6]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d112      	bne.n	800441e <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f997 	bl	8004730 <TM_STMPE811_ReadX>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	885b      	ldrh	r3, [r3, #2]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f9ec 	bl	80047ec <TM_STMPE811_ReadY>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	805a      	strh	r2, [r3, #2]
 800441c:	e031      	b.n	8004482 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	799b      	ldrb	r3, [r3, #6]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d115      	bne.n	8004452 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	885b      	ldrh	r3, [r3, #2]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f980 	bl	8004730 <TM_STMPE811_ReadX>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f9d5 	bl	80047ec <TM_STMPE811_ReadY>
 8004442:	4603      	mov	r3, r0
 8004444:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004448:	3301      	adds	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	e017      	b.n	8004482 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	799b      	ldrb	r3, [r3, #6]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d113      	bne.n	8004482 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f966 	bl	8004730 <TM_STMPE811_ReadX>
 8004464:	4603      	mov	r3, r0
 8004466:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f9b9 	bl	80047ec <TM_STMPE811_ReadY>
 800447a:	4603      	mov	r3, r0
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004482:	2201      	movs	r2, #1
 8004484:	214b      	movs	r1, #75	@ 0x4b
 8004486:	2082      	movs	r0, #130	@ 0x82
 8004488:	f000 f8e0 	bl	800464c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800448c:	2200      	movs	r2, #0
 800448e:	214b      	movs	r1, #75	@ 0x4b
 8004490:	2082      	movs	r0, #130	@ 0x82
 8004492:	f000 f8db 	bl	800464c <I2C3_Write>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <enableInterruptSupportForTouch+0x5c>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	4a13      	ldr	r2, [pc, #76]	@ (80044fc <enableInterruptSupportForTouch+0x5c>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044b6:	4b11      	ldr	r3, [pc, #68]	@ (80044fc <enableInterruptSupportForTouch+0x5c>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c2:	1d3b      	adds	r3, r7, #4
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80044d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80044d6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80044da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044e0:	2302      	movs	r3, #2
 80044e2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4805      	ldr	r0, [pc, #20]	@ (8004500 <enableInterruptSupportForTouch+0x60>)
 80044ea:	f000 fcd5 	bl	8004e98 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80044ee:	2028      	movs	r0, #40	@ 0x28
 80044f0:	f7ff fe56 	bl	80041a0 <__NVIC_EnableIRQ>

}
 80044f4:	bf00      	nop
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40023800 	.word	0x40023800
 8004500:	40020000 	.word	0x40020000

08004504 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8004508:	4b05      	ldr	r3, [pc, #20]	@ (8004520 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20025f4c 	.word	0x20025f4c

08004524 <I2C3_Init>:

static void I2C3_Init()
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <I2C3_Init+0x70>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <I2C3_Init+0x70>)
 8004534:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004538:	6413      	str	r3, [r2, #64]	@ 0x40
 800453a:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <I2C3_Init+0x70>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <I2C3_Init+0x74>)
 8004548:	4a14      	ldr	r2, [pc, #80]	@ (800459c <I2C3_Init+0x78>)
 800454a:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <I2C3_Init+0x74>)
 800454e:	4a14      	ldr	r2, [pc, #80]	@ (80045a0 <I2C3_Init+0x7c>)
 8004550:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004552:	4b11      	ldr	r3, [pc, #68]	@ (8004598 <I2C3_Init+0x74>)
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004558:	4b0f      	ldr	r3, [pc, #60]	@ (8004598 <I2C3_Init+0x74>)
 800455a:	2200      	movs	r2, #0
 800455c:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <I2C3_Init+0x74>)
 8004560:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004564:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8004566:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <I2C3_Init+0x74>)
 8004568:	2200      	movs	r2, #0
 800456a:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <I2C3_Init+0x74>)
 800456e:	2200      	movs	r2, #0
 8004570:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004572:	4809      	ldr	r0, [pc, #36]	@ (8004598 <I2C3_Init+0x74>)
 8004574:	f000 ff62 	bl	800543c <HAL_I2C_Init>
 8004578:	4603      	mov	r3, r0
 800457a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <I2C3_Init+0x5e>
    }
//    return;
    HAL_Delay(100);
 8004586:	2064      	movs	r0, #100	@ 0x64
 8004588:	f000 fada 	bl	8004b40 <HAL_Delay>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	20025ef8 	.word	0x20025ef8
 800459c:	40005c00 	.word	0x40005c00
 80045a0:	000186a0 	.word	0x000186a0

080045a4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045aa:	f107 030c 	add.w	r3, r7, #12
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <I2C3_MspInit+0x9c>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <I2C3_MspInit+0x9c>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <I2C3_MspInit+0x9c>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <I2C3_MspInit+0x9c>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <I2C3_MspInit+0x9c>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e6:	4b16      	ldr	r3, [pc, #88]	@ (8004640 <I2C3_MspInit+0x9c>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80045f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045f8:	2312      	movs	r3, #18
 80045fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004604:	2304      	movs	r3, #4
 8004606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004608:	f107 030c 	add.w	r3, r7, #12
 800460c:	4619      	mov	r1, r3
 800460e:	480d      	ldr	r0, [pc, #52]	@ (8004644 <I2C3_MspInit+0xa0>)
 8004610:	f000 fc42 	bl	8004e98 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004618:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800461a:	2312      	movs	r3, #18
 800461c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004626:	2304      	movs	r3, #4
 8004628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800462a:	f107 030c 	add.w	r3, r7, #12
 800462e:	4619      	mov	r1, r3
 8004630:	4805      	ldr	r0, [pc, #20]	@ (8004648 <I2C3_MspInit+0xa4>)
 8004632:	f000 fc31 	bl	8004e98 <HAL_GPIO_Init>
    
}
 8004636:	bf00      	nop
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	40020800 	.word	0x40020800
 8004648:	40020000 	.word	0x40020000

0800464c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af04      	add	r7, sp, #16
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]
 8004656:	460b      	mov	r3, r1
 8004658:	717b      	strb	r3, [r7, #5]
 800465a:	4613      	mov	r3, r2
 800465c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800465e:	793b      	ldrb	r3, [r7, #4]
 8004660:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004662:	797b      	ldrb	r3, [r7, #5]
 8004664:	b29a      	uxth	r2, r3
 8004666:	88f9      	ldrh	r1, [r7, #6]
 8004668:	4b0a      	ldr	r3, [pc, #40]	@ (8004694 <I2C3_Write+0x48>)
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	2301      	movs	r3, #1
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	f107 030f 	add.w	r3, r7, #15
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	2301      	movs	r3, #1
 8004678:	4807      	ldr	r0, [pc, #28]	@ (8004698 <I2C3_Write+0x4c>)
 800467a:	f001 f823 	bl	80056c4 <HAL_I2C_Mem_Write>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <I2C3_Write+0x50>)
 8004684:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004686:	f7ff ff3d 	bl	8004504 <verifyHAL_I2C_IS_OKAY>
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	0003d090 	.word	0x0003d090
 8004698:	20025ef8 	.word	0x20025ef8
 800469c:	20025f4c 	.word	0x20025f4c

080046a0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af04      	add	r7, sp, #16
 80046a6:	4603      	mov	r3, r0
 80046a8:	603a      	str	r2, [r7, #0]
 80046aa:	71fb      	strb	r3, [r7, #7]
 80046ac:	460b      	mov	r3, r1
 80046ae:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	b299      	uxth	r1, r3
 80046b4:	79bb      	ldrb	r3, [r7, #6]
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <I2C3_Read+0x40>)
 80046ba:	9302      	str	r3, [sp, #8]
 80046bc:	2301      	movs	r3, #1
 80046be:	9301      	str	r3, [sp, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	2301      	movs	r3, #1
 80046c6:	4807      	ldr	r0, [pc, #28]	@ (80046e4 <I2C3_Read+0x44>)
 80046c8:	f001 f8f6 	bl	80058b8 <HAL_I2C_Mem_Read>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b05      	ldr	r3, [pc, #20]	@ (80046e8 <I2C3_Read+0x48>)
 80046d2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80046d4:	f7ff ff16 	bl	8004504 <verifyHAL_I2C_IS_OKAY>
}
 80046d8:	bf00      	nop
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	0003d090 	.word	0x0003d090
 80046e4:	20025ef8 	.word	0x20025ef8
 80046e8:	20025f4c 	.word	0x20025f4c

080046ec <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af04      	add	r7, sp, #16
 80046f2:	603a      	str	r2, [r7, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
 80046fa:	460b      	mov	r3, r1
 80046fc:	71bb      	strb	r3, [r7, #6]
 80046fe:	4613      	mov	r3, r2
 8004700:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	b299      	uxth	r1, r3
 8004706:	79bb      	ldrb	r3, [r7, #6]
 8004708:	b29a      	uxth	r2, r3
 800470a:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <I2C3_MulitByteRead+0x3c>)
 800470c:	9302      	str	r3, [sp, #8]
 800470e:	88bb      	ldrh	r3, [r7, #4]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2301      	movs	r3, #1
 8004718:	4804      	ldr	r0, [pc, #16]	@ (800472c <I2C3_MulitByteRead+0x40>)
 800471a:	f001 f8cd 	bl	80058b8 <HAL_I2C_Mem_Read>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	0003d090 	.word	0x0003d090
 800472c:	20025ef8 	.word	0x20025ef8

08004730 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800473a:	204d      	movs	r0, #77	@ 0x4d
 800473c:	f7ff fe15 	bl	800436a <STMPE811_Read>
 8004740:	4603      	mov	r3, r0
 8004742:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004744:	204e      	movs	r0, #78	@ 0x4e
 8004746:	f7ff fe10 	bl	800436a <STMPE811_Read>
 800474a:	4603      	mov	r3, r0
 800474c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800474e:	7a7b      	ldrb	r3, [r7, #9]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	b21a      	sxth	r2, r3
 8004754:	7a3b      	ldrb	r3, [r7, #8]
 8004756:	b21b      	sxth	r3, r3
 8004758:	4313      	orrs	r3, r2
 800475a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800475c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004760:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004764:	4293      	cmp	r3, r2
 8004766:	dc06      	bgt.n	8004776 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800476e:	330c      	adds	r3, #12
 8004770:	b29b      	uxth	r3, r3
 8004772:	81fb      	strh	r3, [r7, #14]
 8004774:	e005      	b.n	8004782 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800477c:	3308      	adds	r3, #8
 800477e:	b29b      	uxth	r3, r3
 8004780:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004786:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <TM_STMPE811_ReadX+0xb8>)
 8004788:	fb82 1203 	smull	r1, r2, r2, r3
 800478c:	441a      	add	r2, r3
 800478e:	10d2      	asrs	r2, r2, #3
 8004790:	17db      	asrs	r3, r3, #31
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800479a:	2bef      	cmp	r3, #239	@ 0xef
 800479c:	dd02      	ble.n	80047a4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800479e:	23ef      	movs	r3, #239	@ 0xef
 80047a0:	81fb      	strh	r3, [r7, #14]
 80047a2:	e005      	b.n	80047b0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80047a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	da01      	bge.n	80047b0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80047b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	dd05      	ble.n	80047c6 <TM_STMPE811_ReadX+0x96>
 80047ba:	89fa      	ldrh	r2, [r7, #14]
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	b21b      	sxth	r3, r3
 80047c4:	e004      	b.n	80047d0 <TM_STMPE811_ReadX+0xa0>
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	b21b      	sxth	r3, r3
 80047d0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80047d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	dd01      	ble.n	80047de <TM_STMPE811_ReadX+0xae>
        return val;
 80047da:	89fb      	ldrh	r3, [r7, #14]
 80047dc:	e000      	b.n	80047e0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80047de:	88fb      	ldrh	r3, [r7, #6]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	88888889 	.word	0x88888889

080047ec <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80047f6:	204f      	movs	r0, #79	@ 0x4f
 80047f8:	f7ff fdb7 	bl	800436a <STMPE811_Read>
 80047fc:	4603      	mov	r3, r0
 80047fe:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004800:	2050      	movs	r0, #80	@ 0x50
 8004802:	f7ff fdb2 	bl	800436a <STMPE811_Read>
 8004806:	4603      	mov	r3, r0
 8004808:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800480a:	7a7b      	ldrb	r3, [r7, #9]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	b21a      	sxth	r2, r3
 8004810:	7a3b      	ldrb	r3, [r7, #8]
 8004812:	b21b      	sxth	r3, r3
 8004814:	4313      	orrs	r3, r2
 8004816:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8004818:	89fb      	ldrh	r3, [r7, #14]
 800481a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800481e:	b29b      	uxth	r3, r3
 8004820:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004826:	4a19      	ldr	r2, [pc, #100]	@ (800488c <TM_STMPE811_ReadY+0xa0>)
 8004828:	fb82 1203 	smull	r1, r2, r2, r3
 800482c:	1052      	asrs	r2, r2, #1
 800482e:	17db      	asrs	r3, r3, #31
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004838:	2b00      	cmp	r3, #0
 800483a:	dc02      	bgt.n	8004842 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	81fb      	strh	r3, [r7, #14]
 8004840:	e007      	b.n	8004852 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004846:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800484a:	db02      	blt.n	8004852 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800484c:	f240 133f 	movw	r3, #319	@ 0x13f
 8004850:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004852:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	429a      	cmp	r2, r3
 800485a:	dd05      	ble.n	8004868 <TM_STMPE811_ReadY+0x7c>
 800485c:	89fa      	ldrh	r2, [r7, #14]
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	b29b      	uxth	r3, r3
 8004864:	b21b      	sxth	r3, r3
 8004866:	e004      	b.n	8004872 <TM_STMPE811_ReadY+0x86>
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	b29b      	uxth	r3, r3
 8004870:	b21b      	sxth	r3, r3
 8004872:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004874:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004878:	2b04      	cmp	r3, #4
 800487a:	dd01      	ble.n	8004880 <TM_STMPE811_ReadY+0x94>
        return val;
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	e000      	b.n	8004882 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004880:	88fb      	ldrh	r3, [r7, #6]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2e8ba2e9 	.word	0x2e8ba2e9

08004890 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e00a      	b.n	80048c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048b0:	f3af 8000 	nop.w
 80048b4:	4601      	mov	r1, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	60ba      	str	r2, [r7, #8]
 80048bc:	b2ca      	uxtb	r2, r1
 80048be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	3301      	adds	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	dbf0      	blt.n	80048b0 <_read+0x12>
  }

  return len;
 80048ce:	687b      	ldr	r3, [r7, #4]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e009      	b.n	80048fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	60ba      	str	r2, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3301      	adds	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	429a      	cmp	r2, r3
 8004904:	dbf1      	blt.n	80048ea <_write+0x12>
  }
  return len;
 8004906:	687b      	ldr	r3, [r7, #4]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <_close>:

int _close(int file)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004938:	605a      	str	r2, [r3, #4]
  return 0;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <_isatty>:

int _isatty(int file)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004950:	2301      	movs	r3, #1
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <_sbrk+0x5c>)
 8004982:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <_sbrk+0x60>)
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800498c:	4b13      	ldr	r3, [pc, #76]	@ (80049dc <_sbrk+0x64>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d102      	bne.n	800499a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <_sbrk+0x64>)
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <_sbrk+0x68>)
 8004998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800499a:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <_sbrk+0x64>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d207      	bcs.n	80049b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049a8:	f003 fbf8 	bl	800819c <__errno>
 80049ac:	4603      	mov	r3, r0
 80049ae:	220c      	movs	r2, #12
 80049b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	e009      	b.n	80049cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049b8:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <_sbrk+0x64>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049be:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <_sbrk+0x64>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	4a05      	ldr	r2, [pc, #20]	@ (80049dc <_sbrk+0x64>)
 80049c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049ca:	68fb      	ldr	r3, [r7, #12]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20030000 	.word	0x20030000
 80049d8:	00000400 	.word	0x00000400
 80049dc:	20025f50 	.word	0x20025f50
 80049e0:	200260a8 	.word	0x200260a8

080049e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049e8:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <SystemInit+0x20>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ee:	4a05      	ldr	r2, [pc, #20]	@ (8004a04 <SystemInit+0x20>)
 80049f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	e000ed00 	.word	0xe000ed00

08004a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a0c:	f7ff ffea 	bl	80049e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a10:	480c      	ldr	r0, [pc, #48]	@ (8004a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a12:	490d      	ldr	r1, [pc, #52]	@ (8004a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a14:	4a0d      	ldr	r2, [pc, #52]	@ (8004a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a18:	e002      	b.n	8004a20 <LoopCopyDataInit>

08004a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a1e:	3304      	adds	r3, #4

08004a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a24:	d3f9      	bcc.n	8004a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a26:	4a0a      	ldr	r2, [pc, #40]	@ (8004a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a28:	4c0a      	ldr	r4, [pc, #40]	@ (8004a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a2c:	e001      	b.n	8004a32 <LoopFillZerobss>

08004a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a30:	3204      	adds	r2, #4

08004a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a34:	d3fb      	bcc.n	8004a2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004a36:	f003 fbb7 	bl	80081a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a3a:	f7ff f90e 	bl	8003c5a <main>
  bx  lr    
 8004a3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004a40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004a4c:	08009e8c 	.word	0x08009e8c
  ldr r2, =_sbss
 8004a50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004a54:	200260a4 	.word	0x200260a4

08004a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a58:	e7fe      	b.n	8004a58 <ADC_IRQHandler>
	...

08004a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a60:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <HAL_Init+0x40>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <HAL_Init+0x40>)
 8004a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <HAL_Init+0x40>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0a      	ldr	r2, [pc, #40]	@ (8004a9c <HAL_Init+0x40>)
 8004a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a78:	4b08      	ldr	r3, [pc, #32]	@ (8004a9c <HAL_Init+0x40>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <HAL_Init+0x40>)
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a84:	2003      	movs	r0, #3
 8004a86:	f000 f991 	bl	8004dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	f000 f808 	bl	8004aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a90:	f7ff f936 	bl	8003d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023c00 	.word	0x40023c00

08004aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004aa8:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <HAL_InitTick+0x54>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <HAL_InitTick+0x58>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f9b7 	bl	8004e32 <HAL_SYSTICK_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00e      	b.n	8004aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d80a      	bhi.n	8004aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	f000 f971 	bl	8004dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ae0:	4a06      	ldr	r2, [pc, #24]	@ (8004afc <HAL_InitTick+0x5c>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000014 	.word	0x20000014
 8004af8:	2000001c 	.word	0x2000001c
 8004afc:	20000018 	.word	0x20000018

08004b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <HAL_IncTick+0x20>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b06      	ldr	r3, [pc, #24]	@ (8004b24 <HAL_IncTick+0x24>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4413      	add	r3, r2
 8004b10:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <HAL_IncTick+0x24>)
 8004b12:	6013      	str	r3, [r2, #0]
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	2000001c 	.word	0x2000001c
 8004b24:	20025f54 	.word	0x20025f54

08004b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	@ (8004b3c <HAL_GetTick+0x14>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20025f54 	.word	0x20025f54

08004b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b48:	f7ff ffee 	bl	8004b28 <HAL_GetTick>
 8004b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d005      	beq.n	8004b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <HAL_Delay+0x44>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b66:	bf00      	nop
 8004b68:	f7ff ffde 	bl	8004b28 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d8f7      	bhi.n	8004b68 <HAL_Delay+0x28>
  {
  }
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	2000001c 	.word	0x2000001c

08004b88 <__NVIC_SetPriorityGrouping>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b98:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bba:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <__NVIC_SetPriorityGrouping+0x44>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	60d3      	str	r3, [r2, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_GetPriorityGrouping>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd4:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <__NVIC_GetPriorityGrouping+0x18>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	0a1b      	lsrs	r3, r3, #8
 8004bda:	f003 0307 	and.w	r3, r3, #7
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <__NVIC_EnableIRQ>:
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	db0b      	blt.n	8004c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	f003 021f 	and.w	r2, r3, #31
 8004c04:	4907      	ldr	r1, [pc, #28]	@ (8004c24 <__NVIC_EnableIRQ+0x38>)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e100 	.word	0xe000e100

08004c28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	db12      	blt.n	8004c60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	f003 021f 	and.w	r2, r3, #31
 8004c40:	490a      	ldr	r1, [pc, #40]	@ (8004c6c <__NVIC_DisableIRQ+0x44>)
 8004c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	2001      	movs	r0, #1
 8004c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c4e:	3320      	adds	r3, #32
 8004c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c54:	f3bf 8f4f 	dsb	sy
}
 8004c58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c5a:	f3bf 8f6f 	isb	sy
}
 8004c5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db0c      	blt.n	8004c9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	f003 021f 	and.w	r2, r3, #31
 8004c88:	4907      	ldr	r1, [pc, #28]	@ (8004ca8 <__NVIC_ClearPendingIRQ+0x38>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2001      	movs	r0, #1
 8004c92:	fa00 f202 	lsl.w	r2, r0, r2
 8004c96:	3360      	adds	r3, #96	@ 0x60
 8004c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	e000e100 	.word	0xe000e100

08004cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	6039      	str	r1, [r7, #0]
 8004cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	db0a      	blt.n	8004cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	490c      	ldr	r1, [pc, #48]	@ (8004cf8 <__NVIC_SetPriority+0x4c>)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd4:	e00a      	b.n	8004cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4908      	ldr	r1, [pc, #32]	@ (8004cfc <__NVIC_SetPriority+0x50>)
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3b04      	subs	r3, #4
 8004ce4:	0112      	lsls	r2, r2, #4
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	440b      	add	r3, r1
 8004cea:	761a      	strb	r2, [r3, #24]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000e100 	.word	0xe000e100
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	@ 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f1c3 0307 	rsb	r3, r3, #7
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	bf28      	it	cs
 8004d1e:	2304      	movcs	r3, #4
 8004d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3304      	adds	r3, #4
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d902      	bls.n	8004d30 <NVIC_EncodePriority+0x30>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3b03      	subs	r3, #3
 8004d2e:	e000      	b.n	8004d32 <NVIC_EncodePriority+0x32>
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d34:	f04f 32ff 	mov.w	r2, #4294967295
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	401a      	ands	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d48:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d52:	43d9      	mvns	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d58:	4313      	orrs	r3, r2
         );
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3724      	adds	r7, #36	@ 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d78:	d301      	bcc.n	8004d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00f      	b.n	8004d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <SysTick_Config+0x40>)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d86:	210f      	movs	r1, #15
 8004d88:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8c:	f7ff ff8e 	bl	8004cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <SysTick_Config+0x40>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d96:	4b04      	ldr	r3, [pc, #16]	@ (8004da8 <SysTick_Config+0x40>)
 8004d98:	2207      	movs	r2, #7
 8004d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	e000e010 	.word	0xe000e010

08004dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff fee7 	bl	8004b88 <__NVIC_SetPriorityGrouping>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dd4:	f7ff fefc 	bl	8004bd0 <__NVIC_GetPriorityGrouping>
 8004dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	f7ff ff8e 	bl	8004d00 <NVIC_EncodePriority>
 8004de4:	4602      	mov	r2, r0
 8004de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff5d 	bl	8004cac <__NVIC_SetPriority>
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	4603      	mov	r3, r0
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff feef 	bl	8004bec <__NVIC_EnableIRQ>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b082      	sub	sp, #8
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff feff 	bl	8004c28 <__NVIC_DisableIRQ>
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b082      	sub	sp, #8
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff ff94 	bl	8004d68 <SysTick_Config>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	4603      	mov	r3, r0
 8004e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff ff09 	bl	8004c70 <__NVIC_ClearPendingIRQ>
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004e82:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <HAL_EXTI_ClearPending+0x2c>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6153      	str	r3, [r2, #20]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40013c00 	.word	0x40013c00

08004e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	@ 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	e177      	b.n	80051a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	f040 8166 	bne.w	800519e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d005      	beq.n	8004eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d130      	bne.n	8004f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f20:	2201      	movs	r2, #1
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 0201 	and.w	r2, r3, #1
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d017      	beq.n	8004f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	2203      	movs	r2, #3
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 0303 	and.w	r3, r3, #3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d123      	bne.n	8004fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	08da      	lsrs	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3208      	adds	r2, #8
 8004f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	220f      	movs	r2, #15
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	08da      	lsrs	r2, r3, #3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3208      	adds	r2, #8
 8004fd6:	69b9      	ldr	r1, [r7, #24]
 8004fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 0203 	and.w	r2, r3, #3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4313      	orrs	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80c0 	beq.w	800519e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	4b66      	ldr	r3, [pc, #408]	@ (80051bc <HAL_GPIO_Init+0x324>)
 8005024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005026:	4a65      	ldr	r2, [pc, #404]	@ (80051bc <HAL_GPIO_Init+0x324>)
 8005028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800502c:	6453      	str	r3, [r2, #68]	@ 0x44
 800502e:	4b63      	ldr	r3, [pc, #396]	@ (80051bc <HAL_GPIO_Init+0x324>)
 8005030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800503a:	4a61      	ldr	r2, [pc, #388]	@ (80051c0 <HAL_GPIO_Init+0x328>)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	3302      	adds	r3, #2
 8005042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	220f      	movs	r2, #15
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43db      	mvns	r3, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a58      	ldr	r2, [pc, #352]	@ (80051c4 <HAL_GPIO_Init+0x32c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d037      	beq.n	80050d6 <HAL_GPIO_Init+0x23e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a57      	ldr	r2, [pc, #348]	@ (80051c8 <HAL_GPIO_Init+0x330>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d031      	beq.n	80050d2 <HAL_GPIO_Init+0x23a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a56      	ldr	r2, [pc, #344]	@ (80051cc <HAL_GPIO_Init+0x334>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d02b      	beq.n	80050ce <HAL_GPIO_Init+0x236>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a55      	ldr	r2, [pc, #340]	@ (80051d0 <HAL_GPIO_Init+0x338>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d025      	beq.n	80050ca <HAL_GPIO_Init+0x232>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a54      	ldr	r2, [pc, #336]	@ (80051d4 <HAL_GPIO_Init+0x33c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01f      	beq.n	80050c6 <HAL_GPIO_Init+0x22e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a53      	ldr	r2, [pc, #332]	@ (80051d8 <HAL_GPIO_Init+0x340>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d019      	beq.n	80050c2 <HAL_GPIO_Init+0x22a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a52      	ldr	r2, [pc, #328]	@ (80051dc <HAL_GPIO_Init+0x344>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_GPIO_Init+0x226>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a51      	ldr	r2, [pc, #324]	@ (80051e0 <HAL_GPIO_Init+0x348>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00d      	beq.n	80050ba <HAL_GPIO_Init+0x222>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a50      	ldr	r2, [pc, #320]	@ (80051e4 <HAL_GPIO_Init+0x34c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <HAL_GPIO_Init+0x21e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a4f      	ldr	r2, [pc, #316]	@ (80051e8 <HAL_GPIO_Init+0x350>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d101      	bne.n	80050b2 <HAL_GPIO_Init+0x21a>
 80050ae:	2309      	movs	r3, #9
 80050b0:	e012      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050b2:	230a      	movs	r3, #10
 80050b4:	e010      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050b6:	2308      	movs	r3, #8
 80050b8:	e00e      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050ba:	2307      	movs	r3, #7
 80050bc:	e00c      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050be:	2306      	movs	r3, #6
 80050c0:	e00a      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050c2:	2305      	movs	r3, #5
 80050c4:	e008      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050c6:	2304      	movs	r3, #4
 80050c8:	e006      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050ca:	2303      	movs	r3, #3
 80050cc:	e004      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050ce:	2302      	movs	r3, #2
 80050d0:	e002      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_GPIO_Init+0x240>
 80050d6:	2300      	movs	r3, #0
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	f002 0203 	and.w	r2, r2, #3
 80050de:	0092      	lsls	r2, r2, #2
 80050e0:	4093      	lsls	r3, r2
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e8:	4935      	ldr	r1, [pc, #212]	@ (80051c0 <HAL_GPIO_Init+0x328>)
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	089b      	lsrs	r3, r3, #2
 80050ee:	3302      	adds	r3, #2
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050f6:	4b3d      	ldr	r3, [pc, #244]	@ (80051ec <HAL_GPIO_Init+0x354>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800511a:	4a34      	ldr	r2, [pc, #208]	@ (80051ec <HAL_GPIO_Init+0x354>)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <HAL_GPIO_Init+0x354>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005144:	4a29      	ldr	r2, [pc, #164]	@ (80051ec <HAL_GPIO_Init+0x354>)
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800514a:	4b28      	ldr	r3, [pc, #160]	@ (80051ec <HAL_GPIO_Init+0x354>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800516e:	4a1f      	ldr	r2, [pc, #124]	@ (80051ec <HAL_GPIO_Init+0x354>)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005174:	4b1d      	ldr	r3, [pc, #116]	@ (80051ec <HAL_GPIO_Init+0x354>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005198:	4a14      	ldr	r2, [pc, #80]	@ (80051ec <HAL_GPIO_Init+0x354>)
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3301      	adds	r3, #1
 80051a2:	61fb      	str	r3, [r7, #28]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	f67f ae84 	bls.w	8004eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	3724      	adds	r7, #36	@ 0x24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40013800 	.word	0x40013800
 80051c4:	40020000 	.word	0x40020000
 80051c8:	40020400 	.word	0x40020400
 80051cc:	40020800 	.word	0x40020800
 80051d0:	40020c00 	.word	0x40020c00
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40021400 	.word	0x40021400
 80051dc:	40021800 	.word	0x40021800
 80051e0:	40021c00 	.word	0x40021c00
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40022400 	.word	0x40022400
 80051ec:	40013c00 	.word	0x40013c00

080051f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	e0d9      	b.n	80053c0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800520c:	2201      	movs	r2, #1
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4013      	ands	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	f040 80c9 	bne.w	80053ba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005228:	4a6b      	ldr	r2, [pc, #428]	@ (80053d8 <HAL_GPIO_DeInit+0x1e8>)
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	3302      	adds	r3, #2
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	220f      	movs	r2, #15
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a63      	ldr	r2, [pc, #396]	@ (80053dc <HAL_GPIO_DeInit+0x1ec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d037      	beq.n	80052c2 <HAL_GPIO_DeInit+0xd2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a62      	ldr	r2, [pc, #392]	@ (80053e0 <HAL_GPIO_DeInit+0x1f0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d031      	beq.n	80052be <HAL_GPIO_DeInit+0xce>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a61      	ldr	r2, [pc, #388]	@ (80053e4 <HAL_GPIO_DeInit+0x1f4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d02b      	beq.n	80052ba <HAL_GPIO_DeInit+0xca>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a60      	ldr	r2, [pc, #384]	@ (80053e8 <HAL_GPIO_DeInit+0x1f8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d025      	beq.n	80052b6 <HAL_GPIO_DeInit+0xc6>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a5f      	ldr	r2, [pc, #380]	@ (80053ec <HAL_GPIO_DeInit+0x1fc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d01f      	beq.n	80052b2 <HAL_GPIO_DeInit+0xc2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a5e      	ldr	r2, [pc, #376]	@ (80053f0 <HAL_GPIO_DeInit+0x200>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d019      	beq.n	80052ae <HAL_GPIO_DeInit+0xbe>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a5d      	ldr	r2, [pc, #372]	@ (80053f4 <HAL_GPIO_DeInit+0x204>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_GPIO_DeInit+0xba>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a5c      	ldr	r2, [pc, #368]	@ (80053f8 <HAL_GPIO_DeInit+0x208>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00d      	beq.n	80052a6 <HAL_GPIO_DeInit+0xb6>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a5b      	ldr	r2, [pc, #364]	@ (80053fc <HAL_GPIO_DeInit+0x20c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <HAL_GPIO_DeInit+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a5a      	ldr	r2, [pc, #360]	@ (8005400 <HAL_GPIO_DeInit+0x210>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_GPIO_DeInit+0xae>
 800529a:	2309      	movs	r3, #9
 800529c:	e012      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 800529e:	230a      	movs	r3, #10
 80052a0:	e010      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052a2:	2308      	movs	r3, #8
 80052a4:	e00e      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052a6:	2307      	movs	r3, #7
 80052a8:	e00c      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052aa:	2306      	movs	r3, #6
 80052ac:	e00a      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052ae:	2305      	movs	r3, #5
 80052b0:	e008      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052b2:	2304      	movs	r3, #4
 80052b4:	e006      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052b6:	2303      	movs	r3, #3
 80052b8:	e004      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e002      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_GPIO_DeInit+0xd4>
 80052c2:	2300      	movs	r3, #0
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	f002 0203 	and.w	r2, r2, #3
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	4093      	lsls	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d132      	bne.n	800533a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80052d4:	4b4b      	ldr	r3, [pc, #300]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	43db      	mvns	r3, r3
 80052dc:	4949      	ldr	r1, [pc, #292]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 80052de:	4013      	ands	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80052e2:	4b48      	ldr	r3, [pc, #288]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	4946      	ldr	r1, [pc, #280]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80052f0:	4b44      	ldr	r3, [pc, #272]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	4942      	ldr	r1, [pc, #264]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80052fe:	4b41      	ldr	r3, [pc, #260]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	43db      	mvns	r3, r3
 8005306:	493f      	ldr	r1, [pc, #252]	@ (8005404 <HAL_GPIO_DeInit+0x214>)
 8005308:	4013      	ands	r3, r2
 800530a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	220f      	movs	r2, #15
 8005316:	fa02 f303 	lsl.w	r3, r2, r3
 800531a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800531c:	4a2e      	ldr	r2, [pc, #184]	@ (80053d8 <HAL_GPIO_DeInit+0x1e8>)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	43da      	mvns	r2, r3
 800532c:	482a      	ldr	r0, [pc, #168]	@ (80053d8 <HAL_GPIO_DeInit+0x1e8>)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	089b      	lsrs	r3, r3, #2
 8005332:	400a      	ands	r2, r1
 8005334:	3302      	adds	r3, #2
 8005336:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	2103      	movs	r1, #3
 8005344:	fa01 f303 	lsl.w	r3, r1, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	401a      	ands	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	08da      	lsrs	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3208      	adds	r2, #8
 8005358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	220f      	movs	r2, #15
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	08d2      	lsrs	r2, r2, #3
 8005370:	4019      	ands	r1, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3208      	adds	r2, #8
 8005376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	2103      	movs	r1, #3
 8005384:	fa01 f303 	lsl.w	r3, r1, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	401a      	ands	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	2101      	movs	r1, #1
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	fa01 f303 	lsl.w	r3, r1, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	2103      	movs	r1, #3
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	401a      	ands	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3301      	adds	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b0f      	cmp	r3, #15
 80053c4:	f67f af22 	bls.w	800520c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40020000 	.word	0x40020000
 80053e0:	40020400 	.word	0x40020400
 80053e4:	40020800 	.word	0x40020800
 80053e8:	40020c00 	.word	0x40020c00
 80053ec:	40021000 	.word	0x40021000
 80053f0:	40021400 	.word	0x40021400
 80053f4:	40021800 	.word	0x40021800
 80053f8:	40021c00 	.word	0x40021c00
 80053fc:	40022000 	.word	0x40022000
 8005400:	40022400 	.word	0x40022400
 8005404:	40013c00 	.word	0x40013c00

08005408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
 8005414:	4613      	mov	r3, r2
 8005416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005418:	787b      	ldrb	r3, [r7, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541e:	887a      	ldrh	r2, [r7, #2]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005424:	e003      	b.n	800542e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005426:	887b      	ldrh	r3, [r7, #2]
 8005428:	041a      	lsls	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e12b      	b.n	80056a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fe fc74 	bl	8003d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	@ 0x24
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800548e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800549e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054a0:	f001 ff06 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4a81      	ldr	r2, [pc, #516]	@ (80056b0 <HAL_I2C_Init+0x274>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d807      	bhi.n	80054c0 <HAL_I2C_Init+0x84>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a80      	ldr	r2, [pc, #512]	@ (80056b4 <HAL_I2C_Init+0x278>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	bf94      	ite	ls
 80054b8:	2301      	movls	r3, #1
 80054ba:	2300      	movhi	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e006      	b.n	80054ce <HAL_I2C_Init+0x92>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a7d      	ldr	r2, [pc, #500]	@ (80056b8 <HAL_I2C_Init+0x27c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	bf94      	ite	ls
 80054c8:	2301      	movls	r3, #1
 80054ca:	2300      	movhi	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e0e7      	b.n	80056a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a78      	ldr	r2, [pc, #480]	@ (80056bc <HAL_I2C_Init+0x280>)
 80054da:	fba2 2303 	umull	r2, r3, r2, r3
 80054de:	0c9b      	lsrs	r3, r3, #18
 80054e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a6a      	ldr	r2, [pc, #424]	@ (80056b0 <HAL_I2C_Init+0x274>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d802      	bhi.n	8005510 <HAL_I2C_Init+0xd4>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3301      	adds	r3, #1
 800550e:	e009      	b.n	8005524 <HAL_I2C_Init+0xe8>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	4a69      	ldr	r2, [pc, #420]	@ (80056c0 <HAL_I2C_Init+0x284>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	099b      	lsrs	r3, r3, #6
 8005522:	3301      	adds	r3, #1
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	430b      	orrs	r3, r1
 800552a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005536:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	495c      	ldr	r1, [pc, #368]	@ (80056b0 <HAL_I2C_Init+0x274>)
 8005540:	428b      	cmp	r3, r1
 8005542:	d819      	bhi.n	8005578 <HAL_I2C_Init+0x13c>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	1e59      	subs	r1, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005558:	400b      	ands	r3, r1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_I2C_Init+0x138>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1e59      	subs	r1, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	fbb1 f3f3 	udiv	r3, r1, r3
 800556c:	3301      	adds	r3, #1
 800556e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005572:	e051      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 8005574:	2304      	movs	r3, #4
 8005576:	e04f      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d111      	bne.n	80055a4 <HAL_I2C_Init+0x168>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e58      	subs	r0, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6859      	ldr	r1, [r3, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	440b      	add	r3, r1
 800558e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005592:	3301      	adds	r3, #1
 8005594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf0c      	ite	eq
 800559c:	2301      	moveq	r3, #1
 800559e:	2300      	movne	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e012      	b.n	80055ca <HAL_I2C_Init+0x18e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1e58      	subs	r0, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	0099      	lsls	r1, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ba:	3301      	adds	r3, #1
 80055bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Init+0x196>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e022      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10e      	bne.n	80055f8 <HAL_I2C_Init+0x1bc>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1e58      	subs	r0, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6859      	ldr	r1, [r3, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	440b      	add	r3, r1
 80055e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055f6:	e00f      	b.n	8005618 <HAL_I2C_Init+0x1dc>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1e58      	subs	r0, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	0099      	lsls	r1, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	fbb0 f3f3 	udiv	r3, r0, r3
 800560e:	3301      	adds	r3, #1
 8005610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	6809      	ldr	r1, [r1, #0]
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6911      	ldr	r1, [r2, #16]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68d2      	ldr	r2, [r2, #12]
 8005652:	4311      	orrs	r1, r2
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	430b      	orrs	r3, r1
 800565a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	000186a0 	.word	0x000186a0
 80056b4:	001e847f 	.word	0x001e847f
 80056b8:	003d08ff 	.word	0x003d08ff
 80056bc:	431bde83 	.word	0x431bde83
 80056c0:	10624dd3 	.word	0x10624dd3

080056c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	817b      	strh	r3, [r7, #10]
 80056d6:	460b      	mov	r3, r1
 80056d8:	813b      	strh	r3, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056de:	f7ff fa23 	bl	8004b28 <HAL_GetTick>
 80056e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	f040 80d9 	bne.w	80058a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2319      	movs	r3, #25
 80056f8:	2201      	movs	r2, #1
 80056fa:	496d      	ldr	r1, [pc, #436]	@ (80058b0 <HAL_I2C_Mem_Write+0x1ec>)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fc8b 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
 800570a:	e0cc      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_I2C_Mem_Write+0x56>
 8005716:	2302      	movs	r3, #2
 8005718:	e0c5      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d007      	beq.n	8005740 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800574e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2221      	movs	r2, #33	@ 0x21
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2240      	movs	r2, #64	@ 0x40
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a3a      	ldr	r2, [r7, #32]
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a4d      	ldr	r2, [pc, #308]	@ (80058b4 <HAL_I2C_Mem_Write+0x1f0>)
 8005780:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005782:	88f8      	ldrh	r0, [r7, #6]
 8005784:	893a      	ldrh	r2, [r7, #8]
 8005786:	8979      	ldrh	r1, [r7, #10]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	4603      	mov	r3, r0
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fac2 	bl	8005d1c <I2C_RequestMemoryWrite>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d052      	beq.n	8005844 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e081      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fd50 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d107      	bne.n	80057ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e06b      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	781a      	ldrb	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_I2C_Mem_Write+0x180>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1aa      	bne.n	80057a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fd43 	bl	80062dc <I2C_WaitOnBTFFlagUntilTimeout>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00d      	beq.n	8005878 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005860:	2b04      	cmp	r3, #4
 8005862:	d107      	bne.n	8005874 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005872:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e016      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	00100002 	.word	0x00100002
 80058b4:	ffff0000 	.word	0xffff0000

080058b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	@ 0x30
 80058bc:	af02      	add	r7, sp, #8
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	4608      	mov	r0, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	817b      	strh	r3, [r7, #10]
 80058ca:	460b      	mov	r3, r1
 80058cc:	813b      	strh	r3, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058d2:	f7ff f929 	bl	8004b28 <HAL_GetTick>
 80058d6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	f040 8214 	bne.w	8005d0e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2319      	movs	r3, #25
 80058ec:	2201      	movs	r2, #1
 80058ee:	497b      	ldr	r1, [pc, #492]	@ (8005adc <HAL_I2C_Mem_Read+0x224>)
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fb91 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
 80058fe:	e207      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_I2C_Mem_Read+0x56>
 800590a:	2302      	movs	r3, #2
 800590c:	e200      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d007      	beq.n	8005934 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2222      	movs	r2, #34	@ 0x22
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2240      	movs	r2, #64	@ 0x40
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800595e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a5b      	ldr	r2, [pc, #364]	@ (8005ae0 <HAL_I2C_Mem_Read+0x228>)
 8005974:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005976:	88f8      	ldrh	r0, [r7, #6]
 8005978:	893a      	ldrh	r2, [r7, #8]
 800597a:	8979      	ldrh	r1, [r7, #10]
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4603      	mov	r3, r0
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fa5e 	bl	8005e48 <I2C_RequestMemoryRead>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e1bc      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d113      	bne.n	80059c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800599e:	2300      	movs	r3, #0
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	623b      	str	r3, [r7, #32]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	623b      	str	r3, [r7, #32]
 80059b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e190      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d11b      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	61fb      	str	r3, [r7, #28]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e170      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d11b      	bne.n	8005a46 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	e150      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a5c:	e144      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	f200 80f1 	bhi.w	8005c4a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d123      	bne.n	8005ab8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 fc79 	bl	800636c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e145      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ab6:	e117      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d14e      	bne.n	8005b5e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4906      	ldr	r1, [pc, #24]	@ (8005ae4 <HAL_I2C_Mem_Read+0x22c>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 faa4 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e11a      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
 8005ada:	bf00      	nop
 8005adc:	00100002 	.word	0x00100002
 8005ae0:	ffff0000 	.word	0xffff0000
 8005ae4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b01      	subs	r3, #1
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b5c:	e0c4      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	2200      	movs	r2, #0
 8005b66:	496c      	ldr	r1, [pc, #432]	@ (8005d18 <HAL_I2C_Mem_Read+0x460>)
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 fa55 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0cb      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4955      	ldr	r1, [pc, #340]	@ (8005d18 <HAL_I2C_Mem_Read+0x460>)
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fa27 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e09d      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005be2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c48:	e04e      	b.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fb8c 	bl	800636c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e058      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691a      	ldr	r2, [r3, #16]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d124      	bne.n	8005ce8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d107      	bne.n	8005cb6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f47f aeb6 	bne.w	8005a5e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	@ 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	00010004 	.word	0x00010004

08005d1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b088      	sub	sp, #32
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	4608      	mov	r0, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	817b      	strh	r3, [r7, #10]
 8005d2e:	460b      	mov	r3, r1
 8005d30:	813b      	strh	r3, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f960 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00d      	beq.n	8005d7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6c:	d103      	bne.n	8005d76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e05f      	b.n	8005e3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d7a:	897b      	ldrh	r3, [r7, #10]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	492d      	ldr	r1, [pc, #180]	@ (8005e44 <I2C_RequestMemoryWrite+0x128>)
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f9bb 	bl	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e04c      	b.n	8005e3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db8:	6a39      	ldr	r1, [r7, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fa46 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00d      	beq.n	8005de2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d107      	bne.n	8005dde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ddc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e02b      	b.n	8005e3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d105      	bne.n	8005df4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de8:	893b      	ldrh	r3, [r7, #8]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	e021      	b.n	8005e38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005df4:	893b      	ldrh	r3, [r7, #8]
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e04:	6a39      	ldr	r1, [r7, #32]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fa20 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00d      	beq.n	8005e2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d107      	bne.n	8005e2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e005      	b.n	8005e3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e2e:	893b      	ldrh	r3, [r7, #8]
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	00010002 	.word	0x00010002

08005e48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	4608      	mov	r0, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	817b      	strh	r3, [r7, #10]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	813b      	strh	r3, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f8c2 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea8:	d103      	bne.n	8005eb2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e0aa      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eb6:	897b      	ldrh	r3, [r7, #10]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ec4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	6a3a      	ldr	r2, [r7, #32]
 8005eca:	4952      	ldr	r1, [pc, #328]	@ (8006014 <I2C_RequestMemoryRead+0x1cc>)
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f91d 	bl	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e097      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	6a39      	ldr	r1, [r7, #32]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f9a8 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d107      	bne.n	8005f1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e076      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d105      	bne.n	8005f30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	611a      	str	r2, [r3, #16]
 8005f2e:	e021      	b.n	8005f74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f30:	893b      	ldrh	r3, [r7, #8]
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f40:	6a39      	ldr	r1, [r7, #32]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 f982 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00d      	beq.n	8005f6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d107      	bne.n	8005f66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e050      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f6a:	893b      	ldrh	r3, [r7, #8]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f76:	6a39      	ldr	r1, [r7, #32]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f967 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d107      	bne.n	8005f9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e035      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f82b 	bl	8006018 <I2C_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00d      	beq.n	8005fe4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fd6:	d103      	bne.n	8005fe0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e013      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005fe4:	897b      	ldrh	r3, [r7, #10]
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f043 0301 	orr.w	r3, r3, #1
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	4906      	ldr	r1, [pc, #24]	@ (8006014 <I2C_RequestMemoryRead+0x1cc>)
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f886 	bl	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	00010002 	.word	0x00010002

08006018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	4613      	mov	r3, r2
 8006026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006028:	e048      	b.n	80060bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d044      	beq.n	80060bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006032:	f7fe fd79 	bl	8004b28 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d302      	bcc.n	8006048 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d139      	bne.n	80060bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	0c1b      	lsrs	r3, r3, #16
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	43da      	mvns	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4013      	ands	r3, r2
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	e00c      	b.n	8006088 <I2C_WaitOnFlagUntilTimeout+0x70>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	43da      	mvns	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4013      	ands	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	429a      	cmp	r2, r3
 800608c:	d116      	bne.n	80060bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a8:	f043 0220 	orr.w	r2, r3, #32
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e023      	b.n	8006104 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	0c1b      	lsrs	r3, r3, #16
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10d      	bne.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	43da      	mvns	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4013      	ands	r3, r2
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	e00c      	b.n	80060fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	43da      	mvns	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d093      	beq.n	800602a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800611a:	e071      	b.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800612a:	d123      	bne.n	8006174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800613a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006144:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	f043 0204 	orr.w	r2, r3, #4
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e067      	b.n	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d041      	beq.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617c:	f7fe fcd4 	bl	8004b28 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d136      	bne.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	d10c      	bne.n	80061b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	43da      	mvns	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	4013      	ands	r3, r2
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	e00b      	b.n	80061ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	43da      	mvns	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4013      	ands	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ec:	f043 0220 	orr.w	r2, r3, #32
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e021      	b.n	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	0c1b      	lsrs	r3, r3, #16
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10c      	bne.n	8006224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	43da      	mvns	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4013      	ands	r3, r2
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e00b      	b.n	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	43da      	mvns	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4013      	ands	r3, r2
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	f47f af6d 	bne.w	800611c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006258:	e034      	b.n	80062c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f8e3 	bl	8006426 <I2C_IsAcknowledgeFailed>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e034      	b.n	80062d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d028      	beq.n	80062c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006272:	f7fe fc59 	bl	8004b28 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11d      	bne.n	80062c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006292:	2b80      	cmp	r3, #128	@ 0x80
 8006294:	d016      	beq.n	80062c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e007      	b.n	80062d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ce:	2b80      	cmp	r3, #128	@ 0x80
 80062d0:	d1c3      	bne.n	800625a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062e8:	e034      	b.n	8006354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f89b 	bl	8006426 <I2C_IsAcknowledgeFailed>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e034      	b.n	8006364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006300:	d028      	beq.n	8006354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006302:	f7fe fc11 	bl	8004b28 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	429a      	cmp	r2, r3
 8006310:	d302      	bcc.n	8006318 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d11d      	bne.n	8006354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	2b04      	cmp	r3, #4
 8006324:	d016      	beq.n	8006354 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	f043 0220 	orr.w	r2, r3, #32
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e007      	b.n	8006364 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b04      	cmp	r3, #4
 8006360:	d1c3      	bne.n	80062ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006378:	e049      	b.n	800640e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b10      	cmp	r3, #16
 8006386:	d119      	bne.n	80063bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0210 	mvn.w	r2, #16
 8006390:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e030      	b.n	800641e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063bc:	f7fe fbb4 	bl	8004b28 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d11d      	bne.n	800640e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063dc:	2b40      	cmp	r3, #64	@ 0x40
 80063de:	d016      	beq.n	800640e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e007      	b.n	800641e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d1ae      	bne.n	800637a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643c:	d11b      	bne.n	8006476 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006446:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	f043 0204 	orr.w	r2, r3, #4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0bf      	b.n	8006616 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fd fcba 	bl	8003e24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80064c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6999      	ldr	r1, [r3, #24]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6899      	ldr	r1, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006620 <HAL_LTDC_Init+0x19c>)
 80064f8:	400b      	ands	r3, r1
 80064fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	041b      	lsls	r3, r3, #16
 8006502:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6899      	ldr	r1, [r3, #8]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68d9      	ldr	r1, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	4b3e      	ldr	r3, [pc, #248]	@ (8006620 <HAL_LTDC_Init+0x19c>)
 8006526:	400b      	ands	r3, r1
 8006528:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	041b      	lsls	r3, r3, #16
 8006530:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68d9      	ldr	r1, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1a      	ldr	r2, [r3, #32]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	431a      	orrs	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6919      	ldr	r1, [r3, #16]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b33      	ldr	r3, [pc, #204]	@ (8006620 <HAL_LTDC_Init+0x19c>)
 8006554:	400b      	ands	r3, r1
 8006556:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	041b      	lsls	r3, r3, #16
 800655e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6919      	ldr	r1, [r3, #16]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6959      	ldr	r1, [r3, #20]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <HAL_LTDC_Init+0x19c>)
 8006582:	400b      	ands	r3, r1
 8006584:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6959      	ldr	r1, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80065c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0206 	orr.w	r2, r2, #6
 80065f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	f000f800 	.word	0xf000f800

08006624 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006624:	b5b0      	push	{r4, r5, r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_LTDC_ConfigLayer+0x1a>
 800663a:	2302      	movs	r3, #2
 800663c:	e02c      	b.n	8006698 <HAL_LTDC_ConfigLayer+0x74>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2134      	movs	r1, #52	@ 0x34
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	4413      	add	r3, r2
 800665a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	4614      	mov	r4, r2
 8006662:	461d      	mov	r5, r3
 8006664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800666a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800666c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800666e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f811 	bl	80066a0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2201      	movs	r2, #1
 8006684:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bdb0      	pop	{r4, r5, r7, pc}

080066a0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b089      	sub	sp, #36	@ 0x24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	0c1b      	lsrs	r3, r3, #16
 80066b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066bc:	4413      	add	r3, r2
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	01db      	lsls	r3, r3, #7
 80066cc:	4413      	add	r3, r2
 80066ce:	3384      	adds	r3, #132	@ 0x84
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	6812      	ldr	r2, [r2, #0]
 80066d6:	4611      	mov	r1, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	01d2      	lsls	r2, r2, #7
 80066dc:	440a      	add	r2, r1
 80066de:	3284      	adds	r2, #132	@ 0x84
 80066e0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80066e4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066f6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066f8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4619      	mov	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	01db      	lsls	r3, r3, #7
 8006704:	440b      	add	r3, r1
 8006706:	3384      	adds	r3, #132	@ 0x84
 8006708:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800670e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800671e:	4413      	add	r3, r2
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	01db      	lsls	r3, r3, #7
 800672e:	4413      	add	r3, r2
 8006730:	3384      	adds	r3, #132	@ 0x84
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	4611      	mov	r1, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	01d2      	lsls	r2, r2, #7
 800673e:	440a      	add	r2, r1
 8006740:	3284      	adds	r2, #132	@ 0x84
 8006742:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006746:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006756:	4413      	add	r3, r2
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	01db      	lsls	r3, r3, #7
 8006764:	440b      	add	r3, r1
 8006766:	3384      	adds	r3, #132	@ 0x84
 8006768:	4619      	mov	r1, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4313      	orrs	r3, r2
 800676e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	01db      	lsls	r3, r3, #7
 800677a:	4413      	add	r3, r2
 800677c:	3384      	adds	r3, #132	@ 0x84
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	4611      	mov	r1, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	01d2      	lsls	r2, r2, #7
 800678a:	440a      	add	r2, r1
 800678c:	3284      	adds	r2, #132	@ 0x84
 800678e:	f023 0307 	bic.w	r3, r3, #7
 8006792:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	01db      	lsls	r3, r3, #7
 800679e:	4413      	add	r3, r2
 80067a0:	3384      	adds	r3, #132	@ 0x84
 80067a2:	461a      	mov	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80067b0:	021b      	lsls	r3, r3, #8
 80067b2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	061b      	lsls	r3, r3, #24
 80067c4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	461a      	mov	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	01db      	lsls	r3, r3, #7
 80067d0:	4413      	add	r3, r2
 80067d2:	3384      	adds	r3, #132	@ 0x84
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	01db      	lsls	r3, r3, #7
 80067e0:	4413      	add	r3, r2
 80067e2:	3384      	adds	r3, #132	@ 0x84
 80067e4:	461a      	mov	r2, r3
 80067e6:	2300      	movs	r3, #0
 80067e8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067f0:	461a      	mov	r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	01db      	lsls	r3, r3, #7
 8006804:	440b      	add	r3, r1
 8006806:	3384      	adds	r3, #132	@ 0x84
 8006808:	4619      	mov	r1, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	461a      	mov	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	01db      	lsls	r3, r3, #7
 800681a:	4413      	add	r3, r2
 800681c:	3384      	adds	r3, #132	@ 0x84
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	4611      	mov	r1, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	01d2      	lsls	r2, r2, #7
 800682a:	440a      	add	r2, r1
 800682c:	3284      	adds	r2, #132	@ 0x84
 800682e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006832:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	01db      	lsls	r3, r3, #7
 800683e:	4413      	add	r3, r2
 8006840:	3384      	adds	r3, #132	@ 0x84
 8006842:	461a      	mov	r2, r3
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	4413      	add	r3, r2
 8006856:	3384      	adds	r3, #132	@ 0x84
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	4611      	mov	r1, r2
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	01d2      	lsls	r2, r2, #7
 8006864:	440a      	add	r2, r1
 8006866:	3284      	adds	r2, #132	@ 0x84
 8006868:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	69da      	ldr	r2, [r3, #28]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	6809      	ldr	r1, [r1, #0]
 800687e:	4608      	mov	r0, r1
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	01c9      	lsls	r1, r1, #7
 8006884:	4401      	add	r1, r0
 8006886:	3184      	adds	r1, #132	@ 0x84
 8006888:	4313      	orrs	r3, r2
 800688a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	01db      	lsls	r3, r3, #7
 8006896:	4413      	add	r3, r2
 8006898:	3384      	adds	r3, #132	@ 0x84
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	01db      	lsls	r3, r3, #7
 80068a6:	4413      	add	r3, r2
 80068a8:	3384      	adds	r3, #132	@ 0x84
 80068aa:	461a      	mov	r2, r3
 80068ac:	2300      	movs	r3, #0
 80068ae:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	01db      	lsls	r3, r3, #7
 80068ba:	4413      	add	r3, r2
 80068bc:	3384      	adds	r3, #132	@ 0x84
 80068be:	461a      	mov	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80068ce:	2304      	movs	r3, #4
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	e01b      	b.n	800690c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d102      	bne.n	80068e2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80068dc:	2303      	movs	r3, #3
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	e014      	b.n	800690c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d00b      	beq.n	8006902 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d007      	beq.n	8006902 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d003      	beq.n	8006902 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068fe:	2b07      	cmp	r3, #7
 8006900:	d102      	bne.n	8006908 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006902:	2302      	movs	r3, #2
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	e001      	b.n	800690c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006908:	2301      	movs	r3, #1
 800690a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	01db      	lsls	r3, r3, #7
 8006916:	4413      	add	r3, r2
 8006918:	3384      	adds	r3, #132	@ 0x84
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	4611      	mov	r1, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	01d2      	lsls	r2, r2, #7
 8006926:	440a      	add	r2, r1
 8006928:	3284      	adds	r2, #132	@ 0x84
 800692a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800692e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	1acb      	subs	r3, r1, r3
 8006946:	69f9      	ldr	r1, [r7, #28]
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800694e:	68f9      	ldr	r1, [r7, #12]
 8006950:	6809      	ldr	r1, [r1, #0]
 8006952:	4608      	mov	r0, r1
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	01c9      	lsls	r1, r1, #7
 8006958:	4401      	add	r1, r0
 800695a:	3184      	adds	r1, #132	@ 0x84
 800695c:	4313      	orrs	r3, r2
 800695e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	01db      	lsls	r3, r3, #7
 800696a:	4413      	add	r3, r2
 800696c:	3384      	adds	r3, #132	@ 0x84
 800696e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	6812      	ldr	r2, [r2, #0]
 8006974:	4611      	mov	r1, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	01d2      	lsls	r2, r2, #7
 800697a:	440a      	add	r2, r1
 800697c:	3284      	adds	r2, #132	@ 0x84
 800697e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	01db      	lsls	r3, r3, #7
 8006992:	4413      	add	r3, r2
 8006994:	3384      	adds	r3, #132	@ 0x84
 8006996:	461a      	mov	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	01db      	lsls	r3, r3, #7
 80069a8:	4413      	add	r3, r2
 80069aa:	3384      	adds	r3, #132	@ 0x84
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	4611      	mov	r1, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	01d2      	lsls	r2, r2, #7
 80069b8:	440a      	add	r2, r1
 80069ba:	3284      	adds	r2, #132	@ 0x84
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6013      	str	r3, [r2, #0]
}
 80069c2:	bf00      	nop
 80069c4:	3724      	adds	r7, #36	@ 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e267      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d075      	beq.n	8006ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80069ee:	4b88      	ldr	r3, [pc, #544]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 030c 	and.w	r3, r3, #12
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d00c      	beq.n	8006a14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069fa:	4b85      	ldr	r3, [pc, #532]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d112      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a06:	4b82      	ldr	r3, [pc, #520]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a12:	d10b      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a14:	4b7e      	ldr	r3, [pc, #504]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d05b      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x108>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d157      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e242      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a34:	d106      	bne.n	8006a44 <HAL_RCC_OscConfig+0x74>
 8006a36:	4b76      	ldr	r3, [pc, #472]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a75      	ldr	r2, [pc, #468]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a40:	6013      	str	r3, [r2, #0]
 8006a42:	e01d      	b.n	8006a80 <HAL_RCC_OscConfig+0xb0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCC_OscConfig+0x98>
 8006a4e:	4b70      	ldr	r3, [pc, #448]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6f      	ldr	r2, [pc, #444]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	e00b      	b.n	8006a80 <HAL_RCC_OscConfig+0xb0>
 8006a68:	4b69      	ldr	r3, [pc, #420]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a68      	ldr	r2, [pc, #416]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	4b66      	ldr	r3, [pc, #408]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a65      	ldr	r2, [pc, #404]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d013      	beq.n	8006ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a88:	f7fe f84e 	bl	8004b28 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a90:	f7fe f84a 	bl	8004b28 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b64      	cmp	r3, #100	@ 0x64
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e207      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0f0      	beq.n	8006a90 <HAL_RCC_OscConfig+0xc0>
 8006aae:	e014      	b.n	8006ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab0:	f7fe f83a 	bl	8004b28 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ab8:	f7fe f836 	bl	8004b28 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b64      	cmp	r3, #100	@ 0x64
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e1f3      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aca:	4b51      	ldr	r3, [pc, #324]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0xe8>
 8006ad6:	e000      	b.n	8006ada <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d063      	beq.n	8006bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00b      	beq.n	8006b0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006af2:	4b47      	ldr	r3, [pc, #284]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d11c      	bne.n	8006b38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006afe:	4b44      	ldr	r3, [pc, #272]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d116      	bne.n	8006b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0a:	4b41      	ldr	r3, [pc, #260]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <HAL_RCC_OscConfig+0x152>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d001      	beq.n	8006b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e1c7      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b22:	4b3b      	ldr	r3, [pc, #236]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4937      	ldr	r1, [pc, #220]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b36:	e03a      	b.n	8006bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d020      	beq.n	8006b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b40:	4b34      	ldr	r3, [pc, #208]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b46:	f7fd ffef 	bl	8004b28 <HAL_GetTick>
 8006b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b4e:	f7fd ffeb 	bl	8004b28 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e1a8      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b60:	4b2b      	ldr	r3, [pc, #172]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d0f0      	beq.n	8006b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b6c:	4b28      	ldr	r3, [pc, #160]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	4925      	ldr	r1, [pc, #148]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	600b      	str	r3, [r1, #0]
 8006b80:	e015      	b.n	8006bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b82:	4b24      	ldr	r3, [pc, #144]	@ (8006c14 <HAL_RCC_OscConfig+0x244>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b88:	f7fd ffce 	bl	8004b28 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b90:	f7fd ffca 	bl	8004b28 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e187      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d036      	beq.n	8006c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d016      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bc2:	4b15      	ldr	r3, [pc, #84]	@ (8006c18 <HAL_RCC_OscConfig+0x248>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc8:	f7fd ffae 	bl	8004b28 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd0:	f7fd ffaa 	bl	8004b28 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e167      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006be2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <HAL_RCC_OscConfig+0x240>)
 8006be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d0f0      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x200>
 8006bee:	e01b      	b.n	8006c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bf0:	4b09      	ldr	r3, [pc, #36]	@ (8006c18 <HAL_RCC_OscConfig+0x248>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf6:	f7fd ff97 	bl	8004b28 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bfc:	e00e      	b.n	8006c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bfe:	f7fd ff93 	bl	8004b28 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d907      	bls.n	8006c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e150      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
 8006c10:	40023800 	.word	0x40023800
 8006c14:	42470000 	.word	0x42470000
 8006c18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c1c:	4b88      	ldr	r3, [pc, #544]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1ea      	bne.n	8006bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 8097 	beq.w	8006d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c3a:	4b81      	ldr	r3, [pc, #516]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10f      	bne.n	8006c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c46:	2300      	movs	r3, #0
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	4b7d      	ldr	r3, [pc, #500]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c56:	4b7a      	ldr	r3, [pc, #488]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c62:	2301      	movs	r3, #1
 8006c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c66:	4b77      	ldr	r3, [pc, #476]	@ (8006e44 <HAL_RCC_OscConfig+0x474>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d118      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c72:	4b74      	ldr	r3, [pc, #464]	@ (8006e44 <HAL_RCC_OscConfig+0x474>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a73      	ldr	r2, [pc, #460]	@ (8006e44 <HAL_RCC_OscConfig+0x474>)
 8006c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c7e:	f7fd ff53 	bl	8004b28 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c86:	f7fd ff4f 	bl	8004b28 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e10c      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c98:	4b6a      	ldr	r3, [pc, #424]	@ (8006e44 <HAL_RCC_OscConfig+0x474>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0f0      	beq.n	8006c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d106      	bne.n	8006cba <HAL_RCC_OscConfig+0x2ea>
 8006cac:	4b64      	ldr	r3, [pc, #400]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb0:	4a63      	ldr	r2, [pc, #396]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cb8:	e01c      	b.n	8006cf4 <HAL_RCC_OscConfig+0x324>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d10c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x30c>
 8006cc2:	4b5f      	ldr	r3, [pc, #380]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc6:	4a5e      	ldr	r2, [pc, #376]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cc8:	f043 0304 	orr.w	r3, r3, #4
 8006ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cce:	4b5c      	ldr	r3, [pc, #368]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cda:	e00b      	b.n	8006cf4 <HAL_RCC_OscConfig+0x324>
 8006cdc:	4b58      	ldr	r3, [pc, #352]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce0:	4a57      	ldr	r2, [pc, #348]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ce8:	4b55      	ldr	r3, [pc, #340]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cec:	4a54      	ldr	r2, [pc, #336]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006cee:	f023 0304 	bic.w	r3, r3, #4
 8006cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d015      	beq.n	8006d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfc:	f7fd ff14 	bl	8004b28 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d02:	e00a      	b.n	8006d1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d04:	f7fd ff10 	bl	8004b28 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0cb      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1a:	4b49      	ldr	r3, [pc, #292]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0ee      	beq.n	8006d04 <HAL_RCC_OscConfig+0x334>
 8006d26:	e014      	b.n	8006d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d28:	f7fd fefe 	bl	8004b28 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d2e:	e00a      	b.n	8006d46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d30:	f7fd fefa 	bl	8004b28 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e0b5      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d46:	4b3e      	ldr	r3, [pc, #248]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1ee      	bne.n	8006d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d52:	7dfb      	ldrb	r3, [r7, #23]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d105      	bne.n	8006d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d58:	4b39      	ldr	r3, [pc, #228]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5c:	4a38      	ldr	r2, [pc, #224]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80a1 	beq.w	8006eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d6e:	4b34      	ldr	r3, [pc, #208]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b08      	cmp	r3, #8
 8006d78:	d05c      	beq.n	8006e34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d141      	bne.n	8006e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d82:	4b31      	ldr	r3, [pc, #196]	@ (8006e48 <HAL_RCC_OscConfig+0x478>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d88:	f7fd fece 	bl	8004b28 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d90:	f7fd feca 	bl	8004b28 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e087      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006da2:	4b27      	ldr	r3, [pc, #156]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1f0      	bne.n	8006d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69da      	ldr	r2, [r3, #28]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dbc:	019b      	lsls	r3, r3, #6
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	085b      	lsrs	r3, r3, #1
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	061b      	lsls	r3, r3, #24
 8006dd2:	491b      	ldr	r1, [pc, #108]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e48 <HAL_RCC_OscConfig+0x478>)
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dde:	f7fd fea3 	bl	8004b28 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de6:	f7fd fe9f 	bl	8004b28 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e05c      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df8:	4b11      	ldr	r3, [pc, #68]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <HAL_RCC_OscConfig+0x416>
 8006e04:	e054      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <HAL_RCC_OscConfig+0x478>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7fd fe8c 	bl	8004b28 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fd fe88 	bl	8004b28 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e045      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <HAL_RCC_OscConfig+0x470>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x444>
 8006e32:	e03d      	b.n	8006eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e038      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
 8006e40:	40023800 	.word	0x40023800
 8006e44:	40007000 	.word	0x40007000
 8006e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ebc <HAL_RCC_OscConfig+0x4ec>)
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d028      	beq.n	8006eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d121      	bne.n	8006eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d11a      	bne.n	8006eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d111      	bne.n	8006eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	3b01      	subs	r3, #1
 8006e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d107      	bne.n	8006eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d001      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e000      	b.n	8006eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	40023800 	.word	0x40023800

08006ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e0cc      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed4:	4b68      	ldr	r3, [pc, #416]	@ (8007078 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d90c      	bls.n	8006efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ee2:	4b65      	ldr	r3, [pc, #404]	@ (8007078 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eea:	4b63      	ldr	r3, [pc, #396]	@ (8007078 <HAL_RCC_ClockConfig+0x1b8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d001      	beq.n	8006efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0b8      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d020      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f14:	4b59      	ldr	r3, [pc, #356]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4a58      	ldr	r2, [pc, #352]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f2c:	4b53      	ldr	r3, [pc, #332]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4a52      	ldr	r2, [pc, #328]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f38:	4b50      	ldr	r3, [pc, #320]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	494d      	ldr	r1, [pc, #308]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d044      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d107      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5e:	4b47      	ldr	r3, [pc, #284]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d119      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e07f      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d003      	beq.n	8006f7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e06f      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e067      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f9e:	4b37      	ldr	r3, [pc, #220]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f023 0203 	bic.w	r2, r3, #3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4934      	ldr	r1, [pc, #208]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb0:	f7fd fdba 	bl	8004b28 <HAL_GetTick>
 8006fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb6:	e00a      	b.n	8006fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fb8:	f7fd fdb6 	bl	8004b28 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e04f      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fce:	4b2b      	ldr	r3, [pc, #172]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 020c 	and.w	r2, r3, #12
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d1eb      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe0:	4b25      	ldr	r3, [pc, #148]	@ (8007078 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d20c      	bcs.n	8007008 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fee:	4b22      	ldr	r3, [pc, #136]	@ (8007078 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff6:	4b20      	ldr	r3, [pc, #128]	@ (8007078 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e032      	b.n	800706e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007014:	4b19      	ldr	r3, [pc, #100]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	4916      	ldr	r1, [pc, #88]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	4313      	orrs	r3, r2
 8007024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007032:	4b12      	ldr	r3, [pc, #72]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	490e      	ldr	r1, [pc, #56]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	4313      	orrs	r3, r2
 8007044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007046:	f000 f821 	bl	800708c <HAL_RCC_GetSysClockFreq>
 800704a:	4602      	mov	r2, r0
 800704c:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	091b      	lsrs	r3, r3, #4
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	490a      	ldr	r1, [pc, #40]	@ (8007080 <HAL_RCC_ClockConfig+0x1c0>)
 8007058:	5ccb      	ldrb	r3, [r1, r3]
 800705a:	fa22 f303 	lsr.w	r3, r2, r3
 800705e:	4a09      	ldr	r2, [pc, #36]	@ (8007084 <HAL_RCC_ClockConfig+0x1c4>)
 8007060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007062:	4b09      	ldr	r3, [pc, #36]	@ (8007088 <HAL_RCC_ClockConfig+0x1c8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd fd1a 	bl	8004aa0 <HAL_InitTick>

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40023c00 	.word	0x40023c00
 800707c:	40023800 	.word	0x40023800
 8007080:	08009e30 	.word	0x08009e30
 8007084:	20000014 	.word	0x20000014
 8007088:	20000018 	.word	0x20000018

0800708c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800708c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007090:	b094      	sub	sp, #80	@ 0x50
 8007092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070a4:	4b79      	ldr	r3, [pc, #484]	@ (800728c <HAL_RCC_GetSysClockFreq+0x200>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 030c 	and.w	r3, r3, #12
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d00d      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0x40>
 80070b0:	2b08      	cmp	r3, #8
 80070b2:	f200 80e1 	bhi.w	8007278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_RCC_GetSysClockFreq+0x34>
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d003      	beq.n	80070c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80070be:	e0db      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070c0:	4b73      	ldr	r3, [pc, #460]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x204>)
 80070c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070c4:	e0db      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070c6:	4b73      	ldr	r3, [pc, #460]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x208>)
 80070c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070ca:	e0d8      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070cc:	4b6f      	ldr	r3, [pc, #444]	@ (800728c <HAL_RCC_GetSysClockFreq+0x200>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070d6:	4b6d      	ldr	r3, [pc, #436]	@ (800728c <HAL_RCC_GetSysClockFreq+0x200>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d063      	beq.n	80071aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070e2:	4b6a      	ldr	r3, [pc, #424]	@ (800728c <HAL_RCC_GetSysClockFreq+0x200>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	099b      	lsrs	r3, r3, #6
 80070e8:	2200      	movs	r2, #0
 80070ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80070ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f6:	2300      	movs	r3, #0
 80070f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80070fe:	4622      	mov	r2, r4
 8007100:	462b      	mov	r3, r5
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f04f 0100 	mov.w	r1, #0
 800710a:	0159      	lsls	r1, r3, #5
 800710c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007110:	0150      	lsls	r0, r2, #5
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4621      	mov	r1, r4
 8007118:	1a51      	subs	r1, r2, r1
 800711a:	6139      	str	r1, [r7, #16]
 800711c:	4629      	mov	r1, r5
 800711e:	eb63 0301 	sbc.w	r3, r3, r1
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007130:	4659      	mov	r1, fp
 8007132:	018b      	lsls	r3, r1, #6
 8007134:	4651      	mov	r1, sl
 8007136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800713a:	4651      	mov	r1, sl
 800713c:	018a      	lsls	r2, r1, #6
 800713e:	4651      	mov	r1, sl
 8007140:	ebb2 0801 	subs.w	r8, r2, r1
 8007144:	4659      	mov	r1, fp
 8007146:	eb63 0901 	sbc.w	r9, r3, r1
 800714a:	f04f 0200 	mov.w	r2, #0
 800714e:	f04f 0300 	mov.w	r3, #0
 8007152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800715a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800715e:	4690      	mov	r8, r2
 8007160:	4699      	mov	r9, r3
 8007162:	4623      	mov	r3, r4
 8007164:	eb18 0303 	adds.w	r3, r8, r3
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	462b      	mov	r3, r5
 800716c:	eb49 0303 	adc.w	r3, r9, r3
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	f04f 0200 	mov.w	r2, #0
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800717e:	4629      	mov	r1, r5
 8007180:	024b      	lsls	r3, r1, #9
 8007182:	4621      	mov	r1, r4
 8007184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007188:	4621      	mov	r1, r4
 800718a:	024a      	lsls	r2, r1, #9
 800718c:	4610      	mov	r0, r2
 800718e:	4619      	mov	r1, r3
 8007190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007192:	2200      	movs	r2, #0
 8007194:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007196:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800719c:	f7f9 f878 	bl	8000290 <__aeabi_uldivmod>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	4613      	mov	r3, r2
 80071a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a8:	e058      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071aa:	4b38      	ldr	r3, [pc, #224]	@ (800728c <HAL_RCC_GetSysClockFreq+0x200>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	099b      	lsrs	r3, r3, #6
 80071b0:	2200      	movs	r2, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	4611      	mov	r1, r2
 80071b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071ba:	623b      	str	r3, [r7, #32]
 80071bc:	2300      	movs	r3, #0
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
 80071c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071c4:	4642      	mov	r2, r8
 80071c6:	464b      	mov	r3, r9
 80071c8:	f04f 0000 	mov.w	r0, #0
 80071cc:	f04f 0100 	mov.w	r1, #0
 80071d0:	0159      	lsls	r1, r3, #5
 80071d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071d6:	0150      	lsls	r0, r2, #5
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4641      	mov	r1, r8
 80071de:	ebb2 0a01 	subs.w	sl, r2, r1
 80071e2:	4649      	mov	r1, r9
 80071e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071fc:	ebb2 040a 	subs.w	r4, r2, sl
 8007200:	eb63 050b 	sbc.w	r5, r3, fp
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	00eb      	lsls	r3, r5, #3
 800720e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007212:	00e2      	lsls	r2, r4, #3
 8007214:	4614      	mov	r4, r2
 8007216:	461d      	mov	r5, r3
 8007218:	4643      	mov	r3, r8
 800721a:	18e3      	adds	r3, r4, r3
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	464b      	mov	r3, r9
 8007220:	eb45 0303 	adc.w	r3, r5, r3
 8007224:	607b      	str	r3, [r7, #4]
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007232:	4629      	mov	r1, r5
 8007234:	028b      	lsls	r3, r1, #10
 8007236:	4621      	mov	r1, r4
 8007238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800723c:	4621      	mov	r1, r4
 800723e:	028a      	lsls	r2, r1, #10
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007246:	2200      	movs	r2, #0
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	61fa      	str	r2, [r7, #28]
 800724c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007250:	f7f9 f81e 	bl	8000290 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4613      	mov	r3, r2
 800725a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800725c:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <HAL_RCC_GetSysClockFreq+0x200>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	3301      	adds	r3, #1
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800726c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800726e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007276:	e002      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x204>)
 800727a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800727c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800727e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007280:	4618      	mov	r0, r3
 8007282:	3750      	adds	r7, #80	@ 0x50
 8007284:	46bd      	mov	sp, r7
 8007286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728a:	bf00      	nop
 800728c:	40023800 	.word	0x40023800
 8007290:	00f42400 	.word	0x00f42400
 8007294:	007a1200 	.word	0x007a1200

08007298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800729c:	4b03      	ldr	r3, [pc, #12]	@ (80072ac <HAL_RCC_GetHCLKFreq+0x14>)
 800729e:	681b      	ldr	r3, [r3, #0]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000014 	.word	0x20000014

080072b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072b4:	f7ff fff0 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072b8:	4602      	mov	r2, r0
 80072ba:	4b05      	ldr	r3, [pc, #20]	@ (80072d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	0a9b      	lsrs	r3, r3, #10
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	4903      	ldr	r1, [pc, #12]	@ (80072d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072c6:	5ccb      	ldrb	r3, [r1, r3]
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40023800 	.word	0x40023800
 80072d4:	08009e40 	.word	0x08009e40

080072d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10b      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007308:	2b00      	cmp	r3, #0
 800730a:	d075      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800730c:	4b91      	ldr	r3, [pc, #580]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007312:	f7fd fc09 	bl	8004b28 <HAL_GetTick>
 8007316:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007318:	e008      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800731a:	f7fd fc05 	bl	8004b28 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d901      	bls.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e189      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800732c:	4b8a      	ldr	r3, [pc, #552]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f0      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	019a      	lsls	r2, r3, #6
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	071b      	lsls	r3, r3, #28
 8007350:	4981      	ldr	r1, [pc, #516]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01f      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007364:	4b7c      	ldr	r3, [pc, #496]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736a:	0f1b      	lsrs	r3, r3, #28
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	019a      	lsls	r2, r3, #6
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	061b      	lsls	r3, r3, #24
 800737e:	431a      	orrs	r2, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	071b      	lsls	r3, r3, #28
 8007384:	4974      	ldr	r1, [pc, #464]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800738c:	4b72      	ldr	r3, [pc, #456]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800738e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007392:	f023 021f 	bic.w	r2, r3, #31
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	3b01      	subs	r3, #1
 800739c:	496e      	ldr	r1, [pc, #440]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00d      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	019a      	lsls	r2, r3, #6
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	061b      	lsls	r3, r3, #24
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	071b      	lsls	r3, r3, #28
 80073c4:	4964      	ldr	r1, [pc, #400]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073cc:	4b61      	ldr	r3, [pc, #388]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073d2:	f7fd fba9 	bl	8004b28 <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073d8:	e008      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80073da:	f7fd fba5 	bl	8004b28 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e129      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800740c:	2b00      	cmp	r3, #0
 800740e:	d079      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007410:	4b52      	ldr	r3, [pc, #328]	@ (800755c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007416:	f7fd fb87 	bl	8004b28 <HAL_GetTick>
 800741a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800741c:	e008      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800741e:	f7fd fb83 	bl	8004b28 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e107      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007430:	4b49      	ldr	r3, [pc, #292]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800743c:	d0ef      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b00      	cmp	r3, #0
 8007448:	d020      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800744a:	4b43      	ldr	r3, [pc, #268]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800744c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007450:	0f1b      	lsrs	r3, r3, #28
 8007452:	f003 0307 	and.w	r3, r3, #7
 8007456:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	019a      	lsls	r2, r3, #6
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	061b      	lsls	r3, r3, #24
 8007464:	431a      	orrs	r2, r3
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	071b      	lsls	r3, r3, #28
 800746a:	493b      	ldr	r1, [pc, #236]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007472:	4b39      	ldr	r3, [pc, #228]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007478:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	3b01      	subs	r3, #1
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	4934      	ldr	r1, [pc, #208]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007486:	4313      	orrs	r3, r2
 8007488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01e      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007498:	4b2f      	ldr	r3, [pc, #188]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	0e1b      	lsrs	r3, r3, #24
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	019a      	lsls	r2, r3, #6
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	061b      	lsls	r3, r3, #24
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	071b      	lsls	r3, r3, #28
 80074b8:	4927      	ldr	r1, [pc, #156]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074c0:	4b25      	ldr	r3, [pc, #148]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074c6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	4922      	ldr	r1, [pc, #136]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80074d6:	4b21      	ldr	r3, [pc, #132]	@ (800755c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074dc:	f7fd fb24 	bl	8004b28 <HAL_GetTick>
 80074e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074e4:	f7fd fb20 	bl	8004b28 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0a4      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80074f6:	4b18      	ldr	r3, [pc, #96]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007502:	d1ef      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	f000 808b 	beq.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	4b10      	ldr	r3, [pc, #64]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	4a0f      	ldr	r2, [pc, #60]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007520:	6413      	str	r3, [r2, #64]	@ 0x40
 8007522:	4b0d      	ldr	r3, [pc, #52]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800752e:	4b0c      	ldr	r3, [pc, #48]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a0b      	ldr	r2, [pc, #44]	@ (8007560 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007538:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800753a:	f7fd faf5 	bl	8004b28 <HAL_GetTick>
 800753e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007540:	e010      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007542:	f7fd faf1 	bl	8004b28 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d909      	bls.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e075      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007554:	42470068 	.word	0x42470068
 8007558:	40023800 	.word	0x40023800
 800755c:	42470070 	.word	0x42470070
 8007560:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007564:	4b38      	ldr	r3, [pc, #224]	@ (8007648 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0e8      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007570:	4b36      	ldr	r3, [pc, #216]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007578:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02f      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d028      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800758e:	4b2f      	ldr	r3, [pc, #188]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007596:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007598:	4b2d      	ldr	r3, [pc, #180]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800759e:	4b2c      	ldr	r3, [pc, #176]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075a4:	4a29      	ldr	r2, [pc, #164]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075aa:	4b28      	ldr	r3, [pc, #160]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d114      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075b6:	f7fd fab7 	bl	8004b28 <HAL_GetTick>
 80075ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075bc:	e00a      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075be:	f7fd fab3 	bl	8004b28 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e035      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d4:	4b1d      	ldr	r3, [pc, #116]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ee      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075ec:	d10d      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80075ee:	4b17      	ldr	r3, [pc, #92]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80075fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007602:	4912      	ldr	r1, [pc, #72]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007604:	4313      	orrs	r3, r2
 8007606:	608b      	str	r3, [r1, #8]
 8007608:	e005      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800760a:	4b10      	ldr	r3, [pc, #64]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	4a0f      	ldr	r2, [pc, #60]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007610:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007614:	6093      	str	r3, [r2, #8]
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007618:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007622:	490a      	ldr	r1, [pc, #40]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007624:	4313      	orrs	r3, r2
 8007626:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800763a:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800763c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40007000 	.word	0x40007000
 800764c:	40023800 	.word	0x40023800
 8007650:	42470e40 	.word	0x42470e40
 8007654:	424711e0 	.word	0x424711e0

08007658 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	791b      	ldrb	r3, [r3, #4]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_RNG_GenerateRandomNumber+0x1a>
 800766e:	2302      	movs	r3, #2
 8007670:	e044      	b.n	80076fc <HAL_RNG_GenerateRandomNumber+0xa4>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	795b      	ldrb	r3, [r3, #5]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b01      	cmp	r3, #1
 8007680:	d133      	bne.n	80076ea <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2202      	movs	r2, #2
 8007686:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007688:	f7fd fa4e 	bl	8004b28 <HAL_GetTick>
 800768c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800768e:	e018      	b.n	80076c2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007690:	f7fd fa4a 	bl	8004b28 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d911      	bls.n	80076c2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d00a      	beq.n	80076c2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e01c      	b.n	80076fc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d1df      	bne.n	8007690 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68da      	ldr	r2, [r3, #12]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	715a      	strb	r2, [r3, #5]
 80076e8:	e004      	b.n	80076f4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2204      	movs	r2, #4
 80076ee:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	711a      	strb	r2, [r3, #4]

  return status;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	330c      	adds	r3, #12
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff ffa0 	bl	8007658 <HAL_RNG_GenerateRandomNumber>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d102      	bne.n	8007724 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	e000      	b.n	8007726 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8007724:	2300      	movs	r3, #0
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e07b      	b.n	8007838 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d108      	bne.n	800775a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007750:	d009      	beq.n	8007766 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	61da      	str	r2, [r3, #28]
 8007758:	e005      	b.n	8007766 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d106      	bne.n	8007786 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fc fc77 	bl	8004074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800779c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ea:	ea42 0103 	orr.w	r1, r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	f003 0104 	and.w	r1, r3, #4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	f003 0210 	and.w	r2, r3, #16
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	69da      	ldr	r2, [r3, #28]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007826:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e01a      	b.n	8007888 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007868:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fc fc4a 	bl	8004104 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a0:	f7fd f942 	bl	8004b28 <HAL_GetTick>
 80078a4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d001      	beq.n	80078ba <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80078b6:	2302      	movs	r3, #2
 80078b8:	e12a      	b.n	8007b10 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_SPI_Transmit+0x36>
 80078c0:	88fb      	ldrh	r3, [r7, #6]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e122      	b.n	8007b10 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_SPI_Transmit+0x48>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e11b      	b.n	8007b10 <HAL_SPI_Transmit+0x280>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2203      	movs	r2, #3
 80078e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	88fa      	ldrh	r2, [r7, #6]
 80078fe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007926:	d10f      	bne.n	8007948 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007936:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007946:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007952:	2b40      	cmp	r3, #64	@ 0x40
 8007954:	d007      	beq.n	8007966 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007964:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796e:	d152      	bne.n	8007a16 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_SPI_Transmit+0xee>
 8007978:	8b7b      	ldrh	r3, [r7, #26]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d145      	bne.n	8007a0a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007982:	881a      	ldrh	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	1c9a      	adds	r2, r3, #2
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079a2:	e032      	b.n	8007a0a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d112      	bne.n	80079d8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b6:	881a      	ldrh	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c2:	1c9a      	adds	r2, r3, #2
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80079d6:	e018      	b.n	8007a0a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079d8:	f7fd f8a6 	bl	8004b28 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d803      	bhi.n	80079f0 <HAL_SPI_Transmit+0x160>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d102      	bne.n	80079f6 <HAL_SPI_Transmit+0x166>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e082      	b.n	8007b10 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1c7      	bne.n	80079a4 <HAL_SPI_Transmit+0x114>
 8007a14:	e053      	b.n	8007abe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <HAL_SPI_Transmit+0x194>
 8007a1e:	8b7b      	ldrh	r3, [r7, #26]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d147      	bne.n	8007ab4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	7812      	ldrb	r2, [r2, #0]
 8007a30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a4a:	e033      	b.n	8007ab4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d113      	bne.n	8007a82 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a80:	e018      	b.n	8007ab4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a82:	f7fd f851 	bl	8004b28 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d803      	bhi.n	8007a9a <HAL_SPI_Transmit+0x20a>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d102      	bne.n	8007aa0 <HAL_SPI_Transmit+0x210>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d109      	bne.n	8007ab4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e02d      	b.n	8007b10 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1c6      	bne.n	8007a4c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f8be 	bl	8007c44 <SPI_EndRxTxTransaction>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
  }
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3720      	adds	r7, #32
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b26:	b2db      	uxtb	r3, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	4613      	mov	r3, r2
 8007b42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b44:	f7fc fff0 	bl	8004b28 <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4413      	add	r3, r2
 8007b52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b54:	f7fc ffe8 	bl	8004b28 <HAL_GetTick>
 8007b58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b5a:	4b39      	ldr	r3, [pc, #228]	@ (8007c40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	015b      	lsls	r3, r3, #5
 8007b60:	0d1b      	lsrs	r3, r3, #20
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6a:	e054      	b.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d050      	beq.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b74:	f7fc ffd8 	bl	8004b28 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d902      	bls.n	8007b8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d13d      	bne.n	8007c06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ba2:	d111      	bne.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bac:	d004      	beq.n	8007bb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb6:	d107      	bne.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bd0:	d10f      	bne.n	8007bf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e017      	b.n	8007c36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	bf0c      	ite	eq
 8007c26:	2301      	moveq	r3, #1
 8007c28:	2300      	movne	r3, #0
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d19b      	bne.n	8007b6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000014 	.word	0x20000014

08007c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b088      	sub	sp, #32
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2201      	movs	r2, #1
 8007c58:	2102      	movs	r1, #2
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff ff6a 	bl	8007b34 <SPI_WaitFlagStateUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e032      	b.n	8007cdc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce4 <SPI_EndRxTxTransaction+0xa0>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce8 <SPI_EndRxTxTransaction+0xa4>)
 8007c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c80:	0d5b      	lsrs	r3, r3, #21
 8007c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c94:	d112      	bne.n	8007cbc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2180      	movs	r1, #128	@ 0x80
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff ff47 	bl	8007b34 <SPI_WaitFlagStateUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d016      	beq.n	8007cda <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cb0:	f043 0220 	orr.w	r2, r3, #32
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e00f      	b.n	8007cdc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b80      	cmp	r3, #128	@ 0x80
 8007cd4:	d0f2      	beq.n	8007cbc <SPI_EndRxTxTransaction+0x78>
 8007cd6:	e000      	b.n	8007cda <SPI_EndRxTxTransaction+0x96>
        break;
 8007cd8:	bf00      	nop
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000014 	.word	0x20000014
 8007ce8:	165e9f81 	.word	0x165e9f81

08007cec <std>:
 8007cec:	2300      	movs	r3, #0
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	e9c0 3300 	strd	r3, r3, [r0]
 8007cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cfa:	6083      	str	r3, [r0, #8]
 8007cfc:	8181      	strh	r1, [r0, #12]
 8007cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d00:	81c2      	strh	r2, [r0, #14]
 8007d02:	6183      	str	r3, [r0, #24]
 8007d04:	4619      	mov	r1, r3
 8007d06:	2208      	movs	r2, #8
 8007d08:	305c      	adds	r0, #92	@ 0x5c
 8007d0a:	f000 f9f9 	bl	8008100 <memset>
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <std+0x58>)
 8007d10:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d12:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <std+0x5c>)
 8007d14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d16:	4b0d      	ldr	r3, [pc, #52]	@ (8007d4c <std+0x60>)
 8007d18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d50 <std+0x64>)
 8007d1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <std+0x68>)
 8007d20:	6224      	str	r4, [r4, #32]
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d006      	beq.n	8007d34 <std+0x48>
 8007d26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d2a:	4294      	cmp	r4, r2
 8007d2c:	d002      	beq.n	8007d34 <std+0x48>
 8007d2e:	33d0      	adds	r3, #208	@ 0xd0
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d105      	bne.n	8007d40 <std+0x54>
 8007d34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d3c:	f000 ba58 	b.w	80081f0 <__retarget_lock_init_recursive>
 8007d40:	bd10      	pop	{r4, pc}
 8007d42:	bf00      	nop
 8007d44:	08007f51 	.word	0x08007f51
 8007d48:	08007f73 	.word	0x08007f73
 8007d4c:	08007fab 	.word	0x08007fab
 8007d50:	08007fcf 	.word	0x08007fcf
 8007d54:	20025f58 	.word	0x20025f58

08007d58 <stdio_exit_handler>:
 8007d58:	4a02      	ldr	r2, [pc, #8]	@ (8007d64 <stdio_exit_handler+0xc>)
 8007d5a:	4903      	ldr	r1, [pc, #12]	@ (8007d68 <stdio_exit_handler+0x10>)
 8007d5c:	4803      	ldr	r0, [pc, #12]	@ (8007d6c <stdio_exit_handler+0x14>)
 8007d5e:	f000 b869 	b.w	8007e34 <_fwalk_sglue>
 8007d62:	bf00      	nop
 8007d64:	20000020 	.word	0x20000020
 8007d68:	08008a91 	.word	0x08008a91
 8007d6c:	20000030 	.word	0x20000030

08007d70 <cleanup_stdio>:
 8007d70:	6841      	ldr	r1, [r0, #4]
 8007d72:	4b0c      	ldr	r3, [pc, #48]	@ (8007da4 <cleanup_stdio+0x34>)
 8007d74:	4299      	cmp	r1, r3
 8007d76:	b510      	push	{r4, lr}
 8007d78:	4604      	mov	r4, r0
 8007d7a:	d001      	beq.n	8007d80 <cleanup_stdio+0x10>
 8007d7c:	f000 fe88 	bl	8008a90 <_fflush_r>
 8007d80:	68a1      	ldr	r1, [r4, #8]
 8007d82:	4b09      	ldr	r3, [pc, #36]	@ (8007da8 <cleanup_stdio+0x38>)
 8007d84:	4299      	cmp	r1, r3
 8007d86:	d002      	beq.n	8007d8e <cleanup_stdio+0x1e>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fe81 	bl	8008a90 <_fflush_r>
 8007d8e:	68e1      	ldr	r1, [r4, #12]
 8007d90:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <cleanup_stdio+0x3c>)
 8007d92:	4299      	cmp	r1, r3
 8007d94:	d004      	beq.n	8007da0 <cleanup_stdio+0x30>
 8007d96:	4620      	mov	r0, r4
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9c:	f000 be78 	b.w	8008a90 <_fflush_r>
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	20025f58 	.word	0x20025f58
 8007da8:	20025fc0 	.word	0x20025fc0
 8007dac:	20026028 	.word	0x20026028

08007db0 <global_stdio_init.part.0>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	4b0b      	ldr	r3, [pc, #44]	@ (8007de0 <global_stdio_init.part.0+0x30>)
 8007db4:	4c0b      	ldr	r4, [pc, #44]	@ (8007de4 <global_stdio_init.part.0+0x34>)
 8007db6:	4a0c      	ldr	r2, [pc, #48]	@ (8007de8 <global_stdio_init.part.0+0x38>)
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	4620      	mov	r0, r4
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	f7ff ff94 	bl	8007cec <std>
 8007dc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dc8:	2201      	movs	r2, #1
 8007dca:	2109      	movs	r1, #9
 8007dcc:	f7ff ff8e 	bl	8007cec <std>
 8007dd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dda:	2112      	movs	r1, #18
 8007ddc:	f7ff bf86 	b.w	8007cec <std>
 8007de0:	20026090 	.word	0x20026090
 8007de4:	20025f58 	.word	0x20025f58
 8007de8:	08007d59 	.word	0x08007d59

08007dec <__sfp_lock_acquire>:
 8007dec:	4801      	ldr	r0, [pc, #4]	@ (8007df4 <__sfp_lock_acquire+0x8>)
 8007dee:	f000 ba00 	b.w	80081f2 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	20026099 	.word	0x20026099

08007df8 <__sfp_lock_release>:
 8007df8:	4801      	ldr	r0, [pc, #4]	@ (8007e00 <__sfp_lock_release+0x8>)
 8007dfa:	f000 b9fb 	b.w	80081f4 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	20026099 	.word	0x20026099

08007e04 <__sinit>:
 8007e04:	b510      	push	{r4, lr}
 8007e06:	4604      	mov	r4, r0
 8007e08:	f7ff fff0 	bl	8007dec <__sfp_lock_acquire>
 8007e0c:	6a23      	ldr	r3, [r4, #32]
 8007e0e:	b11b      	cbz	r3, 8007e18 <__sinit+0x14>
 8007e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e14:	f7ff bff0 	b.w	8007df8 <__sfp_lock_release>
 8007e18:	4b04      	ldr	r3, [pc, #16]	@ (8007e2c <__sinit+0x28>)
 8007e1a:	6223      	str	r3, [r4, #32]
 8007e1c:	4b04      	ldr	r3, [pc, #16]	@ (8007e30 <__sinit+0x2c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f5      	bne.n	8007e10 <__sinit+0xc>
 8007e24:	f7ff ffc4 	bl	8007db0 <global_stdio_init.part.0>
 8007e28:	e7f2      	b.n	8007e10 <__sinit+0xc>
 8007e2a:	bf00      	nop
 8007e2c:	08007d71 	.word	0x08007d71
 8007e30:	20026090 	.word	0x20026090

08007e34 <_fwalk_sglue>:
 8007e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	4607      	mov	r7, r0
 8007e3a:	4688      	mov	r8, r1
 8007e3c:	4614      	mov	r4, r2
 8007e3e:	2600      	movs	r6, #0
 8007e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e44:	f1b9 0901 	subs.w	r9, r9, #1
 8007e48:	d505      	bpl.n	8007e56 <_fwalk_sglue+0x22>
 8007e4a:	6824      	ldr	r4, [r4, #0]
 8007e4c:	2c00      	cmp	r4, #0
 8007e4e:	d1f7      	bne.n	8007e40 <_fwalk_sglue+0xc>
 8007e50:	4630      	mov	r0, r6
 8007e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e56:	89ab      	ldrh	r3, [r5, #12]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d907      	bls.n	8007e6c <_fwalk_sglue+0x38>
 8007e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e60:	3301      	adds	r3, #1
 8007e62:	d003      	beq.n	8007e6c <_fwalk_sglue+0x38>
 8007e64:	4629      	mov	r1, r5
 8007e66:	4638      	mov	r0, r7
 8007e68:	47c0      	blx	r8
 8007e6a:	4306      	orrs	r6, r0
 8007e6c:	3568      	adds	r5, #104	@ 0x68
 8007e6e:	e7e9      	b.n	8007e44 <_fwalk_sglue+0x10>

08007e70 <iprintf>:
 8007e70:	b40f      	push	{r0, r1, r2, r3}
 8007e72:	b507      	push	{r0, r1, r2, lr}
 8007e74:	4906      	ldr	r1, [pc, #24]	@ (8007e90 <iprintf+0x20>)
 8007e76:	ab04      	add	r3, sp, #16
 8007e78:	6808      	ldr	r0, [r1, #0]
 8007e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7e:	6881      	ldr	r1, [r0, #8]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	f000 fadb 	bl	800843c <_vfiprintf_r>
 8007e86:	b003      	add	sp, #12
 8007e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e8c:	b004      	add	sp, #16
 8007e8e:	4770      	bx	lr
 8007e90:	2000002c 	.word	0x2000002c

08007e94 <_puts_r>:
 8007e94:	6a03      	ldr	r3, [r0, #32]
 8007e96:	b570      	push	{r4, r5, r6, lr}
 8007e98:	6884      	ldr	r4, [r0, #8]
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	460e      	mov	r6, r1
 8007e9e:	b90b      	cbnz	r3, 8007ea4 <_puts_r+0x10>
 8007ea0:	f7ff ffb0 	bl	8007e04 <__sinit>
 8007ea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ea6:	07db      	lsls	r3, r3, #31
 8007ea8:	d405      	bmi.n	8007eb6 <_puts_r+0x22>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	0598      	lsls	r0, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_puts_r+0x22>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eb2:	f000 f99e 	bl	80081f2 <__retarget_lock_acquire_recursive>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	0719      	lsls	r1, r3, #28
 8007eba:	d502      	bpl.n	8007ec2 <_puts_r+0x2e>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d135      	bne.n	8007f2e <_puts_r+0x9a>
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f000 f8c5 	bl	8008054 <__swsetup_r>
 8007eca:	b380      	cbz	r0, 8007f2e <_puts_r+0x9a>
 8007ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8007ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ed2:	07da      	lsls	r2, r3, #31
 8007ed4:	d405      	bmi.n	8007ee2 <_puts_r+0x4e>
 8007ed6:	89a3      	ldrh	r3, [r4, #12]
 8007ed8:	059b      	lsls	r3, r3, #22
 8007eda:	d402      	bmi.n	8007ee2 <_puts_r+0x4e>
 8007edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ede:	f000 f989 	bl	80081f4 <__retarget_lock_release_recursive>
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	da04      	bge.n	8007ef4 <_puts_r+0x60>
 8007eea:	69a2      	ldr	r2, [r4, #24]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	dc17      	bgt.n	8007f20 <_puts_r+0x8c>
 8007ef0:	290a      	cmp	r1, #10
 8007ef2:	d015      	beq.n	8007f20 <_puts_r+0x8c>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	6022      	str	r2, [r4, #0]
 8007efa:	7019      	strb	r1, [r3, #0]
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f02:	3b01      	subs	r3, #1
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	2900      	cmp	r1, #0
 8007f08:	d1ed      	bne.n	8007ee6 <_puts_r+0x52>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da11      	bge.n	8007f32 <_puts_r+0x9e>
 8007f0e:	4622      	mov	r2, r4
 8007f10:	210a      	movs	r1, #10
 8007f12:	4628      	mov	r0, r5
 8007f14:	f000 f85f 	bl	8007fd6 <__swbuf_r>
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d0d7      	beq.n	8007ecc <_puts_r+0x38>
 8007f1c:	250a      	movs	r5, #10
 8007f1e:	e7d7      	b.n	8007ed0 <_puts_r+0x3c>
 8007f20:	4622      	mov	r2, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 f857 	bl	8007fd6 <__swbuf_r>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d1e7      	bne.n	8007efc <_puts_r+0x68>
 8007f2c:	e7ce      	b.n	8007ecc <_puts_r+0x38>
 8007f2e:	3e01      	subs	r6, #1
 8007f30:	e7e4      	b.n	8007efc <_puts_r+0x68>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	220a      	movs	r2, #10
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e7ee      	b.n	8007f1c <_puts_r+0x88>
	...

08007f40 <puts>:
 8007f40:	4b02      	ldr	r3, [pc, #8]	@ (8007f4c <puts+0xc>)
 8007f42:	4601      	mov	r1, r0
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	f7ff bfa5 	b.w	8007e94 <_puts_r>
 8007f4a:	bf00      	nop
 8007f4c:	2000002c 	.word	0x2000002c

08007f50 <__sread>:
 8007f50:	b510      	push	{r4, lr}
 8007f52:	460c      	mov	r4, r1
 8007f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f58:	f000 f8fc 	bl	8008154 <_read_r>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	bfab      	itete	ge
 8007f60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f62:	89a3      	ldrhlt	r3, [r4, #12]
 8007f64:	181b      	addge	r3, r3, r0
 8007f66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f6a:	bfac      	ite	ge
 8007f6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f6e:	81a3      	strhlt	r3, [r4, #12]
 8007f70:	bd10      	pop	{r4, pc}

08007f72 <__swrite>:
 8007f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f76:	461f      	mov	r7, r3
 8007f78:	898b      	ldrh	r3, [r1, #12]
 8007f7a:	05db      	lsls	r3, r3, #23
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	4616      	mov	r6, r2
 8007f82:	d505      	bpl.n	8007f90 <__swrite+0x1e>
 8007f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f88:	2302      	movs	r3, #2
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f000 f8d0 	bl	8008130 <_lseek_r>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa6:	f000 b8e7 	b.w	8008178 <_write_r>

08007faa <__sseek>:
 8007faa:	b510      	push	{r4, lr}
 8007fac:	460c      	mov	r4, r1
 8007fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb2:	f000 f8bd 	bl	8008130 <_lseek_r>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	bf15      	itete	ne
 8007fbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fc6:	81a3      	strheq	r3, [r4, #12]
 8007fc8:	bf18      	it	ne
 8007fca:	81a3      	strhne	r3, [r4, #12]
 8007fcc:	bd10      	pop	{r4, pc}

08007fce <__sclose>:
 8007fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd2:	f000 b89d 	b.w	8008110 <_close_r>

08007fd6 <__swbuf_r>:
 8007fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd8:	460e      	mov	r6, r1
 8007fda:	4614      	mov	r4, r2
 8007fdc:	4605      	mov	r5, r0
 8007fde:	b118      	cbz	r0, 8007fe8 <__swbuf_r+0x12>
 8007fe0:	6a03      	ldr	r3, [r0, #32]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <__swbuf_r+0x12>
 8007fe4:	f7ff ff0e 	bl	8007e04 <__sinit>
 8007fe8:	69a3      	ldr	r3, [r4, #24]
 8007fea:	60a3      	str	r3, [r4, #8]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	071a      	lsls	r2, r3, #28
 8007ff0:	d501      	bpl.n	8007ff6 <__swbuf_r+0x20>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	b943      	cbnz	r3, 8008008 <__swbuf_r+0x32>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 f82b 	bl	8008054 <__swsetup_r>
 8007ffe:	b118      	cbz	r0, 8008008 <__swbuf_r+0x32>
 8008000:	f04f 37ff 	mov.w	r7, #4294967295
 8008004:	4638      	mov	r0, r7
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	6922      	ldr	r2, [r4, #16]
 800800c:	1a98      	subs	r0, r3, r2
 800800e:	6963      	ldr	r3, [r4, #20]
 8008010:	b2f6      	uxtb	r6, r6
 8008012:	4283      	cmp	r3, r0
 8008014:	4637      	mov	r7, r6
 8008016:	dc05      	bgt.n	8008024 <__swbuf_r+0x4e>
 8008018:	4621      	mov	r1, r4
 800801a:	4628      	mov	r0, r5
 800801c:	f000 fd38 	bl	8008a90 <_fflush_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	d1ed      	bne.n	8008000 <__swbuf_r+0x2a>
 8008024:	68a3      	ldr	r3, [r4, #8]
 8008026:	3b01      	subs	r3, #1
 8008028:	60a3      	str	r3, [r4, #8]
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	6022      	str	r2, [r4, #0]
 8008030:	701e      	strb	r6, [r3, #0]
 8008032:	6962      	ldr	r2, [r4, #20]
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	429a      	cmp	r2, r3
 8008038:	d004      	beq.n	8008044 <__swbuf_r+0x6e>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	07db      	lsls	r3, r3, #31
 800803e:	d5e1      	bpl.n	8008004 <__swbuf_r+0x2e>
 8008040:	2e0a      	cmp	r6, #10
 8008042:	d1df      	bne.n	8008004 <__swbuf_r+0x2e>
 8008044:	4621      	mov	r1, r4
 8008046:	4628      	mov	r0, r5
 8008048:	f000 fd22 	bl	8008a90 <_fflush_r>
 800804c:	2800      	cmp	r0, #0
 800804e:	d0d9      	beq.n	8008004 <__swbuf_r+0x2e>
 8008050:	e7d6      	b.n	8008000 <__swbuf_r+0x2a>
	...

08008054 <__swsetup_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4b29      	ldr	r3, [pc, #164]	@ (80080fc <__swsetup_r+0xa8>)
 8008058:	4605      	mov	r5, r0
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	460c      	mov	r4, r1
 800805e:	b118      	cbz	r0, 8008068 <__swsetup_r+0x14>
 8008060:	6a03      	ldr	r3, [r0, #32]
 8008062:	b90b      	cbnz	r3, 8008068 <__swsetup_r+0x14>
 8008064:	f7ff fece 	bl	8007e04 <__sinit>
 8008068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806c:	0719      	lsls	r1, r3, #28
 800806e:	d422      	bmi.n	80080b6 <__swsetup_r+0x62>
 8008070:	06da      	lsls	r2, r3, #27
 8008072:	d407      	bmi.n	8008084 <__swsetup_r+0x30>
 8008074:	2209      	movs	r2, #9
 8008076:	602a      	str	r2, [r5, #0]
 8008078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	f04f 30ff 	mov.w	r0, #4294967295
 8008082:	e033      	b.n	80080ec <__swsetup_r+0x98>
 8008084:	0758      	lsls	r0, r3, #29
 8008086:	d512      	bpl.n	80080ae <__swsetup_r+0x5a>
 8008088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800808a:	b141      	cbz	r1, 800809e <__swsetup_r+0x4a>
 800808c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008090:	4299      	cmp	r1, r3
 8008092:	d002      	beq.n	800809a <__swsetup_r+0x46>
 8008094:	4628      	mov	r0, r5
 8008096:	f000 f8af 	bl	80081f8 <_free_r>
 800809a:	2300      	movs	r3, #0
 800809c:	6363      	str	r3, [r4, #52]	@ 0x34
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	2300      	movs	r3, #0
 80080a8:	6063      	str	r3, [r4, #4]
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	f043 0308 	orr.w	r3, r3, #8
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	b94b      	cbnz	r3, 80080ce <__swsetup_r+0x7a>
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c4:	d003      	beq.n	80080ce <__swsetup_r+0x7a>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 fd2f 	bl	8008b2c <__smakebuf_r>
 80080ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d2:	f013 0201 	ands.w	r2, r3, #1
 80080d6:	d00a      	beq.n	80080ee <__swsetup_r+0x9a>
 80080d8:	2200      	movs	r2, #0
 80080da:	60a2      	str	r2, [r4, #8]
 80080dc:	6962      	ldr	r2, [r4, #20]
 80080de:	4252      	negs	r2, r2
 80080e0:	61a2      	str	r2, [r4, #24]
 80080e2:	6922      	ldr	r2, [r4, #16]
 80080e4:	b942      	cbnz	r2, 80080f8 <__swsetup_r+0xa4>
 80080e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080ea:	d1c5      	bne.n	8008078 <__swsetup_r+0x24>
 80080ec:	bd38      	pop	{r3, r4, r5, pc}
 80080ee:	0799      	lsls	r1, r3, #30
 80080f0:	bf58      	it	pl
 80080f2:	6962      	ldrpl	r2, [r4, #20]
 80080f4:	60a2      	str	r2, [r4, #8]
 80080f6:	e7f4      	b.n	80080e2 <__swsetup_r+0x8e>
 80080f8:	2000      	movs	r0, #0
 80080fa:	e7f7      	b.n	80080ec <__swsetup_r+0x98>
 80080fc:	2000002c 	.word	0x2000002c

08008100 <memset>:
 8008100:	4402      	add	r2, r0
 8008102:	4603      	mov	r3, r0
 8008104:	4293      	cmp	r3, r2
 8008106:	d100      	bne.n	800810a <memset+0xa>
 8008108:	4770      	bx	lr
 800810a:	f803 1b01 	strb.w	r1, [r3], #1
 800810e:	e7f9      	b.n	8008104 <memset+0x4>

08008110 <_close_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d06      	ldr	r5, [pc, #24]	@ (800812c <_close_r+0x1c>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7fc fbf8 	bl	8004910 <_close>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_close_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_close_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20026094 	.word	0x20026094

08008130 <_lseek_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	@ (8008150 <_lseek_r+0x20>)
 8008134:	4604      	mov	r4, r0
 8008136:	4608      	mov	r0, r1
 8008138:	4611      	mov	r1, r2
 800813a:	2200      	movs	r2, #0
 800813c:	602a      	str	r2, [r5, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f7fc fc0d 	bl	800495e <_lseek>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_lseek_r+0x1e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_lseek_r+0x1e>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20026094 	.word	0x20026094

08008154 <_read_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	@ (8008174 <_read_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7fc fb9b 	bl	800489e <_read>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_read_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_read_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	20026094 	.word	0x20026094

08008178 <_write_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	@ (8008198 <_write_r+0x20>)
 800817c:	4604      	mov	r4, r0
 800817e:	4608      	mov	r0, r1
 8008180:	4611      	mov	r1, r2
 8008182:	2200      	movs	r2, #0
 8008184:	602a      	str	r2, [r5, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f7fc fba6 	bl	80048d8 <_write>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_write_r+0x1e>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_write_r+0x1e>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	20026094 	.word	0x20026094

0800819c <__errno>:
 800819c:	4b01      	ldr	r3, [pc, #4]	@ (80081a4 <__errno+0x8>)
 800819e:	6818      	ldr	r0, [r3, #0]
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	2000002c 	.word	0x2000002c

080081a8 <__libc_init_array>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	4d0d      	ldr	r5, [pc, #52]	@ (80081e0 <__libc_init_array+0x38>)
 80081ac:	4c0d      	ldr	r4, [pc, #52]	@ (80081e4 <__libc_init_array+0x3c>)
 80081ae:	1b64      	subs	r4, r4, r5
 80081b0:	10a4      	asrs	r4, r4, #2
 80081b2:	2600      	movs	r6, #0
 80081b4:	42a6      	cmp	r6, r4
 80081b6:	d109      	bne.n	80081cc <__libc_init_array+0x24>
 80081b8:	4d0b      	ldr	r5, [pc, #44]	@ (80081e8 <__libc_init_array+0x40>)
 80081ba:	4c0c      	ldr	r4, [pc, #48]	@ (80081ec <__libc_init_array+0x44>)
 80081bc:	f000 fd24 	bl	8008c08 <_init>
 80081c0:	1b64      	subs	r4, r4, r5
 80081c2:	10a4      	asrs	r4, r4, #2
 80081c4:	2600      	movs	r6, #0
 80081c6:	42a6      	cmp	r6, r4
 80081c8:	d105      	bne.n	80081d6 <__libc_init_array+0x2e>
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80081d0:	4798      	blx	r3
 80081d2:	3601      	adds	r6, #1
 80081d4:	e7ee      	b.n	80081b4 <__libc_init_array+0xc>
 80081d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80081da:	4798      	blx	r3
 80081dc:	3601      	adds	r6, #1
 80081de:	e7f2      	b.n	80081c6 <__libc_init_array+0x1e>
 80081e0:	08009e84 	.word	0x08009e84
 80081e4:	08009e84 	.word	0x08009e84
 80081e8:	08009e84 	.word	0x08009e84
 80081ec:	08009e88 	.word	0x08009e88

080081f0 <__retarget_lock_init_recursive>:
 80081f0:	4770      	bx	lr

080081f2 <__retarget_lock_acquire_recursive>:
 80081f2:	4770      	bx	lr

080081f4 <__retarget_lock_release_recursive>:
 80081f4:	4770      	bx	lr
	...

080081f8 <_free_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4605      	mov	r5, r0
 80081fc:	2900      	cmp	r1, #0
 80081fe:	d041      	beq.n	8008284 <_free_r+0x8c>
 8008200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008204:	1f0c      	subs	r4, r1, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfb8      	it	lt
 800820a:	18e4      	addlt	r4, r4, r3
 800820c:	f000 f8e0 	bl	80083d0 <__malloc_lock>
 8008210:	4a1d      	ldr	r2, [pc, #116]	@ (8008288 <_free_r+0x90>)
 8008212:	6813      	ldr	r3, [r2, #0]
 8008214:	b933      	cbnz	r3, 8008224 <_free_r+0x2c>
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	6014      	str	r4, [r2, #0]
 800821a:	4628      	mov	r0, r5
 800821c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008220:	f000 b8dc 	b.w	80083dc <__malloc_unlock>
 8008224:	42a3      	cmp	r3, r4
 8008226:	d908      	bls.n	800823a <_free_r+0x42>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	1821      	adds	r1, r4, r0
 800822c:	428b      	cmp	r3, r1
 800822e:	bf01      	itttt	eq
 8008230:	6819      	ldreq	r1, [r3, #0]
 8008232:	685b      	ldreq	r3, [r3, #4]
 8008234:	1809      	addeq	r1, r1, r0
 8008236:	6021      	streq	r1, [r4, #0]
 8008238:	e7ed      	b.n	8008216 <_free_r+0x1e>
 800823a:	461a      	mov	r2, r3
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	b10b      	cbz	r3, 8008244 <_free_r+0x4c>
 8008240:	42a3      	cmp	r3, r4
 8008242:	d9fa      	bls.n	800823a <_free_r+0x42>
 8008244:	6811      	ldr	r1, [r2, #0]
 8008246:	1850      	adds	r0, r2, r1
 8008248:	42a0      	cmp	r0, r4
 800824a:	d10b      	bne.n	8008264 <_free_r+0x6c>
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	4401      	add	r1, r0
 8008250:	1850      	adds	r0, r2, r1
 8008252:	4283      	cmp	r3, r0
 8008254:	6011      	str	r1, [r2, #0]
 8008256:	d1e0      	bne.n	800821a <_free_r+0x22>
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	6053      	str	r3, [r2, #4]
 800825e:	4408      	add	r0, r1
 8008260:	6010      	str	r0, [r2, #0]
 8008262:	e7da      	b.n	800821a <_free_r+0x22>
 8008264:	d902      	bls.n	800826c <_free_r+0x74>
 8008266:	230c      	movs	r3, #12
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	e7d6      	b.n	800821a <_free_r+0x22>
 800826c:	6820      	ldr	r0, [r4, #0]
 800826e:	1821      	adds	r1, r4, r0
 8008270:	428b      	cmp	r3, r1
 8008272:	bf04      	itt	eq
 8008274:	6819      	ldreq	r1, [r3, #0]
 8008276:	685b      	ldreq	r3, [r3, #4]
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	bf04      	itt	eq
 800827c:	1809      	addeq	r1, r1, r0
 800827e:	6021      	streq	r1, [r4, #0]
 8008280:	6054      	str	r4, [r2, #4]
 8008282:	e7ca      	b.n	800821a <_free_r+0x22>
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	200260a0 	.word	0x200260a0

0800828c <sbrk_aligned>:
 800828c:	b570      	push	{r4, r5, r6, lr}
 800828e:	4e0f      	ldr	r6, [pc, #60]	@ (80082cc <sbrk_aligned+0x40>)
 8008290:	460c      	mov	r4, r1
 8008292:	6831      	ldr	r1, [r6, #0]
 8008294:	4605      	mov	r5, r0
 8008296:	b911      	cbnz	r1, 800829e <sbrk_aligned+0x12>
 8008298:	f000 fca6 	bl	8008be8 <_sbrk_r>
 800829c:	6030      	str	r0, [r6, #0]
 800829e:	4621      	mov	r1, r4
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 fca1 	bl	8008be8 <_sbrk_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	d103      	bne.n	80082b2 <sbrk_aligned+0x26>
 80082aa:	f04f 34ff 	mov.w	r4, #4294967295
 80082ae:	4620      	mov	r0, r4
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	1cc4      	adds	r4, r0, #3
 80082b4:	f024 0403 	bic.w	r4, r4, #3
 80082b8:	42a0      	cmp	r0, r4
 80082ba:	d0f8      	beq.n	80082ae <sbrk_aligned+0x22>
 80082bc:	1a21      	subs	r1, r4, r0
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 fc92 	bl	8008be8 <_sbrk_r>
 80082c4:	3001      	adds	r0, #1
 80082c6:	d1f2      	bne.n	80082ae <sbrk_aligned+0x22>
 80082c8:	e7ef      	b.n	80082aa <sbrk_aligned+0x1e>
 80082ca:	bf00      	nop
 80082cc:	2002609c 	.word	0x2002609c

080082d0 <_malloc_r>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	1ccd      	adds	r5, r1, #3
 80082d6:	f025 0503 	bic.w	r5, r5, #3
 80082da:	3508      	adds	r5, #8
 80082dc:	2d0c      	cmp	r5, #12
 80082de:	bf38      	it	cc
 80082e0:	250c      	movcc	r5, #12
 80082e2:	2d00      	cmp	r5, #0
 80082e4:	4606      	mov	r6, r0
 80082e6:	db01      	blt.n	80082ec <_malloc_r+0x1c>
 80082e8:	42a9      	cmp	r1, r5
 80082ea:	d904      	bls.n	80082f6 <_malloc_r+0x26>
 80082ec:	230c      	movs	r3, #12
 80082ee:	6033      	str	r3, [r6, #0]
 80082f0:	2000      	movs	r0, #0
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083cc <_malloc_r+0xfc>
 80082fa:	f000 f869 	bl	80083d0 <__malloc_lock>
 80082fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008302:	461c      	mov	r4, r3
 8008304:	bb44      	cbnz	r4, 8008358 <_malloc_r+0x88>
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ffbf 	bl	800828c <sbrk_aligned>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	4604      	mov	r4, r0
 8008312:	d158      	bne.n	80083c6 <_malloc_r+0xf6>
 8008314:	f8d8 4000 	ldr.w	r4, [r8]
 8008318:	4627      	mov	r7, r4
 800831a:	2f00      	cmp	r7, #0
 800831c:	d143      	bne.n	80083a6 <_malloc_r+0xd6>
 800831e:	2c00      	cmp	r4, #0
 8008320:	d04b      	beq.n	80083ba <_malloc_r+0xea>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	4639      	mov	r1, r7
 8008326:	4630      	mov	r0, r6
 8008328:	eb04 0903 	add.w	r9, r4, r3
 800832c:	f000 fc5c 	bl	8008be8 <_sbrk_r>
 8008330:	4581      	cmp	r9, r0
 8008332:	d142      	bne.n	80083ba <_malloc_r+0xea>
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	1a6d      	subs	r5, r5, r1
 8008338:	4629      	mov	r1, r5
 800833a:	4630      	mov	r0, r6
 800833c:	f7ff ffa6 	bl	800828c <sbrk_aligned>
 8008340:	3001      	adds	r0, #1
 8008342:	d03a      	beq.n	80083ba <_malloc_r+0xea>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	442b      	add	r3, r5
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	f8d8 3000 	ldr.w	r3, [r8]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	bb62      	cbnz	r2, 80083ac <_malloc_r+0xdc>
 8008352:	f8c8 7000 	str.w	r7, [r8]
 8008356:	e00f      	b.n	8008378 <_malloc_r+0xa8>
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	1b52      	subs	r2, r2, r5
 800835c:	d420      	bmi.n	80083a0 <_malloc_r+0xd0>
 800835e:	2a0b      	cmp	r2, #11
 8008360:	d917      	bls.n	8008392 <_malloc_r+0xc2>
 8008362:	1961      	adds	r1, r4, r5
 8008364:	42a3      	cmp	r3, r4
 8008366:	6025      	str	r5, [r4, #0]
 8008368:	bf18      	it	ne
 800836a:	6059      	strne	r1, [r3, #4]
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	bf08      	it	eq
 8008370:	f8c8 1000 	streq.w	r1, [r8]
 8008374:	5162      	str	r2, [r4, r5]
 8008376:	604b      	str	r3, [r1, #4]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f82f 	bl	80083dc <__malloc_unlock>
 800837e:	f104 000b 	add.w	r0, r4, #11
 8008382:	1d23      	adds	r3, r4, #4
 8008384:	f020 0007 	bic.w	r0, r0, #7
 8008388:	1ac2      	subs	r2, r0, r3
 800838a:	bf1c      	itt	ne
 800838c:	1a1b      	subne	r3, r3, r0
 800838e:	50a3      	strne	r3, [r4, r2]
 8008390:	e7af      	b.n	80082f2 <_malloc_r+0x22>
 8008392:	6862      	ldr	r2, [r4, #4]
 8008394:	42a3      	cmp	r3, r4
 8008396:	bf0c      	ite	eq
 8008398:	f8c8 2000 	streq.w	r2, [r8]
 800839c:	605a      	strne	r2, [r3, #4]
 800839e:	e7eb      	b.n	8008378 <_malloc_r+0xa8>
 80083a0:	4623      	mov	r3, r4
 80083a2:	6864      	ldr	r4, [r4, #4]
 80083a4:	e7ae      	b.n	8008304 <_malloc_r+0x34>
 80083a6:	463c      	mov	r4, r7
 80083a8:	687f      	ldr	r7, [r7, #4]
 80083aa:	e7b6      	b.n	800831a <_malloc_r+0x4a>
 80083ac:	461a      	mov	r2, r3
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	42a3      	cmp	r3, r4
 80083b2:	d1fb      	bne.n	80083ac <_malloc_r+0xdc>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6053      	str	r3, [r2, #4]
 80083b8:	e7de      	b.n	8008378 <_malloc_r+0xa8>
 80083ba:	230c      	movs	r3, #12
 80083bc:	6033      	str	r3, [r6, #0]
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f80c 	bl	80083dc <__malloc_unlock>
 80083c4:	e794      	b.n	80082f0 <_malloc_r+0x20>
 80083c6:	6005      	str	r5, [r0, #0]
 80083c8:	e7d6      	b.n	8008378 <_malloc_r+0xa8>
 80083ca:	bf00      	nop
 80083cc:	200260a0 	.word	0x200260a0

080083d0 <__malloc_lock>:
 80083d0:	4801      	ldr	r0, [pc, #4]	@ (80083d8 <__malloc_lock+0x8>)
 80083d2:	f7ff bf0e 	b.w	80081f2 <__retarget_lock_acquire_recursive>
 80083d6:	bf00      	nop
 80083d8:	20026098 	.word	0x20026098

080083dc <__malloc_unlock>:
 80083dc:	4801      	ldr	r0, [pc, #4]	@ (80083e4 <__malloc_unlock+0x8>)
 80083de:	f7ff bf09 	b.w	80081f4 <__retarget_lock_release_recursive>
 80083e2:	bf00      	nop
 80083e4:	20026098 	.word	0x20026098

080083e8 <__sfputc_r>:
 80083e8:	6893      	ldr	r3, [r2, #8]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	b410      	push	{r4}
 80083f0:	6093      	str	r3, [r2, #8]
 80083f2:	da08      	bge.n	8008406 <__sfputc_r+0x1e>
 80083f4:	6994      	ldr	r4, [r2, #24]
 80083f6:	42a3      	cmp	r3, r4
 80083f8:	db01      	blt.n	80083fe <__sfputc_r+0x16>
 80083fa:	290a      	cmp	r1, #10
 80083fc:	d103      	bne.n	8008406 <__sfputc_r+0x1e>
 80083fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008402:	f7ff bde8 	b.w	8007fd6 <__swbuf_r>
 8008406:	6813      	ldr	r3, [r2, #0]
 8008408:	1c58      	adds	r0, r3, #1
 800840a:	6010      	str	r0, [r2, #0]
 800840c:	7019      	strb	r1, [r3, #0]
 800840e:	4608      	mov	r0, r1
 8008410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008414:	4770      	bx	lr

08008416 <__sfputs_r>:
 8008416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008418:	4606      	mov	r6, r0
 800841a:	460f      	mov	r7, r1
 800841c:	4614      	mov	r4, r2
 800841e:	18d5      	adds	r5, r2, r3
 8008420:	42ac      	cmp	r4, r5
 8008422:	d101      	bne.n	8008428 <__sfputs_r+0x12>
 8008424:	2000      	movs	r0, #0
 8008426:	e007      	b.n	8008438 <__sfputs_r+0x22>
 8008428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842c:	463a      	mov	r2, r7
 800842e:	4630      	mov	r0, r6
 8008430:	f7ff ffda 	bl	80083e8 <__sfputc_r>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d1f3      	bne.n	8008420 <__sfputs_r+0xa>
 8008438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800843c <_vfiprintf_r>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	460d      	mov	r5, r1
 8008442:	b09d      	sub	sp, #116	@ 0x74
 8008444:	4614      	mov	r4, r2
 8008446:	4698      	mov	r8, r3
 8008448:	4606      	mov	r6, r0
 800844a:	b118      	cbz	r0, 8008454 <_vfiprintf_r+0x18>
 800844c:	6a03      	ldr	r3, [r0, #32]
 800844e:	b90b      	cbnz	r3, 8008454 <_vfiprintf_r+0x18>
 8008450:	f7ff fcd8 	bl	8007e04 <__sinit>
 8008454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008456:	07d9      	lsls	r1, r3, #31
 8008458:	d405      	bmi.n	8008466 <_vfiprintf_r+0x2a>
 800845a:	89ab      	ldrh	r3, [r5, #12]
 800845c:	059a      	lsls	r2, r3, #22
 800845e:	d402      	bmi.n	8008466 <_vfiprintf_r+0x2a>
 8008460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008462:	f7ff fec6 	bl	80081f2 <__retarget_lock_acquire_recursive>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	071b      	lsls	r3, r3, #28
 800846a:	d501      	bpl.n	8008470 <_vfiprintf_r+0x34>
 800846c:	692b      	ldr	r3, [r5, #16]
 800846e:	b99b      	cbnz	r3, 8008498 <_vfiprintf_r+0x5c>
 8008470:	4629      	mov	r1, r5
 8008472:	4630      	mov	r0, r6
 8008474:	f7ff fdee 	bl	8008054 <__swsetup_r>
 8008478:	b170      	cbz	r0, 8008498 <_vfiprintf_r+0x5c>
 800847a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800847c:	07dc      	lsls	r4, r3, #31
 800847e:	d504      	bpl.n	800848a <_vfiprintf_r+0x4e>
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	b01d      	add	sp, #116	@ 0x74
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	89ab      	ldrh	r3, [r5, #12]
 800848c:	0598      	lsls	r0, r3, #22
 800848e:	d4f7      	bmi.n	8008480 <_vfiprintf_r+0x44>
 8008490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008492:	f7ff feaf 	bl	80081f4 <__retarget_lock_release_recursive>
 8008496:	e7f3      	b.n	8008480 <_vfiprintf_r+0x44>
 8008498:	2300      	movs	r3, #0
 800849a:	9309      	str	r3, [sp, #36]	@ 0x24
 800849c:	2320      	movs	r3, #32
 800849e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a6:	2330      	movs	r3, #48	@ 0x30
 80084a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008658 <_vfiprintf_r+0x21c>
 80084ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084b0:	f04f 0901 	mov.w	r9, #1
 80084b4:	4623      	mov	r3, r4
 80084b6:	469a      	mov	sl, r3
 80084b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084bc:	b10a      	cbz	r2, 80084c2 <_vfiprintf_r+0x86>
 80084be:	2a25      	cmp	r2, #37	@ 0x25
 80084c0:	d1f9      	bne.n	80084b6 <_vfiprintf_r+0x7a>
 80084c2:	ebba 0b04 	subs.w	fp, sl, r4
 80084c6:	d00b      	beq.n	80084e0 <_vfiprintf_r+0xa4>
 80084c8:	465b      	mov	r3, fp
 80084ca:	4622      	mov	r2, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7ff ffa1 	bl	8008416 <__sfputs_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	f000 80a7 	beq.w	8008628 <_vfiprintf_r+0x1ec>
 80084da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084dc:	445a      	add	r2, fp
 80084de:	9209      	str	r2, [sp, #36]	@ 0x24
 80084e0:	f89a 3000 	ldrb.w	r3, [sl]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 809f 	beq.w	8008628 <_vfiprintf_r+0x1ec>
 80084ea:	2300      	movs	r3, #0
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f4:	f10a 0a01 	add.w	sl, sl, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	9307      	str	r3, [sp, #28]
 80084fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008500:	931a      	str	r3, [sp, #104]	@ 0x68
 8008502:	4654      	mov	r4, sl
 8008504:	2205      	movs	r2, #5
 8008506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850a:	4853      	ldr	r0, [pc, #332]	@ (8008658 <_vfiprintf_r+0x21c>)
 800850c:	f7f7 fe70 	bl	80001f0 <memchr>
 8008510:	9a04      	ldr	r2, [sp, #16]
 8008512:	b9d8      	cbnz	r0, 800854c <_vfiprintf_r+0x110>
 8008514:	06d1      	lsls	r1, r2, #27
 8008516:	bf44      	itt	mi
 8008518:	2320      	movmi	r3, #32
 800851a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800851e:	0713      	lsls	r3, r2, #28
 8008520:	bf44      	itt	mi
 8008522:	232b      	movmi	r3, #43	@ 0x2b
 8008524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008528:	f89a 3000 	ldrb.w	r3, [sl]
 800852c:	2b2a      	cmp	r3, #42	@ 0x2a
 800852e:	d015      	beq.n	800855c <_vfiprintf_r+0x120>
 8008530:	9a07      	ldr	r2, [sp, #28]
 8008532:	4654      	mov	r4, sl
 8008534:	2000      	movs	r0, #0
 8008536:	f04f 0c0a 	mov.w	ip, #10
 800853a:	4621      	mov	r1, r4
 800853c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008540:	3b30      	subs	r3, #48	@ 0x30
 8008542:	2b09      	cmp	r3, #9
 8008544:	d94b      	bls.n	80085de <_vfiprintf_r+0x1a2>
 8008546:	b1b0      	cbz	r0, 8008576 <_vfiprintf_r+0x13a>
 8008548:	9207      	str	r2, [sp, #28]
 800854a:	e014      	b.n	8008576 <_vfiprintf_r+0x13a>
 800854c:	eba0 0308 	sub.w	r3, r0, r8
 8008550:	fa09 f303 	lsl.w	r3, r9, r3
 8008554:	4313      	orrs	r3, r2
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	46a2      	mov	sl, r4
 800855a:	e7d2      	b.n	8008502 <_vfiprintf_r+0xc6>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	1d19      	adds	r1, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	9103      	str	r1, [sp, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	bfbb      	ittet	lt
 8008568:	425b      	neglt	r3, r3
 800856a:	f042 0202 	orrlt.w	r2, r2, #2
 800856e:	9307      	strge	r3, [sp, #28]
 8008570:	9307      	strlt	r3, [sp, #28]
 8008572:	bfb8      	it	lt
 8008574:	9204      	strlt	r2, [sp, #16]
 8008576:	7823      	ldrb	r3, [r4, #0]
 8008578:	2b2e      	cmp	r3, #46	@ 0x2e
 800857a:	d10a      	bne.n	8008592 <_vfiprintf_r+0x156>
 800857c:	7863      	ldrb	r3, [r4, #1]
 800857e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008580:	d132      	bne.n	80085e8 <_vfiprintf_r+0x1ac>
 8008582:	9b03      	ldr	r3, [sp, #12]
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	9203      	str	r2, [sp, #12]
 800858a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800858e:	3402      	adds	r4, #2
 8008590:	9305      	str	r3, [sp, #20]
 8008592:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008668 <_vfiprintf_r+0x22c>
 8008596:	7821      	ldrb	r1, [r4, #0]
 8008598:	2203      	movs	r2, #3
 800859a:	4650      	mov	r0, sl
 800859c:	f7f7 fe28 	bl	80001f0 <memchr>
 80085a0:	b138      	cbz	r0, 80085b2 <_vfiprintf_r+0x176>
 80085a2:	9b04      	ldr	r3, [sp, #16]
 80085a4:	eba0 000a 	sub.w	r0, r0, sl
 80085a8:	2240      	movs	r2, #64	@ 0x40
 80085aa:	4082      	lsls	r2, r0
 80085ac:	4313      	orrs	r3, r2
 80085ae:	3401      	adds	r4, #1
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b6:	4829      	ldr	r0, [pc, #164]	@ (800865c <_vfiprintf_r+0x220>)
 80085b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085bc:	2206      	movs	r2, #6
 80085be:	f7f7 fe17 	bl	80001f0 <memchr>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d03f      	beq.n	8008646 <_vfiprintf_r+0x20a>
 80085c6:	4b26      	ldr	r3, [pc, #152]	@ (8008660 <_vfiprintf_r+0x224>)
 80085c8:	bb1b      	cbnz	r3, 8008612 <_vfiprintf_r+0x1d6>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	3307      	adds	r3, #7
 80085ce:	f023 0307 	bic.w	r3, r3, #7
 80085d2:	3308      	adds	r3, #8
 80085d4:	9303      	str	r3, [sp, #12]
 80085d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d8:	443b      	add	r3, r7
 80085da:	9309      	str	r3, [sp, #36]	@ 0x24
 80085dc:	e76a      	b.n	80084b4 <_vfiprintf_r+0x78>
 80085de:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e2:	460c      	mov	r4, r1
 80085e4:	2001      	movs	r0, #1
 80085e6:	e7a8      	b.n	800853a <_vfiprintf_r+0xfe>
 80085e8:	2300      	movs	r3, #0
 80085ea:	3401      	adds	r4, #1
 80085ec:	9305      	str	r3, [sp, #20]
 80085ee:	4619      	mov	r1, r3
 80085f0:	f04f 0c0a 	mov.w	ip, #10
 80085f4:	4620      	mov	r0, r4
 80085f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085fa:	3a30      	subs	r2, #48	@ 0x30
 80085fc:	2a09      	cmp	r2, #9
 80085fe:	d903      	bls.n	8008608 <_vfiprintf_r+0x1cc>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d0c6      	beq.n	8008592 <_vfiprintf_r+0x156>
 8008604:	9105      	str	r1, [sp, #20]
 8008606:	e7c4      	b.n	8008592 <_vfiprintf_r+0x156>
 8008608:	fb0c 2101 	mla	r1, ip, r1, r2
 800860c:	4604      	mov	r4, r0
 800860e:	2301      	movs	r3, #1
 8008610:	e7f0      	b.n	80085f4 <_vfiprintf_r+0x1b8>
 8008612:	ab03      	add	r3, sp, #12
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	462a      	mov	r2, r5
 8008618:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <_vfiprintf_r+0x228>)
 800861a:	a904      	add	r1, sp, #16
 800861c:	4630      	mov	r0, r6
 800861e:	f3af 8000 	nop.w
 8008622:	4607      	mov	r7, r0
 8008624:	1c78      	adds	r0, r7, #1
 8008626:	d1d6      	bne.n	80085d6 <_vfiprintf_r+0x19a>
 8008628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800862a:	07d9      	lsls	r1, r3, #31
 800862c:	d405      	bmi.n	800863a <_vfiprintf_r+0x1fe>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	059a      	lsls	r2, r3, #22
 8008632:	d402      	bmi.n	800863a <_vfiprintf_r+0x1fe>
 8008634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008636:	f7ff fddd 	bl	80081f4 <__retarget_lock_release_recursive>
 800863a:	89ab      	ldrh	r3, [r5, #12]
 800863c:	065b      	lsls	r3, r3, #25
 800863e:	f53f af1f 	bmi.w	8008480 <_vfiprintf_r+0x44>
 8008642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008644:	e71e      	b.n	8008484 <_vfiprintf_r+0x48>
 8008646:	ab03      	add	r3, sp, #12
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	462a      	mov	r2, r5
 800864c:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <_vfiprintf_r+0x228>)
 800864e:	a904      	add	r1, sp, #16
 8008650:	4630      	mov	r0, r6
 8008652:	f000 f879 	bl	8008748 <_printf_i>
 8008656:	e7e4      	b.n	8008622 <_vfiprintf_r+0x1e6>
 8008658:	08009e48 	.word	0x08009e48
 800865c:	08009e52 	.word	0x08009e52
 8008660:	00000000 	.word	0x00000000
 8008664:	08008417 	.word	0x08008417
 8008668:	08009e4e 	.word	0x08009e4e

0800866c <_printf_common>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	4616      	mov	r6, r2
 8008672:	4698      	mov	r8, r3
 8008674:	688a      	ldr	r2, [r1, #8]
 8008676:	690b      	ldr	r3, [r1, #16]
 8008678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800867c:	4293      	cmp	r3, r2
 800867e:	bfb8      	it	lt
 8008680:	4613      	movlt	r3, r2
 8008682:	6033      	str	r3, [r6, #0]
 8008684:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008688:	4607      	mov	r7, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b10a      	cbz	r2, 8008692 <_printf_common+0x26>
 800868e:	3301      	adds	r3, #1
 8008690:	6033      	str	r3, [r6, #0]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	0699      	lsls	r1, r3, #26
 8008696:	bf42      	ittt	mi
 8008698:	6833      	ldrmi	r3, [r6, #0]
 800869a:	3302      	addmi	r3, #2
 800869c:	6033      	strmi	r3, [r6, #0]
 800869e:	6825      	ldr	r5, [r4, #0]
 80086a0:	f015 0506 	ands.w	r5, r5, #6
 80086a4:	d106      	bne.n	80086b4 <_printf_common+0x48>
 80086a6:	f104 0a19 	add.w	sl, r4, #25
 80086aa:	68e3      	ldr	r3, [r4, #12]
 80086ac:	6832      	ldr	r2, [r6, #0]
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	dc26      	bgt.n	8008702 <_printf_common+0x96>
 80086b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	3b00      	subs	r3, #0
 80086bc:	bf18      	it	ne
 80086be:	2301      	movne	r3, #1
 80086c0:	0692      	lsls	r2, r2, #26
 80086c2:	d42b      	bmi.n	800871c <_printf_common+0xb0>
 80086c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086c8:	4641      	mov	r1, r8
 80086ca:	4638      	mov	r0, r7
 80086cc:	47c8      	blx	r9
 80086ce:	3001      	adds	r0, #1
 80086d0:	d01e      	beq.n	8008710 <_printf_common+0xa4>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	6922      	ldr	r2, [r4, #16]
 80086d6:	f003 0306 	and.w	r3, r3, #6
 80086da:	2b04      	cmp	r3, #4
 80086dc:	bf02      	ittt	eq
 80086de:	68e5      	ldreq	r5, [r4, #12]
 80086e0:	6833      	ldreq	r3, [r6, #0]
 80086e2:	1aed      	subeq	r5, r5, r3
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	bf0c      	ite	eq
 80086e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086ec:	2500      	movne	r5, #0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bfc4      	itt	gt
 80086f2:	1a9b      	subgt	r3, r3, r2
 80086f4:	18ed      	addgt	r5, r5, r3
 80086f6:	2600      	movs	r6, #0
 80086f8:	341a      	adds	r4, #26
 80086fa:	42b5      	cmp	r5, r6
 80086fc:	d11a      	bne.n	8008734 <_printf_common+0xc8>
 80086fe:	2000      	movs	r0, #0
 8008700:	e008      	b.n	8008714 <_printf_common+0xa8>
 8008702:	2301      	movs	r3, #1
 8008704:	4652      	mov	r2, sl
 8008706:	4641      	mov	r1, r8
 8008708:	4638      	mov	r0, r7
 800870a:	47c8      	blx	r9
 800870c:	3001      	adds	r0, #1
 800870e:	d103      	bne.n	8008718 <_printf_common+0xac>
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008718:	3501      	adds	r5, #1
 800871a:	e7c6      	b.n	80086aa <_printf_common+0x3e>
 800871c:	18e1      	adds	r1, r4, r3
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	2030      	movs	r0, #48	@ 0x30
 8008722:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008726:	4422      	add	r2, r4
 8008728:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800872c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008730:	3302      	adds	r3, #2
 8008732:	e7c7      	b.n	80086c4 <_printf_common+0x58>
 8008734:	2301      	movs	r3, #1
 8008736:	4622      	mov	r2, r4
 8008738:	4641      	mov	r1, r8
 800873a:	4638      	mov	r0, r7
 800873c:	47c8      	blx	r9
 800873e:	3001      	adds	r0, #1
 8008740:	d0e6      	beq.n	8008710 <_printf_common+0xa4>
 8008742:	3601      	adds	r6, #1
 8008744:	e7d9      	b.n	80086fa <_printf_common+0x8e>
	...

08008748 <_printf_i>:
 8008748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	7e0f      	ldrb	r7, [r1, #24]
 800874e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008750:	2f78      	cmp	r7, #120	@ 0x78
 8008752:	4691      	mov	r9, r2
 8008754:	4680      	mov	r8, r0
 8008756:	460c      	mov	r4, r1
 8008758:	469a      	mov	sl, r3
 800875a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800875e:	d807      	bhi.n	8008770 <_printf_i+0x28>
 8008760:	2f62      	cmp	r7, #98	@ 0x62
 8008762:	d80a      	bhi.n	800877a <_printf_i+0x32>
 8008764:	2f00      	cmp	r7, #0
 8008766:	f000 80d2 	beq.w	800890e <_printf_i+0x1c6>
 800876a:	2f58      	cmp	r7, #88	@ 0x58
 800876c:	f000 80b9 	beq.w	80088e2 <_printf_i+0x19a>
 8008770:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008774:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008778:	e03a      	b.n	80087f0 <_printf_i+0xa8>
 800877a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800877e:	2b15      	cmp	r3, #21
 8008780:	d8f6      	bhi.n	8008770 <_printf_i+0x28>
 8008782:	a101      	add	r1, pc, #4	@ (adr r1, 8008788 <_printf_i+0x40>)
 8008784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087f5 	.word	0x080087f5
 8008790:	08008771 	.word	0x08008771
 8008794:	08008771 	.word	0x08008771
 8008798:	08008771 	.word	0x08008771
 800879c:	08008771 	.word	0x08008771
 80087a0:	080087f5 	.word	0x080087f5
 80087a4:	08008771 	.word	0x08008771
 80087a8:	08008771 	.word	0x08008771
 80087ac:	08008771 	.word	0x08008771
 80087b0:	08008771 	.word	0x08008771
 80087b4:	080088f5 	.word	0x080088f5
 80087b8:	0800881f 	.word	0x0800881f
 80087bc:	080088af 	.word	0x080088af
 80087c0:	08008771 	.word	0x08008771
 80087c4:	08008771 	.word	0x08008771
 80087c8:	08008917 	.word	0x08008917
 80087cc:	08008771 	.word	0x08008771
 80087d0:	0800881f 	.word	0x0800881f
 80087d4:	08008771 	.word	0x08008771
 80087d8:	08008771 	.word	0x08008771
 80087dc:	080088b7 	.word	0x080088b7
 80087e0:	6833      	ldr	r3, [r6, #0]
 80087e2:	1d1a      	adds	r2, r3, #4
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6032      	str	r2, [r6, #0]
 80087e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087f0:	2301      	movs	r3, #1
 80087f2:	e09d      	b.n	8008930 <_printf_i+0x1e8>
 80087f4:	6833      	ldr	r3, [r6, #0]
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	1d19      	adds	r1, r3, #4
 80087fa:	6031      	str	r1, [r6, #0]
 80087fc:	0606      	lsls	r6, r0, #24
 80087fe:	d501      	bpl.n	8008804 <_printf_i+0xbc>
 8008800:	681d      	ldr	r5, [r3, #0]
 8008802:	e003      	b.n	800880c <_printf_i+0xc4>
 8008804:	0645      	lsls	r5, r0, #25
 8008806:	d5fb      	bpl.n	8008800 <_printf_i+0xb8>
 8008808:	f9b3 5000 	ldrsh.w	r5, [r3]
 800880c:	2d00      	cmp	r5, #0
 800880e:	da03      	bge.n	8008818 <_printf_i+0xd0>
 8008810:	232d      	movs	r3, #45	@ 0x2d
 8008812:	426d      	negs	r5, r5
 8008814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008818:	4859      	ldr	r0, [pc, #356]	@ (8008980 <_printf_i+0x238>)
 800881a:	230a      	movs	r3, #10
 800881c:	e011      	b.n	8008842 <_printf_i+0xfa>
 800881e:	6821      	ldr	r1, [r4, #0]
 8008820:	6833      	ldr	r3, [r6, #0]
 8008822:	0608      	lsls	r0, r1, #24
 8008824:	f853 5b04 	ldr.w	r5, [r3], #4
 8008828:	d402      	bmi.n	8008830 <_printf_i+0xe8>
 800882a:	0649      	lsls	r1, r1, #25
 800882c:	bf48      	it	mi
 800882e:	b2ad      	uxthmi	r5, r5
 8008830:	2f6f      	cmp	r7, #111	@ 0x6f
 8008832:	4853      	ldr	r0, [pc, #332]	@ (8008980 <_printf_i+0x238>)
 8008834:	6033      	str	r3, [r6, #0]
 8008836:	bf14      	ite	ne
 8008838:	230a      	movne	r3, #10
 800883a:	2308      	moveq	r3, #8
 800883c:	2100      	movs	r1, #0
 800883e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008842:	6866      	ldr	r6, [r4, #4]
 8008844:	60a6      	str	r6, [r4, #8]
 8008846:	2e00      	cmp	r6, #0
 8008848:	bfa2      	ittt	ge
 800884a:	6821      	ldrge	r1, [r4, #0]
 800884c:	f021 0104 	bicge.w	r1, r1, #4
 8008850:	6021      	strge	r1, [r4, #0]
 8008852:	b90d      	cbnz	r5, 8008858 <_printf_i+0x110>
 8008854:	2e00      	cmp	r6, #0
 8008856:	d04b      	beq.n	80088f0 <_printf_i+0x1a8>
 8008858:	4616      	mov	r6, r2
 800885a:	fbb5 f1f3 	udiv	r1, r5, r3
 800885e:	fb03 5711 	mls	r7, r3, r1, r5
 8008862:	5dc7      	ldrb	r7, [r0, r7]
 8008864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008868:	462f      	mov	r7, r5
 800886a:	42bb      	cmp	r3, r7
 800886c:	460d      	mov	r5, r1
 800886e:	d9f4      	bls.n	800885a <_printf_i+0x112>
 8008870:	2b08      	cmp	r3, #8
 8008872:	d10b      	bne.n	800888c <_printf_i+0x144>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	07df      	lsls	r7, r3, #31
 8008878:	d508      	bpl.n	800888c <_printf_i+0x144>
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	6861      	ldr	r1, [r4, #4]
 800887e:	4299      	cmp	r1, r3
 8008880:	bfde      	ittt	le
 8008882:	2330      	movle	r3, #48	@ 0x30
 8008884:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008888:	f106 36ff 	addle.w	r6, r6, #4294967295
 800888c:	1b92      	subs	r2, r2, r6
 800888e:	6122      	str	r2, [r4, #16]
 8008890:	f8cd a000 	str.w	sl, [sp]
 8008894:	464b      	mov	r3, r9
 8008896:	aa03      	add	r2, sp, #12
 8008898:	4621      	mov	r1, r4
 800889a:	4640      	mov	r0, r8
 800889c:	f7ff fee6 	bl	800866c <_printf_common>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d14a      	bne.n	800893a <_printf_i+0x1f2>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	b004      	add	sp, #16
 80088aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f043 0320 	orr.w	r3, r3, #32
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	4833      	ldr	r0, [pc, #204]	@ (8008984 <_printf_i+0x23c>)
 80088b8:	2778      	movs	r7, #120	@ 0x78
 80088ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	6831      	ldr	r1, [r6, #0]
 80088c2:	061f      	lsls	r7, r3, #24
 80088c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80088c8:	d402      	bmi.n	80088d0 <_printf_i+0x188>
 80088ca:	065f      	lsls	r7, r3, #25
 80088cc:	bf48      	it	mi
 80088ce:	b2ad      	uxthmi	r5, r5
 80088d0:	6031      	str	r1, [r6, #0]
 80088d2:	07d9      	lsls	r1, r3, #31
 80088d4:	bf44      	itt	mi
 80088d6:	f043 0320 	orrmi.w	r3, r3, #32
 80088da:	6023      	strmi	r3, [r4, #0]
 80088dc:	b11d      	cbz	r5, 80088e6 <_printf_i+0x19e>
 80088de:	2310      	movs	r3, #16
 80088e0:	e7ac      	b.n	800883c <_printf_i+0xf4>
 80088e2:	4827      	ldr	r0, [pc, #156]	@ (8008980 <_printf_i+0x238>)
 80088e4:	e7e9      	b.n	80088ba <_printf_i+0x172>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	f023 0320 	bic.w	r3, r3, #32
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	e7f6      	b.n	80088de <_printf_i+0x196>
 80088f0:	4616      	mov	r6, r2
 80088f2:	e7bd      	b.n	8008870 <_printf_i+0x128>
 80088f4:	6833      	ldr	r3, [r6, #0]
 80088f6:	6825      	ldr	r5, [r4, #0]
 80088f8:	6961      	ldr	r1, [r4, #20]
 80088fa:	1d18      	adds	r0, r3, #4
 80088fc:	6030      	str	r0, [r6, #0]
 80088fe:	062e      	lsls	r6, r5, #24
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	d501      	bpl.n	8008908 <_printf_i+0x1c0>
 8008904:	6019      	str	r1, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0x1c6>
 8008908:	0668      	lsls	r0, r5, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0x1bc>
 800890c:	8019      	strh	r1, [r3, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	4616      	mov	r6, r2
 8008914:	e7bc      	b.n	8008890 <_printf_i+0x148>
 8008916:	6833      	ldr	r3, [r6, #0]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	6032      	str	r2, [r6, #0]
 800891c:	681e      	ldr	r6, [r3, #0]
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	2100      	movs	r1, #0
 8008922:	4630      	mov	r0, r6
 8008924:	f7f7 fc64 	bl	80001f0 <memchr>
 8008928:	b108      	cbz	r0, 800892e <_printf_i+0x1e6>
 800892a:	1b80      	subs	r0, r0, r6
 800892c:	6060      	str	r0, [r4, #4]
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	2300      	movs	r3, #0
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008938:	e7aa      	b.n	8008890 <_printf_i+0x148>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d0ad      	beq.n	80088a4 <_printf_i+0x15c>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	079b      	lsls	r3, r3, #30
 800894c:	d413      	bmi.n	8008976 <_printf_i+0x22e>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	4298      	cmp	r0, r3
 8008954:	bfb8      	it	lt
 8008956:	4618      	movlt	r0, r3
 8008958:	e7a6      	b.n	80088a8 <_printf_i+0x160>
 800895a:	2301      	movs	r3, #1
 800895c:	4632      	mov	r2, r6
 800895e:	4649      	mov	r1, r9
 8008960:	4640      	mov	r0, r8
 8008962:	47d0      	blx	sl
 8008964:	3001      	adds	r0, #1
 8008966:	d09d      	beq.n	80088a4 <_printf_i+0x15c>
 8008968:	3501      	adds	r5, #1
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	1a5b      	subs	r3, r3, r1
 8008970:	42ab      	cmp	r3, r5
 8008972:	dcf2      	bgt.n	800895a <_printf_i+0x212>
 8008974:	e7eb      	b.n	800894e <_printf_i+0x206>
 8008976:	2500      	movs	r5, #0
 8008978:	f104 0619 	add.w	r6, r4, #25
 800897c:	e7f5      	b.n	800896a <_printf_i+0x222>
 800897e:	bf00      	nop
 8008980:	08009e59 	.word	0x08009e59
 8008984:	08009e6a 	.word	0x08009e6a

08008988 <__sflush_r>:
 8008988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008990:	0716      	lsls	r6, r2, #28
 8008992:	4605      	mov	r5, r0
 8008994:	460c      	mov	r4, r1
 8008996:	d454      	bmi.n	8008a42 <__sflush_r+0xba>
 8008998:	684b      	ldr	r3, [r1, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dc02      	bgt.n	80089a4 <__sflush_r+0x1c>
 800899e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd48      	ble.n	8008a36 <__sflush_r+0xae>
 80089a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	d045      	beq.n	8008a36 <__sflush_r+0xae>
 80089aa:	2300      	movs	r3, #0
 80089ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089b0:	682f      	ldr	r7, [r5, #0]
 80089b2:	6a21      	ldr	r1, [r4, #32]
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	d030      	beq.n	8008a1a <__sflush_r+0x92>
 80089b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	0759      	lsls	r1, r3, #29
 80089be:	d505      	bpl.n	80089cc <__sflush_r+0x44>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	1ad2      	subs	r2, r2, r3
 80089c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089c6:	b10b      	cbz	r3, 80089cc <__sflush_r+0x44>
 80089c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089d0:	6a21      	ldr	r1, [r4, #32]
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b0      	blx	r6
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	d106      	bne.n	80089ea <__sflush_r+0x62>
 80089dc:	6829      	ldr	r1, [r5, #0]
 80089de:	291d      	cmp	r1, #29
 80089e0:	d82b      	bhi.n	8008a3a <__sflush_r+0xb2>
 80089e2:	4a2a      	ldr	r2, [pc, #168]	@ (8008a8c <__sflush_r+0x104>)
 80089e4:	410a      	asrs	r2, r1
 80089e6:	07d6      	lsls	r6, r2, #31
 80089e8:	d427      	bmi.n	8008a3a <__sflush_r+0xb2>
 80089ea:	2200      	movs	r2, #0
 80089ec:	6062      	str	r2, [r4, #4]
 80089ee:	04d9      	lsls	r1, r3, #19
 80089f0:	6922      	ldr	r2, [r4, #16]
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	d504      	bpl.n	8008a00 <__sflush_r+0x78>
 80089f6:	1c42      	adds	r2, r0, #1
 80089f8:	d101      	bne.n	80089fe <__sflush_r+0x76>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	b903      	cbnz	r3, 8008a00 <__sflush_r+0x78>
 80089fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a02:	602f      	str	r7, [r5, #0]
 8008a04:	b1b9      	cbz	r1, 8008a36 <__sflush_r+0xae>
 8008a06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	d002      	beq.n	8008a14 <__sflush_r+0x8c>
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f7ff fbf2 	bl	80081f8 <_free_r>
 8008a14:	2300      	movs	r3, #0
 8008a16:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a18:	e00d      	b.n	8008a36 <__sflush_r+0xae>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b0      	blx	r6
 8008a20:	4602      	mov	r2, r0
 8008a22:	1c50      	adds	r0, r2, #1
 8008a24:	d1c9      	bne.n	80089ba <__sflush_r+0x32>
 8008a26:	682b      	ldr	r3, [r5, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0c6      	beq.n	80089ba <__sflush_r+0x32>
 8008a2c:	2b1d      	cmp	r3, #29
 8008a2e:	d001      	beq.n	8008a34 <__sflush_r+0xac>
 8008a30:	2b16      	cmp	r3, #22
 8008a32:	d11e      	bne.n	8008a72 <__sflush_r+0xea>
 8008a34:	602f      	str	r7, [r5, #0]
 8008a36:	2000      	movs	r0, #0
 8008a38:	e022      	b.n	8008a80 <__sflush_r+0xf8>
 8008a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a3e:	b21b      	sxth	r3, r3
 8008a40:	e01b      	b.n	8008a7a <__sflush_r+0xf2>
 8008a42:	690f      	ldr	r7, [r1, #16]
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	d0f6      	beq.n	8008a36 <__sflush_r+0xae>
 8008a48:	0793      	lsls	r3, r2, #30
 8008a4a:	680e      	ldr	r6, [r1, #0]
 8008a4c:	bf08      	it	eq
 8008a4e:	694b      	ldreq	r3, [r1, #20]
 8008a50:	600f      	str	r7, [r1, #0]
 8008a52:	bf18      	it	ne
 8008a54:	2300      	movne	r3, #0
 8008a56:	eba6 0807 	sub.w	r8, r6, r7
 8008a5a:	608b      	str	r3, [r1, #8]
 8008a5c:	f1b8 0f00 	cmp.w	r8, #0
 8008a60:	dde9      	ble.n	8008a36 <__sflush_r+0xae>
 8008a62:	6a21      	ldr	r1, [r4, #32]
 8008a64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a66:	4643      	mov	r3, r8
 8008a68:	463a      	mov	r2, r7
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b0      	blx	r6
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	dc08      	bgt.n	8008a84 <__sflush_r+0xfc>
 8008a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a84:	4407      	add	r7, r0
 8008a86:	eba8 0800 	sub.w	r8, r8, r0
 8008a8a:	e7e7      	b.n	8008a5c <__sflush_r+0xd4>
 8008a8c:	dfbffffe 	.word	0xdfbffffe

08008a90 <_fflush_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	690b      	ldr	r3, [r1, #16]
 8008a94:	4605      	mov	r5, r0
 8008a96:	460c      	mov	r4, r1
 8008a98:	b913      	cbnz	r3, 8008aa0 <_fflush_r+0x10>
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	b118      	cbz	r0, 8008aaa <_fflush_r+0x1a>
 8008aa2:	6a03      	ldr	r3, [r0, #32]
 8008aa4:	b90b      	cbnz	r3, 8008aaa <_fflush_r+0x1a>
 8008aa6:	f7ff f9ad 	bl	8007e04 <__sinit>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0f3      	beq.n	8008a9a <_fflush_r+0xa>
 8008ab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ab4:	07d0      	lsls	r0, r2, #31
 8008ab6:	d404      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008ab8:	0599      	lsls	r1, r3, #22
 8008aba:	d402      	bmi.n	8008ac2 <_fflush_r+0x32>
 8008abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008abe:	f7ff fb98 	bl	80081f2 <__retarget_lock_acquire_recursive>
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7ff ff5f 	bl	8008988 <__sflush_r>
 8008aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008acc:	07da      	lsls	r2, r3, #31
 8008ace:	4605      	mov	r5, r0
 8008ad0:	d4e4      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	059b      	lsls	r3, r3, #22
 8008ad6:	d4e1      	bmi.n	8008a9c <_fflush_r+0xc>
 8008ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ada:	f7ff fb8b 	bl	80081f4 <__retarget_lock_release_recursive>
 8008ade:	e7dd      	b.n	8008a9c <_fflush_r+0xc>

08008ae0 <__swhatbuf_r>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	b096      	sub	sp, #88	@ 0x58
 8008aec:	4615      	mov	r5, r2
 8008aee:	461e      	mov	r6, r3
 8008af0:	da0d      	bge.n	8008b0e <__swhatbuf_r+0x2e>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008af8:	f04f 0100 	mov.w	r1, #0
 8008afc:	bf14      	ite	ne
 8008afe:	2340      	movne	r3, #64	@ 0x40
 8008b00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b04:	2000      	movs	r0, #0
 8008b06:	6031      	str	r1, [r6, #0]
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	b016      	add	sp, #88	@ 0x58
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	466a      	mov	r2, sp
 8008b10:	f000 f848 	bl	8008ba4 <_fstat_r>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	dbec      	blt.n	8008af2 <__swhatbuf_r+0x12>
 8008b18:	9901      	ldr	r1, [sp, #4]
 8008b1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b22:	4259      	negs	r1, r3
 8008b24:	4159      	adcs	r1, r3
 8008b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b2a:	e7eb      	b.n	8008b04 <__swhatbuf_r+0x24>

08008b2c <__smakebuf_r>:
 8008b2c:	898b      	ldrh	r3, [r1, #12]
 8008b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b30:	079d      	lsls	r5, r3, #30
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	d507      	bpl.n	8008b48 <__smakebuf_r+0x1c>
 8008b38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	2301      	movs	r3, #1
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	b003      	add	sp, #12
 8008b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b48:	ab01      	add	r3, sp, #4
 8008b4a:	466a      	mov	r2, sp
 8008b4c:	f7ff ffc8 	bl	8008ae0 <__swhatbuf_r>
 8008b50:	9f00      	ldr	r7, [sp, #0]
 8008b52:	4605      	mov	r5, r0
 8008b54:	4639      	mov	r1, r7
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7ff fbba 	bl	80082d0 <_malloc_r>
 8008b5c:	b948      	cbnz	r0, 8008b72 <__smakebuf_r+0x46>
 8008b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b62:	059a      	lsls	r2, r3, #22
 8008b64:	d4ee      	bmi.n	8008b44 <__smakebuf_r+0x18>
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	f043 0302 	orr.w	r3, r3, #2
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	e7e2      	b.n	8008b38 <__smakebuf_r+0xc>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	6020      	str	r0, [r4, #0]
 8008b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b82:	b15b      	cbz	r3, 8008b9c <__smakebuf_r+0x70>
 8008b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f81d 	bl	8008bc8 <_isatty_r>
 8008b8e:	b128      	cbz	r0, 8008b9c <__smakebuf_r+0x70>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	431d      	orrs	r5, r3
 8008ba0:	81a5      	strh	r5, [r4, #12]
 8008ba2:	e7cf      	b.n	8008b44 <__smakebuf_r+0x18>

08008ba4 <_fstat_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	@ (8008bc4 <_fstat_r+0x20>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	4611      	mov	r1, r2
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	f7fb feb9 	bl	8004928 <_fstat>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	d102      	bne.n	8008bc0 <_fstat_r+0x1c>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	b103      	cbz	r3, 8008bc0 <_fstat_r+0x1c>
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20026094 	.word	0x20026094

08008bc8 <_isatty_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d06      	ldr	r5, [pc, #24]	@ (8008be4 <_isatty_r+0x1c>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7fb feb8 	bl	8004948 <_isatty>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_isatty_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_isatty_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	20026094 	.word	0x20026094

08008be8 <_sbrk_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	@ (8008c04 <_sbrk_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7fb fec0 	bl	8004978 <_sbrk>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_sbrk_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_sbrk_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	20026094 	.word	0x20026094

08008c08 <_init>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr

08008c14 <_fini>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr
