
CJacobs_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dfc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  08009fac  08009fac  0000afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1e4  0800b1e4  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1e4  0800b1e4  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1ec  0800b1ec  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1ec  0800b1ec  0000c1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b1f0  0800b1f0  0000c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b1f4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          0002602c  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200260a8  200260a8  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014107  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a3  00000000  00000000  000211b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00024558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fbd  00000000  00000000  000259d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027003  00000000  00000000  00026995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a284  00000000  00000000  0004d998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d69  00000000  00000000  00067c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014a985  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c78  00000000  00000000  0014a9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00150640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f94 	.word	0x08009f94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08009f94 	.word	0x08009f94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f005 fa12 	bl	80059ac <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa7a 	bl	8000a80 <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa37 	bl	8000a00 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fc68 	bl	8000e6c <LCD_Clear>
    GameInit();
 800059c:	f000 fd38 	bl	8001010 <GameInit>
//    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
    buttonIRQInit();
 80005a0:	f000 f930 	bl	8000804 <buttonIRQInit>
    RNG_Init();
 80005a4:	f003 ffe6 	bl	8004574 <RNG_Init>
//    gameStart();
    timer3Init();
 80005a8:	f004 f85c 	bl	8004664 <timer3Init>


    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005ac:	f003 ffac 	bl	8004508 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <ApplicationInit+0x40>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005b6:	f000 f85b 	bl	8000670 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000098 	.word	0x20000098

080005c4 <TIM3_App_Start>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}

void TIM3_App_Start(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	TIM3_Start();
 80005c8:	f004 f88c 	bl	80046e4 <TIM3_Start>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005d4:	2006      	movs	r0, #6
 80005d6:	f005 fcac 	bl	8005f32 <HAL_NVIC_DisableIRQ>
//	int rotatable = ableToRotate();
//	if (rotatable == 1){
		addSchedulerEvent(ROTATE_BLOCK);
 80005da:	2020      	movs	r0, #32
 80005dc:	f004 f81c 	bl	8004618 <addSchedulerEvent>
//	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80005e0:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <EXTI0_IRQHandler+0x20>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005e6:	2006      	movs	r0, #6
 80005e8:	f005 fc95 	bl	8005f16 <HAL_NVIC_EnableIRQ>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40013c00 	.word	0x40013c00

080005f4 <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
	 if (__HAL_TIM_GET_FLAG(&TIM3_Config, TIM_FLAG_UPDATE)) {
 80005fa:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <TIM3_IRQHandler+0x78>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	2b01      	cmp	r3, #1
 8000606:	d12c      	bne.n	8000662 <TIM3_IRQHandler+0x6e>
	        // Clear the update interrupt flag
	        __HAL_TIM_CLEAR_FLAG(&TIM3_Config, TIM_FLAG_UPDATE);
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <TIM3_IRQHandler+0x78>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f06f 0201 	mvn.w	r2, #1
 8000610:	611a      	str	r2, [r3, #16]
	        int full = isFull();
 8000612:	f003 fb49 	bl	8003ca8 <isFull>
 8000616:	60f8      	str	r0, [r7, #12]

	        if (full != 0){
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <TIM3_IRQHandler+0x30>
	        	addSchedulerEvent(DROP_BLOCK);
 800061e:	2040      	movs	r0, #64	@ 0x40
 8000620:	f003 fffa 	bl	8004618 <addSchedulerEvent>
	        }

			if (full == 0){
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d11b      	bne.n	8000662 <TIM3_IRQHandler+0x6e>
				uint16_t currentYpos = getCurrentYpos();
 800062a:	f002 fcc1 	bl	8002fb0 <getCurrentYpos>
 800062e:	4603      	mov	r3, r0
 8000630:	817b      	strh	r3, [r7, #10]
				if (currentYpos <= 1){
 8000632:	897b      	ldrh	r3, [r7, #10]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d801      	bhi.n	800063c <TIM3_IRQHandler+0x48>
//					HAL_NVIC_DisableIRQ(TIM3_IRQn);
					gameOver();
 8000638:	f000 fe04 	bl	8001244 <gameOver>
				}
				if (currentYpos > 1) {
 800063c:	897b      	ldrh	r3, [r7, #10]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d90f      	bls.n	8000662 <TIM3_IRQHandler+0x6e>
					updateTop();
 8000642:	f003 fe0d 	bl	8004260 <updateTop>
					checkForTetris();
 8000646:	f003 fe49 	bl	80042dc <checkForTetris>
					uint32_t randBlock = GetRandomBlock();
 800064a:	f003 ffb9 	bl	80045c0 <GetRandomBlock>
 800064e:	6078      	str	r0, [r7, #4]
					updateCurrentBlock(randBlock, 5, 1, 1);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	b298      	uxth	r0, r3
 8000654:	2301      	movs	r3, #1
 8000656:	2201      	movs	r2, #1
 8000658:	2105      	movs	r1, #5
 800065a:	f002 fc87 	bl	8002f6c <updateCurrentBlock>
					drawCurrentBlock();
 800065e:	f002 fbdd 	bl	8002e1c <drawCurrentBlock>
				}
			}
	 }
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20025e58 	.word	0x20025e58

08000670 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 8000684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000688:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800068a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800068e:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	4a0e      	ldr	r2, [pc, #56]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <LCDTouchScreenInterruptGPIOInit+0x6c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <LCDTouchScreenInterruptGPIOInit+0x70>)
 80006ba:	f005 fc7b 	bl	8005fb4 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2101      	movs	r1, #1
 80006c2:	2028      	movs	r0, #40	@ 0x28
 80006c4:	f005 fc0b 	bl	8005ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006c8:	2028      	movs	r0, #40	@ 0x28
 80006ca:	f005 fc24 	bl	8005f16 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <LCDTouchScreenInterruptGPIOInit+0x74>)
 80006d0:	4a05      	ldr	r2, [pc, #20]	@ (80006e8 <LCDTouchScreenInterruptGPIOInit+0x78>)
 80006d2:	601a      	str	r2, [r3, #0]

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	0600000f 	.word	0x0600000f

080006ec <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 80006f2:	2028      	movs	r0, #40	@ 0x28
 80006f4:	f005 fc1d 	bl	8005f32 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]

	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006fc:	2040      	movs	r0, #64	@ 0x40
 80006fe:	f003 ff19 	bl	8004534 <ReadRegisterFromTouchModule>
 8000702:	4603      	mov	r3, r0
 8000704:	73bb      	strb	r3, [r7, #14]
		if (ctrlReg & 0x80)
 8000706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800070a:	2b00      	cmp	r3, #0
 800070c:	da01      	bge.n	8000712 <EXTI15_10_IRQHandler+0x26>
		{
			isTouchDetected = true;
 800070e:	2301      	movs	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
		}

	static uint32_t count;
	count = 0;
 8000712:	4b37      	ldr	r3, [pc, #220]	@ (80007f0 <EXTI15_10_IRQHandler+0x104>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000718:	e006      	b.n	8000728 <EXTI15_10_IRQHandler+0x3c>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 800071a:	204c      	movs	r0, #76	@ 0x4c
 800071c:	f004 feb3 	bl	8005486 <STMPE811_Read>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <EXTI15_10_IRQHandler+0x104>)
 8000726:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000728:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <EXTI15_10_IRQHandler+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d0f4      	beq.n	800071a <EXTI15_10_IRQHandler+0x2e>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000730:	200a      	movs	r0, #10
 8000732:	f003 feff 	bl	8004534 <ReadRegisterFromTouchModule>
 8000736:	4603      	mov	r3, r0
 8000738:	737b      	strb	r3, [r7, #13]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 800073a:	2100      	movs	r1, #0
 800073c:	200a      	movs	r0, #10
 800073e:	f003 ff07 	bl	8004550 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000742:	200b      	movs	r0, #11
 8000744:	f003 fef6 	bl	8004534 <ReadRegisterFromTouchModule>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <EXTI15_10_IRQHandler+0x108>)
 800074e:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <EXTI15_10_IRQHandler+0x108>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	733b      	strb	r3, [r7, #12]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800075a:	7b3b      	ldrb	r3, [r7, #12]
 800075c:	4619      	mov	r1, r3
 800075e:	200b      	movs	r0, #11
 8000760:	f003 fef6 	bl	8004550 <WriteDataToTouchModule>
//	{
//		isTouchDetected = true;
//	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d021      	beq.n	80007ae <EXTI15_10_IRQHandler+0xc2>
	{
		printf("\nPressed");
 800076a:	4823      	ldr	r0, [pc, #140]	@ (80007f8 <EXTI15_10_IRQHandler+0x10c>)
 800076c:	f008 fda4 	bl	80092b8 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 8000770:	4822      	ldr	r0, [pc, #136]	@ (80007fc <EXTI15_10_IRQHandler+0x110>)
 8000772:	f003 fed4 	bl	800451e <DetermineTouchPosition>
		/* Touch valid */
		if (StaticTouchData.x < 120) {
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <EXTI15_10_IRQHandler+0x110>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b77      	cmp	r3, #119	@ 0x77
 800077c:	d809      	bhi.n	8000792 <EXTI15_10_IRQHandler+0xa6>
			int  moveLeft = canMoveLeft();
 800077e:	f002 ff27 	bl	80035d0 <canMoveLeft>
 8000782:	6078      	str	r0, [r7, #4]
			if (moveLeft == 1){
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d111      	bne.n	80007ae <EXTI15_10_IRQHandler+0xc2>
				addSchedulerEvent(MOVE_LEFT);
 800078a:	2080      	movs	r0, #128	@ 0x80
 800078c:	f003 ff44 	bl	8004618 <addSchedulerEvent>
 8000790:	e00d      	b.n	80007ae <EXTI15_10_IRQHandler+0xc2>
			}
		}
		else if (StaticTouchData.x >= 120){
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <EXTI15_10_IRQHandler+0x110>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2b77      	cmp	r3, #119	@ 0x77
 8000798:	d909      	bls.n	80007ae <EXTI15_10_IRQHandler+0xc2>
			int moveRight = canMoveRight();
 800079a:	f003 fa11 	bl	8003bc0 <canMoveRight>
 800079e:	60b8      	str	r0, [r7, #8]
			if (moveRight == 1){
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d103      	bne.n	80007ae <EXTI15_10_IRQHandler+0xc2>
				addSchedulerEvent(MOVE_RIGHT);
 80007a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80007aa:	f003 ff35 	bl	8004618 <addSchedulerEvent>
		/* Touch not pressed */
//		printf("\nNot pressed \n");
//		LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80007ae:	2101      	movs	r1, #1
 80007b0:	204b      	movs	r0, #75	@ 0x4b
 80007b2:	f004 fe79 	bl	80054a8 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80007b6:	2100      	movs	r1, #0
 80007b8:	204b      	movs	r0, #75	@ 0x4b
 80007ba:	f004 fe75 	bl	80054a8 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80007be:	7b7b      	ldrb	r3, [r7, #13]
 80007c0:	4619      	mov	r1, r3
 80007c2:	200a      	movs	r0, #10
 80007c4:	f003 fec4 	bl	8004550 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80007c8:	2103      	movs	r1, #3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <EXTI15_10_IRQHandler+0x114>)
 80007cc:	f005 fbda 	bl	8005f84 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80007d0:	2028      	movs	r0, #40	@ 0x28
 80007d2:	f005 fbc8 	bl	8005f66 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d6:	2028      	movs	r0, #40	@ 0x28
 80007d8:	f005 fb9d 	bl	8005f16 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 80007dc:	7b3b      	ldrb	r3, [r7, #12]
 80007de:	4619      	mov	r1, r3
 80007e0:	200b      	movs	r0, #11
 80007e2:	f003 feb5 	bl	8004550 <WriteDataToTouchModule>

}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000ac 	.word	0x200000ac
 80007f4:	200000a8 	.word	0x200000a8
 80007f8:	08009fbc 	.word	0x08009fbc
 80007fc:	20000098 	.word	0x20000098
 8000800:	200000a0 	.word	0x200000a0

08000804 <buttonIRQInit>:
	}
	return returnValue;
}

// Button initialization for Interrupt Mode
void buttonIRQInit(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef pinConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
	pinConfig.Pin = GPIO_PIN_0; //GPIO_PIN_0
 8000818:	2301      	movs	r3, #1
 800081a:	607b      	str	r3, [r7, #4]
	pinConfig.Mode = GPIO_MODE_IT_FALLING;
 800081c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000820:	60bb      	str	r3, [r7, #8]
	pinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000822:	2302      	movs	r3, #2
 8000824:	613b      	str	r3, [r7, #16]
	pinConfig.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <buttonIRQInit+0x64>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a0d      	ldr	r2, [pc, #52]	@ (8000868 <buttonIRQInit+0x64>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <buttonIRQInit+0x64>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOA, &pinConfig);
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4808      	ldr	r0, [pc, #32]	@ (800086c <buttonIRQInit+0x68>)
 800084c:	f005 fbb2 	bl	8005fb4 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2102      	movs	r1, #2
 8000854:	2006      	movs	r0, #6
 8000856:	f005 fb42 	bl	8005ede <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800085a:	2006      	movs	r0, #6
 800085c:	f005 fb5b 	bl	8005f16 <HAL_NVIC_EnableIRQ>
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000

08000870 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08c      	sub	sp, #48	@ 0x30
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b5a      	ldr	r3, [pc, #360]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	4a59      	ldr	r2, [pc, #356]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000880:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000884:	6453      	str	r3, [r2, #68]	@ 0x44
 8000886:	4b57      	ldr	r3, [pc, #348]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b53      	ldr	r3, [pc, #332]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a52      	ldr	r2, [pc, #328]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b50      	ldr	r3, [pc, #320]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a4b      	ldr	r2, [pc, #300]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b45      	ldr	r3, [pc, #276]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a44      	ldr	r2, [pc, #272]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b42      	ldr	r3, [pc, #264]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a3d      	ldr	r2, [pc, #244]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a36      	ldr	r2, [pc, #216]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a2f      	ldr	r2, [pc, #188]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <LCD_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800093a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800093e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800094c:	230e      	movs	r3, #14
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <LCD_GPIO_Init+0x178>)
 8000958:	f005 fb2c 	bl	8005fb4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800095c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000960:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4820      	ldr	r0, [pc, #128]	@ (80009ec <LCD_GPIO_Init+0x17c>)
 800096a:	f005 fb23 	bl	8005fb4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800096e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	481d      	ldr	r0, [pc, #116]	@ (80009f0 <LCD_GPIO_Init+0x180>)
 800097c:	f005 fb1a 	bl	8005fb4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000980:	2348      	movs	r3, #72	@ 0x48
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481a      	ldr	r0, [pc, #104]	@ (80009f4 <LCD_GPIO_Init+0x184>)
 800098c:	f005 fb12 	bl	8005fb4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4816      	ldr	r0, [pc, #88]	@ (80009f8 <LCD_GPIO_Init+0x188>)
 800099e:	f005 fb09 	bl	8005fb4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80009a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009a6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4813      	ldr	r0, [pc, #76]	@ (80009fc <LCD_GPIO_Init+0x18c>)
 80009b0:	f005 fb00 	bl	8005fb4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80009b8:	2309      	movs	r3, #9
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	480a      	ldr	r0, [pc, #40]	@ (80009ec <LCD_GPIO_Init+0x17c>)
 80009c4:	f005 faf6 	bl	8005fb4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80009c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <LCD_GPIO_Init+0x18c>)
 80009d6:	f005 faed 	bl	8005fb4 <HAL_GPIO_Init>
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40021400 	.word	0x40021400
 80009fc:	40021800 	.word	0x40021800

08000a00 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	@ 0x40
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000a0e:	23f0      	movs	r3, #240	@ 0xf0
 8000a10:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000a16:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a1a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000a20:	23ff      	movs	r3, #255	@ 0xff
 8000a22:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d101      	bne.n	8000a3c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <LTCD_Layer_Init+0x78>)
 8000a3a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000a3c:	23f0      	movs	r3, #240	@ 0xf0
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000a40:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a44:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <LTCD_Layer_Init+0x7c>)
 8000a62:	f006 fe6d 	bl	8007740 <HAL_LTDC_ConfigLayer>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000a6c:	f003 fd46 	bl	80044fc <LCD_Error_Handler>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3740      	adds	r7, #64	@ 0x40
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000644 	.word	0x20000644
 8000a7c:	200000b0 	.word	0x200000b0

08000a80 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <LTCD__Init+0xb0>)
 8000a86:	4a2b      	ldr	r2, [pc, #172]	@ (8000b34 <LTCD__Init+0xb4>)
 8000a88:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <LTCD__Init+0xb0>)
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <LTCD__Init+0xb0>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <LTCD__Init+0xb0>)
 8000a98:	221d      	movs	r2, #29
 8000a9a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <LTCD__Init+0xb0>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <LTCD__Init+0xb0>)
 8000aa4:	f240 120d 	movw	r2, #269	@ 0x10d
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <LTCD__Init+0xb0>)
 8000aac:	f240 1243 	movw	r2, #323	@ 0x143
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <LTCD__Init+0xb0>)
 8000ab4:	f240 1217 	movw	r2, #279	@ 0x117
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <LTCD__Init+0xb0>)
 8000abc:	f240 1247 	movw	r2, #327	@ 0x147
 8000ac0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <LTCD__Init+0xb0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <LTCD__Init+0xb0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <LTCD__Init+0xb0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <LTCD__Init+0xb8>)
 8000adc:	2208      	movs	r2, #8
 8000ade:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <LTCD__Init+0xb8>)
 8000ae2:	22c0      	movs	r2, #192	@ 0xc0
 8000ae4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <LTCD__Init+0xb8>)
 8000ae8:	2204      	movs	r2, #4
 8000aea:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <LTCD__Init+0xb8>)
 8000aee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <LTCD__Init+0xb8>)
 8000af6:	f007 fc7d 	bl	80083f4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <LTCD__Init+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <LTCD__Init+0xb0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	@ (8000b30 <LTCD__Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <LTCD__Init+0xb0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b12:	f7ff fead 	bl	8000870 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <LTCD__Init+0xb0>)
 8000b18:	f006 fd42 	bl	80075a0 <HAL_LTDC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b22:	f003 fceb 	bl	80044fc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b26:	f003 fde7 	bl	80046f8 <ili9341_Init>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000b0 	.word	0x200000b0
 8000b34:	40016800 	.word	0x40016800
 8000b38:	20000158 	.word	0x20000158

08000b3c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	460b      	mov	r3, r1
 8000b48:	80bb      	strh	r3, [r7, #4]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000b4e:	88ba      	ldrh	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	011b      	lsls	r3, r3, #4
 8000b58:	461a      	mov	r2, r3
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4905      	ldr	r1, [pc, #20]	@ (8000b74 <LCD_Draw_Pixel+0x38>)
 8000b60:	887a      	ldrh	r2, [r7, #2]
 8000b62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000644 	.word	0x20000644

08000b78 <LCD_Draw_Square_Fill_Border>:
        }
    }
}

void LCD_Draw_Square_Fill_Border(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	460b      	mov	r3, r1
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	4613      	mov	r3, r2
 8000b88:	807b      	strh	r3, [r7, #2]
	uint16_t x = Xpos*blockSize;
 8000b8a:	4b52      	ldr	r3, [pc, #328]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	fb12 f303 	smulbb	r3, r2, r3
 8000b96:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000b98:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	88ba      	ldrh	r2, [r7, #4]
 8000ba0:	fb12 f303 	smulbb	r3, r2, r3
 8000ba4:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	81fb      	strh	r3, [r7, #14]
 8000baa:	e087      	b.n	8000cbc <LCD_Draw_Square_Fill_Border+0x144>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000bac:	2301      	movs	r3, #1
 8000bae:	81bb      	strh	r3, [r7, #12]
 8000bb0:	e078      	b.n	8000ca4 <LCD_Draw_Square_Fill_Border+0x12c>
	        {
	            LCD_Draw_Pixel(i+x, j+y, color);
 8000bb2:	89fa      	ldrh	r2, [r7, #14]
 8000bb4:	897b      	ldrh	r3, [r7, #10]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b298      	uxth	r0, r3
 8000bba:	89ba      	ldrh	r2, [r7, #12]
 8000bbc:	893b      	ldrh	r3, [r7, #8]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	887a      	ldrh	r2, [r7, #2]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f7ff ffb9 	bl	8000b3c <LCD_Draw_Pixel>

	            if (color != GameScreenColor){
 8000bca:	4b43      	ldr	r3, [pc, #268]	@ (8000cd8 <LCD_Draw_Square_Fill_Border+0x160>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d02c      	beq.n	8000c2e <LCD_Draw_Square_Fill_Border+0xb6>
					LCD_Draw_Vertical_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	8939      	ldrh	r1, [r7, #8]
 8000bdc:	8978      	ldrh	r0, [r7, #10]
 8000bde:	2300      	movs	r3, #0
 8000be0:	f000 f8f6 	bl	8000dd0 <LCD_Draw_Vertical_Line>
					LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,LCD_COLOR_BLACK);
 8000be4:	4b3b      	ldr	r3, [pc, #236]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	897b      	ldrh	r3, [r7, #10]
 8000bec:	4413      	add	r3, r2
 8000bee:	b298      	uxth	r0, r3
 8000bf0:	4b38      	ldr	r3, [pc, #224]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	8939      	ldrh	r1, [r7, #8]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f000 f8e7 	bl	8000dd0 <LCD_Draw_Vertical_Line>
					LCD_Draw_Horizontal_Line(x,y,blockSize,LCD_COLOR_BLACK);
 8000c02:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	8939      	ldrh	r1, [r7, #8]
 8000c0a:	8978      	ldrh	r0, [r7, #10]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f000 f906 	bl	8000e1e <LCD_Draw_Horizontal_Line>
					LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,LCD_COLOR_BLACK);
 8000c12:	4b30      	ldr	r3, [pc, #192]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	893b      	ldrh	r3, [r7, #8]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	8978      	ldrh	r0, [r7, #10]
 8000c26:	2300      	movs	r3, #0
 8000c28:	f000 f8f9 	bl	8000e1e <LCD_Draw_Horizontal_Line>
 8000c2c:	e034      	b.n	8000c98 <LCD_Draw_Square_Fill_Border+0x120>
	            }
	            else if (color == GameScreenColor){
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d12f      	bne.n	8000c98 <LCD_Draw_Square_Fill_Border+0x120>
					LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 8000c38:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	8939      	ldrh	r1, [r7, #8]
 8000c44:	8978      	ldrh	r0, [r7, #10]
 8000c46:	f000 f8c3 	bl	8000dd0 <LCD_Draw_Vertical_Line>
					LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 8000c4a:	4b22      	ldr	r3, [pc, #136]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	897b      	ldrh	r3, [r7, #10]
 8000c52:	4413      	add	r3, r2
 8000c54:	b298      	uxth	r0, r3
 8000c56:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	8939      	ldrh	r1, [r7, #8]
 8000c66:	f000 f8b3 	bl	8000dd0 <LCD_Draw_Vertical_Line>
					LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 8000c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	8939      	ldrh	r1, [r7, #8]
 8000c76:	8978      	ldrh	r0, [r7, #10]
 8000c78:	f000 f8d1 	bl	8000e1e <LCD_Draw_Horizontal_Line>
					LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	893b      	ldrh	r3, [r7, #8]
 8000c84:	4413      	add	r3, r2
 8000c86:	b299      	uxth	r1, r3
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <LCD_Draw_Square_Fill_Border+0x160>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	8978      	ldrh	r0, [r7, #10]
 8000c94:	f000 f8c3 	bl	8000e1e <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	81bb      	strh	r3, [r7, #12]
 8000ca4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dd80      	ble.n	8000bb2 <LCD_Draw_Square_Fill_Border+0x3a>
	for(int16_t i=1; i<=blockSize; i++)
 8000cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	81fb      	strh	r3, [r7, #14]
 8000cbc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <LCD_Draw_Square_Fill_Border+0x15c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	f77f af71 	ble.w	8000bac <LCD_Draw_Square_Fill_Border+0x34>
	            }
	        }
	    }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000002 	.word	0x20000002

08000cdc <LCD_Erase_Square>:

void LCD_Erase_Square(uint16_t Xpos, uint16_t Ypos)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	460a      	mov	r2, r1
 8000ce6:	80fb      	strh	r3, [r7, #6]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	80bb      	strh	r3, [r7, #4]
	uint16_t x = Xpos*blockSize;
 8000cec:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	88fa      	ldrh	r2, [r7, #6]
 8000cf4:	fb12 f303 	smulbb	r3, r2, r3
 8000cf8:	817b      	strh	r3, [r7, #10]
	uint16_t y = Ypos*blockSize;
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	88ba      	ldrh	r2, [r7, #4]
 8000d02:	fb12 f303 	smulbb	r3, r2, r3
 8000d06:	813b      	strh	r3, [r7, #8]
	for(int16_t i=1; i<=blockSize; i++)
 8000d08:	2301      	movs	r3, #1
 8000d0a:	81fb      	strh	r3, [r7, #14]
 8000d0c:	e051      	b.n	8000db2 <LCD_Erase_Square+0xd6>
	    {
	        for(int16_t j=1; j<=blockSize; j++)
 8000d0e:	2301      	movs	r3, #1
 8000d10:	81bb      	strh	r3, [r7, #12]
 8000d12:	e042      	b.n	8000d9a <LCD_Erase_Square+0xbe>
	        {
	            LCD_Draw_Pixel(i+x, j+y, GameScreenColor);
 8000d14:	89fa      	ldrh	r2, [r7, #14]
 8000d16:	897b      	ldrh	r3, [r7, #10]
 8000d18:	4413      	add	r3, r2
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	89ba      	ldrh	r2, [r7, #12]
 8000d1e:	893b      	ldrh	r3, [r7, #8]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4a29      	ldr	r2, [pc, #164]	@ (8000dcc <LCD_Erase_Square+0xf0>)
 8000d26:	8812      	ldrh	r2, [r2, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff ff07 	bl	8000b3c <LCD_Draw_Pixel>
	            LCD_Draw_Vertical_Line(x,y,blockSize,GameScreenColor);
 8000d2e:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <LCD_Erase_Square+0xf0>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	8939      	ldrh	r1, [r7, #8]
 8000d3a:	8978      	ldrh	r0, [r7, #10]
 8000d3c:	f000 f848 	bl	8000dd0 <LCD_Draw_Vertical_Line>
	            LCD_Draw_Vertical_Line(x+blockSize,y,blockSize+1,GameScreenColor);
 8000d40:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	897b      	ldrh	r3, [r7, #10]
 8000d48:	4413      	add	r3, r2
 8000d4a:	b298      	uxth	r0, r3
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <LCD_Erase_Square+0xf0>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	8939      	ldrh	r1, [r7, #8]
 8000d5c:	f000 f838 	bl	8000dd0 <LCD_Draw_Vertical_Line>
	            LCD_Draw_Horizontal_Line(x,y,blockSize,GameScreenColor);
 8000d60:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <LCD_Erase_Square+0xf0>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	8939      	ldrh	r1, [r7, #8]
 8000d6c:	8978      	ldrh	r0, [r7, #10]
 8000d6e:	f000 f856 	bl	8000e1e <LCD_Draw_Horizontal_Line>
	            LCD_Draw_Horizontal_Line(x,y+blockSize,blockSize,GameScreenColor);
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	893b      	ldrh	r3, [r7, #8]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b299      	uxth	r1, r3
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <LCD_Erase_Square+0xf0>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	8978      	ldrh	r0, [r7, #10]
 8000d8a:	f000 f848 	bl	8000e1e <LCD_Draw_Horizontal_Line>
	        for(int16_t j=1; j<=blockSize; j++)
 8000d8e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	81bb      	strh	r3, [r7, #12]
 8000d9a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	ddb6      	ble.n	8000d14 <LCD_Erase_Square+0x38>
	for(int16_t i=1; i<=blockSize; i++)
 8000da6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	81fb      	strh	r3, [r7, #14]
 8000db2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000db6:	4b04      	ldr	r3, [pc, #16]	@ (8000dc8 <LCD_Erase_Square+0xec>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	dda7      	ble.n	8000d0e <LCD_Erase_Square+0x32>
	        }
	    }
}
 8000dbe:	bf00      	nop
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000002 	.word	0x20000002

08000dd0 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4623      	mov	r3, r4
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	4603      	mov	r3, r0
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]
 8000dea:	4613      	mov	r3, r2
 8000dec:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	81fb      	strh	r3, [r7, #14]
 8000df2:	e00b      	b.n	8000e0c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000df4:	89fa      	ldrh	r2, [r7, #14]
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	883a      	ldrh	r2, [r7, #0]
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fe9b 	bl	8000b3c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e06:	89fb      	ldrh	r3, [r7, #14]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	81fb      	strh	r3, [r7, #14]
 8000e0c:	89fa      	ldrh	r2, [r7, #14]
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3ef      	bcc.n	8000df4 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd90      	pop	{r4, r7, pc}

08000e1e <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e1e:	b590      	push	{r4, r7, lr}
 8000e20:	b085      	sub	sp, #20
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4604      	mov	r4, r0
 8000e26:	4608      	mov	r0, r1
 8000e28:	4611      	mov	r1, r2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	80fb      	strh	r3, [r7, #6]
 8000e30:	4603      	mov	r3, r0
 8000e32:	80bb      	strh	r3, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	81fb      	strh	r3, [r7, #14]
 8000e40:	e00b      	b.n	8000e5a <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000e42:	89fa      	ldrh	r2, [r7, #14]
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	4413      	add	r3, r2
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	883a      	ldrh	r2, [r7, #0]
 8000e4c:	88b9      	ldrh	r1, [r7, #4]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe74 	bl	8000b3c <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	3301      	adds	r3, #1
 8000e58:	81fb      	strh	r3, [r7, #14]
 8000e5a:	89fa      	ldrh	r2, [r7, #14]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d3ef      	bcc.n	8000e42 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}

08000e6c <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d10e      	bne.n	8000ea0 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	e007      	b.n	8000e98 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000e88:	4908      	ldr	r1, [pc, #32]	@ (8000eac <LCD_Clear+0x40>)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	88ba      	ldrh	r2, [r7, #4]
 8000e8e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000e9e:	d3f3      	bcc.n	8000e88 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	20000644 	.word	0x20000644

08000eb0 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <LCD_SetTextColor+0x1c>)
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	8013      	strh	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ed8:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <LCD_SetFont+0x1c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000188 	.word	0x20000188

08000ef0 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	603a      	str	r2, [r7, #0]
 8000efa:	80fb      	strh	r3, [r7, #6]
 8000efc:	460b      	mov	r3, r1
 8000efe:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e04c      	b.n	8000fa8 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	e03f      	b.n	8000f94 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4b27      	ldr	r3, [pc, #156]	@ (8000fc0 <LCD_Draw_Char+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	889b      	ldrh	r3, [r3, #4]
 8000f26:	4a27      	ldr	r2, [pc, #156]	@ (8000fc4 <LCD_Draw_Char+0xd4>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	2280      	movs	r2, #128	@ 0x80
 8000f34:	409a      	lsls	r2, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	fa42 f303 	asr.w	r3, r2, r3
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d104      	bne.n	8000f4c <LCD_Draw_Char+0x5c>
 8000f42:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <LCD_Draw_Char+0xd0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	889b      	ldrh	r3, [r3, #4]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d920      	bls.n	8000f8e <LCD_Draw_Char+0x9e>
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	fa42 f303 	asr.w	r3, r2, r3
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <LCD_Draw_Char+0x80>
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <LCD_Draw_Char+0xd0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	889b      	ldrh	r3, [r3, #4]
 8000f6c:	2b0c      	cmp	r3, #12
 8000f6e:	d80e      	bhi.n	8000f8e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	4413      	add	r3, r2
 8000f78:	b298      	uxth	r0, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <LCD_Draw_Char+0xd8>)
 8000f86:	8812      	ldrh	r2, [r2, #0]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fdd7 	bl	8000b3c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <LCD_Draw_Char+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	889b      	ldrh	r3, [r3, #4]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d3b8      	bcc.n	8000f14 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <LCD_Draw_Char+0xd0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	88db      	ldrh	r3, [r3, #6]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d3ab      	bcc.n	8000f0e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000188 	.word	0x20000188
 8000fc4:	aaaaaaab 	.word	0xaaaaaaab
 8000fc8:	20000000 	.word	0x20000000

08000fcc <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	80bb      	strh	r3, [r7, #4]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	3b20      	subs	r3, #32
 8000fe2:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <LCD_DisplayChar+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	4907      	ldr	r1, [pc, #28]	@ (800100c <LCD_DisplayChar+0x40>)
 8000fee:	6809      	ldr	r1, [r1, #0]
 8000ff0:	88c9      	ldrh	r1, [r1, #6]
 8000ff2:	fb01 f303 	mul.w	r3, r1, r3
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	441a      	add	r2, r3
 8000ffa:	88b9      	ldrh	r1, [r7, #4]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff76 	bl	8000ef0 <LCD_Draw_Char>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000188 	.word	0x20000188

08001010 <GameInit>:
	LCD_DisplayChar(140,160,'d');
//	blockOne();
}

void GameInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
//	uint16_t size = 10;

	for (int i = 0; i < 12; i++){
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e007      	b.n	800102c <GameInit+0x1c>
		topRow[i] = 15;
 800101c:	4a67      	ldr	r2, [pc, #412]	@ (80011bc <GameInit+0x1ac>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	210f      	movs	r1, #15
 8001022:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 12; i++){
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3301      	adds	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b0b      	cmp	r3, #11
 8001030:	ddf4      	ble.n	800101c <GameInit+0xc>
	}

	for (int j = 0; j < 16; j++){
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	e018      	b.n	800106a <GameInit+0x5a>
		for (int k = 0; k < 12; k++){
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	e00f      	b.n	800105e <GameInit+0x4e>
			Obj_Color[j][k] = GameScreenColor;
 800103e:	4b60      	ldr	r3, [pc, #384]	@ (80011c0 <GameInit+0x1b0>)
 8001040:	8818      	ldrh	r0, [r3, #0]
 8001042:	4960      	ldr	r1, [pc, #384]	@ (80011c4 <GameInit+0x1b4>)
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	4602      	mov	r2, r0
 8001054:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int k = 0; k < 12; k++){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0b      	cmp	r3, #11
 8001062:	ddec      	ble.n	800103e <GameInit+0x2e>
	for (int j = 0; j < 16; j++){
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	3301      	adds	r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	dde3      	ble.n	8001038 <GameInit+0x28>
		}
	}
	LCD_Clear(0,GameScreenColor);
 8001070:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <GameInit+0x1b0>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff fef8 	bl	8000e6c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800107c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001080:	f7ff ff16 	bl	8000eb0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001084:	4850      	ldr	r0, [pc, #320]	@ (80011c8 <GameInit+0x1b8>)
 8001086:	f7ff ff23 	bl	8000ed0 <LCD_SetFont>

	LCD_DisplayChar(80,140,'W');
 800108a:	2257      	movs	r2, #87	@ 0x57
 800108c:	218c      	movs	r1, #140	@ 0x8c
 800108e:	2050      	movs	r0, #80	@ 0x50
 8001090:	f7ff ff9c 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(94,140,'e');
 8001094:	2265      	movs	r2, #101	@ 0x65
 8001096:	218c      	movs	r1, #140	@ 0x8c
 8001098:	205e      	movs	r0, #94	@ 0x5e
 800109a:	f7ff ff97 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(104,140,'l');
 800109e:	226c      	movs	r2, #108	@ 0x6c
 80010a0:	218c      	movs	r1, #140	@ 0x8c
 80010a2:	2068      	movs	r0, #104	@ 0x68
 80010a4:	f7ff ff92 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(112,140,'c');
 80010a8:	2263      	movs	r2, #99	@ 0x63
 80010aa:	218c      	movs	r1, #140	@ 0x8c
 80010ac:	2070      	movs	r0, #112	@ 0x70
 80010ae:	f7ff ff8d 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(124,140,'o');
 80010b2:	226f      	movs	r2, #111	@ 0x6f
 80010b4:	218c      	movs	r1, #140	@ 0x8c
 80010b6:	207c      	movs	r0, #124	@ 0x7c
 80010b8:	f7ff ff88 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(140,140,'m');
 80010bc:	226d      	movs	r2, #109	@ 0x6d
 80010be:	218c      	movs	r1, #140	@ 0x8c
 80010c0:	208c      	movs	r0, #140	@ 0x8c
 80010c2:	f7ff ff83 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(155,140,'e');
 80010c6:	2265      	movs	r2, #101	@ 0x65
 80010c8:	218c      	movs	r1, #140	@ 0x8c
 80010ca:	209b      	movs	r0, #155	@ 0x9b
 80010cc:	f7ff ff7e 	bl	8000fcc <LCD_DisplayChar>

	LCD_DisplayChar(110,165,'t');
 80010d0:	2274      	movs	r2, #116	@ 0x74
 80010d2:	21a5      	movs	r1, #165	@ 0xa5
 80010d4:	206e      	movs	r0, #110	@ 0x6e
 80010d6:	f7ff ff79 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(120,165,'o');
 80010da:	226f      	movs	r2, #111	@ 0x6f
 80010dc:	21a5      	movs	r1, #165	@ 0xa5
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f7ff ff74 	bl	8000fcc <LCD_DisplayChar>

	LCD_DisplayChar(95,190,'T');
 80010e4:	2254      	movs	r2, #84	@ 0x54
 80010e6:	21be      	movs	r1, #190	@ 0xbe
 80010e8:	205f      	movs	r0, #95	@ 0x5f
 80010ea:	f7ff ff6f 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(105,190,'e');
 80010ee:	2265      	movs	r2, #101	@ 0x65
 80010f0:	21be      	movs	r1, #190	@ 0xbe
 80010f2:	2069      	movs	r0, #105	@ 0x69
 80010f4:	f7ff ff6a 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(115,190,'t');
 80010f8:	2274      	movs	r2, #116	@ 0x74
 80010fa:	21be      	movs	r1, #190	@ 0xbe
 80010fc:	2073      	movs	r0, #115	@ 0x73
 80010fe:	f7ff ff65 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(125,190,'r');
 8001102:	2272      	movs	r2, #114	@ 0x72
 8001104:	21be      	movs	r1, #190	@ 0xbe
 8001106:	207d      	movs	r0, #125	@ 0x7d
 8001108:	f7ff ff60 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(132,190,'i');
 800110c:	2269      	movs	r2, #105	@ 0x69
 800110e:	21be      	movs	r1, #190	@ 0xbe
 8001110:	2084      	movs	r0, #132	@ 0x84
 8001112:	f7ff ff5b 	bl	8000fcc <LCD_DisplayChar>
	LCD_DisplayChar(139,190,'s');
 8001116:	2273      	movs	r2, #115	@ 0x73
 8001118:	21be      	movs	r1, #190	@ 0xbe
 800111a:	208b      	movs	r0, #139	@ 0x8b
 800111c:	f7ff ff56 	bl	8000fcc <LCD_DisplayChar>

	blockSize = 10;
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <GameInit+0x1bc>)
 8001122:	220a      	movs	r2, #10
 8001124:	601a      	str	r2, [r3, #0]
	drawBlockOne(4.5,2.5,1);
 8001126:	2201      	movs	r2, #1
 8001128:	2102      	movs	r1, #2
 800112a:	2004      	movs	r0, #4
 800112c:	f000 f8d6 	bl	80012dc <drawBlockOne>
//	blockOneH(45,25,10,LCD_COLOR_CYAN);
	drawBlockTwo(9.5,2.5,1);
 8001130:	2201      	movs	r2, #1
 8001132:	2102      	movs	r1, #2
 8001134:	2009      	movs	r0, #9
 8001136:	f000 f9b7 	bl	80014a8 <drawBlockTwo>
//	blockTwo(95,25,10,LCD_COLOR_BLUE);
	drawBlockThree(13.5,2.5,1);
 800113a:	2201      	movs	r2, #1
 800113c:	2102      	movs	r1, #2
 800113e:	200d      	movs	r0, #13
 8001140:	f000 fc5c 	bl	80019fc <drawBlockThree>
//	blockThree(135,25,10,LCD_COLOR_ORANGE);
	drawBlockFour(17.5,2.5,1);
 8001144:	2201      	movs	r2, #1
 8001146:	2102      	movs	r1, #2
 8001148:	2011      	movs	r0, #17
 800114a:	f000 ff11 	bl	8001f70 <drawBlockFour>
//	blockFour(175,25,10,LCD_COLOR_YELLOW);
	drawBlockFive(6.5,5.5,1);
 800114e:	2201      	movs	r2, #1
 8001150:	2105      	movs	r1, #5
 8001152:	2006      	movs	r0, #6
 8001154:	f000 ffce 	bl	80020f4 <drawBlockFive>
//	blockFive(65,55,10,LCD_COLOR_GREEN);
	drawBlockSix(11.5,5.5,1);
 8001158:	2201      	movs	r2, #1
 800115a:	2105      	movs	r1, #5
 800115c:	200b      	movs	r0, #11
 800115e:	f001 f94b 	bl	80023f8 <drawBlockSix>
//	blockSix(105,55,10,LCD_COLOR_MAGENTA);
	drawBlockSeven(15.5,5.5,1);
 8001162:	2201      	movs	r2, #1
 8001164:	2105      	movs	r1, #5
 8001166:	200f      	movs	r0, #15
 8001168:	f001 fbf8 	bl	800295c <drawBlockSeven>
//	blockSeven(155,55,10,LCD_COLOR_RED);
	screenReset();
 800116c:	f000 f830 	bl	80011d0 <screenReset>
	HAL_Delay(1000);
 8001170:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001174:	f004 fd72 	bl	8005c5c <HAL_Delay>

	blockSize = 20;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <GameInit+0x1bc>)
 800117a:	2214      	movs	r2, #20
 800117c:	601a      	str	r2, [r3, #0]
	LCD_Clear(0,GameScreenColor);
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <GameInit+0x1b0>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fe71 	bl	8000e6c <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800118a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800118e:	f7ff fe8f 	bl	8000eb0 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001192:	480d      	ldr	r0, [pc, #52]	@ (80011c8 <GameInit+0x1b8>)
 8001194:	f7ff fe9c 	bl	8000ed0 <LCD_SetFont>

	drawBottomBorder();
 8001198:	f001 fd62 	bl	8002c60 <drawBottomBorder>
	updateCurrentBlock(1, 4, 2, 1);
 800119c:	2301      	movs	r3, #1
 800119e:	2202      	movs	r2, #2
 80011a0:	2104      	movs	r1, #4
 80011a2:	2001      	movs	r0, #1
 80011a4:	f001 fee2 	bl	8002f6c <updateCurrentBlock>
	drawCurrentBlock();
 80011a8:	f001 fe38 	bl	8002e1c <drawCurrentBlock>
	HAL_Delay(100);
 80011ac:	2064      	movs	r0, #100	@ 0x64
 80011ae:	f004 fd55 	bl	8005c5c <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000060c 	.word	0x2000060c
 80011c0:	20000002 	.word	0x20000002
 80011c4:	2000018c 	.word	0x2000018c
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <screenReset>:
	updateCurrentBlock(1, 4, 2, 1);
	drawCurrentBlock();
	HAL_Delay(1000);
}

void screenReset(){
 80011d0:	b490      	push	{r4, r7}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 16; i++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	e023      	b.n	8001224 <screenReset+0x54>
		for (uint16_t j = 0; j < 12; j++){
 80011dc:	2300      	movs	r3, #0
 80011de:	80bb      	strh	r3, [r7, #4]
 80011e0:	e01a      	b.n	8001218 <screenReset+0x48>
			Obj_Color[i][j] = 0;
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	88b9      	ldrh	r1, [r7, #4]
 80011e6:	4814      	ldr	r0, [pc, #80]	@ (8001238 <screenReset+0x68>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	2200      	movs	r2, #0
 80011f4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Screen[i][j] = GameScreenColor;
 80011f8:	4b10      	ldr	r3, [pc, #64]	@ (800123c <screenReset+0x6c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	88b9      	ldrh	r1, [r7, #4]
 8001200:	461c      	mov	r4, r3
 8001202:	480f      	ldr	r0, [pc, #60]	@ (8001240 <screenReset+0x70>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
		for (uint16_t j = 0; j < 12; j++){
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	80bb      	strh	r3, [r7, #4]
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	2b0b      	cmp	r3, #11
 800121c:	d9e1      	bls.n	80011e2 <screenReset+0x12>
	for (uint16_t i = 0; i < 16; i++){
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	3301      	adds	r3, #1
 8001222:	80fb      	strh	r3, [r7, #6]
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d9d8      	bls.n	80011dc <screenReset+0xc>
		}
	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bc90      	pop	{r4, r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000018c 	.word	0x2000018c
 800123c:	20000002 	.word	0x20000002
 8001240:	2000030c 	.word	0x2000030c

08001244 <gameOver>:

void gameOver(){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	while(1){
		LCD_Clear(0,LCD_COLOR_BLACK);
 8001248:	2100      	movs	r1, #0
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fe0e 	bl	8000e6c <LCD_Clear>
//		HAL_Delay(200);
		LCD_SetTextColor(LCD_COLOR_RED);
 8001250:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001254:	f7ff fe2c 	bl	8000eb0 <LCD_SetTextColor>
		LCD_SetFont(&Font16x24);
 8001258:	481f      	ldr	r0, [pc, #124]	@ (80012d8 <gameOver+0x94>)
 800125a:	f7ff fe39 	bl	8000ed0 <LCD_SetFont>

		LCD_DisplayChar(95,120,'G');
 800125e:	2247      	movs	r2, #71	@ 0x47
 8001260:	2178      	movs	r1, #120	@ 0x78
 8001262:	205f      	movs	r0, #95	@ 0x5f
 8001264:	f7ff feb2 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(111,120,'a');
 8001268:	2261      	movs	r2, #97	@ 0x61
 800126a:	2178      	movs	r1, #120	@ 0x78
 800126c:	206f      	movs	r0, #111	@ 0x6f
 800126e:	f7ff fead 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(125,120,'m');
 8001272:	226d      	movs	r2, #109	@ 0x6d
 8001274:	2178      	movs	r1, #120	@ 0x78
 8001276:	207d      	movs	r0, #125	@ 0x7d
 8001278:	f7ff fea8 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(140,120,'e');
 800127c:	2265      	movs	r2, #101	@ 0x65
 800127e:	2178      	movs	r1, #120	@ 0x78
 8001280:	208c      	movs	r0, #140	@ 0x8c
 8001282:	f7ff fea3 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
//
		LCD_DisplayChar(92,145,'O');
 8001286:	224f      	movs	r2, #79	@ 0x4f
 8001288:	2191      	movs	r1, #145	@ 0x91
 800128a:	205c      	movs	r0, #92	@ 0x5c
 800128c:	f7ff fe9e 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(107,145,'v');
 8001290:	2276      	movs	r2, #118	@ 0x76
 8001292:	2191      	movs	r1, #145	@ 0x91
 8001294:	206b      	movs	r0, #107	@ 0x6b
 8001296:	f7ff fe99 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(118,145,'e');
 800129a:	2265      	movs	r2, #101	@ 0x65
 800129c:	2191      	movs	r1, #145	@ 0x91
 800129e:	2076      	movs	r0, #118	@ 0x76
 80012a0:	f7ff fe94 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(129,145,'r');
 80012a4:	2272      	movs	r2, #114	@ 0x72
 80012a6:	2191      	movs	r1, #145	@ 0x91
 80012a8:	2081      	movs	r0, #129	@ 0x81
 80012aa:	f7ff fe8f 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(135,145,'!');
 80012ae:	2221      	movs	r2, #33	@ 0x21
 80012b0:	2191      	movs	r1, #145	@ 0x91
 80012b2:	2087      	movs	r0, #135	@ 0x87
 80012b4:	f7ff fe8a 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(140,145,'!');
 80012b8:	2221      	movs	r2, #33	@ 0x21
 80012ba:	2191      	movs	r1, #145	@ 0x91
 80012bc:	208c      	movs	r0, #140	@ 0x8c
 80012be:	f7ff fe85 	bl	8000fcc <LCD_DisplayChar>
//		HAL_Delay(200);
		LCD_DisplayChar(145,145,'!');
 80012c2:	2221      	movs	r2, #33	@ 0x21
 80012c4:	2191      	movs	r1, #145	@ 0x91
 80012c6:	2091      	movs	r0, #145	@ 0x91
 80012c8:	f7ff fe80 	bl	8000fcc <LCD_DisplayChar>


		HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d0:	f004 fcc4 	bl	8005c5c <HAL_Delay>
		LCD_Clear(0,LCD_COLOR_BLACK);
 80012d4:	bf00      	nop
 80012d6:	e7b7      	b.n	8001248 <gameOver+0x4>
 80012d8:	20000008 	.word	0x20000008

080012dc <drawBlockOne>:
	}
}

void drawBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	80bb      	strh	r3, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d002      	beq.n	80012fa <drawBlockOne+0x1e>
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d129      	bne.n	800134e <drawBlockOne+0x72>
		for (int i = Xpos; i < (Xpos+4); i++){
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	e021      	b.n	8001344 <drawBlockOne+0x68>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_CYAN);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	b29b      	uxth	r3, r3
 8001304:	88b9      	ldrh	r1, [r7, #4]
 8001306:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc34 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	4929      	ldr	r1, [pc, #164]	@ (80013b8 <drawBlockOne+0xdc>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	2201      	movs	r2, #1
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_CYAN;
 8001326:	88ba      	ldrh	r2, [r7, #4]
 8001328:	4924      	ldr	r1, [pc, #144]	@ (80013bc <drawBlockOne+0xe0>)
 800132a:	4613      	mov	r3, r2
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800133a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	3301      	adds	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	3303      	adds	r3, #3
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	429a      	cmp	r2, r3
 800134c:	ddd8      	ble.n	8001300 <drawBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d002      	beq.n	800135a <drawBlockOne+0x7e>
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	2b04      	cmp	r3, #4
 8001358:	d12a      	bne.n	80013b0 <drawBlockOne+0xd4>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 800135a:	88bb      	ldrh	r3, [r7, #4]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	e021      	b.n	80013a6 <drawBlockOne+0xca>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_CYAN);
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	b299      	uxth	r1, r3
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc03 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 8001372:	88f9      	ldrh	r1, [r7, #6]
 8001374:	4810      	ldr	r0, [pc, #64]	@ (80013b8 <drawBlockOne+0xdc>)
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	2201      	movs	r2, #1
 8001384:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_CYAN;
 8001388:	88f9      	ldrh	r1, [r7, #6]
 800138a:	480c      	ldr	r0, [pc, #48]	@ (80013bc <drawBlockOne+0xe0>)
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800139c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	3301      	adds	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	88bb      	ldrh	r3, [r7, #4]
 80013a8:	3302      	adds	r3, #2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	ddd8      	ble.n	8001362 <drawBlockOne+0x86>
		}
	}
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000030c 	.word	0x2000030c
 80013bc:	2000018c 	.word	0x2000018c

080013c0 <eraseBlockOne>:

void eraseBlockOne(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	460b      	mov	r3, r1
 80013cc:	80bb      	strh	r3, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d002      	beq.n	80013de <eraseBlockOne+0x1e>
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d129      	bne.n	8001432 <eraseBlockOne+0x72>
		for (int i = Xpos; i < (Xpos+4); i++){
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	e021      	b.n	8001428 <eraseBlockOne+0x68>
			LCD_Erase_Square(i, Ypos);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	88ba      	ldrh	r2, [r7, #4]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc75 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80013f2:	88ba      	ldrh	r2, [r7, #4]
 80013f4:	4929      	ldr	r1, [pc, #164]	@ (800149c <eraseBlockOne+0xdc>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4413      	add	r3, r2
 8001402:	2200      	movs	r2, #0
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001408:	88ba      	ldrh	r2, [r7, #4]
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <eraseBlockOne+0xe0>)
 800140c:	8818      	ldrh	r0, [r3, #0]
 800140e:	4925      	ldr	r1, [pc, #148]	@ (80014a4 <eraseBlockOne+0xe4>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	4602      	mov	r2, r0
 800141e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+4); i++){
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	3303      	adds	r3, #3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	429a      	cmp	r2, r3
 8001430:	ddd8      	ble.n	80013e4 <eraseBlockOne+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d002      	beq.n	800143e <eraseBlockOne+0x7e>
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	2b04      	cmp	r3, #4
 800143c:	d12a      	bne.n	8001494 <eraseBlockOne+0xd4>
		for (int i = Ypos-1; i < (Ypos+3); i++){
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	3b01      	subs	r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	e021      	b.n	800148a <eraseBlockOne+0xca>
			LCD_Erase_Square(Xpos, i);
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	b29a      	uxth	r2, r3
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fc44 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8001454:	88f9      	ldrh	r1, [r7, #6]
 8001456:	4811      	ldr	r0, [pc, #68]	@ (800149c <eraseBlockOne+0xdc>)
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	2200      	movs	r2, #0
 8001466:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = GameScreenColor;
 800146a:	88f9      	ldrh	r1, [r7, #6]
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <eraseBlockOne+0xe0>)
 800146e:	881c      	ldrh	r4, [r3, #0]
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <eraseBlockOne+0xe4>)
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	4622      	mov	r2, r4
 8001480:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+3); i++){
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	3301      	adds	r3, #1
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	3302      	adds	r3, #2
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	ddd8      	ble.n	8001446 <eraseBlockOne+0x86>
		}
	}
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	2000030c 	.word	0x2000030c
 80014a0:	20000002 	.word	0x20000002
 80014a4:	2000018c 	.word	0x2000018c

080014a8 <drawBlockTwo>:

void drawBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	460b      	mov	r3, r1
 80014b4:	80bb      	strh	r3, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d147      	bne.n	8001550 <drawBlockTwo+0xa8>
		for (int i = Xpos; i < (Xpos+3); i++){
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e01f      	b.n	8001506 <drawBlockTwo+0x5e>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	88b9      	ldrh	r1, [r7, #4]
 80014cc:	221f      	movs	r2, #31
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb52 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80014d4:	88ba      	ldrh	r2, [r7, #4]
 80014d6:	4998      	ldr	r1, [pc, #608]	@ (8001738 <drawBlockTwo+0x290>)
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	4413      	add	r3, r2
 80014e4:	2201      	movs	r2, #1
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_BLUE;
 80014ea:	88ba      	ldrh	r2, [r7, #4]
 80014ec:	4993      	ldr	r1, [pc, #588]	@ (800173c <drawBlockTwo+0x294>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4413      	add	r3, r2
 80014fa:	221f      	movs	r2, #31
 80014fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	3302      	adds	r3, #2
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	ddda      	ble.n	80014c6 <drawBlockTwo+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_BLUE);
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	b299      	uxth	r1, r3
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	221f      	movs	r2, #31
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb2c 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	88f9      	ldrh	r1, [r7, #6]
 8001526:	4884      	ldr	r0, [pc, #528]	@ (8001738 <drawBlockTwo+0x290>)
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	2201      	movs	r2, #1
 8001534:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_BLUE;
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	88f9      	ldrh	r1, [r7, #6]
 800153e:	487f      	ldr	r0, [pc, #508]	@ (800173c <drawBlockTwo+0x294>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	221f      	movs	r2, #31
 800154c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d14c      	bne.n	80015f0 <drawBlockTwo+0x148>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	3b01      	subs	r3, #1
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	e01f      	b.n	800159e <drawBlockTwo+0xf6>
				LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_BLUE);
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	b299      	uxth	r1, r3
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	221f      	movs	r2, #31
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fb06 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[i][Xpos] = 1;
 800156c:	88f9      	ldrh	r1, [r7, #6]
 800156e:	4872      	ldr	r0, [pc, #456]	@ (8001738 <drawBlockTwo+0x290>)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	2201      	movs	r2, #1
 800157e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = LCD_COLOR_BLUE;
 8001582:	88f9      	ldrh	r1, [r7, #6]
 8001584:	486d      	ldr	r0, [pc, #436]	@ (800173c <drawBlockTwo+0x294>)
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	221f      	movs	r2, #31
 8001594:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	3301      	adds	r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	ddda      	ble.n	800155e <drawBlockTwo+0xb6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+1,Ypos-1,LCD_COLOR_BLUE);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b298      	uxth	r0, r3
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	221f      	movs	r2, #31
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fade 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][Xpos+1] = 1;
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	1e5a      	subs	r2, r3, #1
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	485c      	ldr	r0, [pc, #368]	@ (8001738 <drawBlockTwo+0x290>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	2201      	movs	r2, #1
 80015d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][Xpos+1] = LCD_COLOR_BLUE;
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	1e5a      	subs	r2, r3, #1
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	4857      	ldr	r0, [pc, #348]	@ (800173c <drawBlockTwo+0x294>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	221f      	movs	r2, #31
 80015ec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d14b      	bne.n	800168e <drawBlockTwo+0x1e6>
		for (int i = Xpos; i < (Xpos+3); i++){
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	e01f      	b.n	800163c <drawBlockTwo+0x194>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_BLUE);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	88b9      	ldrh	r1, [r7, #4]
 8001602:	221f      	movs	r2, #31
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fab7 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 800160a:	88ba      	ldrh	r2, [r7, #4]
 800160c:	494a      	ldr	r1, [pc, #296]	@ (8001738 <drawBlockTwo+0x290>)
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	2201      	movs	r2, #1
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_BLUE;
 8001620:	88ba      	ldrh	r2, [r7, #4]
 8001622:	4946      	ldr	r1, [pc, #280]	@ (800173c <drawBlockTwo+0x294>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	221f      	movs	r2, #31
 8001632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	3302      	adds	r3, #2
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	429a      	cmp	r2, r3
 8001644:	ddda      	ble.n	80015fc <drawBlockTwo+0x154>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos+1,LCD_COLOR_BLUE);
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	3302      	adds	r3, #2
 800164a:	b298      	uxth	r0, r3
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	3301      	adds	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	221f      	movs	r2, #31
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fa8f 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos+2] = 1;
 800165a:	88bb      	ldrh	r3, [r7, #4]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	1c99      	adds	r1, r3, #2
 8001662:	4835      	ldr	r0, [pc, #212]	@ (8001738 <drawBlockTwo+0x290>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	2201      	movs	r2, #1
 8001670:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+2] = LCD_COLOR_BLUE;
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	1c99      	adds	r1, r3, #2
 800167c:	482f      	ldr	r0, [pc, #188]	@ (800173c <drawBlockTwo+0x294>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	221f      	movs	r2, #31
 800168a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d14c      	bne.n	800172e <drawBlockTwo+0x286>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	e023      	b.n	80016e4 <drawBlockTwo+0x23c>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_BLUE);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	3301      	adds	r3, #1
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	b291      	uxth	r1, r2
 80016a6:	221f      	movs	r2, #31
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fa65 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	1c59      	adds	r1, r3, #1
 80016b2:	4821      	ldr	r0, [pc, #132]	@ (8001738 <drawBlockTwo+0x290>)
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	2201      	movs	r2, #1
 80016c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_BLUE;
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	1c59      	adds	r1, r3, #1
 80016ca:	481c      	ldr	r0, [pc, #112]	@ (800173c <drawBlockTwo+0x294>)
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	221f      	movs	r2, #31
 80016da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3301      	adds	r3, #1
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	ddd6      	ble.n	800169c <drawBlockTwo+0x1f4>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_BLUE);
 80016ee:	88bb      	ldrh	r3, [r7, #4]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b299      	uxth	r1, r3
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	221f      	movs	r2, #31
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fa3d 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	88f9      	ldrh	r1, [r7, #6]
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <drawBlockTwo+0x290>)
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	2201      	movs	r2, #1
 8001712:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_BLUE;
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	88f9      	ldrh	r1, [r7, #6]
 800171c:	4807      	ldr	r0, [pc, #28]	@ (800173c <drawBlockTwo+0x294>)
 800171e:	4613      	mov	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	221f      	movs	r2, #31
 800172a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000030c 	.word	0x2000030c
 800173c:	2000018c 	.word	0x2000018c

08001740 <eraseBlockTwo>:

void eraseBlockTwo(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	460b      	mov	r3, r1
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d14b      	bne.n	80017f0 <eraseBlockTwo+0xb0>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e021      	b.n	80017a2 <eraseBlockTwo+0x62>
			LCD_Erase_Square(i,Ypos);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	b29b      	uxth	r3, r3
 8001762:	88ba      	ldrh	r2, [r7, #4]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fab8 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 800176c:	88ba      	ldrh	r2, [r7, #4]
 800176e:	49a0      	ldr	r1, [pc, #640]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	4413      	add	r3, r2
 800177c:	2200      	movs	r2, #0
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001782:	88ba      	ldrh	r2, [r7, #4]
 8001784:	4b9b      	ldr	r3, [pc, #620]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 8001786:	8818      	ldrh	r0, [r3, #0]
 8001788:	499b      	ldr	r1, [pc, #620]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4413      	add	r3, r2
 8001796:	4602      	mov	r2, r0
 8001798:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	3302      	adds	r3, #2
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	ddd8      	ble.n	800175e <eraseBlockTwo+0x1e>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fa90 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	88f9      	ldrh	r1, [r7, #6]
 80017c2:	488b      	ldr	r0, [pc, #556]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	2200      	movs	r2, #0
 80017d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = GameScreenColor;
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	1e5a      	subs	r2, r3, #1
 80017d8:	88f9      	ldrh	r1, [r7, #6]
 80017da:	4b86      	ldr	r3, [pc, #536]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 80017dc:	881c      	ldrh	r4, [r3, #0]
 80017de:	4886      	ldr	r0, [pc, #536]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	4622      	mov	r2, r4
 80017ec:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d150      	bne.n	8001898 <eraseBlockTwo+0x158>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	e021      	b.n	8001842 <eraseBlockTwo+0x102>
				LCD_Erase_Square(Xpos,i);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	b29a      	uxth	r2, r3
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fa68 	bl	8000cdc <LCD_Erase_Square>
				LCD_Screen[i][Xpos] = 0;
 800180c:	88f9      	ldrh	r1, [r7, #6]
 800180e:	4878      	ldr	r0, [pc, #480]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	2200      	movs	r2, #0
 800181e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = GameScreenColor;
 8001822:	88f9      	ldrh	r1, [r7, #6]
 8001824:	4b73      	ldr	r3, [pc, #460]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 8001826:	881c      	ldrh	r4, [r3, #0]
 8001828:	4873      	ldr	r0, [pc, #460]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	4622      	mov	r2, r4
 8001838:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	3301      	adds	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	ddd8      	ble.n	80017fe <eraseBlockTwo+0xbe>
			}
			LCD_Erase_Square(Xpos+1,Ypos-1);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	3301      	adds	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	88bb      	ldrh	r3, [r7, #4]
 8001854:	3b01      	subs	r3, #1
 8001856:	b29b      	uxth	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f7ff fa3e 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][Xpos+1] = 0;
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	1e5a      	subs	r2, r3, #1
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	1c59      	adds	r1, r3, #1
 8001868:	4861      	ldr	r0, [pc, #388]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	2200      	movs	r2, #0
 8001876:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][Xpos+1] = GameScreenColor;
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	1c59      	adds	r1, r3, #1
 8001882:	4b5c      	ldr	r3, [pc, #368]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 8001884:	881c      	ldrh	r4, [r3, #0]
 8001886:	485c      	ldr	r0, [pc, #368]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	4622      	mov	r2, r4
 8001894:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d14f      	bne.n	800193e <eraseBlockTwo+0x1fe>
		for (int i = Xpos; i < (Xpos+3); i++){
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	e021      	b.n	80018e8 <eraseBlockTwo+0x1a8>
			LCD_Erase_Square(i,Ypos);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	88ba      	ldrh	r2, [r7, #4]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa15 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80018b2:	88ba      	ldrh	r2, [r7, #4]
 80018b4:	494e      	ldr	r1, [pc, #312]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 80018c8:	88ba      	ldrh	r2, [r7, #4]
 80018ca:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 80018cc:	8818      	ldrh	r0, [r3, #0]
 80018ce:	494a      	ldr	r1, [pc, #296]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	4602      	mov	r2, r0
 80018de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3301      	adds	r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	3302      	adds	r3, #2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	ddd8      	ble.n	80018a4 <eraseBlockTwo+0x164>
		}
		LCD_Erase_Square(Xpos+2,Ypos+1);
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	3302      	adds	r3, #2
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	88bb      	ldrh	r3, [r7, #4]
 80018fa:	3301      	adds	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff f9eb 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos+2] = 0;
 8001906:	88bb      	ldrh	r3, [r7, #4]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	1c99      	adds	r1, r3, #2
 800190e:	4838      	ldr	r0, [pc, #224]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	2200      	movs	r2, #0
 800191c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+2] = GameScreenColor;
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	1c99      	adds	r1, r3, #2
 8001928:	4b32      	ldr	r3, [pc, #200]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 800192a:	881c      	ldrh	r4, [r3, #0]
 800192c:	4832      	ldr	r0, [pc, #200]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	4622      	mov	r2, r4
 800193a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d150      	bne.n	80019e6 <eraseBlockTwo+0x2a6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	e025      	b.n	8001998 <eraseBlockTwo+0x258>
			LCD_Erase_Square(Xpos+1,i);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	3301      	adds	r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	b292      	uxth	r2, r2
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f9bf 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	1c59      	adds	r1, r3, #1
 8001962:	4823      	ldr	r0, [pc, #140]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	2200      	movs	r2, #0
 8001972:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	1c59      	adds	r1, r3, #1
 800197a:	4b1e      	ldr	r3, [pc, #120]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 800197c:	881c      	ldrh	r4, [r3, #0]
 800197e:	481e      	ldr	r0, [pc, #120]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	440b      	add	r3, r1
 800198c:	4622      	mov	r2, r4
 800198e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	3301      	adds	r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	3301      	adds	r3, #1
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	ddd4      	ble.n	800194c <eraseBlockTwo+0x20c>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f995 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	88f9      	ldrh	r1, [r7, #6]
 80019b8:	480d      	ldr	r0, [pc, #52]	@ (80019f0 <eraseBlockTwo+0x2b0>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = GameScreenColor;
 80019ca:	88bb      	ldrh	r3, [r7, #4]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	88f9      	ldrh	r1, [r7, #6]
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <eraseBlockTwo+0x2b4>)
 80019d2:	881c      	ldrh	r4, [r3, #0]
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <eraseBlockTwo+0x2b8>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	4622      	mov	r2, r4
 80019e2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000030c 	.word	0x2000030c
 80019f4:	20000002 	.word	0x20000002
 80019f8:	2000018c 	.word	0x2000018c

080019fc <drawBlockThree>:

void drawBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
 8001a06:	460b      	mov	r3, r1
 8001a08:	80bb      	strh	r3, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d14f      	bne.n	8001ab4 <drawBlockThree+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	e021      	b.n	8001a5e <drawBlockThree+0x62>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	88b9      	ldrh	r1, [r7, #4]
 8001a20:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff f8a7 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001a2a:	88ba      	ldrh	r2, [r7, #4]
 8001a2c:	499f      	ldr	r1, [pc, #636]	@ (8001cac <drawBlockThree+0x2b0>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4413      	add	r3, r2
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_ORANGE;
 8001a40:	88ba      	ldrh	r2, [r7, #4]
 8001a42:	499b      	ldr	r1, [pc, #620]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	3302      	adds	r3, #2
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	ddd8      	ble.n	8001a1a <drawBlockThree+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+2,Ypos-1,LCD_COLOR_ORANGE);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f87d 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos+2] = 1;
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	1c99      	adds	r1, r3, #2
 8001a86:	4889      	ldr	r0, [pc, #548]	@ (8001cac <drawBlockThree+0x2b0>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	2201      	movs	r2, #1
 8001a94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+2] = LCD_COLOR_ORANGE;
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	1c99      	adds	r1, r3, #2
 8001aa0:	4883      	ldr	r0, [pc, #524]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001ab0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d150      	bne.n	8001b5c <drawBlockThree+0x160>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	e021      	b.n	8001b06 <drawBlockThree+0x10a>
				LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_ORANGE);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	b299      	uxth	r1, r3
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f853 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
				LCD_Screen[i][Xpos] = 1;
 8001ad2:	88f9      	ldrh	r1, [r7, #6]
 8001ad4:	4875      	ldr	r0, [pc, #468]	@ (8001cac <drawBlockThree+0x2b0>)
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = LCD_COLOR_ORANGE;
 8001ae8:	88f9      	ldrh	r1, [r7, #6]
 8001aea:	4871      	ldr	r0, [pc, #452]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	440b      	add	r3, r1
 8001af8:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001afc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	3301      	adds	r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	88bb      	ldrh	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	ddd8      	ble.n	8001ac2 <drawBlockThree+0xc6>
			}
			LCD_Draw_Square_Fill_Border(Xpos+1,Ypos+1,LCD_COLOR_ORANGE);
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	3301      	adds	r3, #1
 8001b14:	b298      	uxth	r0, r3
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f829 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos+1][Xpos+1] = 1;
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	1c59      	adds	r1, r3, #1
 8001b2e:	485f      	ldr	r0, [pc, #380]	@ (8001cac <drawBlockThree+0x2b0>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos+1][Xpos+1] = LCD_COLOR_ORANGE;
 8001b40:	88bb      	ldrh	r3, [r7, #4]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	4859      	ldr	r0, [pc, #356]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001b58:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d14b      	bne.n	8001bfa <drawBlockThree+0x1fe>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e021      	b.n	8001bac <drawBlockThree+0x1b0>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_ORANGE);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	88b9      	ldrh	r1, [r7, #4]
 8001b6e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f800 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001b78:	88ba      	ldrh	r2, [r7, #4]
 8001b7a:	494c      	ldr	r1, [pc, #304]	@ (8001cac <drawBlockThree+0x2b0>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_ORANGE;
 8001b8e:	88ba      	ldrh	r2, [r7, #4]
 8001b90:	4947      	ldr	r1, [pc, #284]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001ba2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	ddd8      	ble.n	8001b68 <drawBlockThree+0x16c>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos+1,LCD_COLOR_ORANGE);
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe ffd8 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos] = 1;
 8001bc8:	88bb      	ldrh	r3, [r7, #4]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	88f9      	ldrh	r1, [r7, #6]
 8001bce:	4837      	ldr	r0, [pc, #220]	@ (8001cac <drawBlockThree+0x2b0>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = LCD_COLOR_ORANGE;
 8001be0:	88bb      	ldrh	r3, [r7, #4]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	88f9      	ldrh	r1, [r7, #6]
 8001be6:	4832      	ldr	r0, [pc, #200]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001bf6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d150      	bne.n	8001ca2 <drawBlockThree+0x2a6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	e025      	b.n	8001c54 <drawBlockThree+0x258>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_ORANGE);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	b291      	uxth	r1, r2
 8001c12:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe ffae 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	4822      	ldr	r0, [pc, #136]	@ (8001cac <drawBlockThree+0x2b0>)
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_ORANGE;
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	481d      	ldr	r0, [pc, #116]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001c4a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	3301      	adds	r3, #1
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	88bb      	ldrh	r3, [r7, #4]
 8001c56:	3301      	adds	r3, #1
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	ddd4      	ble.n	8001c08 <drawBlockThree+0x20c>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos-1,LCD_COLOR_ORANGE);
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b299      	uxth	r1, r3
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe ff84 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos] = 1;
 8001c70:	88bb      	ldrh	r3, [r7, #4]
 8001c72:	1e5a      	subs	r2, r3, #1
 8001c74:	88f9      	ldrh	r1, [r7, #6]
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <drawBlockThree+0x2b0>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	2201      	movs	r2, #1
 8001c84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = LCD_COLOR_ORANGE;
 8001c88:	88bb      	ldrh	r3, [r7, #4]
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	88f9      	ldrh	r1, [r7, #6]
 8001c8e:	4808      	ldr	r0, [pc, #32]	@ (8001cb0 <drawBlockThree+0x2b4>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8001c9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000030c 	.word	0x2000030c
 8001cb0:	2000018c 	.word	0x2000018c

08001cb4 <eraseBlockThree>:

void eraseBlockThree(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	80bb      	strh	r3, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d14f      	bne.n	8001d6c <eraseBlockThree+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	e021      	b.n	8001d16 <eraseBlockThree+0x62>
			LCD_Erase_Square(i,Ypos);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	88ba      	ldrh	r2, [r7, #4]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fffe 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001ce0:	88ba      	ldrh	r2, [r7, #4]
 8001ce2:	49a0      	ldr	r1, [pc, #640]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4413      	add	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001cf6:	88ba      	ldrh	r2, [r7, #4]
 8001cf8:	4b9b      	ldr	r3, [pc, #620]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001cfa:	8818      	ldrh	r0, [r3, #0]
 8001cfc:	499b      	ldr	r1, [pc, #620]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	ddd8      	ble.n	8001cd2 <eraseBlockThree+0x1e>
		}
		LCD_Erase_Square(Xpos+2,Ypos-1);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	3302      	adds	r3, #2
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	88bb      	ldrh	r3, [r7, #4]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7fe ffd4 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos+2] = 0;
 8001d34:	88bb      	ldrh	r3, [r7, #4]
 8001d36:	1e5a      	subs	r2, r3, #1
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	1c99      	adds	r1, r3, #2
 8001d3c:	4889      	ldr	r0, [pc, #548]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+2] = GameScreenColor;
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	1c99      	adds	r1, r3, #2
 8001d56:	4b84      	ldr	r3, [pc, #528]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001d58:	881c      	ldrh	r4, [r3, #0]
 8001d5a:	4884      	ldr	r0, [pc, #528]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	4622      	mov	r2, r4
 8001d68:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d150      	bne.n	8001e14 <eraseBlockThree+0x160>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e021      	b.n	8001dbe <eraseBlockThree+0x10a>
				LCD_Erase_Square(Xpos,i);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ffaa 	bl	8000cdc <LCD_Erase_Square>
				LCD_Screen[i][Xpos] = 0;
 8001d88:	88f9      	ldrh	r1, [r7, #6]
 8001d8a:	4876      	ldr	r0, [pc, #472]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				Obj_Color[i][Xpos] = GameScreenColor;
 8001d9e:	88f9      	ldrh	r1, [r7, #6]
 8001da0:	4b71      	ldr	r3, [pc, #452]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001da2:	881c      	ldrh	r4, [r3, #0]
 8001da4:	4871      	ldr	r0, [pc, #452]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	4622      	mov	r2, r4
 8001db4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	ddd8      	ble.n	8001d7a <eraseBlockThree+0xc6>
			}
			LCD_Erase_Square(Xpos+1,Ypos+1);
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7fe ff80 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos+1][Xpos+1] = 0;
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	485f      	ldr	r0, [pc, #380]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	2200      	movs	r2, #0
 8001df2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos+1][Xpos+1] = GameScreenColor;
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	1c59      	adds	r1, r3, #1
 8001dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001e00:	881c      	ldrh	r4, [r3, #0]
 8001e02:	485a      	ldr	r0, [pc, #360]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	4622      	mov	r2, r4
 8001e10:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		}
	if (orientation == 3){
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d14b      	bne.n	8001eb2 <eraseBlockThree+0x1fe>
		for (int i = Xpos; i < (Xpos+3); i++){
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e021      	b.n	8001e64 <eraseBlockThree+0x1b0>
			LCD_Erase_Square(i,Ypos);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe ff57 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8001e2e:	88ba      	ldrh	r2, [r7, #4]
 8001e30:	494c      	ldr	r1, [pc, #304]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8001e44:	88ba      	ldrh	r2, [r7, #4]
 8001e46:	4b48      	ldr	r3, [pc, #288]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001e48:	8818      	ldrh	r0, [r3, #0]
 8001e4a:	4948      	ldr	r1, [pc, #288]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	3302      	adds	r3, #2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	ddd8      	ble.n	8001e20 <eraseBlockThree+0x16c>
		}
		LCD_Erase_Square(Xpos,Ypos+1);
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff2f 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos] = 0;
 8001e7e:	88bb      	ldrh	r3, [r7, #4]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	88f9      	ldrh	r1, [r7, #6]
 8001e84:	4837      	ldr	r0, [pc, #220]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	2200      	movs	r2, #0
 8001e92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos] = GameScreenColor;
 8001e96:	88bb      	ldrh	r3, [r7, #4]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	88f9      	ldrh	r1, [r7, #6]
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001e9e:	881c      	ldrh	r4, [r3, #0]
 8001ea0:	4832      	ldr	r0, [pc, #200]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	4622      	mov	r2, r4
 8001eae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d150      	bne.n	8001f5a <eraseBlockThree+0x2a6>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001eb8:	88bb      	ldrh	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	e025      	b.n	8001f0c <eraseBlockThree+0x258>
			LCD_Erase_Square(Xpos+1,i);
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff05 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	1c59      	adds	r1, r3, #1
 8001ed6:	4823      	ldr	r0, [pc, #140]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	1c59      	adds	r1, r3, #1
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001ef0:	881c      	ldrh	r4, [r3, #0]
 8001ef2:	481e      	ldr	r0, [pc, #120]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	4622      	mov	r2, r4
 8001f02:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	88bb      	ldrh	r3, [r7, #4]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	ddd4      	ble.n	8001ec0 <eraseBlockThree+0x20c>
		}
		LCD_Erase_Square(Xpos,Ypos-1);
 8001f16:	88bb      	ldrh	r3, [r7, #4]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fedb 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos] = 0;
 8001f26:	88bb      	ldrh	r3, [r7, #4]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	88f9      	ldrh	r1, [r7, #6]
 8001f2c:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <eraseBlockThree+0x2b0>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos] = GameScreenColor;
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	1e5a      	subs	r2, r3, #1
 8001f42:	88f9      	ldrh	r1, [r7, #6]
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <eraseBlockThree+0x2b4>)
 8001f46:	881c      	ldrh	r4, [r3, #0]
 8001f48:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <eraseBlockThree+0x2b8>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	4622      	mov	r2, r4
 8001f56:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000030c 	.word	0x2000030c
 8001f68:	20000002 	.word	0x20000002
 8001f6c:	2000018c 	.word	0x2000018c

08001f70 <drawBlockFour>:

void drawBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	80bb      	strh	r3, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e044      	b.n	8002012 <drawBlockFour+0xa2>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_YELLOW);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	88b9      	ldrh	r1, [r7, #4]
 8001f8e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fdf0 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8001f98:	88ba      	ldrh	r2, [r7, #4]
 8001f9a:	4923      	ldr	r1, [pc, #140]	@ (8002028 <drawBlockFour+0xb8>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_YELLOW;
 8001fae:	88ba      	ldrh	r2, [r7, #4]
 8001fb0:	491e      	ldr	r1, [pc, #120]	@ (800202c <drawBlockFour+0xbc>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001fc2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_YELLOW);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fdcf 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i] = 1;
 8001fda:	88bb      	ldrh	r3, [r7, #4]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	4912      	ldr	r1, [pc, #72]	@ (8002028 <drawBlockFour+0xb8>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	2201      	movs	r2, #1
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = LCD_COLOR_YELLOW;
 8001ff2:	88bb      	ldrh	r3, [r7, #4]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	490d      	ldr	r1, [pc, #52]	@ (800202c <drawBlockFour+0xbc>)
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002008:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	3301      	adds	r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	3301      	adds	r3, #1
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	ddb5      	ble.n	8001f88 <drawBlockFour+0x18>
		}
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000030c 	.word	0x2000030c
 800202c:	2000018c 	.word	0x2000018c

08002030 <eraseBlockFour>:

void eraseBlockFour(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
 800203a:	460b      	mov	r3, r1
 800203c:	80bb      	strh	r3, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	807b      	strh	r3, [r7, #2]
	for (int i = Xpos; i < (Xpos+2); i++){
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e044      	b.n	80020d2 <eraseBlockFour+0xa2>
			LCD_Erase_Square(i,Ypos);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	b29b      	uxth	r3, r3
 800204c:	88ba      	ldrh	r2, [r7, #4]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fe43 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 8002056:	88ba      	ldrh	r2, [r7, #4]
 8002058:	4923      	ldr	r1, [pc, #140]	@ (80020e8 <eraseBlockFour+0xb8>)
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4413      	add	r3, r2
 8002066:	2200      	movs	r2, #0
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 800206c:	88ba      	ldrh	r2, [r7, #4]
 800206e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <eraseBlockFour+0xbc>)
 8002070:	8818      	ldrh	r0, [r3, #0]
 8002072:	491f      	ldr	r1, [pc, #124]	@ (80020f0 <eraseBlockFour+0xc0>)
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	4602      	mov	r2, r0
 8002082:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i,Ypos-1);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	b29a      	uxth	r2, r3
 800208a:	88bb      	ldrh	r3, [r7, #4]
 800208c:	3b01      	subs	r3, #1
 800208e:	b29b      	uxth	r3, r3
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7fe fe22 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i] = 0;
 8002098:	88bb      	ldrh	r3, [r7, #4]
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	4912      	ldr	r1, [pc, #72]	@ (80020e8 <eraseBlockFour+0xb8>)
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	2200      	movs	r2, #0
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = GameScreenColor;
 80020b0:	88bb      	ldrh	r3, [r7, #4]
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <eraseBlockFour+0xbc>)
 80020b6:	8818      	ldrh	r0, [r3, #0]
 80020b8:	490d      	ldr	r1, [pc, #52]	@ (80020f0 <eraseBlockFour+0xc0>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4413      	add	r3, r2
 80020c6:	4602      	mov	r2, r0
 80020c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = Xpos; i < (Xpos+2); i++){
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3301      	adds	r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	3301      	adds	r3, #1
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	ddb5      	ble.n	8002048 <eraseBlockFour+0x18>
		}
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000030c 	.word	0x2000030c
 80020ec:	20000002 	.word	0x20000002
 80020f0:	2000018c 	.word	0x2000018c

080020f4 <drawBlockFive>:

void drawBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
 80020fe:	460b      	mov	r3, r1
 8002100:	80bb      	strh	r3, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d002      	beq.n	8002112 <drawBlockFive+0x1e>
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d150      	bne.n	80021b4 <drawBlockFive+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e048      	b.n	80021aa <drawBlockFive+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_GREEN);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	b29b      	uxth	r3, r3
 800211c:	88b9      	ldrh	r1, [r7, #4]
 800211e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fd28 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8002128:	88ba      	ldrh	r2, [r7, #4]
 800212a:	4950      	ldr	r1, [pc, #320]	@ (800226c <drawBlockFive+0x178>)
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	2201      	movs	r2, #1
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_GREEN;
 800213e:	88ba      	ldrh	r2, [r7, #4]
 8002140:	494b      	ldr	r1, [pc, #300]	@ (8002270 <drawBlockFive+0x17c>)
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4413      	add	r3, r2
 800214e:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002152:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i+1,Ypos-1,LCD_COLOR_GREEN);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	b29b      	uxth	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	b298      	uxth	r0, r3
 800215e:	88bb      	ldrh	r3, [r7, #4]
 8002160:	3b01      	subs	r3, #1
 8002162:	b29b      	uxth	r3, r3
 8002164:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fd05 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i+1] = 1;
 800216e:	88bb      	ldrh	r3, [r7, #4]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1c59      	adds	r1, r3, #1
 8002176:	483d      	ldr	r0, [pc, #244]	@ (800226c <drawBlockFive+0x178>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	2201      	movs	r2, #1
 8002184:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i+1] = LCD_COLOR_GREEN;
 8002188:	88bb      	ldrh	r3, [r7, #4]
 800218a:	1e5a      	subs	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1c59      	adds	r1, r3, #1
 8002190:	4837      	ldr	r0, [pc, #220]	@ (8002270 <drawBlockFive+0x17c>)
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80021a0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	3301      	adds	r3, #1
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	ddb1      	ble.n	8002118 <drawBlockFive+0x24>
	// Y-1			1	1
	//   Y	    1	1
	// Y+1
	// Y+2
	//	   X-1  X  X+1  X+2
	if (orientation == 2 || orientation == 4){
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d002      	beq.n	80021c0 <drawBlockFive+0xcc>
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d150      	bne.n	8002262 <drawBlockFive+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 80021c0:	88bb      	ldrh	r3, [r7, #4]
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	e048      	b.n	8002258 <drawBlockFive+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i-1,LCD_COLOR_GREEN);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b299      	uxth	r1, r3
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fccf 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Xpos] = 1;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1e5a      	subs	r2, r3, #1
 80021de:	88f9      	ldrh	r1, [r7, #6]
 80021e0:	4822      	ldr	r0, [pc, #136]	@ (800226c <drawBlockFive+0x178>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	2201      	movs	r2, #1
 80021ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos] = LCD_COLOR_GREEN;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1e5a      	subs	r2, r3, #1
 80021f6:	88f9      	ldrh	r1, [r7, #6]
 80021f8:	481d      	ldr	r0, [pc, #116]	@ (8002270 <drawBlockFive+0x17c>)
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002208:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_GREEN);
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	3301      	adds	r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	b291      	uxth	r1, r2
 8002216:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fcac 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	4811      	ldr	r0, [pc, #68]	@ (800226c <drawBlockFive+0x178>)
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	2201      	movs	r2, #1
 8002234:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_GREEN;
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	1c59      	adds	r1, r3, #1
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <drawBlockFive+0x17c>)
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800224e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	88bb      	ldrh	r3, [r7, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	ddb1      	ble.n	80021c6 <drawBlockFive+0xd2>
	// Y-1		1
	//   Y	    1	1
	// Y+1			1
	// Y+2
	//	   X-1  X  X+1  X+2
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000030c 	.word	0x2000030c
 8002270:	2000018c 	.word	0x2000018c

08002274 <eraseBlockFive>:

void eraseBlockFive(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	80fb      	strh	r3, [r7, #6]
 800227e:	460b      	mov	r3, r1
 8002280:	80bb      	strh	r3, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d002      	beq.n	8002292 <eraseBlockFive+0x1e>
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d150      	bne.n	8002334 <eraseBlockFive+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e048      	b.n	800232a <eraseBlockFive+0xb6>
			LCD_Erase_Square(i,Ypos);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	b29b      	uxth	r3, r3
 800229c:	88ba      	ldrh	r2, [r7, #4]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fd1b 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80022a6:	88ba      	ldrh	r2, [r7, #4]
 80022a8:	4950      	ldr	r1, [pc, #320]	@ (80023ec <eraseBlockFive+0x178>)
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 80022bc:	88ba      	ldrh	r2, [r7, #4]
 80022be:	4b4c      	ldr	r3, [pc, #304]	@ (80023f0 <eraseBlockFive+0x17c>)
 80022c0:	8818      	ldrh	r0, [r3, #0]
 80022c2:	494c      	ldr	r1, [pc, #304]	@ (80023f4 <eraseBlockFive+0x180>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	4602      	mov	r2, r0
 80022d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i+1,Ypos-1);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	88bb      	ldrh	r3, [r7, #4]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f7fe fcf8 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i+1] = 0;
 80022ec:	88bb      	ldrh	r3, [r7, #4]
 80022ee:	1e5a      	subs	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1c59      	adds	r1, r3, #1
 80022f4:	483d      	ldr	r0, [pc, #244]	@ (80023ec <eraseBlockFive+0x178>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	2200      	movs	r2, #0
 8002302:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos-1][i+1] = GameScreenColor;
 8002306:	88bb      	ldrh	r3, [r7, #4]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1c59      	adds	r1, r3, #1
 800230e:	4b38      	ldr	r3, [pc, #224]	@ (80023f0 <eraseBlockFive+0x17c>)
 8002310:	881c      	ldrh	r4, [r3, #0]
 8002312:	4838      	ldr	r0, [pc, #224]	@ (80023f4 <eraseBlockFive+0x180>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	4622      	mov	r2, r4
 8002320:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	3301      	adds	r3, #1
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	ddb1      	ble.n	8002298 <eraseBlockFive+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d002      	beq.n	8002340 <eraseBlockFive+0xcc>
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d150      	bne.n	80023e2 <eraseBlockFive+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002340:	88bb      	ldrh	r3, [r7, #4]
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	e048      	b.n	80023d8 <eraseBlockFive+0x164>
			LCD_Erase_Square(Xpos,i-1);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	b29b      	uxth	r3, r3
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fcc2 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i-1][Xpos] = 0;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	88f9      	ldrh	r1, [r7, #6]
 800235e:	4823      	ldr	r0, [pc, #140]	@ (80023ec <eraseBlockFive+0x178>)
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	2200      	movs	r2, #0
 800236c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos] = GameScreenColor;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	88f9      	ldrh	r1, [r7, #6]
 8002376:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <eraseBlockFive+0x17c>)
 8002378:	881c      	ldrh	r4, [r3, #0]
 800237a:	481e      	ldr	r0, [pc, #120]	@ (80023f4 <eraseBlockFive+0x180>)
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	4622      	mov	r2, r4
 8002388:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i);
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	3301      	adds	r3, #1
 8002390:	b29b      	uxth	r3, r3
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	b292      	uxth	r2, r2
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fc9f 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	4812      	ldr	r0, [pc, #72]	@ (80023ec <eraseBlockFive+0x178>)
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	2200      	movs	r2, #0
 80023b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <eraseBlockFive+0x17c>)
 80023bc:	881c      	ldrh	r4, [r3, #0]
 80023be:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <eraseBlockFive+0x180>)
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	4622      	mov	r2, r4
 80023ce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	88bb      	ldrh	r3, [r7, #4]
 80023da:	3301      	adds	r3, #1
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	429a      	cmp	r2, r3
 80023e0:	ddb1      	ble.n	8002346 <eraseBlockFive+0xd2>
		}
	}
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2000030c 	.word	0x2000030c
 80023f0:	20000002 	.word	0x20000002
 80023f4:	2000018c 	.word	0x2000018c

080023f8 <drawBlockSix>:

void drawBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
 8002402:	460b      	mov	r3, r1
 8002404:	80bb      	strh	r3, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d14f      	bne.n	80024b0 <drawBlockSix+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e021      	b.n	800245a <drawBlockSix+0x62>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	b29b      	uxth	r3, r3
 800241a:	88b9      	ldrh	r1, [r7, #4]
 800241c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fba9 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 8002426:	88ba      	ldrh	r2, [r7, #4]
 8002428:	499d      	ldr	r1, [pc, #628]	@ (80026a0 <drawBlockSix+0x2a8>)
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4413      	add	r3, r2
 8002436:	2201      	movs	r2, #1
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_MAGENTA;
 800243c:	88ba      	ldrh	r2, [r7, #4]
 800243e:	4999      	ldr	r1, [pc, #612]	@ (80026a4 <drawBlockSix+0x2ac>)
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4413      	add	r3, r2
 800244c:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002450:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3301      	adds	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	3302      	adds	r3, #2
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	ddd8      	ble.n	8002416 <drawBlockSix+0x1e>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos-1,LCD_COLOR_MAGENTA);
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	3301      	adds	r3, #1
 8002468:	b298      	uxth	r0, r3
 800246a:	88bb      	ldrh	r3, [r7, #4]
 800246c:	3b01      	subs	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb7f 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos-1][Xpos+1] = 1;
 800247a:	88bb      	ldrh	r3, [r7, #4]
 800247c:	1e5a      	subs	r2, r3, #1
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	4887      	ldr	r0, [pc, #540]	@ (80026a0 <drawBlockSix+0x2a8>)
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	2201      	movs	r2, #1
 8002490:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+1] = LCD_COLOR_MAGENTA;
 8002494:	88bb      	ldrh	r3, [r7, #4]
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	4881      	ldr	r0, [pc, #516]	@ (80026a4 <drawBlockSix+0x2ac>)
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024ac:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d14f      	bne.n	8002556 <drawBlockSix+0x15e>
		for (int i = Xpos; i < (Xpos+3); i++){
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e021      	b.n	8002500 <drawBlockSix+0x108>
			LCD_Draw_Square_Fill_Border(i,Ypos,LCD_COLOR_MAGENTA);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	88b9      	ldrh	r1, [r7, #4]
 80024c2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fb56 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i] = 1;
 80024cc:	88ba      	ldrh	r2, [r7, #4]
 80024ce:	4974      	ldr	r1, [pc, #464]	@ (80026a0 <drawBlockSix+0x2a8>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	2201      	movs	r2, #1
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = LCD_COLOR_MAGENTA;
 80024e2:	88ba      	ldrh	r2, [r7, #4]
 80024e4:	496f      	ldr	r1, [pc, #444]	@ (80026a4 <drawBlockSix+0x2ac>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80024f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	3301      	adds	r3, #1
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	3302      	adds	r3, #2
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	429a      	cmp	r2, r3
 8002508:	ddd8      	ble.n	80024bc <drawBlockSix+0xc4>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos+1,LCD_COLOR_MAGENTA);
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	3301      	adds	r3, #1
 800250e:	b298      	uxth	r0, r3
 8002510:	88bb      	ldrh	r3, [r7, #4]
 8002512:	3301      	adds	r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fb2c 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos+1][Xpos+1] = 1;
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	485d      	ldr	r0, [pc, #372]	@ (80026a0 <drawBlockSix+0x2a8>)
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	2201      	movs	r2, #1
 8002536:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+1] = LCD_COLOR_MAGENTA;
 800253a:	88bb      	ldrh	r3, [r7, #4]
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	1c59      	adds	r1, r3, #1
 8002542:	4858      	ldr	r0, [pc, #352]	@ (80026a4 <drawBlockSix+0x2ac>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002552:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d14c      	bne.n	80025f6 <drawBlockSix+0x1fe>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800255c:	88bb      	ldrh	r3, [r7, #4]
 800255e:	3b01      	subs	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e021      	b.n	80025a8 <drawBlockSix+0x1b0>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_MAGENTA);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	b299      	uxth	r1, r3
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fb02 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 8002574:	88f9      	ldrh	r1, [r7, #6]
 8002576:	484a      	ldr	r0, [pc, #296]	@ (80026a0 <drawBlockSix+0x2a8>)
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	2201      	movs	r2, #1
 8002586:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_MAGENTA;
 800258a:	88f9      	ldrh	r1, [r7, #6]
 800258c:	4845      	ldr	r0, [pc, #276]	@ (80026a4 <drawBlockSix+0x2ac>)
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800259e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3301      	adds	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	88bb      	ldrh	r3, [r7, #4]
 80025aa:	3301      	adds	r3, #1
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	ddd8      	ble.n	8002564 <drawBlockSix+0x16c>
		}
		LCD_Draw_Square_Fill_Border(Xpos+1,Ypos,LCD_COLOR_MAGENTA);
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	88b9      	ldrh	r1, [r7, #4]
 80025ba:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fada 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos][Xpos+1] = 1;
 80025c4:	88ba      	ldrh	r2, [r7, #4]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	1c59      	adds	r1, r3, #1
 80025ca:	4835      	ldr	r0, [pc, #212]	@ (80026a0 <drawBlockSix+0x2a8>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	2201      	movs	r2, #1
 80025d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos+1] = LCD_COLOR_MAGENTA;
 80025dc:	88ba      	ldrh	r2, [r7, #4]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	1c59      	adds	r1, r3, #1
 80025e2:	4830      	ldr	r0, [pc, #192]	@ (80026a4 <drawBlockSix+0x2ac>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80025f2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d14c      	bne.n	8002696 <drawBlockSix+0x29e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80025fc:	88bb      	ldrh	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	e025      	b.n	8002650 <drawBlockSix+0x258>
			LCD_Draw_Square_Fill_Border(Xpos+1,i,LCD_COLOR_MAGENTA);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	3301      	adds	r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	b291      	uxth	r1, r2
 800260e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fab0 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos+1] = 1;
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	4820      	ldr	r0, [pc, #128]	@ (80026a0 <drawBlockSix+0x2a8>)
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	2201      	movs	r2, #1
 800262c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = LCD_COLOR_MAGENTA;
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	1c59      	adds	r1, r3, #1
 8002634:	481b      	ldr	r0, [pc, #108]	@ (80026a4 <drawBlockSix+0x2ac>)
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002646:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	3301      	adds	r3, #1
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	ddd4      	ble.n	8002604 <drawBlockSix+0x20c>
		}
		LCD_Draw_Square_Fill_Border(Xpos,Ypos,LCD_COLOR_MAGENTA);
 800265a:	88b9      	ldrh	r1, [r7, #4]
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fa88 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[Ypos][Xpos] = 1;
 8002668:	88ba      	ldrh	r2, [r7, #4]
 800266a:	88f9      	ldrh	r1, [r7, #6]
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <drawBlockSix+0x2a8>)
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	2201      	movs	r2, #1
 800267a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos] = LCD_COLOR_MAGENTA;
 800267e:	88ba      	ldrh	r2, [r7, #4]
 8002680:	88f9      	ldrh	r1, [r7, #6]
 8002682:	4808      	ldr	r0, [pc, #32]	@ (80026a4 <drawBlockSix+0x2ac>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002692:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000030c 	.word	0x2000030c
 80026a4:	2000018c 	.word	0x2000018c

080026a8 <eraseBlockSix>:

void eraseBlockSix(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
 80026b2:	460b      	mov	r3, r1
 80026b4:	80bb      	strh	r3, [r7, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	807b      	strh	r3, [r7, #2]
	if (orientation == 1){
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d14f      	bne.n	8002760 <eraseBlockSix+0xb8>
		for (int i = Xpos; i < (Xpos+3); i++){
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e021      	b.n	800270a <eraseBlockSix+0x62>
			LCD_Erase_Square(i,Ypos);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	88ba      	ldrh	r2, [r7, #4]
 80026cc:	4611      	mov	r1, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fb04 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 80026d4:	88ba      	ldrh	r2, [r7, #4]
 80026d6:	499e      	ldr	r1, [pc, #632]	@ (8002950 <eraseBlockSix+0x2a8>)
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4413      	add	r3, r2
 80026e4:	2200      	movs	r2, #0
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 80026ea:	88ba      	ldrh	r2, [r7, #4]
 80026ec:	4b99      	ldr	r3, [pc, #612]	@ (8002954 <eraseBlockSix+0x2ac>)
 80026ee:	8818      	ldrh	r0, [r3, #0]
 80026f0:	4999      	ldr	r1, [pc, #612]	@ (8002958 <eraseBlockSix+0x2b0>)
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4413      	add	r3, r2
 80026fe:	4602      	mov	r2, r0
 8002700:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	3302      	adds	r3, #2
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	ddd8      	ble.n	80026c6 <eraseBlockSix+0x1e>
		}
		LCD_Erase_Square(Xpos+1,Ypos-1);
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	3301      	adds	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	88bb      	ldrh	r3, [r7, #4]
 800271c:	3b01      	subs	r3, #1
 800271e:	b29b      	uxth	r3, r3
 8002720:	4619      	mov	r1, r3
 8002722:	4610      	mov	r0, r2
 8002724:	f7fe fada 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos-1][Xpos+1] = 0;
 8002728:	88bb      	ldrh	r3, [r7, #4]
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	1c59      	adds	r1, r3, #1
 8002730:	4887      	ldr	r0, [pc, #540]	@ (8002950 <eraseBlockSix+0x2a8>)
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	2200      	movs	r2, #0
 800273e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos-1][Xpos+1] = GameScreenColor;
 8002742:	88bb      	ldrh	r3, [r7, #4]
 8002744:	1e5a      	subs	r2, r3, #1
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	1c59      	adds	r1, r3, #1
 800274a:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <eraseBlockSix+0x2ac>)
 800274c:	881c      	ldrh	r4, [r3, #0]
 800274e:	4882      	ldr	r0, [pc, #520]	@ (8002958 <eraseBlockSix+0x2b0>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	4622      	mov	r2, r4
 800275c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}

	if (orientation == 3){
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d14f      	bne.n	8002806 <eraseBlockSix+0x15e>
		for (int i = Xpos; i < (Xpos+3); i++){
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e021      	b.n	80027b0 <eraseBlockSix+0x108>
			LCD_Erase_Square(i,Ypos);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	b29b      	uxth	r3, r3
 8002770:	88ba      	ldrh	r2, [r7, #4]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fab1 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i] = 0;
 800277a:	88ba      	ldrh	r2, [r7, #4]
 800277c:	4974      	ldr	r1, [pc, #464]	@ (8002950 <eraseBlockSix+0x2a8>)
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	2200      	movs	r2, #0
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos][i] = GameScreenColor;
 8002790:	88ba      	ldrh	r2, [r7, #4]
 8002792:	4b70      	ldr	r3, [pc, #448]	@ (8002954 <eraseBlockSix+0x2ac>)
 8002794:	8818      	ldrh	r0, [r3, #0]
 8002796:	4970      	ldr	r1, [pc, #448]	@ (8002958 <eraseBlockSix+0x2b0>)
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	4602      	mov	r2, r0
 80027a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+3); i++){
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3301      	adds	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	3302      	adds	r3, #2
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	ddd8      	ble.n	800276c <eraseBlockSix+0xc4>
		}
		LCD_Erase_Square(Xpos+1,Ypos+1);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	3301      	adds	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	88bb      	ldrh	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fa87 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos+1][Xpos+1] = 0;
 80027ce:	88bb      	ldrh	r3, [r7, #4]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	1c59      	adds	r1, r3, #1
 80027d6:	485e      	ldr	r0, [pc, #376]	@ (8002950 <eraseBlockSix+0x2a8>)
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	2200      	movs	r2, #0
 80027e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos+1][Xpos+1] = GameScreenColor;
 80027e8:	88bb      	ldrh	r3, [r7, #4]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	4b58      	ldr	r3, [pc, #352]	@ (8002954 <eraseBlockSix+0x2ac>)
 80027f2:	881c      	ldrh	r4, [r3, #0]
 80027f4:	4858      	ldr	r0, [pc, #352]	@ (8002958 <eraseBlockSix+0x2b0>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	4622      	mov	r2, r4
 8002802:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 2){
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d14c      	bne.n	80028a6 <eraseBlockSix+0x1fe>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e021      	b.n	8002858 <eraseBlockSix+0x1b0>
			LCD_Erase_Square(Xpos,i);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	b29a      	uxth	r2, r3
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa5d 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8002822:	88f9      	ldrh	r1, [r7, #6]
 8002824:	484a      	ldr	r0, [pc, #296]	@ (8002950 <eraseBlockSix+0x2a8>)
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	2200      	movs	r2, #0
 8002834:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = GameScreenColor;
 8002838:	88f9      	ldrh	r1, [r7, #6]
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <eraseBlockSix+0x2ac>)
 800283c:	881c      	ldrh	r4, [r3, #0]
 800283e:	4846      	ldr	r0, [pc, #280]	@ (8002958 <eraseBlockSix+0x2b0>)
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	4622      	mov	r2, r4
 800284e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	88bb      	ldrh	r3, [r7, #4]
 800285a:	3301      	adds	r3, #1
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	429a      	cmp	r2, r3
 8002860:	ddd8      	ble.n	8002814 <eraseBlockSix+0x16c>
		}
		LCD_Erase_Square(Xpos+1,Ypos);
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	3301      	adds	r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	88ba      	ldrh	r2, [r7, #4]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fa35 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos][Xpos+1] = 0;
 8002872:	88ba      	ldrh	r2, [r7, #4]
 8002874:	88fb      	ldrh	r3, [r7, #6]
 8002876:	1c59      	adds	r1, r3, #1
 8002878:	4835      	ldr	r0, [pc, #212]	@ (8002950 <eraseBlockSix+0x2a8>)
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	2200      	movs	r2, #0
 8002886:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos+1] = GameScreenColor;
 800288a:	88ba      	ldrh	r2, [r7, #4]
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <eraseBlockSix+0x2ac>)
 8002892:	881c      	ldrh	r4, [r3, #0]
 8002894:	4830      	ldr	r0, [pc, #192]	@ (8002958 <eraseBlockSix+0x2b0>)
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	4622      	mov	r2, r4
 80028a2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
	if (orientation == 4){
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d14c      	bne.n	8002946 <eraseBlockSix+0x29e>
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	e025      	b.n	8002900 <eraseBlockSix+0x258>
			LCD_Erase_Square(Xpos+1,i);
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	b292      	uxth	r2, r2
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fa0b 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos+1] = 0;
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	1c59      	adds	r1, r3, #1
 80028ca:	4821      	ldr	r0, [pc, #132]	@ (8002950 <eraseBlockSix+0x2a8>)
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos+1] = GameScreenColor;
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	1c59      	adds	r1, r3, #1
 80028e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002954 <eraseBlockSix+0x2ac>)
 80028e4:	881c      	ldrh	r4, [r3, #0]
 80028e6:	481c      	ldr	r0, [pc, #112]	@ (8002958 <eraseBlockSix+0x2b0>)
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	4622      	mov	r2, r4
 80028f6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos-1; i < (Ypos+2); i++){
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3301      	adds	r3, #1
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	88bb      	ldrh	r3, [r7, #4]
 8002902:	3301      	adds	r3, #1
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	ddd4      	ble.n	80028b4 <eraseBlockSix+0x20c>
		}
		LCD_Erase_Square(Xpos,Ypos);
 800290a:	88ba      	ldrh	r2, [r7, #4]
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe f9e3 	bl	8000cdc <LCD_Erase_Square>
		LCD_Screen[Ypos][Xpos] = 0;
 8002916:	88ba      	ldrh	r2, [r7, #4]
 8002918:	88f9      	ldrh	r1, [r7, #6]
 800291a:	480d      	ldr	r0, [pc, #52]	@ (8002950 <eraseBlockSix+0x2a8>)
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	2200      	movs	r2, #0
 8002928:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		Obj_Color[Ypos][Xpos] = GameScreenColor;
 800292c:	88ba      	ldrh	r2, [r7, #4]
 800292e:	88f9      	ldrh	r1, [r7, #6]
 8002930:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <eraseBlockSix+0x2ac>)
 8002932:	881c      	ldrh	r4, [r3, #0]
 8002934:	4808      	ldr	r0, [pc, #32]	@ (8002958 <eraseBlockSix+0x2b0>)
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	4622      	mov	r2, r4
 8002942:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
	}
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd90      	pop	{r4, r7, pc}
 800294e:	bf00      	nop
 8002950:	2000030c 	.word	0x2000030c
 8002954:	20000002 	.word	0x20000002
 8002958:	2000018c 	.word	0x2000018c

0800295c <drawBlockSeven>:

void drawBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
 8002966:	460b      	mov	r3, r1
 8002968:	80bb      	strh	r3, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d002      	beq.n	800297a <drawBlockSeven+0x1e>
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	2b03      	cmp	r3, #3
 8002978:	d150      	bne.n	8002a1c <drawBlockSeven+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e048      	b.n	8002a12 <drawBlockSeven+0xb6>
			LCD_Draw_Square_Fill_Border(i,Ypos-1,LCD_COLOR_RED);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	b298      	uxth	r0, r3
 8002984:	88bb      	ldrh	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800298e:	4619      	mov	r1, r3
 8002990:	f7fe f8f2 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos-1][i] = 1;
 8002994:	88bb      	ldrh	r3, [r7, #4]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	494e      	ldr	r1, [pc, #312]	@ (8002ad4 <drawBlockSeven+0x178>)
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	2201      	movs	r2, #1
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = LCD_COLOR_RED;
 80029ac:	88bb      	ldrh	r3, [r7, #4]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	4949      	ldr	r1, [pc, #292]	@ (8002ad8 <drawBlockSeven+0x17c>)
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4413      	add	r3, r2
 80029be:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80029c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(i+1,Ypos,LCD_COLOR_RED);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	88b9      	ldrh	r1, [r7, #4]
 80029d0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe f8cf 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[Ypos][i+1] = 1;
 80029da:	88ba      	ldrh	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	483c      	ldr	r0, [pc, #240]	@ (8002ad4 <drawBlockSeven+0x178>)
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	2201      	movs	r2, #1
 80029ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos][i+1] = LCD_COLOR_RED;
 80029f2:	88ba      	ldrh	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1c59      	adds	r1, r3, #1
 80029f8:	4837      	ldr	r0, [pc, #220]	@ (8002ad8 <drawBlockSeven+0x17c>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a08:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	3301      	adds	r3, #1
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	ddb1      	ble.n	8002980 <drawBlockSeven+0x24>
	// Y-1		1	1
	//   Y	    	1	1
	// Y+1
	// Y+2
	//	   X-1  X  X+1  X+2
	if (orientation == 2 || orientation == 4){
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d002      	beq.n	8002a28 <drawBlockSeven+0xcc>
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d150      	bne.n	8002aca <drawBlockSeven+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002a28:	88bb      	ldrh	r3, [r7, #4]
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	e048      	b.n	8002ac0 <drawBlockSeven+0x164>
			LCD_Draw_Square_Fill_Border(Xpos,i,LCD_COLOR_RED);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	b299      	uxth	r1, r3
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f89d 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i][Xpos] = 1;
 8002a3e:	88f9      	ldrh	r1, [r7, #6]
 8002a40:	4824      	ldr	r0, [pc, #144]	@ (8002ad4 <drawBlockSeven+0x178>)
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = LCD_COLOR_RED;
 8002a54:	88f9      	ldrh	r1, [r7, #6]
 8002a56:	4820      	ldr	r0, [pc, #128]	@ (8002ad8 <drawBlockSeven+0x17c>)
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a68:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(Xpos+1,i-1,LCD_COLOR_RED);
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b298      	uxth	r0, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f87a 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
			LCD_Screen[i-1][Xpos+1] = 1;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	1c59      	adds	r1, r3, #1
 8002a8c:	4811      	ldr	r0, [pc, #68]	@ (8002ad4 <drawBlockSeven+0x178>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos+1] = LCD_COLOR_RED;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1e5a      	subs	r2, r3, #1
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	1c59      	adds	r1, r3, #1
 8002aa6:	480c      	ldr	r0, [pc, #48]	@ (8002ad8 <drawBlockSeven+0x17c>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002ab6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	ddb1      	ble.n	8002a2e <drawBlockSeven+0xd2>
//   Y	    1	1
// Y+1		1
// Y+2
//	   X-1  X  X+1  X+2
	}
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2000030c 	.word	0x2000030c
 8002ad8:	2000018c 	.word	0x2000018c

08002adc <eraseBlockSeven>:

void eraseBlockSeven(uint16_t Xpos, uint16_t Ypos, uint16_t orientation){
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	80bb      	strh	r3, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	807b      	strh	r3, [r7, #2]
	if (orientation == 1 || orientation == 3){
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d002      	beq.n	8002afa <eraseBlockSeven+0x1e>
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d150      	bne.n	8002b9c <eraseBlockSeven+0xc0>
		for (int i = Xpos; i < (Xpos+2); i++){
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e048      	b.n	8002b92 <eraseBlockSeven+0xb6>
			LCD_Erase_Square(i,Ypos-1);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe f8e5 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos-1][i] = 0;
 8002b12:	88bb      	ldrh	r3, [r7, #4]
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	494f      	ldr	r1, [pc, #316]	@ (8002c54 <eraseBlockSeven+0x178>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	2200      	movs	r2, #0
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			Obj_Color[Ypos-1][i] = GameScreenColor;
 8002b2a:	88bb      	ldrh	r3, [r7, #4]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c58 <eraseBlockSeven+0x17c>)
 8002b30:	8818      	ldrh	r0, [r3, #0]
 8002b32:	494a      	ldr	r1, [pc, #296]	@ (8002c5c <eraseBlockSeven+0x180>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	4602      	mov	r2, r0
 8002b42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Erase_Square(i+1,Ypos);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	88ba      	ldrh	r2, [r7, #4]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe f8c2 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[Ypos][i+1] = 0;
 8002b58:	88ba      	ldrh	r2, [r7, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1c59      	adds	r1, r3, #1
 8002b5e:	483d      	ldr	r0, [pc, #244]	@ (8002c54 <eraseBlockSeven+0x178>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[Ypos][i+1] = GameScreenColor;
 8002b70:	88ba      	ldrh	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1c59      	adds	r1, r3, #1
 8002b76:	4b38      	ldr	r3, [pc, #224]	@ (8002c58 <eraseBlockSeven+0x17c>)
 8002b78:	881c      	ldrh	r4, [r3, #0]
 8002b7a:	4838      	ldr	r0, [pc, #224]	@ (8002c5c <eraseBlockSeven+0x180>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	4622      	mov	r2, r4
 8002b88:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Xpos; i < (Xpos+2); i++){
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	3301      	adds	r3, #1
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	ddb1      	ble.n	8002b00 <eraseBlockSeven+0x24>
		}
	}
	if (orientation == 2 || orientation == 4){
 8002b9c:	887b      	ldrh	r3, [r7, #2]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d002      	beq.n	8002ba8 <eraseBlockSeven+0xcc>
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d150      	bne.n	8002c4a <eraseBlockSeven+0x16e>
		for (int i = Ypos; i < (Ypos+2); i++){
 8002ba8:	88bb      	ldrh	r3, [r7, #4]
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	e048      	b.n	8002c40 <eraseBlockSeven+0x164>
			LCD_Erase_Square(Xpos,i);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f890 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i][Xpos] = 0;
 8002bbc:	88f9      	ldrh	r1, [r7, #6]
 8002bbe:	4825      	ldr	r0, [pc, #148]	@ (8002c54 <eraseBlockSeven+0x178>)
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i][Xpos] = GameScreenColor;
 8002bd2:	88f9      	ldrh	r1, [r7, #6]
 8002bd4:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <eraseBlockSeven+0x17c>)
 8002bd6:	881c      	ldrh	r4, [r3, #0]
 8002bd8:	4820      	ldr	r0, [pc, #128]	@ (8002c5c <eraseBlockSeven+0x180>)
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	4622      	mov	r2, r4
 8002be8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			LCD_Erase_Square(Xpos+1,i-1);
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f7fe f86d 	bl	8000cdc <LCD_Erase_Square>
			LCD_Screen[i-1][Xpos+1] = 0;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	1c59      	adds	r1, r3, #1
 8002c0a:	4812      	ldr	r0, [pc, #72]	@ (8002c54 <eraseBlockSeven+0x178>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	2200      	movs	r2, #0
 8002c18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			Obj_Color[i-1][Xpos+1] = GameScreenColor;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1e5a      	subs	r2, r3, #1
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <eraseBlockSeven+0x17c>)
 8002c26:	881c      	ldrh	r4, [r3, #0]
 8002c28:	480c      	ldr	r0, [pc, #48]	@ (8002c5c <eraseBlockSeven+0x180>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	4622      	mov	r2, r4
 8002c36:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (int i = Ypos; i < (Ypos+2); i++){
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	3301      	adds	r3, #1
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	ddb1      	ble.n	8002bae <eraseBlockSeven+0xd2>
		}
	}
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd90      	pop	{r4, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000030c 	.word	0x2000030c
 8002c58:	20000002 	.word	0x20000002
 8002c5c:	2000018c 	.word	0x2000018c

08002c60 <drawBottomBorder>:
				}
			}
		}
}

void drawBottomBorder(){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < 12; i++){
 8002c66:	2300      	movs	r3, #0
 8002c68:	80fb      	strh	r3, [r7, #6]
 8002c6a:	e014      	b.n	8002c96 <drawBottomBorder+0x36>
		LCD_Draw_Square_Fill_Border(i, 15, LCD_COLOR_BLACK);
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	210f      	movs	r1, #15
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd ff80 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		LCD_Screen[15][i] = 1;
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002cac <drawBottomBorder+0x4c>)
 8002c7c:	33b4      	adds	r3, #180	@ 0xb4
 8002c7e:	2101      	movs	r1, #1
 8002c80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Obj_Color[15][i] = LCD_COLOR_BLACK;
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <drawBottomBorder+0x50>)
 8002c88:	33b4      	adds	r3, #180	@ 0xb4
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < 12; i++){
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	3301      	adds	r3, #1
 8002c94:	80fb      	strh	r3, [r7, #6]
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	2b0b      	cmp	r3, #11
 8002c9a:	d9e7      	bls.n	8002c6c <drawBottomBorder+0xc>
	}
	HAL_Delay(1000);
 8002c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ca0:	f002 ffdc 	bl	8005c5c <HAL_Delay>
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000030c 	.word	0x2000030c
 8002cb0:	2000018c 	.word	0x2000018c

08002cb4 <rotateBlock>:

void rotateBlock(){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002cba:	4b57      	ldr	r3, [pc, #348]	@ (8002e18 <rotateBlock+0x164>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	81bb      	strh	r3, [r7, #12]
	uint16_t Xpos = CurrentBlock[1];
 8002cc0:	4b55      	ldr	r3, [pc, #340]	@ (8002e18 <rotateBlock+0x164>)
 8002cc2:	885b      	ldrh	r3, [r3, #2]
 8002cc4:	817b      	strh	r3, [r7, #10]
	uint16_t Ypos = CurrentBlock[2];
 8002cc6:	4b54      	ldr	r3, [pc, #336]	@ (8002e18 <rotateBlock+0x164>)
 8002cc8:	889b      	ldrh	r3, [r3, #4]
 8002cca:	813b      	strh	r3, [r7, #8]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002ccc:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <rotateBlock+0x164>)
 8002cce:	88db      	ldrh	r3, [r3, #6]
 8002cd0:	80fb      	strh	r3, [r7, #6]
	uint16_t NewOrientation;
	if (OrgOrientation < 4){
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d803      	bhi.n	8002ce0 <rotateBlock+0x2c>
		NewOrientation = OrgOrientation + 1;
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	81fb      	strh	r3, [r7, #14]
 8002cde:	e004      	b.n	8002cea <rotateBlock+0x36>
	}
	else if (OrgOrientation >= 4){
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d901      	bls.n	8002cea <rotateBlock+0x36>
		NewOrientation = 1;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	81fb      	strh	r3, [r7, #14]
	}

	if (BlockNum == 1){
 8002cea:	89bb      	ldrh	r3, [r7, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d111      	bne.n	8002d14 <rotateBlock+0x60>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	8939      	ldrh	r1, [r7, #8]
 8002cf4:	897b      	ldrh	r3, [r7, #10]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fb62 	bl	80013c0 <eraseBlockOne>
		drawBlockOne(Xpos, Ypos, NewOrientation);
 8002cfc:	89fa      	ldrh	r2, [r7, #14]
 8002cfe:	8939      	ldrh	r1, [r7, #8]
 8002d00:	897b      	ldrh	r3, [r7, #10]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe faea 	bl	80012dc <drawBlockOne>
		updateCurrentBlock(1, Xpos, Ypos, NewOrientation);
 8002d08:	89fb      	ldrh	r3, [r7, #14]
 8002d0a:	893a      	ldrh	r2, [r7, #8]
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f000 f92c 	bl	8002f6c <updateCurrentBlock>
	}
	if (BlockNum == 2){
 8002d14:	89bb      	ldrh	r3, [r7, #12]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d111      	bne.n	8002d3e <rotateBlock+0x8a>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	8939      	ldrh	r1, [r7, #8]
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fd0d 	bl	8001740 <eraseBlockTwo>
		drawBlockTwo(Xpos, Ypos, NewOrientation);
 8002d26:	89fa      	ldrh	r2, [r7, #14]
 8002d28:	8939      	ldrh	r1, [r7, #8]
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fbbb 	bl	80014a8 <drawBlockTwo>
		updateCurrentBlock(2, Xpos, Ypos, NewOrientation);
 8002d32:	89fb      	ldrh	r3, [r7, #14]
 8002d34:	893a      	ldrh	r2, [r7, #8]
 8002d36:	8979      	ldrh	r1, [r7, #10]
 8002d38:	2002      	movs	r0, #2
 8002d3a:	f000 f917 	bl	8002f6c <updateCurrentBlock>
		}
	if (BlockNum == 3){
 8002d3e:	89bb      	ldrh	r3, [r7, #12]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d111      	bne.n	8002d68 <rotateBlock+0xb4>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	8939      	ldrh	r1, [r7, #8]
 8002d48:	897b      	ldrh	r3, [r7, #10]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe ffb2 	bl	8001cb4 <eraseBlockThree>
		drawBlockThree(Xpos, Ypos, NewOrientation);
 8002d50:	89fa      	ldrh	r2, [r7, #14]
 8002d52:	8939      	ldrh	r1, [r7, #8]
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fe50 	bl	80019fc <drawBlockThree>
		updateCurrentBlock(3, Xpos, Ypos, NewOrientation);
 8002d5c:	89fb      	ldrh	r3, [r7, #14]
 8002d5e:	893a      	ldrh	r2, [r7, #8]
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	2003      	movs	r0, #3
 8002d64:	f000 f902 	bl	8002f6c <updateCurrentBlock>
		}
	if (BlockNum == 4){
 8002d68:	89bb      	ldrh	r3, [r7, #12]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d111      	bne.n	8002d92 <rotateBlock+0xde>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 8002d6e:	88fa      	ldrh	r2, [r7, #6]
 8002d70:	8939      	ldrh	r1, [r7, #8]
 8002d72:	897b      	ldrh	r3, [r7, #10]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f95b 	bl	8002030 <eraseBlockFour>
		drawBlockFour(Xpos, Ypos, NewOrientation);
 8002d7a:	89fa      	ldrh	r2, [r7, #14]
 8002d7c:	8939      	ldrh	r1, [r7, #8]
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f8f5 	bl	8001f70 <drawBlockFour>
		updateCurrentBlock(4, Xpos, Ypos, NewOrientation);
 8002d86:	89fb      	ldrh	r3, [r7, #14]
 8002d88:	893a      	ldrh	r2, [r7, #8]
 8002d8a:	8979      	ldrh	r1, [r7, #10]
 8002d8c:	2004      	movs	r0, #4
 8002d8e:	f000 f8ed 	bl	8002f6c <updateCurrentBlock>
		}
	if (BlockNum == 5){
 8002d92:	89bb      	ldrh	r3, [r7, #12]
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	d111      	bne.n	8002dbc <rotateBlock+0x108>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	8939      	ldrh	r1, [r7, #8]
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa68 	bl	8002274 <eraseBlockFive>
		drawBlockFive(Xpos, Ypos, NewOrientation);
 8002da4:	89fa      	ldrh	r2, [r7, #14]
 8002da6:	8939      	ldrh	r1, [r7, #8]
 8002da8:	897b      	ldrh	r3, [r7, #10]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f9a2 	bl	80020f4 <drawBlockFive>
		updateCurrentBlock(5, Xpos, Ypos, NewOrientation);
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	893a      	ldrh	r2, [r7, #8]
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	2005      	movs	r0, #5
 8002db8:	f000 f8d8 	bl	8002f6c <updateCurrentBlock>
		}
	if (BlockNum == 6){
 8002dbc:	89bb      	ldrh	r3, [r7, #12]
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d111      	bne.n	8002de6 <rotateBlock+0x132>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	8939      	ldrh	r1, [r7, #8]
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fc6d 	bl	80026a8 <eraseBlockSix>
		drawBlockSix(Xpos, Ypos, NewOrientation);
 8002dce:	89fa      	ldrh	r2, [r7, #14]
 8002dd0:	8939      	ldrh	r1, [r7, #8]
 8002dd2:	897b      	ldrh	r3, [r7, #10]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fb0f 	bl	80023f8 <drawBlockSix>
		updateCurrentBlock(6, Xpos, Ypos, NewOrientation);
 8002dda:	89fb      	ldrh	r3, [r7, #14]
 8002ddc:	893a      	ldrh	r2, [r7, #8]
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	2006      	movs	r0, #6
 8002de2:	f000 f8c3 	bl	8002f6c <updateCurrentBlock>
		}
	if (BlockNum == 7){
 8002de6:	89bb      	ldrh	r3, [r7, #12]
 8002de8:	2b07      	cmp	r3, #7
 8002dea:	d111      	bne.n	8002e10 <rotateBlock+0x15c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	8939      	ldrh	r1, [r7, #8]
 8002df0:	897b      	ldrh	r3, [r7, #10]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe72 	bl	8002adc <eraseBlockSeven>
		drawBlockSeven(Xpos, Ypos, NewOrientation);
 8002df8:	89fa      	ldrh	r2, [r7, #14]
 8002dfa:	8939      	ldrh	r1, [r7, #8]
 8002dfc:	897b      	ldrh	r3, [r7, #10]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fdac 	bl	800295c <drawBlockSeven>
		updateCurrentBlock(7, Xpos, Ypos, NewOrientation);
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	893a      	ldrh	r2, [r7, #8]
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	2007      	movs	r0, #7
 8002e0c:	f000 f8ae 	bl	8002f6c <updateCurrentBlock>
		}
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000063c 	.word	0x2000063c

08002e1c <drawCurrentBlock>:
	int full = isFull();
	CurrentBlock[3] = OrgOrientation;
	return full;
}

void drawCurrentBlock(){
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002e22:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <drawCurrentBlock+0xa4>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8002e28:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <drawCurrentBlock+0xa4>)
 8002e2a:	885b      	ldrh	r3, [r3, #2]
 8002e2c:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002e2e:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <drawCurrentBlock+0xa4>)
 8002e30:	889b      	ldrh	r3, [r3, #4]
 8002e32:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002e34:	4b22      	ldr	r3, [pc, #136]	@ (8002ec0 <drawCurrentBlock+0xa4>)
 8002e36:	88db      	ldrh	r3, [r3, #6]
 8002e38:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <drawCurrentBlock+0x30>
		drawBlockOne(Xpos, Ypos, OrgOrientation);
 8002e40:	883a      	ldrh	r2, [r7, #0]
 8002e42:	8879      	ldrh	r1, [r7, #2]
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fa48 	bl	80012dc <drawBlockOne>
	}
	if (BlockNum == 2){
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d105      	bne.n	8002e5e <drawCurrentBlock+0x42>
		drawBlockTwo(Xpos, Ypos, OrgOrientation);
 8002e52:	883a      	ldrh	r2, [r7, #0]
 8002e54:	8879      	ldrh	r1, [r7, #2]
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fb25 	bl	80014a8 <drawBlockTwo>
	}
	if (BlockNum == 3){
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d105      	bne.n	8002e70 <drawCurrentBlock+0x54>
		drawBlockThree(Xpos, Ypos, OrgOrientation);
 8002e64:	883a      	ldrh	r2, [r7, #0]
 8002e66:	8879      	ldrh	r1, [r7, #2]
 8002e68:	88bb      	ldrh	r3, [r7, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fdc6 	bl	80019fc <drawBlockThree>
	}
	if (BlockNum == 4){
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d105      	bne.n	8002e82 <drawCurrentBlock+0x66>
		drawBlockFour(Xpos, Ypos, OrgOrientation);
 8002e76:	883a      	ldrh	r2, [r7, #0]
 8002e78:	8879      	ldrh	r1, [r7, #2]
 8002e7a:	88bb      	ldrh	r3, [r7, #4]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f877 	bl	8001f70 <drawBlockFour>
	}
	if (BlockNum == 5){
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d105      	bne.n	8002e94 <drawCurrentBlock+0x78>
		drawBlockFive(Xpos, Ypos, OrgOrientation);
 8002e88:	883a      	ldrh	r2, [r7, #0]
 8002e8a:	8879      	ldrh	r1, [r7, #2]
 8002e8c:	88bb      	ldrh	r3, [r7, #4]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f930 	bl	80020f4 <drawBlockFive>
	}
	if (BlockNum == 6){
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d105      	bne.n	8002ea6 <drawCurrentBlock+0x8a>
		drawBlockSix(Xpos, Ypos, OrgOrientation);
 8002e9a:	883a      	ldrh	r2, [r7, #0]
 8002e9c:	8879      	ldrh	r1, [r7, #2]
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff faa9 	bl	80023f8 <drawBlockSix>
	}
	if (BlockNum == 7){
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	2b07      	cmp	r3, #7
 8002eaa:	d105      	bne.n	8002eb8 <drawCurrentBlock+0x9c>
		drawBlockSeven(Xpos, Ypos, OrgOrientation);
 8002eac:	883a      	ldrh	r2, [r7, #0]
 8002eae:	8879      	ldrh	r1, [r7, #2]
 8002eb0:	88bb      	ldrh	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fd52 	bl	800295c <drawBlockSeven>
	}
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000063c 	.word	0x2000063c

08002ec4 <eraseCurrentBlock>:

void eraseCurrentBlock(){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8002eca:	4b27      	ldr	r3, [pc, #156]	@ (8002f68 <eraseCurrentBlock+0xa4>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8002ed0:	4b25      	ldr	r3, [pc, #148]	@ (8002f68 <eraseCurrentBlock+0xa4>)
 8002ed2:	885b      	ldrh	r3, [r3, #2]
 8002ed4:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8002ed6:	4b24      	ldr	r3, [pc, #144]	@ (8002f68 <eraseCurrentBlock+0xa4>)
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	807b      	strh	r3, [r7, #2]
	uint16_t OrgOrientation = CurrentBlock[3];
 8002edc:	4b22      	ldr	r3, [pc, #136]	@ (8002f68 <eraseCurrentBlock+0xa4>)
 8002ede:	88db      	ldrh	r3, [r3, #6]
 8002ee0:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <eraseCurrentBlock+0x30>
		eraseBlockOne(Xpos, Ypos, OrgOrientation);
 8002ee8:	883a      	ldrh	r2, [r7, #0]
 8002eea:	8879      	ldrh	r1, [r7, #2]
 8002eec:	88bb      	ldrh	r3, [r7, #4]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fe fa66 	bl	80013c0 <eraseBlockOne>
	}
	if (BlockNum == 2){
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d105      	bne.n	8002f06 <eraseCurrentBlock+0x42>
		eraseBlockTwo(Xpos, Ypos, OrgOrientation);
 8002efa:	883a      	ldrh	r2, [r7, #0]
 8002efc:	8879      	ldrh	r1, [r7, #2]
 8002efe:	88bb      	ldrh	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fc1d 	bl	8001740 <eraseBlockTwo>
	}
	if (BlockNum == 3){
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d105      	bne.n	8002f18 <eraseCurrentBlock+0x54>
		eraseBlockThree(Xpos, Ypos, OrgOrientation);
 8002f0c:	883a      	ldrh	r2, [r7, #0]
 8002f0e:	8879      	ldrh	r1, [r7, #2]
 8002f10:	88bb      	ldrh	r3, [r7, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fece 	bl	8001cb4 <eraseBlockThree>
	}
	if (BlockNum == 4){
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d105      	bne.n	8002f2a <eraseCurrentBlock+0x66>
		eraseBlockFour(Xpos, Ypos, OrgOrientation);
 8002f1e:	883a      	ldrh	r2, [r7, #0]
 8002f20:	8879      	ldrh	r1, [r7, #2]
 8002f22:	88bb      	ldrh	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f883 	bl	8002030 <eraseBlockFour>
	}
	if (BlockNum == 5){
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d105      	bne.n	8002f3c <eraseCurrentBlock+0x78>
		eraseBlockFive(Xpos, Ypos, OrgOrientation);
 8002f30:	883a      	ldrh	r2, [r7, #0]
 8002f32:	8879      	ldrh	r1, [r7, #2]
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff f99c 	bl	8002274 <eraseBlockFive>
	}
	if (BlockNum == 6){
 8002f3c:	88fb      	ldrh	r3, [r7, #6]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d105      	bne.n	8002f4e <eraseCurrentBlock+0x8a>
		eraseBlockSix(Xpos, Ypos, OrgOrientation);
 8002f42:	883a      	ldrh	r2, [r7, #0]
 8002f44:	8879      	ldrh	r1, [r7, #2]
 8002f46:	88bb      	ldrh	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fbad 	bl	80026a8 <eraseBlockSix>
	}
	if (BlockNum == 7){
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	2b07      	cmp	r3, #7
 8002f52:	d105      	bne.n	8002f60 <eraseCurrentBlock+0x9c>
		eraseBlockSeven(Xpos, Ypos, OrgOrientation);
 8002f54:	883a      	ldrh	r2, [r7, #0]
 8002f56:	8879      	ldrh	r1, [r7, #2]
 8002f58:	88bb      	ldrh	r3, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fdbe 	bl	8002adc <eraseBlockSeven>
	}
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000063c 	.word	0x2000063c

08002f6c <updateCurrentBlock>:

void updateCurrentBlock(uint16_t BlockNum, uint16_t Xpos, uint16_t Ypos, uint16_t Orientation){
 8002f6c:	b490      	push	{r4, r7}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4604      	mov	r4, r0
 8002f74:	4608      	mov	r0, r1
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	80fb      	strh	r3, [r7, #6]
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80bb      	strh	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	807b      	strh	r3, [r7, #2]
 8002f86:	4613      	mov	r3, r2
 8002f88:	803b      	strh	r3, [r7, #0]
	CurrentBlock[0] = BlockNum;
 8002f8a:	4a08      	ldr	r2, [pc, #32]	@ (8002fac <updateCurrentBlock+0x40>)
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	8013      	strh	r3, [r2, #0]
	CurrentBlock[1] = Xpos;
 8002f90:	4a06      	ldr	r2, [pc, #24]	@ (8002fac <updateCurrentBlock+0x40>)
 8002f92:	88bb      	ldrh	r3, [r7, #4]
 8002f94:	8053      	strh	r3, [r2, #2]
	CurrentBlock[2] = Ypos;
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <updateCurrentBlock+0x40>)
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	8093      	strh	r3, [r2, #4]
	CurrentBlock[3] = Orientation;
 8002f9c:	4a03      	ldr	r2, [pc, #12]	@ (8002fac <updateCurrentBlock+0x40>)
 8002f9e:	883b      	ldrh	r3, [r7, #0]
 8002fa0:	80d3      	strh	r3, [r2, #6]
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc90      	pop	{r4, r7}
 8002faa:	4770      	bx	lr
 8002fac:	2000063c 	.word	0x2000063c

08002fb0 <getCurrentYpos>:

uint16_t getCurrentYpos(){
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
	return CurrentBlock[2];
 8002fb4:	4b03      	ldr	r3, [pc, #12]	@ (8002fc4 <getCurrentYpos+0x14>)
 8002fb6:	889b      	ldrh	r3, [r3, #4]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2000063c 	.word	0x2000063c

08002fc8 <updateYpos>:

uint16_t updateYpos(){
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
	CurrentBlock[2] += 1;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <updateYpos+0x20>)
 8002fce:	889b      	ldrh	r3, [r3, #4]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	4b04      	ldr	r3, [pc, #16]	@ (8002fe8 <updateYpos+0x20>)
 8002fd6:	809a      	strh	r2, [r3, #4]
	return CurrentBlock[2];
 8002fd8:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <updateYpos+0x20>)
 8002fda:	889b      	ldrh	r3, [r3, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	2000063c 	.word	0x2000063c

08002fec <updateXpos>:

void updateXpos(int dir){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	if (dir == 1){
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <updateXpos+0x1a>
		CurrentBlock[1] -= 1;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <updateXpos+0x38>)
 8002ffc:	885b      	ldrh	r3, [r3, #2]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <updateXpos+0x38>)
 8003004:	805a      	strh	r2, [r3, #2]
	}
	if (dir == 2){
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d105      	bne.n	8003018 <updateXpos+0x2c>
		CurrentBlock[1] += 1;
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <updateXpos+0x38>)
 800300e:	885b      	ldrh	r3, [r3, #2]
 8003010:	3301      	adds	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b03      	ldr	r3, [pc, #12]	@ (8003024 <updateXpos+0x38>)
 8003016:	805a      	strh	r2, [r3, #2]
	}
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	2000063c 	.word	0x2000063c

08003028 <isLeftFull>:

int isLeftFull(){
 8003028:	b480      	push	{r7}
 800302a:	b08d      	sub	sp, #52	@ 0x34
 800302c:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 800302e:	4b9c      	ldr	r3, [pc, #624]	@ (80032a0 <isLeftFull+0x278>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003034:	4b9a      	ldr	r3, [pc, #616]	@ (80032a0 <isLeftFull+0x278>)
 8003036:	885b      	ldrh	r3, [r3, #2]
 8003038:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 800303a:	4b99      	ldr	r3, [pc, #612]	@ (80032a0 <isLeftFull+0x278>)
 800303c:	889b      	ldrh	r3, [r3, #4]
 800303e:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8003040:	4b97      	ldr	r3, [pc, #604]	@ (80032a0 <isLeftFull+0x278>)
 8003042:	88db      	ldrh	r3, [r3, #6]
 8003044:	803b      	strh	r3, [r7, #0]

	if (Xpos-1 >= 0){
 8003046:	88bb      	ldrh	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 82b8 	beq.w	80035be <isLeftFull+0x596>
		if (BlockNum == 1){
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d135      	bne.n	80030c0 <isLeftFull+0x98>
			if (Orientation == 1 || Orientation == 3){
 8003054:	883b      	ldrh	r3, [r7, #0]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d002      	beq.n	8003060 <isLeftFull+0x38>
 800305a:	883b      	ldrh	r3, [r7, #0]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d10e      	bne.n	800307e <isLeftFull+0x56>
				if (LCD_Screen[Ypos][Xpos-1] == 1){
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	88bb      	ldrh	r3, [r7, #4]
 8003064:	1e59      	subs	r1, r3, #1
 8003066:	488f      	ldr	r0, [pc, #572]	@ (80032a4 <isLeftFull+0x27c>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <isLeftFull+0x56>
					return 0;
 800307a:	2300      	movs	r3, #0
 800307c:	e2a0      	b.n	80035c0 <isLeftFull+0x598>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 800307e:	883b      	ldrh	r3, [r7, #0]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d002      	beq.n	800308a <isLeftFull+0x62>
 8003084:	883b      	ldrh	r3, [r7, #0]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d11a      	bne.n	80030c0 <isLeftFull+0x98>
				for (int i = Ypos-1; i < Ypos+3; i++){
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	3b01      	subs	r3, #1
 800308e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003090:	e011      	b.n	80030b6 <isLeftFull+0x8e>
					if (LCD_Screen[i][Xpos-1] == 1){
 8003092:	88bb      	ldrh	r3, [r7, #4]
 8003094:	1e59      	subs	r1, r3, #1
 8003096:	4883      	ldr	r0, [pc, #524]	@ (80032a4 <isLeftFull+0x27c>)
 8003098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <isLeftFull+0x88>
						return 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e287      	b.n	80035c0 <isLeftFull+0x598>
				for (int i = Ypos-1; i < Ypos+3; i++){
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b2:	3301      	adds	r3, #1
 80030b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	3302      	adds	r3, #2
 80030ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030bc:	429a      	cmp	r2, r3
 80030be:	dde8      	ble.n	8003092 <isLeftFull+0x6a>
					}
				}
			}
		}

	if (BlockNum == 2){
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d15a      	bne.n	800317c <isLeftFull+0x154>
		if (Orientation == 1){
 80030c6:	883b      	ldrh	r3, [r7, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d119      	bne.n	8003100 <isLeftFull+0xd8>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030d2:	e011      	b.n	80030f8 <isLeftFull+0xd0>
				if (LCD_Screen[i][Xpos-1] == 1){
 80030d4:	88bb      	ldrh	r3, [r7, #4]
 80030d6:	1e59      	subs	r1, r3, #1
 80030d8:	4872      	ldr	r0, [pc, #456]	@ (80032a4 <isLeftFull+0x27c>)
 80030da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <isLeftFull+0xca>
					return 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e266      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	3301      	adds	r3, #1
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030fc:	429a      	cmp	r2, r3
 80030fe:	dde9      	ble.n	80030d4 <isLeftFull+0xac>
				}
			}
		}
		if (Orientation == 2){
 8003100:	883b      	ldrh	r3, [r7, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d11a      	bne.n	800313c <isLeftFull+0x114>
			for (int i = Ypos-1; i < Ypos+2; i++){
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	3b01      	subs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
 800310c:	e011      	b.n	8003132 <isLeftFull+0x10a>
				if (LCD_Screen[i][Xpos-1] == 1){
 800310e:	88bb      	ldrh	r3, [r7, #4]
 8003110:	1e59      	subs	r1, r3, #1
 8003112:	4864      	ldr	r0, [pc, #400]	@ (80032a4 <isLeftFull+0x27c>)
 8003114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <isLeftFull+0x104>
					return 0;
 8003128:	2300      	movs	r3, #0
 800312a:	e249      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos-1; i < Ypos+2; i++){
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	3301      	adds	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	3301      	adds	r3, #1
 8003136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003138:	429a      	cmp	r2, r3
 800313a:	dde8      	ble.n	800310e <isLeftFull+0xe6>
				}
			}
		}
		if (Orientation == 3){
 800313c:	883b      	ldrh	r3, [r7, #0]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d11c      	bne.n	800317c <isLeftFull+0x154>
			if (LCD_Screen[Ypos][Xpos-1] == 1 || LCD_Screen[Ypos+1][Xpos+1]){
 8003142:	887a      	ldrh	r2, [r7, #2]
 8003144:	88bb      	ldrh	r3, [r7, #4]
 8003146:	1e59      	subs	r1, r3, #1
 8003148:	4856      	ldr	r0, [pc, #344]	@ (80032a4 <isLeftFull+0x27c>)
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d00d      	beq.n	8003178 <isLeftFull+0x150>
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	88bb      	ldrh	r3, [r7, #4]
 8003162:	1c59      	adds	r1, r3, #1
 8003164:	484f      	ldr	r0, [pc, #316]	@ (80032a4 <isLeftFull+0x27c>)
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <isLeftFull+0x154>
					return 0;
 8003178:	2300      	movs	r3, #0
 800317a:	e221      	b.n	80035c0 <isLeftFull+0x598>
				}
			}
		}
		if (Orientation == 4){
 800317c:	883b      	ldrh	r3, [r7, #0]
 800317e:	2b04      	cmp	r3, #4
 8003180:	d128      	bne.n	80031d4 <isLeftFull+0x1ac>
			for (int i = Ypos-1; i < Ypos+1; i++){
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	3b01      	subs	r3, #1
 8003186:	623b      	str	r3, [r7, #32]
 8003188:	e010      	b.n	80031ac <isLeftFull+0x184>
				if (LCD_Screen[i][Xpos] == 1){
 800318a:	88b9      	ldrh	r1, [r7, #4]
 800318c:	4845      	ldr	r0, [pc, #276]	@ (80032a4 <isLeftFull+0x27c>)
 800318e:	6a3a      	ldr	r2, [r7, #32]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <isLeftFull+0x17e>
					return 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e20c      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	3301      	adds	r3, #1
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	ddea      	ble.n	800318a <isLeftFull+0x162>
				}
			}
			if (LCD_Screen[Ypos+1][Xpos-1] == 1){
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	88bb      	ldrh	r3, [r7, #4]
 80031ba:	1e59      	subs	r1, r3, #1
 80031bc:	4839      	ldr	r0, [pc, #228]	@ (80032a4 <isLeftFull+0x27c>)
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <isLeftFull+0x1ac>
				return 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e1f5      	b.n	80035c0 <isLeftFull+0x598>
			}
	}

	if (BlockNum == 3){
 80031d4:	88fb      	ldrh	r3, [r7, #6]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f040 808c 	bne.w	80032f4 <isLeftFull+0x2cc>
		if (Orientation == 1){
 80031dc:	883b      	ldrh	r3, [r7, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d11e      	bne.n	8003220 <isLeftFull+0x1f8>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	88bb      	ldrh	r3, [r7, #4]
 80031e6:	1e59      	subs	r1, r3, #1
 80031e8:	482e      	ldr	r0, [pc, #184]	@ (80032a4 <isLeftFull+0x27c>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <isLeftFull+0x1d8>
				return 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e1df      	b.n	80035c0 <isLeftFull+0x598>
			}
			if (LCD_Screen[Ypos-1][Xpos+1] == 1){
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	1e5a      	subs	r2, r3, #1
 8003204:	88bb      	ldrh	r3, [r7, #4]
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	4826      	ldr	r0, [pc, #152]	@ (80032a4 <isLeftFull+0x27c>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <isLeftFull+0x1f8>
				return 0;
 800321c:	2300      	movs	r3, #0
 800321e:	e1cf      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
		if (Orientation == 2){
 8003220:	883b      	ldrh	r3, [r7, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d119      	bne.n	800325a <isLeftFull+0x232>
			for (int i = Ypos-1; i < Ypos+1; i++){
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	3b01      	subs	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	e011      	b.n	8003252 <isLeftFull+0x22a>
				if (LCD_Screen[i][Xpos-1] == 1){
 800322e:	88bb      	ldrh	r3, [r7, #4]
 8003230:	1e59      	subs	r1, r3, #1
 8003232:	481c      	ldr	r0, [pc, #112]	@ (80032a4 <isLeftFull+0x27c>)
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <isLeftFull+0x224>
					return 0;
 8003248:	2300      	movs	r3, #0
 800324a:	e1b9      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos-1; i < Ypos+1; i++){
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	429a      	cmp	r2, r3
 8003258:	dde9      	ble.n	800322e <isLeftFull+0x206>
				}
			}
		}
		if (Orientation == 3){
 800325a:	883b      	ldrh	r3, [r7, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d119      	bne.n	8003294 <isLeftFull+0x26c>
			for (int i = Ypos; i < Ypos+2; i++){
 8003260:	887b      	ldrh	r3, [r7, #2]
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e011      	b.n	800328a <isLeftFull+0x262>
				if (LCD_Screen[i][Xpos-1]){
 8003266:	88bb      	ldrh	r3, [r7, #4]
 8003268:	1e59      	subs	r1, r3, #1
 800326a:	480e      	ldr	r0, [pc, #56]	@ (80032a4 <isLeftFull+0x27c>)
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <isLeftFull+0x25c>
					return 0;
 8003280:	2300      	movs	r3, #0
 8003282:	e19d      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos; i < Ypos+2; i++){
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	3301      	adds	r3, #1
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	3301      	adds	r3, #1
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	429a      	cmp	r2, r3
 8003292:	dde8      	ble.n	8003266 <isLeftFull+0x23e>
				}
			}
		}
		if (Orientation == 4){
 8003294:	883b      	ldrh	r3, [r7, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d12c      	bne.n	80032f4 <isLeftFull+0x2cc>
			for (int i = Ypos; i < Ypos+2; i++){
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e014      	b.n	80032ca <isLeftFull+0x2a2>
 80032a0:	2000063c 	.word	0x2000063c
 80032a4:	2000030c 	.word	0x2000030c
				if (LCD_Screen[i][Xpos]){
 80032a8:	88b9      	ldrh	r1, [r7, #4]
 80032aa:	48a5      	ldr	r0, [pc, #660]	@ (8003540 <isLeftFull+0x518>)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <isLeftFull+0x29c>
					return 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e17d      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos; i < Ypos+2; i++){
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3301      	adds	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	887b      	ldrh	r3, [r7, #2]
 80032cc:	3301      	adds	r3, #1
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dde9      	ble.n	80032a8 <isLeftFull+0x280>
				}
			}
			if (LCD_Screen[Ypos-1][Xpos-1] == 1){
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	88bb      	ldrh	r3, [r7, #4]
 80032da:	1e59      	subs	r1, r3, #1
 80032dc:	4898      	ldr	r0, [pc, #608]	@ (8003540 <isLeftFull+0x518>)
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <isLeftFull+0x2cc>
				return 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e165      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
	}

	if (BlockNum == 4){
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d11e      	bne.n	8003338 <isLeftFull+0x310>
		if (LCD_Screen[Ypos][Xpos-1] == 1){
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	88bb      	ldrh	r3, [r7, #4]
 80032fe:	1e59      	subs	r1, r3, #1
 8003300:	488f      	ldr	r0, [pc, #572]	@ (8003540 <isLeftFull+0x518>)
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <isLeftFull+0x2f0>
			return 0;
 8003314:	2300      	movs	r3, #0
 8003316:	e153      	b.n	80035c0 <isLeftFull+0x598>
		}
		if (LCD_Screen[Ypos-1][Xpos-1] == 1){
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	1e5a      	subs	r2, r3, #1
 800331c:	88bb      	ldrh	r3, [r7, #4]
 800331e:	1e59      	subs	r1, r3, #1
 8003320:	4887      	ldr	r0, [pc, #540]	@ (8003540 <isLeftFull+0x518>)
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <isLeftFull+0x310>
			return 0;
 8003334:	2300      	movs	r3, #0
 8003336:	e143      	b.n	80035c0 <isLeftFull+0x598>
		}
	}

	if (BlockNum == 5){
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d152      	bne.n	80033e4 <isLeftFull+0x3bc>
		if (Orientation == 1 || Orientation == 3){
 800333e:	883b      	ldrh	r3, [r7, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <isLeftFull+0x322>
 8003344:	883b      	ldrh	r3, [r7, #0]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d11d      	bne.n	8003386 <isLeftFull+0x35e>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	88bb      	ldrh	r3, [r7, #4]
 800334e:	1e59      	subs	r1, r3, #1
 8003350:	487b      	ldr	r0, [pc, #492]	@ (8003540 <isLeftFull+0x518>)
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <isLeftFull+0x340>
				return 0;
 8003364:	2300      	movs	r3, #0
 8003366:	e12b      	b.n	80035c0 <isLeftFull+0x598>
			}
			if (LCD_Screen[Ypos-1][Xpos]){
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	88b9      	ldrh	r1, [r7, #4]
 800336e:	4874      	ldr	r0, [pc, #464]	@ (8003540 <isLeftFull+0x518>)
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <isLeftFull+0x35e>
				return 0;
 8003382:	2300      	movs	r3, #0
 8003384:	e11c      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8003386:	883b      	ldrh	r3, [r7, #0]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d002      	beq.n	8003392 <isLeftFull+0x36a>
 800338c:	883b      	ldrh	r3, [r7, #0]
 800338e:	2b04      	cmp	r3, #4
 8003390:	d128      	bne.n	80033e4 <isLeftFull+0x3bc>
			for (int i = Ypos-1; i < Ypos+1; i++){
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	3b01      	subs	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	e011      	b.n	80033be <isLeftFull+0x396>
				if (LCD_Screen[i][Xpos-1] == 1){
 800339a:	88bb      	ldrh	r3, [r7, #4]
 800339c:	1e59      	subs	r1, r3, #1
 800339e:	4868      	ldr	r0, [pc, #416]	@ (8003540 <isLeftFull+0x518>)
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <isLeftFull+0x390>
					return 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e103      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos-1; i < Ypos+1; i++){
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3301      	adds	r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	dde9      	ble.n	800339a <isLeftFull+0x372>
				}
			}
			if (LCD_Screen[Ypos+1][Xpos] == 1){
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	88b9      	ldrh	r1, [r7, #4]
 80033cc:	485c      	ldr	r0, [pc, #368]	@ (8003540 <isLeftFull+0x518>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <isLeftFull+0x3bc>
				return 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e0ed      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
	}

	if (BlockNum == 6){
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	f040 8090 	bne.w	800350c <isLeftFull+0x4e4>
		if (Orientation == 1){
 80033ec:	883b      	ldrh	r3, [r7, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d11d      	bne.n	800342e <isLeftFull+0x406>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	88bb      	ldrh	r3, [r7, #4]
 80033f6:	1e59      	subs	r1, r3, #1
 80033f8:	4851      	ldr	r0, [pc, #324]	@ (8003540 <isLeftFull+0x518>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <isLeftFull+0x3e8>
				return 0;
 800340c:	2300      	movs	r3, #0
 800340e:	e0d7      	b.n	80035c0 <isLeftFull+0x598>
			}
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	88b9      	ldrh	r1, [r7, #4]
 8003416:	484a      	ldr	r0, [pc, #296]	@ (8003540 <isLeftFull+0x518>)
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <isLeftFull+0x406>
				return 0;
 800342a:	2300      	movs	r3, #0
 800342c:	e0c8      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
		if (Orientation == 2){
 800342e:	883b      	ldrh	r3, [r7, #0]
 8003430:	2b02      	cmp	r3, #2
 8003432:	d11a      	bne.n	800346a <isLeftFull+0x442>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	3b01      	subs	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	e011      	b.n	8003460 <isLeftFull+0x438>
				if (LCD_Screen[i][Xpos-1] == 1){
 800343c:	88bb      	ldrh	r3, [r7, #4]
 800343e:	1e59      	subs	r1, r3, #1
 8003440:	483f      	ldr	r0, [pc, #252]	@ (8003540 <isLeftFull+0x518>)
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <isLeftFull+0x432>
					return 0;
 8003456:	2300      	movs	r3, #0
 8003458:	e0b2      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos-1; i < (Ypos+2); i++){
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3301      	adds	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	3301      	adds	r3, #1
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	429a      	cmp	r2, r3
 8003468:	dde8      	ble.n	800343c <isLeftFull+0x414>
				}
			}
		}
		if (Orientation == 3){
 800346a:	883b      	ldrh	r3, [r7, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d11d      	bne.n	80034ac <isLeftFull+0x484>
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 8003470:	887a      	ldrh	r2, [r7, #2]
 8003472:	88bb      	ldrh	r3, [r7, #4]
 8003474:	1e59      	subs	r1, r3, #1
 8003476:	4832      	ldr	r0, [pc, #200]	@ (8003540 <isLeftFull+0x518>)
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <isLeftFull+0x466>
				return 0;
 800348a:	2300      	movs	r3, #0
 800348c:	e098      	b.n	80035c0 <isLeftFull+0x598>
			}
			if (LCD_Screen[Ypos+1][Xpos] == 1){
 800348e:	887b      	ldrh	r3, [r7, #2]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	88b9      	ldrh	r1, [r7, #4]
 8003494:	482a      	ldr	r0, [pc, #168]	@ (8003540 <isLeftFull+0x518>)
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <isLeftFull+0x484>
				return 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e089      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
		if (Orientation == 4){
 80034ac:	883b      	ldrh	r3, [r7, #0]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d12c      	bne.n	800350c <isLeftFull+0x4e4>
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	88b9      	ldrh	r1, [r7, #4]
 80034b8:	4821      	ldr	r0, [pc, #132]	@ (8003540 <isLeftFull+0x518>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <isLeftFull+0x4a8>
				return 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e077      	b.n	80035c0 <isLeftFull+0x598>
			}
			if (LCD_Screen[Ypos][Xpos-1] == 1){
 80034d0:	887a      	ldrh	r2, [r7, #2]
 80034d2:	88bb      	ldrh	r3, [r7, #4]
 80034d4:	1e59      	subs	r1, r3, #1
 80034d6:	481a      	ldr	r0, [pc, #104]	@ (8003540 <isLeftFull+0x518>)
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <isLeftFull+0x4c6>
				return 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e068      	b.n	80035c0 <isLeftFull+0x598>
			}
			if (LCD_Screen[Ypos+1][Xpos] == 1){
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	88b9      	ldrh	r1, [r7, #4]
 80034f4:	4812      	ldr	r0, [pc, #72]	@ (8003540 <isLeftFull+0x518>)
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <isLeftFull+0x4e4>
				return 0;
 8003508:	2300      	movs	r3, #0
 800350a:	e059      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
		}

	if (BlockNum == 7){
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	2b07      	cmp	r3, #7
 8003510:	d155      	bne.n	80035be <isLeftFull+0x596>
		if (Orientation == 1 || Orientation == 3){
 8003512:	883b      	ldrh	r3, [r7, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d002      	beq.n	800351e <isLeftFull+0x4f6>
 8003518:	883b      	ldrh	r3, [r7, #0]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d120      	bne.n	8003560 <isLeftFull+0x538>
			if (LCD_Screen[Ypos-1][Xpos-1] == 1){
 800351e:	887b      	ldrh	r3, [r7, #2]
 8003520:	1e5a      	subs	r2, r3, #1
 8003522:	88bb      	ldrh	r3, [r7, #4]
 8003524:	1e59      	subs	r1, r3, #1
 8003526:	4806      	ldr	r0, [pc, #24]	@ (8003540 <isLeftFull+0x518>)
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d104      	bne.n	8003544 <isLeftFull+0x51c>
				return 0;
 800353a:	2300      	movs	r3, #0
 800353c:	e040      	b.n	80035c0 <isLeftFull+0x598>
 800353e:	bf00      	nop
 8003540:	2000030c 	.word	0x2000030c
			}
			if (LCD_Screen[Ypos][Xpos] == 1){
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	88b9      	ldrh	r1, [r7, #4]
 8003548:	4820      	ldr	r0, [pc, #128]	@ (80035cc <isLeftFull+0x5a4>)
 800354a:	4613      	mov	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <isLeftFull+0x538>
				return 0;
 800355c:	2300      	movs	r3, #0
 800355e:	e02f      	b.n	80035c0 <isLeftFull+0x598>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8003560:	883b      	ldrh	r3, [r7, #0]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d002      	beq.n	800356c <isLeftFull+0x544>
 8003566:	883b      	ldrh	r3, [r7, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d128      	bne.n	80035be <isLeftFull+0x596>
			for (int i = Ypos; i < Ypos+2; i++){
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	e011      	b.n	8003596 <isLeftFull+0x56e>
				if (LCD_Screen[i][Xpos-1] == 1){
 8003572:	88bb      	ldrh	r3, [r7, #4]
 8003574:	1e59      	subs	r1, r3, #1
 8003576:	4815      	ldr	r0, [pc, #84]	@ (80035cc <isLeftFull+0x5a4>)
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <isLeftFull+0x568>
					return 0;
 800358c:	2300      	movs	r3, #0
 800358e:	e017      	b.n	80035c0 <isLeftFull+0x598>
			for (int i = Ypos; i < Ypos+2; i++){
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3301      	adds	r3, #1
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	3301      	adds	r3, #1
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	dde8      	ble.n	8003572 <isLeftFull+0x54a>
				}
			}
			if (LCD_Screen[Ypos-1][Xpos] == 1){
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	88b9      	ldrh	r1, [r7, #4]
 80035a6:	4809      	ldr	r0, [pc, #36]	@ (80035cc <isLeftFull+0x5a4>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <isLeftFull+0x596>
				return 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e000      	b.n	80035c0 <isLeftFull+0x598>
			}
	}
	}
	}
	return 1;
 80035be:	2301      	movs	r3, #1

}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3734      	adds	r7, #52	@ 0x34
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	2000030c 	.word	0x2000030c

080035d0 <canMoveLeft>:

int canMoveLeft(){
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
//	uint16_t BlockNum = CurrentBlock[0];
	uint16_t Xpos = CurrentBlock[1];
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <canMoveLeft+0x30>)
 80035d8:	885b      	ldrh	r3, [r3, #2]
 80035da:	80fb      	strh	r3, [r7, #6]
//		if (Xpos > 0){
//			return 1;
//		}
//	}

	if (Xpos > 0){
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <canMoveLeft+0x24>
		if (isLeftFull() == 1){
 80035e2:	f7ff fd21 	bl	8003028 <isLeftFull>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <canMoveLeft+0x20>
			return 1;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e002      	b.n	80035f6 <canMoveLeft+0x26>
		}
		else return 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <canMoveLeft+0x26>
	}
	return 0;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000063c 	.word	0x2000063c

08003604 <isRightFull>:

int isRightFull(){
 8003604:	b480      	push	{r7}
 8003606:	b08b      	sub	sp, #44	@ 0x2c
 8003608:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 800360a:	4b9e      	ldr	r3, [pc, #632]	@ (8003884 <isRightFull+0x280>)
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003610:	4b9c      	ldr	r3, [pc, #624]	@ (8003884 <isRightFull+0x280>)
 8003612:	885b      	ldrh	r3, [r3, #2]
 8003614:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8003616:	4b9b      	ldr	r3, [pc, #620]	@ (8003884 <isRightFull+0x280>)
 8003618:	889b      	ldrh	r3, [r3, #4]
 800361a:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 800361c:	4b99      	ldr	r3, [pc, #612]	@ (8003884 <isRightFull+0x280>)
 800361e:	88db      	ldrh	r3, [r3, #6]
 8003620:	803b      	strh	r3, [r7, #0]

//	if (Xpos+1 <= 11){
		if (BlockNum == 1){
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d135      	bne.n	8003694 <isRightFull+0x90>
			if (Orientation == 1 || Orientation == 3){
 8003628:	883b      	ldrh	r3, [r7, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <isRightFull+0x30>
 800362e:	883b      	ldrh	r3, [r7, #0]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d10e      	bne.n	8003652 <isRightFull+0x4e>
				if (LCD_Screen[Ypos][Xpos+4] == 1){
 8003634:	887a      	ldrh	r2, [r7, #2]
 8003636:	88bb      	ldrh	r3, [r7, #4]
 8003638:	1d19      	adds	r1, r3, #4
 800363a:	4893      	ldr	r0, [pc, #588]	@ (8003888 <isRightFull+0x284>)
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <isRightFull+0x4e>
					return 0;
 800364e:	2300      	movs	r3, #0
 8003650:	e2ad      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003652:	883b      	ldrh	r3, [r7, #0]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d002      	beq.n	800365e <isRightFull+0x5a>
 8003658:	883b      	ldrh	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d11a      	bne.n	8003694 <isRightFull+0x90>
				for (int i = Ypos-1; i<Ypos+3; i++){
 800365e:	887b      	ldrh	r3, [r7, #2]
 8003660:	3b01      	subs	r3, #1
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
 8003664:	e011      	b.n	800368a <isRightFull+0x86>
					if (LCD_Screen[i][Xpos+1] == 1){
 8003666:	88bb      	ldrh	r3, [r7, #4]
 8003668:	1c59      	adds	r1, r3, #1
 800366a:	4887      	ldr	r0, [pc, #540]	@ (8003888 <isRightFull+0x284>)
 800366c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <isRightFull+0x80>
						return 0;
 8003680:	2300      	movs	r3, #0
 8003682:	e294      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos-1; i<Ypos+3; i++){
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	3301      	adds	r3, #1
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	3302      	adds	r3, #2
 800368e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003690:	429a      	cmp	r2, r3
 8003692:	dde8      	ble.n	8003666 <isRightFull+0x62>
					}
				}
			}
		}

		if (BlockNum == 2){
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2b02      	cmp	r3, #2
 8003698:	f040 808f 	bne.w	80037ba <isRightFull+0x1b6>
			if (Orientation == 1){
 800369c:	883b      	ldrh	r3, [r7, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d11e      	bne.n	80036e0 <isRightFull+0xdc>
				if (LCD_Screen[Ypos-1][Xpos+1] == 1){
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	88bb      	ldrh	r3, [r7, #4]
 80036a8:	1c59      	adds	r1, r3, #1
 80036aa:	4877      	ldr	r0, [pc, #476]	@ (8003888 <isRightFull+0x284>)
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <isRightFull+0xbe>
					return 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	e275      	b.n	8003bae <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 80036c2:	887a      	ldrh	r2, [r7, #2]
 80036c4:	88bb      	ldrh	r3, [r7, #4]
 80036c6:	1cd9      	adds	r1, r3, #3
 80036c8:	486f      	ldr	r0, [pc, #444]	@ (8003888 <isRightFull+0x284>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <isRightFull+0xdc>
					return 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	e266      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2){
 80036e0:	883b      	ldrh	r3, [r7, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d129      	bne.n	800373a <isRightFull+0x136>
				for (int i = Ypos; i < Ypos+2; i++){
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	623b      	str	r3, [r7, #32]
 80036ea:	e011      	b.n	8003710 <isRightFull+0x10c>
					if (LCD_Screen[i][Xpos+1] == 1){
 80036ec:	88bb      	ldrh	r3, [r7, #4]
 80036ee:	1c59      	adds	r1, r3, #1
 80036f0:	4865      	ldr	r0, [pc, #404]	@ (8003888 <isRightFull+0x284>)
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <isRightFull+0x106>
						return 0;
 8003706:	2300      	movs	r3, #0
 8003708:	e251      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos; i < Ypos+2; i++){
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	3301      	adds	r3, #1
 800370e:	623b      	str	r3, [r7, #32]
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	3301      	adds	r3, #1
 8003714:	6a3a      	ldr	r2, [r7, #32]
 8003716:	429a      	cmp	r2, r3
 8003718:	dde8      	ble.n	80036ec <isRightFull+0xe8>
					}
				}
				if (LCD_Screen[Ypos-1][Xpos+2] == 1){
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	88bb      	ldrh	r3, [r7, #4]
 8003720:	1c99      	adds	r1, r3, #2
 8003722:	4859      	ldr	r0, [pc, #356]	@ (8003888 <isRightFull+0x284>)
 8003724:	4613      	mov	r3, r2
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <isRightFull+0x136>
					return 0;
 8003736:	2300      	movs	r3, #0
 8003738:	e239      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 3){
 800373a:	883b      	ldrh	r3, [r7, #0]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d11e      	bne.n	800377e <isRightFull+0x17a>
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 8003740:	887a      	ldrh	r2, [r7, #2]
 8003742:	88bb      	ldrh	r3, [r7, #4]
 8003744:	1cd9      	adds	r1, r3, #3
 8003746:	4850      	ldr	r0, [pc, #320]	@ (8003888 <isRightFull+0x284>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <isRightFull+0x15a>
					return 0;
 800375a:	2300      	movs	r3, #0
 800375c:	e227      	b.n	8003bae <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos+1][Xpos+3] == 1){
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	88bb      	ldrh	r3, [r7, #4]
 8003764:	1cd9      	adds	r1, r3, #3
 8003766:	4848      	ldr	r0, [pc, #288]	@ (8003888 <isRightFull+0x284>)
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <isRightFull+0x17a>
					return 0;
 800377a:	2300      	movs	r3, #0
 800377c:	e217      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 4){
 800377e:	883b      	ldrh	r3, [r7, #0]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11a      	bne.n	80037ba <isRightFull+0x1b6>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	3b01      	subs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	e011      	b.n	80037b0 <isRightFull+0x1ac>
					if (LCD_Screen[i][Xpos+2] == 1){
 800378c:	88bb      	ldrh	r3, [r7, #4]
 800378e:	1c99      	adds	r1, r3, #2
 8003790:	483d      	ldr	r0, [pc, #244]	@ (8003888 <isRightFull+0x284>)
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <isRightFull+0x1a6>
						return 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e201      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	3301      	adds	r3, #1
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	dde8      	ble.n	800378c <isRightFull+0x188>
					}
				}
			}
		}

		if (BlockNum == 3){
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	f040 8093 	bne.w	80038e8 <isRightFull+0x2e4>
			if (Orientation == 1){
 80037c2:	883b      	ldrh	r3, [r7, #0]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d11e      	bne.n	8003806 <isRightFull+0x202>
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	1cd9      	adds	r1, r3, #3
 80037ce:	482e      	ldr	r0, [pc, #184]	@ (8003888 <isRightFull+0x284>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <isRightFull+0x1e2>
					return 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e1e3      	b.n	8003bae <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos-1][Xpos+3] == 1){
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	1e5a      	subs	r2, r3, #1
 80037ea:	88bb      	ldrh	r3, [r7, #4]
 80037ec:	1cd9      	adds	r1, r3, #3
 80037ee:	4826      	ldr	r0, [pc, #152]	@ (8003888 <isRightFull+0x284>)
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <isRightFull+0x202>
					return 0;
 8003802:	2300      	movs	r3, #0
 8003804:	e1d3      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2){
 8003806:	883b      	ldrh	r3, [r7, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d129      	bne.n	8003860 <isRightFull+0x25c>
				for (int i = Ypos-1; i < Ypos+1; i++){
 800380c:	887b      	ldrh	r3, [r7, #2]
 800380e:	3b01      	subs	r3, #1
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	e011      	b.n	8003838 <isRightFull+0x234>
					if (LCD_Screen[i][Xpos+1] == 1){
 8003814:	88bb      	ldrh	r3, [r7, #4]
 8003816:	1c59      	adds	r1, r3, #1
 8003818:	481b      	ldr	r0, [pc, #108]	@ (8003888 <isRightFull+0x284>)
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <isRightFull+0x22e>
						return 0;
 800382e:	2300      	movs	r3, #0
 8003830:	e1bd      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3301      	adds	r3, #1
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	429a      	cmp	r2, r3
 800383e:	dde9      	ble.n	8003814 <isRightFull+0x210>
					}
				}
				if (LCD_Screen[Ypos+1][Xpos+2] == 1){
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	88bb      	ldrh	r3, [r7, #4]
 8003846:	1c99      	adds	r1, r3, #2
 8003848:	480f      	ldr	r0, [pc, #60]	@ (8003888 <isRightFull+0x284>)
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <isRightFull+0x25c>
					return 0;
 800385c:	2300      	movs	r3, #0
 800385e:	e1a6      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 3){
 8003860:	883b      	ldrh	r3, [r7, #0]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d122      	bne.n	80038ac <isRightFull+0x2a8>
				if (LCD_Screen[Ypos][Xpos+3] == 1){
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	88bb      	ldrh	r3, [r7, #4]
 800386a:	1cd9      	adds	r1, r3, #3
 800386c:	4806      	ldr	r0, [pc, #24]	@ (8003888 <isRightFull+0x284>)
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <isRightFull+0x288>
					return 0;
 8003880:	2300      	movs	r3, #0
 8003882:	e194      	b.n	8003bae <isRightFull+0x5aa>
 8003884:	2000063c 	.word	0x2000063c
 8003888:	2000030c 	.word	0x2000030c
				}
				if (LCD_Screen[Ypos+1][Xpos+1] == 1){
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	88bb      	ldrh	r3, [r7, #4]
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	4895      	ldr	r0, [pc, #596]	@ (8003aec <isRightFull+0x4e8>)
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <isRightFull+0x2a8>
					return 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e180      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 4){
 80038ac:	883b      	ldrh	r3, [r7, #0]
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d11a      	bne.n	80038e8 <isRightFull+0x2e4>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e011      	b.n	80038de <isRightFull+0x2da>
					if (LCD_Screen[i][Xpos+2] == 1){
 80038ba:	88bb      	ldrh	r3, [r7, #4]
 80038bc:	1c99      	adds	r1, r3, #2
 80038be:	488b      	ldr	r0, [pc, #556]	@ (8003aec <isRightFull+0x4e8>)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4613      	mov	r3, r2
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <isRightFull+0x2d4>
						return 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e16a      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos-1; i < (Ypos+2); i++){
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	3301      	adds	r3, #1
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	dde8      	ble.n	80038ba <isRightFull+0x2b6>
					}
				}
			}
		}

		if (BlockNum == 4){
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d11e      	bne.n	800392c <isRightFull+0x328>
			if (LCD_Screen[Ypos][Xpos+2] == 1){
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	88bb      	ldrh	r3, [r7, #4]
 80038f2:	1c99      	adds	r1, r3, #2
 80038f4:	487d      	ldr	r0, [pc, #500]	@ (8003aec <isRightFull+0x4e8>)
 80038f6:	4613      	mov	r3, r2
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <isRightFull+0x308>
				return 0;
 8003908:	2300      	movs	r3, #0
 800390a:	e150      	b.n	8003bae <isRightFull+0x5aa>
			}
			if (LCD_Screen[Ypos-1][Xpos+2] == 1){
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	1e5a      	subs	r2, r3, #1
 8003910:	88bb      	ldrh	r3, [r7, #4]
 8003912:	1c99      	adds	r1, r3, #2
 8003914:	4875      	ldr	r0, [pc, #468]	@ (8003aec <isRightFull+0x4e8>)
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <isRightFull+0x328>
				return 0;
 8003928:	2300      	movs	r3, #0
 800392a:	e140      	b.n	8003bae <isRightFull+0x5aa>
			}
		}

		if (BlockNum == 5){
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d154      	bne.n	80039dc <isRightFull+0x3d8>
			if (Orientation == 1 || Orientation == 3){
 8003932:	883b      	ldrh	r3, [r7, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d002      	beq.n	800393e <isRightFull+0x33a>
 8003938:	883b      	ldrh	r3, [r7, #0]
 800393a:	2b03      	cmp	r3, #3
 800393c:	d11e      	bne.n	800397c <isRightFull+0x378>
				if (LCD_Screen[Ypos-1][Xpos+3] == 1){
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	88bb      	ldrh	r3, [r7, #4]
 8003944:	1cd9      	adds	r1, r3, #3
 8003946:	4869      	ldr	r0, [pc, #420]	@ (8003aec <isRightFull+0x4e8>)
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <isRightFull+0x35a>
					return 0;
 800395a:	2300      	movs	r3, #0
 800395c:	e127      	b.n	8003bae <isRightFull+0x5aa>
				}
				if (LCD_Screen[Ypos][Xpos+2] == 1){
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	88bb      	ldrh	r3, [r7, #4]
 8003962:	1c99      	adds	r1, r3, #2
 8003964:	4861      	ldr	r0, [pc, #388]	@ (8003aec <isRightFull+0x4e8>)
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <isRightFull+0x378>
					return 0;
 8003978:	2300      	movs	r3, #0
 800397a:	e118      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 800397c:	883b      	ldrh	r3, [r7, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d002      	beq.n	8003988 <isRightFull+0x384>
 8003982:	883b      	ldrh	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d129      	bne.n	80039dc <isRightFull+0x3d8>
				for (int i = Ypos; i < Ypos+2; i++){
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	e011      	b.n	80039b2 <isRightFull+0x3ae>
					if (LCD_Screen[i][Xpos+2] == 1){
 800398e:	88bb      	ldrh	r3, [r7, #4]
 8003990:	1c99      	adds	r1, r3, #2
 8003992:	4856      	ldr	r0, [pc, #344]	@ (8003aec <isRightFull+0x4e8>)
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <isRightFull+0x3a8>
						return 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e100      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos; i < Ypos+2; i++){
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	3301      	adds	r3, #1
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	887b      	ldrh	r3, [r7, #2]
 80039b4:	3301      	adds	r3, #1
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dde8      	ble.n	800398e <isRightFull+0x38a>
					}
				}
				if (LCD_Screen[Ypos-1][Xpos+1]){
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	1e5a      	subs	r2, r3, #1
 80039c0:	88bb      	ldrh	r3, [r7, #4]
 80039c2:	1c59      	adds	r1, r3, #1
 80039c4:	4849      	ldr	r0, [pc, #292]	@ (8003aec <isRightFull+0x4e8>)
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <isRightFull+0x3d8>
					return 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	e0e8      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
		}

		if (BlockNum == 6){
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	f040 808e 	bne.w	8003b00 <isRightFull+0x4fc>
			if (Orientation == 1){
 80039e4:	883b      	ldrh	r3, [r7, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11c      	bne.n	8003a24 <isRightFull+0x420>
				if (LCD_Screen[Ypos][Xpos+3] == 1 || LCD_Screen[Ypos-1][Xpos+2] == 1){
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	88bb      	ldrh	r3, [r7, #4]
 80039ee:	1cd9      	adds	r1, r3, #3
 80039f0:	483e      	ldr	r0, [pc, #248]	@ (8003aec <isRightFull+0x4e8>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d00d      	beq.n	8003a20 <isRightFull+0x41c>
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	88bb      	ldrh	r3, [r7, #4]
 8003a0a:	1c99      	adds	r1, r3, #2
 8003a0c:	4837      	ldr	r0, [pc, #220]	@ (8003aec <isRightFull+0x4e8>)
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <isRightFull+0x420>
					return 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e0c4      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2){
 8003a24:	883b      	ldrh	r3, [r7, #0]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d12a      	bne.n	8003a80 <isRightFull+0x47c>
				if (LCD_Screen[Ypos-1][Xpos+2] == 1 || LCD_Screen[Ypos][Xpos+3] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1){
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	1c99      	adds	r1, r3, #2
 8003a32:	482e      	ldr	r0, [pc, #184]	@ (8003aec <isRightFull+0x4e8>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d01a      	beq.n	8003a7c <isRightFull+0x478>
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	88bb      	ldrh	r3, [r7, #4]
 8003a4a:	1cd9      	adds	r1, r3, #3
 8003a4c:	4827      	ldr	r0, [pc, #156]	@ (8003aec <isRightFull+0x4e8>)
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d00d      	beq.n	8003a7c <isRightFull+0x478>
 8003a60:	887b      	ldrh	r3, [r7, #2]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	88bb      	ldrh	r3, [r7, #4]
 8003a66:	1c99      	adds	r1, r3, #2
 8003a68:	4820      	ldr	r0, [pc, #128]	@ (8003aec <isRightFull+0x4e8>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <isRightFull+0x47c>
					return 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e096      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 3){
 8003a80:	883b      	ldrh	r3, [r7, #0]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d11c      	bne.n	8003ac0 <isRightFull+0x4bc>
				if (LCD_Screen[Ypos][Xpos+3] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1){
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	88bb      	ldrh	r3, [r7, #4]
 8003a8a:	1cd9      	adds	r1, r3, #3
 8003a8c:	4817      	ldr	r0, [pc, #92]	@ (8003aec <isRightFull+0x4e8>)
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d00d      	beq.n	8003abc <isRightFull+0x4b8>
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	88bb      	ldrh	r3, [r7, #4]
 8003aa6:	1c99      	adds	r1, r3, #2
 8003aa8:	4810      	ldr	r0, [pc, #64]	@ (8003aec <isRightFull+0x4e8>)
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <isRightFull+0x4bc>
					return 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e076      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 4){
 8003ac0:	883b      	ldrh	r3, [r7, #0]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d11c      	bne.n	8003b00 <isRightFull+0x4fc>
				for (int i = Ypos-1; i < Ypos+2; i++){
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	e013      	b.n	8003af6 <isRightFull+0x4f2>
					if (LCD_Screen[i][Xpos+2] == 1){
 8003ace:	88bb      	ldrh	r3, [r7, #4]
 8003ad0:	1c99      	adds	r1, r3, #2
 8003ad2:	4806      	ldr	r0, [pc, #24]	@ (8003aec <isRightFull+0x4e8>)
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d103      	bne.n	8003af0 <isRightFull+0x4ec>
						return 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e060      	b.n	8003bae <isRightFull+0x5aa>
 8003aec:	2000030c 	.word	0x2000030c
				for (int i = Ypos-1; i < Ypos+2; i++){
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	3301      	adds	r3, #1
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	dde6      	ble.n	8003ace <isRightFull+0x4ca>
					}
				}
			}
		}

		if (BlockNum == 7){
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	d152      	bne.n	8003bac <isRightFull+0x5a8>
			if (Orientation == 1 || Orientation == 3){
 8003b06:	883b      	ldrh	r3, [r7, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d002      	beq.n	8003b12 <isRightFull+0x50e>
 8003b0c:	883b      	ldrh	r3, [r7, #0]
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d11c      	bne.n	8003b4c <isRightFull+0x548>
				if (LCD_Screen[Ypos-1][Xpos+2] == 1 || LCD_Screen[Ypos][Xpos+3] == 1){
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	88bb      	ldrh	r3, [r7, #4]
 8003b18:	1c99      	adds	r1, r3, #2
 8003b1a:	4828      	ldr	r0, [pc, #160]	@ (8003bbc <isRightFull+0x5b8>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d00c      	beq.n	8003b48 <isRightFull+0x544>
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	1cd9      	adds	r1, r3, #3
 8003b34:	4821      	ldr	r0, [pc, #132]	@ (8003bbc <isRightFull+0x5b8>)
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <isRightFull+0x548>
					return 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e030      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003b4c:	883b      	ldrh	r3, [r7, #0]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d002      	beq.n	8003b58 <isRightFull+0x554>
 8003b52:	883b      	ldrh	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d129      	bne.n	8003bac <isRightFull+0x5a8>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003b58:	887b      	ldrh	r3, [r7, #2]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	e011      	b.n	8003b84 <isRightFull+0x580>
					if (LCD_Screen[i][Xpos+2]){
 8003b60:	88bb      	ldrh	r3, [r7, #4]
 8003b62:	1c99      	adds	r1, r3, #2
 8003b64:	4815      	ldr	r0, [pc, #84]	@ (8003bbc <isRightFull+0x5b8>)
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <isRightFull+0x57a>
						return 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e017      	b.n	8003bae <isRightFull+0x5aa>
				for (int i = Ypos-1; i < Ypos+1; i++){
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dde9      	ble.n	8003b60 <isRightFull+0x55c>
					}
				}
				if (LCD_Screen[Ypos+1][Xpos+1] == 1){
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	88bb      	ldrh	r3, [r7, #4]
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	4809      	ldr	r0, [pc, #36]	@ (8003bbc <isRightFull+0x5b8>)
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <isRightFull+0x5a8>
					return 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <isRightFull+0x5aa>
				}
			}
		}
		return 1;
 8003bac:	2301      	movs	r3, #1
//	}
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	372c      	adds	r7, #44	@ 0x2c
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	2000030c 	.word	0x2000030c

08003bc0 <canMoveRight>:

int canMoveRight(){
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8003bc6:	4b37      	ldr	r3, [pc, #220]	@ (8003ca4 <canMoveRight+0xe4>)
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003bcc:	4b35      	ldr	r3, [pc, #212]	@ (8003ca4 <canMoveRight+0xe4>)
 8003bce:	885b      	ldrh	r3, [r3, #2]
 8003bd0:	80bb      	strh	r3, [r7, #4]
//	uint16_t Ypos = CurrentBlock[2];
	uint16_t Orientation = CurrentBlock[3];
 8003bd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <canMoveRight+0xe4>)
 8003bd4:	88db      	ldrh	r3, [r3, #6]
 8003bd6:	807b      	strh	r3, [r7, #2]

	if (isRightFull() == 1){
 8003bd8:	f7ff fd14 	bl	8003604 <isRightFull>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d15b      	bne.n	8003c9a <canMoveRight+0xda>
		if (BlockNum == 1){
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d115      	bne.n	8003c14 <canMoveRight+0x54>
			if (Orientation == 1 || Orientation == 3){
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d002      	beq.n	8003bf4 <canMoveRight+0x34>
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d104      	bne.n	8003bfe <canMoveRight+0x3e>
				if (Xpos < 8){
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	d801      	bhi.n	8003bfe <canMoveRight+0x3e>
						return 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e04e      	b.n	8003c9c <canMoveRight+0xdc>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d002      	beq.n	8003c0a <canMoveRight+0x4a>
 8003c04:	887b      	ldrh	r3, [r7, #2]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d104      	bne.n	8003c14 <canMoveRight+0x54>
				if (Xpos < 11){
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	2b0a      	cmp	r3, #10
 8003c0e:	d801      	bhi.n	8003c14 <canMoveRight+0x54>
						return 1;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e043      	b.n	8003c9c <canMoveRight+0xdc>
				}
			}
		}
		if (BlockNum == 2 || BlockNum == 3){
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d002      	beq.n	8003c20 <canMoveRight+0x60>
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d115      	bne.n	8003c4c <canMoveRight+0x8c>
			if (Orientation == 1 || Orientation == 3){
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d002      	beq.n	8003c2c <canMoveRight+0x6c>
 8003c26:	887b      	ldrh	r3, [r7, #2]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d104      	bne.n	8003c36 <canMoveRight+0x76>
				if (Xpos < 9){
 8003c2c:	88bb      	ldrh	r3, [r7, #4]
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d801      	bhi.n	8003c36 <canMoveRight+0x76>
					return 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e032      	b.n	8003c9c <canMoveRight+0xdc>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d002      	beq.n	8003c42 <canMoveRight+0x82>
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d104      	bne.n	8003c4c <canMoveRight+0x8c>
				if (Xpos < 10){
 8003c42:	88bb      	ldrh	r3, [r7, #4]
 8003c44:	2b09      	cmp	r3, #9
 8003c46:	d801      	bhi.n	8003c4c <canMoveRight+0x8c>
					return 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e027      	b.n	8003c9c <canMoveRight+0xdc>
				}
			}
		}
		if (BlockNum == 4){
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d104      	bne.n	8003c5c <canMoveRight+0x9c>
			if (Xpos < 10){
 8003c52:	88bb      	ldrh	r3, [r7, #4]
 8003c54:	2b09      	cmp	r3, #9
 8003c56:	d801      	bhi.n	8003c5c <canMoveRight+0x9c>
				return 1;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e01f      	b.n	8003c9c <canMoveRight+0xdc>
	//	if (BlockNum == 5){
	//		if (Xpos < 10){
	//			return 1;
	//		}
	//	}
		if (BlockNum == 5 || BlockNum == 6 || BlockNum == 7){
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d005      	beq.n	8003c6e <canMoveRight+0xae>
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d002      	beq.n	8003c6e <canMoveRight+0xae>
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	2b07      	cmp	r3, #7
 8003c6c:	d115      	bne.n	8003c9a <canMoveRight+0xda>
			if (Orientation == 1 || Orientation == 3){
 8003c6e:	887b      	ldrh	r3, [r7, #2]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d002      	beq.n	8003c7a <canMoveRight+0xba>
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d104      	bne.n	8003c84 <canMoveRight+0xc4>
				if (Xpos < 9){
 8003c7a:	88bb      	ldrh	r3, [r7, #4]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d801      	bhi.n	8003c84 <canMoveRight+0xc4>
					return 1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e00b      	b.n	8003c9c <canMoveRight+0xdc>
				}
			}
			if (Orientation == 2 || Orientation == 4){
 8003c84:	887b      	ldrh	r3, [r7, #2]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d002      	beq.n	8003c90 <canMoveRight+0xd0>
 8003c8a:	887b      	ldrh	r3, [r7, #2]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d104      	bne.n	8003c9a <canMoveRight+0xda>
				if (Xpos < 10){
 8003c90:	88bb      	ldrh	r3, [r7, #4]
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d801      	bhi.n	8003c9a <canMoveRight+0xda>
					return 1;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <canMoveRight+0xdc>
				}
			}
		}

	}
	return 0;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	2000063c 	.word	0x2000063c

08003ca8 <isFull>:

int isFull(){
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
	uint16_t BlockNum = CurrentBlock[0];
 8003cae:	4ba2      	ldr	r3, [pc, #648]	@ (8003f38 <isFull+0x290>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	80fb      	strh	r3, [r7, #6]
	uint16_t Xpos = CurrentBlock[1];
 8003cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f38 <isFull+0x290>)
 8003cb6:	885b      	ldrh	r3, [r3, #2]
 8003cb8:	80bb      	strh	r3, [r7, #4]
	uint16_t Ypos = CurrentBlock[2];
 8003cba:	4b9f      	ldr	r3, [pc, #636]	@ (8003f38 <isFull+0x290>)
 8003cbc:	889b      	ldrh	r3, [r3, #4]
 8003cbe:	807b      	strh	r3, [r7, #2]
	uint16_t Orientation = CurrentBlock[3];
 8003cc0:	4b9d      	ldr	r3, [pc, #628]	@ (8003f38 <isFull+0x290>)
 8003cc2:	88db      	ldrh	r3, [r3, #6]
 8003cc4:	803b      	strh	r3, [r7, #0]

	if (BlockNum == 1){
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d136      	bne.n	8003d3a <isFull+0x92>
		if (Orientation == 1 || Orientation == 3){
 8003ccc:	883b      	ldrh	r3, [r7, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d002      	beq.n	8003cd8 <isFull+0x30>
 8003cd2:	883b      	ldrh	r3, [r7, #0]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d119      	bne.n	8003d0c <isFull+0x64>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8003cd8:	88bb      	ldrh	r3, [r7, #4]
 8003cda:	81fb      	strh	r3, [r7, #14]
 8003cdc:	e011      	b.n	8003d02 <isFull+0x5a>
				if (LCD_Screen[Ypos+1][i] == 1){
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	89f9      	ldrh	r1, [r7, #14]
 8003ce4:	4895      	ldr	r0, [pc, #596]	@ (8003f3c <isFull+0x294>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <isFull+0x54>
					return 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e2a9      	b.n	8004250 <isFull+0x5a8>
			for (uint16_t i = Xpos; i < Xpos+4; i++){
 8003cfc:	89fb      	ldrh	r3, [r7, #14]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	81fb      	strh	r3, [r7, #14]
 8003d02:	88bb      	ldrh	r3, [r7, #4]
 8003d04:	1cda      	adds	r2, r3, #3
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dae8      	bge.n	8003cde <isFull+0x36>
				}
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8003d0c:	883b      	ldrh	r3, [r7, #0]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d002      	beq.n	8003d18 <isFull+0x70>
 8003d12:	883b      	ldrh	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d10e      	bne.n	8003d36 <isFull+0x8e>
			if (LCD_Screen[Ypos+3][Xpos] == 1){
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	1cda      	adds	r2, r3, #3
 8003d1c:	88b9      	ldrh	r1, [r7, #4]
 8003d1e:	4887      	ldr	r0, [pc, #540]	@ (8003f3c <isFull+0x294>)
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <isFull+0x8e>
				return 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e28c      	b.n	8004250 <isFull+0x5a8>
			}
		}
		return 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e28a      	b.n	8004250 <isFull+0x5a8>
	}

	if (BlockNum == 2){
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	f040 808c 	bne.w	8003e5a <isFull+0x1b2>
		if (Orientation == 1){
 8003d42:	883b      	ldrh	r3, [r7, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d119      	bne.n	8003d7c <isFull+0xd4>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	81bb      	strh	r3, [r7, #12]
 8003d4c:	e011      	b.n	8003d72 <isFull+0xca>
				if (LCD_Screen[Ypos+1][i] == 1)
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	89b9      	ldrh	r1, [r7, #12]
 8003d54:	4879      	ldr	r0, [pc, #484]	@ (8003f3c <isFull+0x294>)
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <isFull+0xc4>
				{
					return 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e271      	b.n	8004250 <isFull+0x5a8>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8003d6c:	89bb      	ldrh	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	81bb      	strh	r3, [r7, #12]
 8003d72:	88bb      	ldrh	r3, [r7, #4]
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	89bb      	ldrh	r3, [r7, #12]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	dae8      	bge.n	8003d4e <isFull+0xa6>
				}
			}
		}
		if (Orientation == 2){
 8003d7c:	883b      	ldrh	r3, [r7, #0]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d11b      	bne.n	8003dba <isFull+0x112>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos][Xpos+1]){
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	1c9a      	adds	r2, r3, #2
 8003d86:	88b9      	ldrh	r1, [r7, #4]
 8003d88:	486c      	ldr	r0, [pc, #432]	@ (8003f3c <isFull+0x294>)
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d00c      	beq.n	8003db6 <isFull+0x10e>
 8003d9c:	887a      	ldrh	r2, [r7, #2]
 8003d9e:	88bb      	ldrh	r3, [r7, #4]
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	4866      	ldr	r0, [pc, #408]	@ (8003f3c <isFull+0x294>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <isFull+0x112>
				return 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e24a      	b.n	8004250 <isFull+0x5a8>
			}
		}
		if (Orientation == 3){
 8003dba:	883b      	ldrh	r3, [r7, #0]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d12a      	bne.n	8003e16 <isFull+0x16e>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+2][Xpos+2] == 1) {
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	88b9      	ldrh	r1, [r7, #4]
 8003dc6:	485d      	ldr	r0, [pc, #372]	@ (8003f3c <isFull+0x294>)
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d01b      	beq.n	8003e12 <isFull+0x16a>
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	88bb      	ldrh	r3, [r7, #4]
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	4856      	ldr	r0, [pc, #344]	@ (8003f3c <isFull+0x294>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d00d      	beq.n	8003e12 <isFull+0x16a>
 8003df6:	887b      	ldrh	r3, [r7, #2]
 8003df8:	1c9a      	adds	r2, r3, #2
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	1c99      	adds	r1, r3, #2
 8003dfe:	484f      	ldr	r0, [pc, #316]	@ (8003f3c <isFull+0x294>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <isFull+0x16e>
				return 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e21c      	b.n	8004250 <isFull+0x5a8>
			}
		}
		if (Orientation == 4){
 8003e16:	883b      	ldrh	r3, [r7, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d11c      	bne.n	8003e56 <isFull+0x1ae>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1){
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	1c9a      	adds	r2, r3, #2
 8003e20:	88b9      	ldrh	r1, [r7, #4]
 8003e22:	4846      	ldr	r0, [pc, #280]	@ (8003f3c <isFull+0x294>)
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d00d      	beq.n	8003e52 <isFull+0x1aa>
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	1c9a      	adds	r2, r3, #2
 8003e3a:	88bb      	ldrh	r3, [r7, #4]
 8003e3c:	1c59      	adds	r1, r3, #1
 8003e3e:	483f      	ldr	r0, [pc, #252]	@ (8003f3c <isFull+0x294>)
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <isFull+0x1ae>
				return 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e1fc      	b.n	8004250 <isFull+0x5a8>
			}
		}
		return 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1fa      	b.n	8004250 <isFull+0x5a8>
	}

	if (BlockNum == 3){
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	f040 8090 	bne.w	8003f82 <isFull+0x2da>
		if (Orientation == 1){
 8003e62:	883b      	ldrh	r3, [r7, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d119      	bne.n	8003e9c <isFull+0x1f4>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8003e68:	88bb      	ldrh	r3, [r7, #4]
 8003e6a:	817b      	strh	r3, [r7, #10]
 8003e6c:	e011      	b.n	8003e92 <isFull+0x1ea>
				if (LCD_Screen[Ypos+1][i] == 1)
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	8979      	ldrh	r1, [r7, #10]
 8003e74:	4831      	ldr	r0, [pc, #196]	@ (8003f3c <isFull+0x294>)
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <isFull+0x1e4>
				{
					return 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e1e1      	b.n	8004250 <isFull+0x5a8>
			for(uint16_t i = Xpos; i < Xpos+3; i++){
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	88bb      	ldrh	r3, [r7, #4]
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dae8      	bge.n	8003e6e <isFull+0x1c6>
				}
			}
		}
		if (Orientation == 2){
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d11c      	bne.n	8003edc <isFull+0x234>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1]){
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	88b9      	ldrh	r1, [r7, #4]
 8003ea8:	4824      	ldr	r0, [pc, #144]	@ (8003f3c <isFull+0x294>)
 8003eaa:	4613      	mov	r3, r2
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d00d      	beq.n	8003ed8 <isFull+0x230>
 8003ebc:	887b      	ldrh	r3, [r7, #2]
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	88bb      	ldrh	r3, [r7, #4]
 8003ec2:	1c59      	adds	r1, r3, #1
 8003ec4:	481d      	ldr	r0, [pc, #116]	@ (8003f3c <isFull+0x294>)
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <isFull+0x234>
				return 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e1b9      	b.n	8004250 <isFull+0x5a8>
			}
		}
		if (Orientation == 3){
 8003edc:	883b      	ldrh	r3, [r7, #0]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d12e      	bne.n	8003f40 <isFull+0x298>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1) {
 8003ee2:	887b      	ldrh	r3, [r7, #2]
 8003ee4:	1c9a      	adds	r2, r3, #2
 8003ee6:	88b9      	ldrh	r1, [r7, #4]
 8003ee8:	4814      	ldr	r0, [pc, #80]	@ (8003f3c <isFull+0x294>)
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d01b      	beq.n	8003f34 <isFull+0x28c>
 8003efc:	887b      	ldrh	r3, [r7, #2]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	1c59      	adds	r1, r3, #1
 8003f04:	480d      	ldr	r0, [pc, #52]	@ (8003f3c <isFull+0x294>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d00d      	beq.n	8003f34 <isFull+0x28c>
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	88bb      	ldrh	r3, [r7, #4]
 8003f1e:	1c99      	adds	r1, r3, #2
 8003f20:	4806      	ldr	r0, [pc, #24]	@ (8003f3c <isFull+0x294>)
 8003f22:	4613      	mov	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <isFull+0x298>
				return 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e18b      	b.n	8004250 <isFull+0x5a8>
 8003f38:	2000063c 	.word	0x2000063c
 8003f3c:	2000030c 	.word	0x2000030c
			}
		}
		if (Orientation == 4){
 8003f40:	883b      	ldrh	r3, [r7, #0]
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d11b      	bne.n	8003f7e <isFull+0x2d6>
			if (LCD_Screen[Ypos][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1) {
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	88b9      	ldrh	r1, [r7, #4]
 8003f4a:	48ad      	ldr	r0, [pc, #692]	@ (8004200 <isFull+0x558>)
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d00d      	beq.n	8003f7a <isFull+0x2d2>
 8003f5e:	887b      	ldrh	r3, [r7, #2]
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	88bb      	ldrh	r3, [r7, #4]
 8003f64:	1c59      	adds	r1, r3, #1
 8003f66:	48a6      	ldr	r0, [pc, #664]	@ (8004200 <isFull+0x558>)
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <isFull+0x2d6>
				return 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e168      	b.n	8004250 <isFull+0x5a8>
			}
		}
		return 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e166      	b.n	8004250 <isFull+0x5a8>
	}

	if (BlockNum == 4){
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d11e      	bne.n	8003fc6 <isFull+0x31e>
		if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 8003f88:	887b      	ldrh	r3, [r7, #2]
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	88b9      	ldrh	r1, [r7, #4]
 8003f8e:	489c      	ldr	r0, [pc, #624]	@ (8004200 <isFull+0x558>)
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d00d      	beq.n	8003fbe <isFull+0x316>
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	88bb      	ldrh	r3, [r7, #4]
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	4895      	ldr	r0, [pc, #596]	@ (8004200 <isFull+0x558>)
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <isFull+0x31a>
			return 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e146      	b.n	8004250 <isFull+0x5a8>
		}
		return 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e144      	b.n	8004250 <isFull+0x5a8>
	}

	if (BlockNum == 5){
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d154      	bne.n	8004076 <isFull+0x3ce>
		if (Orientation == 1 || Orientation == 3){
 8003fcc:	883b      	ldrh	r3, [r7, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d002      	beq.n	8003fd8 <isFull+0x330>
 8003fd2:	883b      	ldrh	r3, [r7, #0]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d129      	bne.n	800402c <isFull+0x384>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos][Xpos+2] == 1) {
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	88b9      	ldrh	r1, [r7, #4]
 8003fde:	4888      	ldr	r0, [pc, #544]	@ (8004200 <isFull+0x558>)
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d01a      	beq.n	8004028 <isFull+0x380>
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	88bb      	ldrh	r3, [r7, #4]
 8003ff8:	1c59      	adds	r1, r3, #1
 8003ffa:	4881      	ldr	r0, [pc, #516]	@ (8004200 <isFull+0x558>)
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d00c      	beq.n	8004028 <isFull+0x380>
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	88bb      	ldrh	r3, [r7, #4]
 8004012:	1c99      	adds	r1, r3, #2
 8004014:	487a      	ldr	r0, [pc, #488]	@ (8004200 <isFull+0x558>)
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <isFull+0x384>
				return 0;
 8004028:	2300      	movs	r3, #0
 800402a:	e111      	b.n	8004250 <isFull+0x5a8>
			}
		}
		if (Orientation == 2 || Orientation == 4){
 800402c:	883b      	ldrh	r3, [r7, #0]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d002      	beq.n	8004038 <isFull+0x390>
 8004032:	883b      	ldrh	r3, [r7, #0]
 8004034:	2b04      	cmp	r3, #4
 8004036:	d11c      	bne.n	8004072 <isFull+0x3ca>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1) {
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	88b9      	ldrh	r1, [r7, #4]
 800403e:	4870      	ldr	r0, [pc, #448]	@ (8004200 <isFull+0x558>)
 8004040:	4613      	mov	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d00d      	beq.n	800406e <isFull+0x3c6>
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	88bb      	ldrh	r3, [r7, #4]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	4869      	ldr	r0, [pc, #420]	@ (8004200 <isFull+0x558>)
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <isFull+0x3ca>
				return 0;
 800406e:	2300      	movs	r3, #0
 8004070:	e0ee      	b.n	8004250 <isFull+0x5a8>
			}
		}
		return 1;
 8004072:	2301      	movs	r3, #1
 8004074:	e0ec      	b.n	8004250 <isFull+0x5a8>
	}

	if (BlockNum == 6){
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b06      	cmp	r3, #6
 800407a:	f040 808d 	bne.w	8004198 <isFull+0x4f0>
		if (Orientation == 1){
 800407e:	883b      	ldrh	r3, [r7, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d119      	bne.n	80040b8 <isFull+0x410>
			for (uint16_t i = Xpos; i < Xpos+3; i++){
 8004084:	88bb      	ldrh	r3, [r7, #4]
 8004086:	813b      	strh	r3, [r7, #8]
 8004088:	e011      	b.n	80040ae <isFull+0x406>
				if (LCD_Screen[Ypos+1][i] == 1){
 800408a:	887b      	ldrh	r3, [r7, #2]
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	8939      	ldrh	r1, [r7, #8]
 8004090:	485b      	ldr	r0, [pc, #364]	@ (8004200 <isFull+0x558>)
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <isFull+0x400>
					return 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e0d3      	b.n	8004250 <isFull+0x5a8>
			for (uint16_t i = Xpos; i < Xpos+3; i++){
 80040a8:	893b      	ldrh	r3, [r7, #8]
 80040aa:	3301      	adds	r3, #1
 80040ac:	813b      	strh	r3, [r7, #8]
 80040ae:	88bb      	ldrh	r3, [r7, #4]
 80040b0:	1c9a      	adds	r2, r3, #2
 80040b2:	893b      	ldrh	r3, [r7, #8]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	dae8      	bge.n	800408a <isFull+0x3e2>
				}
			}
		}
		if (Orientation == 2){
 80040b8:	883b      	ldrh	r3, [r7, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d11c      	bne.n	80040f8 <isFull+0x450>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1){
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	1c9a      	adds	r2, r3, #2
 80040c2:	88b9      	ldrh	r1, [r7, #4]
 80040c4:	484e      	ldr	r0, [pc, #312]	@ (8004200 <isFull+0x558>)
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d00d      	beq.n	80040f4 <isFull+0x44c>
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	88bb      	ldrh	r3, [r7, #4]
 80040de:	1c59      	adds	r1, r3, #1
 80040e0:	4847      	ldr	r0, [pc, #284]	@ (8004200 <isFull+0x558>)
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <isFull+0x450>
				return 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e0ab      	b.n	8004250 <isFull+0x5a8>
			}
		}
		if (Orientation == 3){
 80040f8:	883b      	ldrh	r3, [r7, #0]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d12a      	bne.n	8004154 <isFull+0x4ac>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1){
 80040fe:	887b      	ldrh	r3, [r7, #2]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	88b9      	ldrh	r1, [r7, #4]
 8004104:	483e      	ldr	r0, [pc, #248]	@ (8004200 <isFull+0x558>)
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d01b      	beq.n	8004150 <isFull+0x4a8>
 8004118:	887b      	ldrh	r3, [r7, #2]
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	88bb      	ldrh	r3, [r7, #4]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	4837      	ldr	r0, [pc, #220]	@ (8004200 <isFull+0x558>)
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d00d      	beq.n	8004150 <isFull+0x4a8>
 8004134:	887b      	ldrh	r3, [r7, #2]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	88bb      	ldrh	r3, [r7, #4]
 800413a:	1c99      	adds	r1, r3, #2
 800413c:	4830      	ldr	r0, [pc, #192]	@ (8004200 <isFull+0x558>)
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <isFull+0x4ac>
				return 0;
 8004150:	2300      	movs	r3, #0
 8004152:	e07d      	b.n	8004250 <isFull+0x5a8>
			}
		}
		if (Orientation == 4){
 8004154:	883b      	ldrh	r3, [r7, #0]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d11c      	bne.n	8004194 <isFull+0x4ec>
			if (LCD_Screen[Ypos+1][Xpos] == 1 || LCD_Screen[Ypos+2][Xpos+1] == 1){
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	88b9      	ldrh	r1, [r7, #4]
 8004160:	4827      	ldr	r0, [pc, #156]	@ (8004200 <isFull+0x558>)
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d00d      	beq.n	8004190 <isFull+0x4e8>
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	88bb      	ldrh	r3, [r7, #4]
 800417a:	1c59      	adds	r1, r3, #1
 800417c:	4820      	ldr	r0, [pc, #128]	@ (8004200 <isFull+0x558>)
 800417e:	4613      	mov	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <isFull+0x4ec>
				return 0;
 8004190:	2300      	movs	r3, #0
 8004192:	e05d      	b.n	8004250 <isFull+0x5a8>
			}
		}
		return 1;
 8004194:	2301      	movs	r3, #1
 8004196:	e05b      	b.n	8004250 <isFull+0x5a8>
	}

	if (BlockNum == 7){
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	2b07      	cmp	r3, #7
 800419c:	d157      	bne.n	800424e <isFull+0x5a6>
		if (Orientation == 1 || Orientation == 3){
 800419e:	883b      	ldrh	r3, [r7, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d002      	beq.n	80041aa <isFull+0x502>
 80041a4:	883b      	ldrh	r3, [r7, #0]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d12c      	bne.n	8004204 <isFull+0x55c>
			if (LCD_Screen[Ypos][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1 || LCD_Screen[Ypos+1][Xpos+2] == 1) {
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	88b9      	ldrh	r1, [r7, #4]
 80041ae:	4814      	ldr	r0, [pc, #80]	@ (8004200 <isFull+0x558>)
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d01b      	beq.n	80041fa <isFull+0x552>
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	88bb      	ldrh	r3, [r7, #4]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	480d      	ldr	r0, [pc, #52]	@ (8004200 <isFull+0x558>)
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d00d      	beq.n	80041fa <isFull+0x552>
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	88bb      	ldrh	r3, [r7, #4]
 80041e4:	1c99      	adds	r1, r3, #2
 80041e6:	4806      	ldr	r0, [pc, #24]	@ (8004200 <isFull+0x558>)
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d104      	bne.n	8004204 <isFull+0x55c>
				return 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e028      	b.n	8004250 <isFull+0x5a8>
 80041fe:	bf00      	nop
 8004200:	2000030c 	.word	0x2000030c
			}
		}
		if (Orientation == 2 || Orientation == 4){
 8004204:	883b      	ldrh	r3, [r7, #0]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d002      	beq.n	8004210 <isFull+0x568>
 800420a:	883b      	ldrh	r3, [r7, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d11c      	bne.n	800424a <isFull+0x5a2>
			if (LCD_Screen[Ypos+2][Xpos] == 1 || LCD_Screen[Ypos+1][Xpos+1] == 1) {
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	1c9a      	adds	r2, r3, #2
 8004214:	88b9      	ldrh	r1, [r7, #4]
 8004216:	4811      	ldr	r0, [pc, #68]	@ (800425c <isFull+0x5b4>)
 8004218:	4613      	mov	r3, r2
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d00d      	beq.n	8004246 <isFull+0x59e>
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	88bb      	ldrh	r3, [r7, #4]
 8004230:	1c59      	adds	r1, r3, #1
 8004232:	480a      	ldr	r0, [pc, #40]	@ (800425c <isFull+0x5b4>)
 8004234:	4613      	mov	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <isFull+0x5a2>
				return 0;
 8004246:	2300      	movs	r3, #0
 8004248:	e002      	b.n	8004250 <isFull+0x5a8>
			}
		}
		return 1;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <isFull+0x5a8>
	}
	return 1;
 800424e:	2301      	movs	r3, #1
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	2000030c 	.word	0x2000030c

08004260 <updateTop>:

void updateTop(){
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
//	uint16_t BlockNum = CurrentBlock[0];
//	uint16_t Xpos = CurrentBlock[1];
	uint16_t Ypos = CurrentBlock[2];
 8004266:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <updateTop+0x70>)
 8004268:	889b      	ldrh	r3, [r3, #4]
 800426a:	80fb      	strh	r3, [r7, #6]
//	uint16_t Orientation = CurrentBlock[3];

	for (int i = Ypos-2; i < 15; i++){
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	3b02      	subs	r3, #2
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e023      	b.n	80042bc <updateTop+0x5c>
		for (int j = 0; j < 12; j++){
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	e01a      	b.n	80042b0 <updateTop+0x50>
			if (LCD_Screen[i][j] == 1){
 800427a:	4916      	ldr	r1, [pc, #88]	@ (80042d4 <updateTop+0x74>)
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4413      	add	r3, r2
 800428a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10b      	bne.n	80042aa <updateTop+0x4a>
				if (i < topRow[j]){
 8004292:	4a11      	ldr	r2, [pc, #68]	@ (80042d8 <updateTop+0x78>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	da04      	bge.n	80042aa <updateTop+0x4a>
					topRow[j] = i;
 80042a0:	490d      	ldr	r1, [pc, #52]	@ (80042d8 <updateTop+0x78>)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int j = 0; j < 12; j++){
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b0b      	cmp	r3, #11
 80042b4:	dde1      	ble.n	800427a <updateTop+0x1a>
	for (int i = Ypos-2; i < 15; i++){
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3301      	adds	r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b0e      	cmp	r3, #14
 80042c0:	ddd8      	ble.n	8004274 <updateTop+0x14>
				}
			}
		}
	}
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	2000063c 	.word	0x2000063c
 80042d4:	2000030c 	.word	0x2000030c
 80042d8:	2000060c 	.word	0x2000060c

080042dc <checkForTetris>:

void checkForTetris(){
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	@ 0x28
 80042e0:	af00      	add	r7, sp, #0
	int rowComplete = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
	int singleLine = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
	int doubleLine = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
	int tripleLine = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
	int fullTetris = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	603b      	str	r3, [r7, #0]
	int count = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]

	int Highest_Row = 14;
 80042fa:	230e      	movs	r3, #14
 80042fc:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 12; i++){
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e00e      	b.n	8004322 <checkForTetris+0x46>
			if (topRow[i] < Highest_Row){
 8004304:	4a30      	ldr	r2, [pc, #192]	@ (80043c8 <checkForTetris+0xec>)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	429a      	cmp	r2, r3
 8004310:	dd04      	ble.n	800431c <checkForTetris+0x40>
				Highest_Row = topRow[i];
 8004312:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <checkForTetris+0xec>)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 12; i++){
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	3301      	adds	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b0b      	cmp	r3, #11
 8004326:	dded      	ble.n	8004304 <checkForTetris+0x28>
			}
		}

	for (int i = 14; i >= Highest_Row; i--){
 8004328:	230e      	movs	r3, #14
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e02c      	b.n	8004388 <checkForTetris+0xac>
		for (int j = 0; j < 12; j++){
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	e01b      	b.n	800436c <checkForTetris+0x90>
			if (LCD_Screen[i][j] == 1){
 8004334:	4925      	ldr	r1, [pc, #148]	@ (80043cc <checkForTetris+0xf0>)
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d102      	bne.n	8004352 <checkForTetris+0x76>
				 rowComplete = 1;
 800434c:	2301      	movs	r3, #1
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004350:	e009      	b.n	8004366 <checkForTetris+0x8a>
			}
			else if (LCD_Screen[14][j] != 1){
 8004352:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <checkForTetris+0xf0>)
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	33a8      	adds	r3, #168	@ 0xa8
 8004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d002      	beq.n	8004366 <checkForTetris+0x8a>
				rowComplete = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 8004364:	e005      	b.n	8004372 <checkForTetris+0x96>
		for (int j = 0; j < 12; j++){
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	3301      	adds	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b0b      	cmp	r3, #11
 8004370:	dde0      	ble.n	8004334 <checkForTetris+0x58>
			}
		}

		if (rowComplete == 1)
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	2b01      	cmp	r3, #1
 8004376:	d104      	bne.n	8004382 <checkForTetris+0xa6>
		{
			shiftRowDown();
 8004378:	f000 f82a 	bl	80043d0 <shiftRowDown>
			count += 1;
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	3301      	adds	r3, #1
 8004380:	623b      	str	r3, [r7, #32]
	for (int i = 14; i >= Highest_Row; i--){
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	3b01      	subs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	429a      	cmp	r2, r3
 800438e:	dace      	bge.n	800432e <checkForTetris+0x52>
		}
	}

	if (count == 1){
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d102      	bne.n	800439c <checkForTetris+0xc0>
		singleLine += 1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
	}
	if (count == 2){
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d102      	bne.n	80043a8 <checkForTetris+0xcc>
		doubleLine += 1;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60bb      	str	r3, [r7, #8]
	}
	if (count == 3){
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d102      	bne.n	80043b4 <checkForTetris+0xd8>
		tripleLine += 1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3301      	adds	r3, #1
 80043b2:	607b      	str	r3, [r7, #4]
	}
	if (count == 4){
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d102      	bne.n	80043c0 <checkForTetris+0xe4>
		fullTetris += 1;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	3301      	adds	r3, #1
 80043be:	603b      	str	r3, [r7, #0]
	}
}
 80043c0:	bf00      	nop
 80043c2:	3728      	adds	r7, #40	@ 0x28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	2000060c 	.word	0x2000060c
 80043cc:	2000030c 	.word	0x2000030c

080043d0 <shiftRowDown>:

void shiftRowDown(){
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
	int Highest_Row = 14;
 80043d6:	230e      	movs	r3, #14
 80043d8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 12; i++){
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	e00e      	b.n	80043fe <shiftRowDown+0x2e>
		if (topRow[i] < Highest_Row){
 80043e0:	4a33      	ldr	r2, [pc, #204]	@ (80044b0 <shiftRowDown+0xe0>)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	dd04      	ble.n	80043f8 <shiftRowDown+0x28>
			Highest_Row = topRow[i];
 80043ee:	4a30      	ldr	r2, [pc, #192]	@ (80044b0 <shiftRowDown+0xe0>)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 12; i++){
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b0b      	cmp	r3, #11
 8004402:	dded      	ble.n	80043e0 <shiftRowDown+0x10>
		}
	}

	for (int j = 14; j >= Highest_Row; j--){
 8004404:	230e      	movs	r3, #14
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	e048      	b.n	800449c <shiftRowDown+0xcc>
		for (int k = 0; k < 12; k++){
 800440a:	2300      	movs	r3, #0
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	e03f      	b.n	8004490 <shiftRowDown+0xc0>
			LCD_Screen[j][k] = LCD_Screen[j-1][k];
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1e5a      	subs	r2, r3, #1
 8004414:	4927      	ldr	r1, [pc, #156]	@ (80044b4 <shiftRowDown+0xe4>)
 8004416:	4613      	mov	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	4413      	add	r3, r2
 8004422:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004426:	4823      	ldr	r0, [pc, #140]	@ (80044b4 <shiftRowDown+0xe4>)
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	4413      	add	r3, r2
 8004436:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			Obj_Color[j][k] = Obj_Color[j-1][k];
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	1e5a      	subs	r2, r3, #1
 800443e:	491e      	ldr	r1, [pc, #120]	@ (80044b8 <shiftRowDown+0xe8>)
 8004440:	4613      	mov	r3, r2
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	4413      	add	r3, r2
 800444c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8004450:	4919      	ldr	r1, [pc, #100]	@ (80044b8 <shiftRowDown+0xe8>)
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	4413      	add	r3, r2
 8004460:	4602      	mov	r2, r0
 8004462:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			LCD_Draw_Square_Fill_Border(k,j,Obj_Color[j-1][k]);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	b298      	uxth	r0, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	b299      	uxth	r1, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	4c11      	ldr	r4, [pc, #68]	@ (80044b8 <shiftRowDown+0xe8>)
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	4413      	add	r3, r2
 8004480:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8004484:	461a      	mov	r2, r3
 8004486:	f7fc fb77 	bl	8000b78 <LCD_Draw_Square_Fill_Border>
		for (int k = 0; k < 12; k++){
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b0b      	cmp	r3, #11
 8004494:	ddbc      	ble.n	8004410 <shiftRowDown+0x40>
	for (int j = 14; j >= Highest_Row; j--){
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3b01      	subs	r3, #1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dab2      	bge.n	800440a <shiftRowDown+0x3a>
//	for (int l = 0; l < 12; l++){
//		LCD_Screen[Highest_Row][l] = 0;
//		Obj_Color[Highest_Row][l] = 0;
//		LCD_Erase_Square(l,Highest_Row);
//	}
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd90      	pop	{r4, r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000060c 	.word	0x2000060c
 80044b4:	2000030c 	.word	0x2000030c
 80044b8:	2000018c 	.word	0x2000018c

080044bc <moveBlockDown>:

void moveBlockDown(){
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
	  eraseCurrentBlock();
 80044c0:	f7fe fd00 	bl	8002ec4 <eraseCurrentBlock>
	  updateYpos();
 80044c4:	f7fe fd80 	bl	8002fc8 <updateYpos>
	  drawCurrentBlock();
 80044c8:	f7fe fca8 	bl	8002e1c <drawCurrentBlock>
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <moveBlockLeft>:

void moveBlockLeft(){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	eraseCurrentBlock();
 80044d4:	f7fe fcf6 	bl	8002ec4 <eraseCurrentBlock>
	updateXpos(1);
 80044d8:	2001      	movs	r0, #1
 80044da:	f7fe fd87 	bl	8002fec <updateXpos>
	drawCurrentBlock();
 80044de:	f7fe fc9d 	bl	8002e1c <drawCurrentBlock>
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <moveBlockRight>:

void moveBlockRight(){
 80044e6:	b580      	push	{r7, lr}
 80044e8:	af00      	add	r7, sp, #0
	eraseCurrentBlock();
 80044ea:	f7fe fceb 	bl	8002ec4 <eraseCurrentBlock>
	updateXpos(2);
 80044ee:	2002      	movs	r0, #2
 80044f0:	f7fe fd7c 	bl	8002fec <updateXpos>
	drawCurrentBlock();
 80044f4:	f7fe fc92 	bl	8002e1c <drawCurrentBlock>
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}

080044fc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004500:	b672      	cpsid	i
}
 8004502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <LCD_Error_Handler+0x8>

08004508 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800450c:	f000 fef4 	bl	80052f8 <STMPE811_Init>
 8004510:	4603      	mov	r3, r0
 8004512:	2b02      	cmp	r3, #2
 8004514:	d001      	beq.n	800451a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <InitializeLCDTouch+0xe>
  }
}
 800451a:	bf00      	nop
 800451c:	bd80      	pop	{r7, pc}

0800451e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ffd0 	bl	80054cc <STMPE811_DetermineTouchPosition>
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	4603      	mov	r3, r0
 800453c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 ffa0 	bl	8005486 <STMPE811_Read>
 8004546:	4603      	mov	r3, r0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	460a      	mov	r2, r1
 800455a:	71fb      	strb	r3, [r7, #7]
 800455c:	4613      	mov	r3, r2
 800455e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8004560:	79ba      	ldrb	r2, [r7, #6]
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ff9e 	bl	80054a8 <STMPE811_Write>
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <RNG_Init>:

#include <RNG.h>

RNG_HandleTypeDef RNG_Config;

void RNG_Init(){
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
	__HAL_RCC_RNG_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <RNG_Init+0x40>)
 8004580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004582:	4a0c      	ldr	r2, [pc, #48]	@ (80045b4 <RNG_Init+0x40>)
 8004584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004588:	6353      	str	r3, [r2, #52]	@ 0x34
 800458a:	4b0a      	ldr	r3, [pc, #40]	@ (80045b4 <RNG_Init+0x40>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
	RNG_Config.Instance = RNG;
 8004596:	4b08      	ldr	r3, [pc, #32]	@ (80045b8 <RNG_Init+0x44>)
 8004598:	4a08      	ldr	r2, [pc, #32]	@ (80045bc <RNG_Init+0x48>)
 800459a:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&RNG_Config) != HAL_OK){
 800459c:	4806      	ldr	r0, [pc, #24]	@ (80045b8 <RNG_Init+0x44>)
 800459e:	f004 f8e9 	bl	8008774 <HAL_RNG_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <RNG_Init+0x38>
		for (;;);
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <RNG_Init+0x34>
	}
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40023800 	.word	0x40023800
 80045b8:	20025e44 	.word	0x20025e44
 80045bc:	50060800 	.word	0x50060800

080045c0 <GetRandomBlock>:

uint32_t GetRandomBlock(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
	uint32_t random_num = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
	random_num = HAL_RNG_GetRandomNumber(&RNG_Config);
 80045ca:	480b      	ldr	r0, [pc, #44]	@ (80045f8 <GetRandomBlock+0x38>)
 80045cc:	f004 f952 	bl	8008874 <HAL_RNG_GetRandomNumber>
 80045d0:	6078      	str	r0, [r7, #4]
	random_num = (random_num % 7) + 1;
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <GetRandomBlock+0x3c>)
 80045d6:	fba3 2301 	umull	r2, r3, r3, r1
 80045da:	1aca      	subs	r2, r1, r3
 80045dc:	0852      	lsrs	r2, r2, #1
 80045de:	4413      	add	r3, r2
 80045e0:	089a      	lsrs	r2, r3, #2
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	1aca      	subs	r2, r1, r3
 80045ea:	1c53      	adds	r3, r2, #1
 80045ec:	607b      	str	r3, [r7, #4]
	return random_num;
 80045ee:	687b      	ldr	r3, [r7, #4]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20025e44 	.word	0x20025e44
 80045fc:	24924925 	.word	0x24924925

08004600 <getScheduledEvents>:
#include <Scheduler.h>

static uint32_t scheduledEvents;

// Returns the scheduled events
uint32_t getScheduledEvents(){
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8004604:	4b03      	ldr	r3, [pc, #12]	@ (8004614 <getScheduledEvents+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20025e54 	.word	0x20025e54

08004618 <addSchedulerEvent>:

// Adds an event to be scheduled
void addSchedulerEvent(uint32_t event){
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= event;
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <addSchedulerEvent+0x20>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4313      	orrs	r3, r2
 8004628:	4a03      	ldr	r2, [pc, #12]	@ (8004638 <addSchedulerEvent+0x20>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	20025e54 	.word	0x20025e54

0800463c <removeSchedulerEvent>:

// Removes event to be scheduled
void removeSchedulerEvent(uint32_t event){
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(event);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	43da      	mvns	r2, r3
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <removeSchedulerEvent+0x24>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4013      	ands	r3, r2
 800464e:	4a04      	ldr	r2, [pc, #16]	@ (8004660 <removeSchedulerEvent+0x24>)
 8004650:	6013      	str	r3, [r2, #0]
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20025e54 	.word	0x20025e54

08004664 <timer3Init>:
#include <Timer_Driver.h>

TIM_HandleTypeDef TIM3_Config;


void timer3Init(){
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM3_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <timer3Init+0x74>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	4a19      	ldr	r2, [pc, #100]	@ (80046d8 <timer3Init+0x74>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6413      	str	r3, [r2, #64]	@ 0x40
 800467a:	4b17      	ldr	r3, [pc, #92]	@ (80046d8 <timer3Init+0x74>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	687b      	ldr	r3, [r7, #4]

	TIM3_Config.Instance = TIM3;
 8004686:	4b15      	ldr	r3, [pc, #84]	@ (80046dc <timer3Init+0x78>)
 8004688:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <timer3Init+0x7c>)
 800468a:	601a      	str	r2, [r3, #0]
	TIM3_Config.Init.Prescaler = 1000;
 800468c:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <timer3Init+0x78>)
 800468e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004692:	605a      	str	r2, [r3, #4]
	TIM3_Config.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004694:	4b11      	ldr	r3, [pc, #68]	@ (80046dc <timer3Init+0x78>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
	TIM3_Config.Init.Period = (65536-1);
 800469a:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <timer3Init+0x78>)
 800469c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046a0:	60da      	str	r2, [r3, #12]
	TIM3_Config.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046a2:	4b0e      	ldr	r3, [pc, #56]	@ (80046dc <timer3Init+0x78>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	611a      	str	r2, [r3, #16]
	TIM3_Config.Init.RepetitionCounter = 0;
 80046a8:	4b0c      	ldr	r3, [pc, #48]	@ (80046dc <timer3Init+0x78>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	615a      	str	r2, [r3, #20]

	if (HAL_TIM_Base_Init(&TIM3_Config) != HAL_OK) {
 80046ae:	480b      	ldr	r0, [pc, #44]	@ (80046dc <timer3Init+0x78>)
 80046b0:	f004 fbd4 	bl	8008e5c <HAL_TIM_Base_Init>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <timer3Init+0x5a>
	        // Initialization Error
	        while(1);
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <timer3Init+0x56>
	    }

	HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2103      	movs	r1, #3
 80046c2:	201d      	movs	r0, #29
 80046c4:	f001 fc0b 	bl	8005ede <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046c8:	201d      	movs	r0, #29
 80046ca:	f001 fc24 	bl	8005f16 <HAL_NVIC_EnableIRQ>

//	HAL_TIM_Base_Start_IT(&TIM3_Config);
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	20025e58 	.word	0x20025e58
 80046e0:	40000400 	.word	0x40000400

080046e4 <TIM3_Start>:

void TIM3_Start(){
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&TIM3_Config);
 80046e8:	4802      	ldr	r0, [pc, #8]	@ (80046f4 <TIM3_Start+0x10>)
 80046ea:	f004 fc07 	bl	8008efc <HAL_TIM_Base_Start_IT>
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20025e58 	.word	0x20025e58

080046f8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80046fc:	f000 f9fe 	bl	8004afc <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8004700:	20ca      	movs	r0, #202	@ 0xca
 8004702:	f000 f943 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8004706:	20c3      	movs	r0, #195	@ 0xc3
 8004708:	f000 f94d 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800470c:	2008      	movs	r0, #8
 800470e:	f000 f94a 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8004712:	2050      	movs	r0, #80	@ 0x50
 8004714:	f000 f947 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8004718:	20cf      	movs	r0, #207	@ 0xcf
 800471a:	f000 f937 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800471e:	2000      	movs	r0, #0
 8004720:	f000 f941 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8004724:	20c1      	movs	r0, #193	@ 0xc1
 8004726:	f000 f93e 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800472a:	2030      	movs	r0, #48	@ 0x30
 800472c:	f000 f93b 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8004730:	20ed      	movs	r0, #237	@ 0xed
 8004732:	f000 f92b 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8004736:	2064      	movs	r0, #100	@ 0x64
 8004738:	f000 f935 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800473c:	2003      	movs	r0, #3
 800473e:	f000 f932 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8004742:	2012      	movs	r0, #18
 8004744:	f000 f92f 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8004748:	2081      	movs	r0, #129	@ 0x81
 800474a:	f000 f92c 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800474e:	20e8      	movs	r0, #232	@ 0xe8
 8004750:	f000 f91c 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8004754:	2085      	movs	r0, #133	@ 0x85
 8004756:	f000 f926 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800475a:	2000      	movs	r0, #0
 800475c:	f000 f923 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8004760:	2078      	movs	r0, #120	@ 0x78
 8004762:	f000 f920 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8004766:	20cb      	movs	r0, #203	@ 0xcb
 8004768:	f000 f910 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800476c:	2039      	movs	r0, #57	@ 0x39
 800476e:	f000 f91a 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8004772:	202c      	movs	r0, #44	@ 0x2c
 8004774:	f000 f917 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004778:	2000      	movs	r0, #0
 800477a:	f000 f914 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800477e:	2034      	movs	r0, #52	@ 0x34
 8004780:	f000 f911 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8004784:	2002      	movs	r0, #2
 8004786:	f000 f90e 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800478a:	20f7      	movs	r0, #247	@ 0xf7
 800478c:	f000 f8fe 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8004790:	2020      	movs	r0, #32
 8004792:	f000 f908 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8004796:	20ea      	movs	r0, #234	@ 0xea
 8004798:	f000 f8f8 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800479c:	2000      	movs	r0, #0
 800479e:	f000 f902 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80047a2:	2000      	movs	r0, #0
 80047a4:	f000 f8ff 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80047a8:	20b1      	movs	r0, #177	@ 0xb1
 80047aa:	f000 f8ef 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80047ae:	2000      	movs	r0, #0
 80047b0:	f000 f8f9 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80047b4:	201b      	movs	r0, #27
 80047b6:	f000 f8f6 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80047ba:	20b6      	movs	r0, #182	@ 0xb6
 80047bc:	f000 f8e6 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80047c0:	200a      	movs	r0, #10
 80047c2:	f000 f8f0 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80047c6:	20a2      	movs	r0, #162	@ 0xa2
 80047c8:	f000 f8ed 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80047cc:	20c0      	movs	r0, #192	@ 0xc0
 80047ce:	f000 f8dd 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80047d2:	2010      	movs	r0, #16
 80047d4:	f000 f8e7 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80047d8:	20c1      	movs	r0, #193	@ 0xc1
 80047da:	f000 f8d7 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80047de:	2010      	movs	r0, #16
 80047e0:	f000 f8e1 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80047e4:	20c5      	movs	r0, #197	@ 0xc5
 80047e6:	f000 f8d1 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80047ea:	2045      	movs	r0, #69	@ 0x45
 80047ec:	f000 f8db 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80047f0:	2015      	movs	r0, #21
 80047f2:	f000 f8d8 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80047f6:	20c7      	movs	r0, #199	@ 0xc7
 80047f8:	f000 f8c8 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80047fc:	2090      	movs	r0, #144	@ 0x90
 80047fe:	f000 f8d2 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8004802:	2036      	movs	r0, #54	@ 0x36
 8004804:	f000 f8c2 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8004808:	20c8      	movs	r0, #200	@ 0xc8
 800480a:	f000 f8cc 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800480e:	20f2      	movs	r0, #242	@ 0xf2
 8004810:	f000 f8bc 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004814:	2000      	movs	r0, #0
 8004816:	f000 f8c6 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800481a:	20b0      	movs	r0, #176	@ 0xb0
 800481c:	f000 f8b6 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8004820:	20c2      	movs	r0, #194	@ 0xc2
 8004822:	f000 f8c0 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8004826:	20b6      	movs	r0, #182	@ 0xb6
 8004828:	f000 f8b0 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800482c:	200a      	movs	r0, #10
 800482e:	f000 f8ba 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8004832:	20a7      	movs	r0, #167	@ 0xa7
 8004834:	f000 f8b7 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8004838:	2027      	movs	r0, #39	@ 0x27
 800483a:	f000 f8b4 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800483e:	2004      	movs	r0, #4
 8004840:	f000 f8b1 	bl	80049a6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8004844:	202a      	movs	r0, #42	@ 0x2a
 8004846:	f000 f8a1 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f000 f8ab 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004850:	2000      	movs	r0, #0
 8004852:	f000 f8a8 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8004856:	2000      	movs	r0, #0
 8004858:	f000 f8a5 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800485c:	20ef      	movs	r0, #239	@ 0xef
 800485e:	f000 f8a2 	bl	80049a6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8004862:	202b      	movs	r0, #43	@ 0x2b
 8004864:	f000 f892 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004868:	2000      	movs	r0, #0
 800486a:	f000 f89c 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f000 f899 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8004874:	2001      	movs	r0, #1
 8004876:	f000 f896 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800487a:	203f      	movs	r0, #63	@ 0x3f
 800487c:	f000 f893 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8004880:	20f6      	movs	r0, #246	@ 0xf6
 8004882:	f000 f883 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8004886:	2001      	movs	r0, #1
 8004888:	f000 f88d 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800488c:	2000      	movs	r0, #0
 800488e:	f000 f88a 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8004892:	2006      	movs	r0, #6
 8004894:	f000 f887 	bl	80049a6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8004898:	202c      	movs	r0, #44	@ 0x2c
 800489a:	f000 f877 	bl	800498c <ili9341_Write_Reg>
  LCD_Delay(200);
 800489e:	20c8      	movs	r0, #200	@ 0xc8
 80048a0:	f000 f9e8 	bl	8004c74 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80048a4:	2026      	movs	r0, #38	@ 0x26
 80048a6:	f000 f871 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80048aa:	2001      	movs	r0, #1
 80048ac:	f000 f87b 	bl	80049a6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80048b0:	20e0      	movs	r0, #224	@ 0xe0
 80048b2:	f000 f86b 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80048b6:	200f      	movs	r0, #15
 80048b8:	f000 f875 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80048bc:	2029      	movs	r0, #41	@ 0x29
 80048be:	f000 f872 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80048c2:	2024      	movs	r0, #36	@ 0x24
 80048c4:	f000 f86f 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80048c8:	200c      	movs	r0, #12
 80048ca:	f000 f86c 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80048ce:	200e      	movs	r0, #14
 80048d0:	f000 f869 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80048d4:	2009      	movs	r0, #9
 80048d6:	f000 f866 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80048da:	204e      	movs	r0, #78	@ 0x4e
 80048dc:	f000 f863 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80048e0:	2078      	movs	r0, #120	@ 0x78
 80048e2:	f000 f860 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80048e6:	203c      	movs	r0, #60	@ 0x3c
 80048e8:	f000 f85d 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80048ec:	2009      	movs	r0, #9
 80048ee:	f000 f85a 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80048f2:	2013      	movs	r0, #19
 80048f4:	f000 f857 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80048f8:	2005      	movs	r0, #5
 80048fa:	f000 f854 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 80048fe:	2017      	movs	r0, #23
 8004900:	f000 f851 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8004904:	2011      	movs	r0, #17
 8004906:	f000 f84e 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800490a:	2000      	movs	r0, #0
 800490c:	f000 f84b 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8004910:	20e1      	movs	r0, #225	@ 0xe1
 8004912:	f000 f83b 	bl	800498c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8004916:	2000      	movs	r0, #0
 8004918:	f000 f845 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800491c:	2016      	movs	r0, #22
 800491e:	f000 f842 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8004922:	201b      	movs	r0, #27
 8004924:	f000 f83f 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8004928:	2004      	movs	r0, #4
 800492a:	f000 f83c 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800492e:	2011      	movs	r0, #17
 8004930:	f000 f839 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8004934:	2007      	movs	r0, #7
 8004936:	f000 f836 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800493a:	2031      	movs	r0, #49	@ 0x31
 800493c:	f000 f833 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8004940:	2033      	movs	r0, #51	@ 0x33
 8004942:	f000 f830 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8004946:	2042      	movs	r0, #66	@ 0x42
 8004948:	f000 f82d 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800494c:	2005      	movs	r0, #5
 800494e:	f000 f82a 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8004952:	200c      	movs	r0, #12
 8004954:	f000 f827 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8004958:	200a      	movs	r0, #10
 800495a:	f000 f824 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800495e:	2028      	movs	r0, #40	@ 0x28
 8004960:	f000 f821 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8004964:	202f      	movs	r0, #47	@ 0x2f
 8004966:	f000 f81e 	bl	80049a6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800496a:	200f      	movs	r0, #15
 800496c:	f000 f81b 	bl	80049a6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8004970:	2011      	movs	r0, #17
 8004972:	f000 f80b 	bl	800498c <ili9341_Write_Reg>
  LCD_Delay(200);
 8004976:	20c8      	movs	r0, #200	@ 0xc8
 8004978:	f000 f97c 	bl	8004c74 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800497c:	2029      	movs	r0, #41	@ 0x29
 800497e:	f000 f805 	bl	800498c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8004982:	202c      	movs	r0, #44	@ 0x2c
 8004984:	f000 f802 	bl	800498c <ili9341_Write_Reg>
}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}

0800498c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f949 	bl	8004c30 <LCD_IO_WriteReg>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f91a 	bl	8004bec <LCD_IO_WriteData>
}
 80049b8:	bf00      	nop
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80049c4:	4819      	ldr	r0, [pc, #100]	@ (8004a2c <SPI_Init+0x6c>)
 80049c6:	f004 f95f 	bl	8008c88 <HAL_SPI_GetState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d12b      	bne.n	8004a28 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80049d0:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <SPI_Init+0x6c>)
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <SPI_Init+0x70>)
 80049d4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <SPI_Init+0x6c>)
 80049d8:	2218      	movs	r2, #24
 80049da:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80049dc:	4b13      	ldr	r3, [pc, #76]	@ (8004a2c <SPI_Init+0x6c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <SPI_Init+0x6c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80049e8:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <SPI_Init+0x6c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80049ee:	4b0f      	ldr	r3, [pc, #60]	@ (8004a2c <SPI_Init+0x6c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <SPI_Init+0x6c>)
 80049f6:	2207      	movs	r2, #7
 80049f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80049fa:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <SPI_Init+0x6c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <SPI_Init+0x6c>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <SPI_Init+0x6c>)
 8004a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <SPI_Init+0x6c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8004a14:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <SPI_Init+0x6c>)
 8004a16:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a1a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8004a1c:	4803      	ldr	r0, [pc, #12]	@ (8004a2c <SPI_Init+0x6c>)
 8004a1e:	f000 f833 	bl	8004a88 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8004a22:	4802      	ldr	r0, [pc, #8]	@ (8004a2c <SPI_Init+0x6c>)
 8004a24:	f003 ff3b 	bl	800889e <HAL_SPI_Init>
  }
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20025ea0 	.word	0x20025ea0
 8004a30:	40015000 	.word	0x40015000

08004a34 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <SPI_Write+0x34>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1db9      	adds	r1, r7, #6
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4808      	ldr	r0, [pc, #32]	@ (8004a6c <SPI_Write+0x38>)
 8004a4c:	f003 ffd8 	bl	8008a00 <HAL_SPI_Transmit>
 8004a50:	4603      	mov	r3, r0
 8004a52:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8004a5a:	f000 f809 	bl	8004a70 <SPI_Error>
  }
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000010 	.word	0x20000010
 8004a6c:	20025ea0 	.word	0x20025ea0

08004a70 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004a74:	4803      	ldr	r0, [pc, #12]	@ (8004a84 <SPI_Error+0x14>)
 8004a76:	f003 ff9b 	bl	80089b0 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8004a7a:	f7ff ffa1 	bl	80049c0 <SPI_Init>
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20025ea0 	.word	0x20025ea0

08004a88 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	4b17      	ldr	r3, [pc, #92]	@ (8004af4 <SPI_MspInit+0x6c>)
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	4a16      	ldr	r2, [pc, #88]	@ (8004af4 <SPI_MspInit+0x6c>)
 8004a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aa0:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <SPI_MspInit+0x6c>)
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
 8004ab0:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <SPI_MspInit+0x6c>)
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8004af4 <SPI_MspInit+0x6c>)
 8004ab6:	f043 0320 	orr.w	r3, r3, #32
 8004aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8004abc:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <SPI_MspInit+0x6c>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8004ac8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8004acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8004ada:	2305      	movs	r3, #5
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8004ade:	f107 0314 	add.w	r3, r7, #20
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4804      	ldr	r0, [pc, #16]	@ (8004af8 <SPI_MspInit+0x70>)
 8004ae6:	f001 fa65 	bl	8005fb4 <HAL_GPIO_Init>
}
 8004aea:	bf00      	nop
 8004aec:	3728      	adds	r7, #40	@ 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40021400 	.word	0x40021400

08004afc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8004b02:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <LCD_IO_Init+0xe0>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d164      	bne.n	8004bd4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8004b0a:	4b34      	ldr	r3, [pc, #208]	@ (8004bdc <LCD_IO_Init+0xe0>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	4b32      	ldr	r3, [pc, #200]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	4a31      	ldr	r2, [pc, #196]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b1a:	f043 0308 	orr.w	r3, r3, #8
 8004b1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b20:	4b2f      	ldr	r3, [pc, #188]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8004b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004b32:	2301      	movs	r3, #1
 8004b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8004b3e:	f107 030c 	add.w	r3, r7, #12
 8004b42:	4619      	mov	r1, r3
 8004b44:	4827      	ldr	r0, [pc, #156]	@ (8004be4 <LCD_IO_Init+0xe8>)
 8004b46:	f001 fa35 	bl	8005fb4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	4b24      	ldr	r3, [pc, #144]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	4a23      	ldr	r2, [pc, #140]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b54:	f043 0308 	orr.w	r3, r3, #8
 8004b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b5a:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	607b      	str	r3, [r7, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8004b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004b74:	2302      	movs	r3, #2
 8004b76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8004b78:	f107 030c 	add.w	r3, r7, #12
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4819      	ldr	r0, [pc, #100]	@ (8004be4 <LCD_IO_Init+0xe8>)
 8004b80:	f001 fa18 	bl	8005fb4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4b15      	ldr	r3, [pc, #84]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8c:	4a14      	ldr	r2, [pc, #80]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b94:	4b12      	ldr	r3, [pc, #72]	@ (8004be0 <LCD_IO_Init+0xe4>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	603b      	str	r3, [r7, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8004bac:	2302      	movs	r3, #2
 8004bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	480c      	ldr	r0, [pc, #48]	@ (8004be8 <LCD_IO_Init+0xec>)
 8004bb8:	f001 f9fc 	bl	8005fb4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2104      	movs	r1, #4
 8004bc0:	4809      	ldr	r0, [pc, #36]	@ (8004be8 <LCD_IO_Init+0xec>)
 8004bc2:	f001 fcaf 	bl	8006524 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2104      	movs	r1, #4
 8004bca:	4807      	ldr	r0, [pc, #28]	@ (8004be8 <LCD_IO_Init+0xec>)
 8004bcc:	f001 fcaa 	bl	8006524 <HAL_GPIO_WritePin>

    SPI_Init();
 8004bd0:	f7ff fef6 	bl	80049c0 <SPI_Init>
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20025ef8 	.word	0x20025ef8
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40020c00 	.word	0x40020c00
 8004be8:	40020800 	.word	0x40020800

08004bec <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bfc:	480a      	ldr	r0, [pc, #40]	@ (8004c28 <LCD_IO_WriteData+0x3c>)
 8004bfe:	f001 fc91 	bl	8006524 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8004c02:	2200      	movs	r2, #0
 8004c04:	2104      	movs	r1, #4
 8004c06:	4809      	ldr	r0, [pc, #36]	@ (8004c2c <LCD_IO_WriteData+0x40>)
 8004c08:	f001 fc8c 	bl	8006524 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8004c0c:	88fb      	ldrh	r3, [r7, #6]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff ff10 	bl	8004a34 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004c14:	2201      	movs	r2, #1
 8004c16:	2104      	movs	r1, #4
 8004c18:	4804      	ldr	r0, [pc, #16]	@ (8004c2c <LCD_IO_WriteData+0x40>)
 8004c1a:	f001 fc83 	bl	8006524 <HAL_GPIO_WritePin>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40020c00 	.word	0x40020c00
 8004c2c:	40020800 	.word	0x40020800

08004c30 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c40:	480a      	ldr	r0, [pc, #40]	@ (8004c6c <LCD_IO_WriteReg+0x3c>)
 8004c42:	f001 fc6f 	bl	8006524 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8004c46:	2200      	movs	r2, #0
 8004c48:	2104      	movs	r1, #4
 8004c4a:	4809      	ldr	r0, [pc, #36]	@ (8004c70 <LCD_IO_WriteReg+0x40>)
 8004c4c:	f001 fc6a 	bl	8006524 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff feed 	bl	8004a34 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	2104      	movs	r1, #4
 8004c5e:	4804      	ldr	r0, [pc, #16]	@ (8004c70 <LCD_IO_WriteReg+0x40>)
 8004c60:	f001 fc60 	bl	8006524 <HAL_GPIO_WritePin>
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40020c00 	.word	0x40020c00
 8004c70:	40020800 	.word	0x40020800

08004c74 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 ffed 	bl	8005c5c <HAL_Delay>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c90:	f000 ff72 	bl	8005b78 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8004c94:	f000 f838 	bl	8004d08 <SystemClockOverride>

//  I2C3_GPIO_Init();
//  I2C3_Init();

  ApplicationInit(); // Initializes the LCD functionality
 8004c98:	f7fb fc72 	bl	8000580 <ApplicationInit>
  TIM3_App_Start();
 8004c9c:	f7fb fc92 	bl	80005c4 <TIM3_App_Start>

  for (;;)
  {
//	  Gyro_DevID();
    /* USER CODE END WHILE */
	  eventsToRun = getScheduledEvents();
 8004ca0:	f7ff fcae 	bl	8004600 <getScheduledEvents>
 8004ca4:	6078      	str	r0, [r7, #4]
	  if (eventsToRun & ROTATE_BLOCK){
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d004      	beq.n	8004cba <main+0x30>
		  rotateBlock();
 8004cb0:	f7fe f800 	bl	8002cb4 <rotateBlock>
//		  HAL_Delay(100);
		  removeSchedulerEvent(ROTATE_BLOCK);
 8004cb4:	2020      	movs	r0, #32
 8004cb6:	f7ff fcc1 	bl	800463c <removeSchedulerEvent>
	  }
	  if (eventsToRun & DROP_BLOCK){
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <main+0x44>
		  moveBlockDown();
 8004cc4:	f7ff fbfa 	bl	80044bc <moveBlockDown>
		  removeSchedulerEvent(DROP_BLOCK);
 8004cc8:	2040      	movs	r0, #64	@ 0x40
 8004cca:	f7ff fcb7 	bl	800463c <removeSchedulerEvent>
	  }
	  if (eventsToRun & MOVE_LEFT){
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <main+0x58>
		  moveBlockLeft();
 8004cd8:	f7ff fbfa 	bl	80044d0 <moveBlockLeft>
		  removeSchedulerEvent(MOVE_LEFT);
 8004cdc:	2080      	movs	r0, #128	@ 0x80
 8004cde:	f7ff fcad 	bl	800463c <removeSchedulerEvent>
	  }
	  if (eventsToRun & MOVE_RIGHT){
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <main+0x6e>
		  moveBlockRight();
 8004cec:	f7ff fbfb 	bl	80044e6 <moveBlockRight>
		  removeSchedulerEvent(MOVE_RIGHT);
 8004cf0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004cf4:	f7ff fca2 	bl	800463c <removeSchedulerEvent>
	  }
	  if (eventsToRun & GAME_OVER){
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ce      	beq.n	8004ca0 <main+0x16>
		  gameOver();
 8004d02:	f7fc fa9f 	bl	8001244 <gameOver>
	  eventsToRun = getScheduledEvents();
 8004d06:	e7cb      	b.n	8004ca0 <main+0x16>

08004d08 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b092      	sub	sp, #72	@ 0x48
 8004d0c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d0e:	2300      	movs	r3, #0
 8004d10:	603b      	str	r3, [r7, #0]
 8004d12:	4b1c      	ldr	r3, [pc, #112]	@ (8004d84 <SystemClockOverride+0x7c>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	4a1b      	ldr	r2, [pc, #108]	@ (8004d84 <SystemClockOverride+0x7c>)
 8004d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d1e:	4b19      	ldr	r3, [pc, #100]	@ (8004d84 <SystemClockOverride+0x7c>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d32:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d34:	2302      	movs	r3, #2
 8004d36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004d3c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004d3e:	2308      	movs	r3, #8
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004d42:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004d4c:	2307      	movs	r3, #7
 8004d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004d50:	1d3b      	adds	r3, r7, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f002 feca 	bl	8007aec <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004d58:	230f      	movs	r3, #15
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d60:	2300      	movs	r3, #0
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004d64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004d68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004d6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d6e:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004d70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004d74:	2105      	movs	r1, #5
 8004d76:	4618      	mov	r0, r3
 8004d78:	f003 f930 	bl	8007fdc <HAL_RCC_ClockConfig>
}
 8004d7c:	bf00      	nop
 8004d7e:	3748      	adds	r7, #72	@ 0x48
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800

08004d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004d8c:	b672      	cpsid	i
}
 8004d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <Error_Handler+0x8>

08004d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	607b      	str	r3, [r7, #4]
 8004d9e:	4b10      	ldr	r3, [pc, #64]	@ (8004de0 <HAL_MspInit+0x4c>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	4a0f      	ldr	r2, [pc, #60]	@ (8004de0 <HAL_MspInit+0x4c>)
 8004da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <HAL_MspInit+0x4c>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	2300      	movs	r3, #0
 8004db8:	603b      	str	r3, [r7, #0]
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <HAL_MspInit+0x4c>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	4a08      	ldr	r2, [pc, #32]	@ (8004de0 <HAL_MspInit+0x4c>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dc6:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_MspInit+0x4c>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004dd2:	2007      	movs	r0, #7
 8004dd4:	f001 f878 	bl	8005ec8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40023800 	.word	0x40023800

08004de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	@ 0x28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a29      	ldr	r2, [pc, #164]	@ (8004ea8 <HAL_I2C_MspInit+0xc4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d14b      	bne.n	8004e9e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	4b28      	ldr	r3, [pc, #160]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0e:	4a27      	ldr	r2, [pc, #156]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e16:	4b25      	ldr	r3, [pc, #148]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	4b21      	ldr	r3, [pc, #132]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2a:	4a20      	ldr	r2, [pc, #128]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e32:	4b1e      	ldr	r3, [pc, #120]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004e3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e44:	2312      	movs	r3, #18
 8004e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e50:	2304      	movs	r3, #4
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4815      	ldr	r0, [pc, #84]	@ (8004eb0 <HAL_I2C_MspInit+0xcc>)
 8004e5c:	f001 f8aa 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e66:	2312      	movs	r3, #18
 8004e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e72:	2304      	movs	r3, #4
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004e76:	f107 0314 	add.w	r3, r7, #20
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	480d      	ldr	r0, [pc, #52]	@ (8004eb4 <HAL_I2C_MspInit+0xd0>)
 8004e7e:	f001 f899 	bl	8005fb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e92:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <HAL_I2C_MspInit+0xc8>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8004e9e:	bf00      	nop
 8004ea0:	3728      	adds	r7, #40	@ 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40005c00 	.word	0x40005c00
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40020800 	.word	0x40020800
 8004eb4:	40020000 	.word	0x40020000

08004eb8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b09a      	sub	sp, #104	@ 0x68
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	60da      	str	r2, [r3, #12]
 8004ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ed4:	2230      	movs	r2, #48	@ 0x30
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 fad7 	bl	800948c <memset>
  if(hltdc->Instance==LTDC)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a81      	ldr	r2, [pc, #516]	@ (80050e8 <HAL_LTDC_MspInit+0x230>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	f040 80fa 	bne.w	80050de <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004eea:	2308      	movs	r3, #8
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8004eee:	2332      	movs	r3, #50	@ 0x32
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004efe:	4618      	mov	r0, r3
 8004f00:	f003 fa78 	bl	80083f4 <HAL_RCCEx_PeriphCLKConfig>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8004f0a:	f7ff ff3d 	bl	8004d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	623b      	str	r3, [r7, #32]
 8004f12:	4b76      	ldr	r3, [pc, #472]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	4a75      	ldr	r2, [pc, #468]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f1e:	4b73      	ldr	r3, [pc, #460]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	4a6e      	ldr	r2, [pc, #440]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f34:	f043 0320 	orr.w	r3, r3, #32
 8004f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f3a:	4b6c      	ldr	r3, [pc, #432]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	61fb      	str	r3, [r7, #28]
 8004f44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	4b68      	ldr	r3, [pc, #416]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	4a67      	ldr	r2, [pc, #412]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f56:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	4b61      	ldr	r3, [pc, #388]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	4a60      	ldr	r2, [pc, #384]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f72:	4b5e      	ldr	r3, [pc, #376]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	4b5a      	ldr	r3, [pc, #360]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	4a59      	ldr	r2, [pc, #356]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f8e:	4b57      	ldr	r3, [pc, #348]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	4b53      	ldr	r3, [pc, #332]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa2:	4a52      	ldr	r2, [pc, #328]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004faa:	4b50      	ldr	r3, [pc, #320]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	4b4c      	ldr	r3, [pc, #304]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	4a4b      	ldr	r2, [pc, #300]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc6:	4b49      	ldr	r3, [pc, #292]	@ (80050ec <HAL_LTDC_MspInit+0x234>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fd6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004fe4:	230e      	movs	r3, #14
 8004fe6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004fe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004fec:	4619      	mov	r1, r3
 8004fee:	4840      	ldr	r0, [pc, #256]	@ (80050f0 <HAL_LTDC_MspInit+0x238>)
 8004ff0:	f000 ffe0 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8004ff4:	f641 0358 	movw	r3, #6232	@ 0x1858
 8004ff8:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005002:	2300      	movs	r3, #0
 8005004:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005006:	230e      	movs	r3, #14
 8005008:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800500a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800500e:	4619      	mov	r1, r3
 8005010:	4838      	ldr	r0, [pc, #224]	@ (80050f4 <HAL_LTDC_MspInit+0x23c>)
 8005012:	f000 ffcf 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8005016:	2303      	movs	r3, #3
 8005018:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	2300      	movs	r3, #0
 8005024:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005026:	2309      	movs	r3, #9
 8005028:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800502a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800502e:	4619      	mov	r1, r3
 8005030:	4831      	ldr	r0, [pc, #196]	@ (80050f8 <HAL_LTDC_MspInit+0x240>)
 8005032:	f000 ffbf 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8005036:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800503a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503c:	2302      	movs	r3, #2
 800503e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	2300      	movs	r3, #0
 8005042:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005044:	2300      	movs	r3, #0
 8005046:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005048:	230e      	movs	r3, #14
 800504a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005050:	4619      	mov	r1, r3
 8005052:	4829      	ldr	r0, [pc, #164]	@ (80050f8 <HAL_LTDC_MspInit+0x240>)
 8005054:	f000 ffae 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8005058:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800505c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800505e:	2302      	movs	r3, #2
 8005060:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005062:	2300      	movs	r3, #0
 8005064:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005066:	2300      	movs	r3, #0
 8005068:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800506a:	230e      	movs	r3, #14
 800506c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800506e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005072:	4619      	mov	r1, r3
 8005074:	4821      	ldr	r0, [pc, #132]	@ (80050fc <HAL_LTDC_MspInit+0x244>)
 8005076:	f000 ff9d 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800507a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800507e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005080:	2302      	movs	r3, #2
 8005082:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005084:	2300      	movs	r3, #0
 8005086:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005088:	2300      	movs	r3, #0
 800508a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800508c:	230e      	movs	r3, #14
 800508e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005090:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005094:	4619      	mov	r1, r3
 8005096:	481a      	ldr	r0, [pc, #104]	@ (8005100 <HAL_LTDC_MspInit+0x248>)
 8005098:	f000 ff8c 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800509c:	2348      	movs	r3, #72	@ 0x48
 800509e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a0:	2302      	movs	r3, #2
 80050a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a8:	2300      	movs	r3, #0
 80050aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80050ac:	230e      	movs	r3, #14
 80050ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80050b4:	4619      	mov	r1, r3
 80050b6:	4813      	ldr	r0, [pc, #76]	@ (8005104 <HAL_LTDC_MspInit+0x24c>)
 80050b8:	f000 ff7c 	bl	8005fb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80050bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80050c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c2:	2302      	movs	r3, #2
 80050c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ca:	2300      	movs	r3, #0
 80050cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80050ce:	2309      	movs	r3, #9
 80050d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80050d6:	4619      	mov	r1, r3
 80050d8:	4808      	ldr	r0, [pc, #32]	@ (80050fc <HAL_LTDC_MspInit+0x244>)
 80050da:	f000 ff6b 	bl	8005fb4 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80050de:	bf00      	nop
 80050e0:	3768      	adds	r7, #104	@ 0x68
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40016800 	.word	0x40016800
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40021400 	.word	0x40021400
 80050f4:	40020000 	.word	0x40020000
 80050f8:	40020400 	.word	0x40020400
 80050fc:	40021800 	.word	0x40021800
 8005100:	40020800 	.word	0x40020800
 8005104:	40020c00 	.word	0x40020c00

08005108 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0b      	ldr	r2, [pc, #44]	@ (8005144 <HAL_RNG_MspInit+0x3c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	4b0a      	ldr	r3, [pc, #40]	@ (8005148 <HAL_RNG_MspInit+0x40>)
 8005120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005122:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <HAL_RNG_MspInit+0x40>)
 8005124:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005128:	6353      	str	r3, [r2, #52]	@ 0x34
 800512a:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <HAL_RNG_MspInit+0x40>)
 800512c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	50060800 	.word	0x50060800
 8005148:	40023800 	.word	0x40023800

0800514c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	@ 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	@ (80051d0 <HAL_SPI_MspInit+0x84>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d12c      	bne.n	80051c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	4b18      	ldr	r3, [pc, #96]	@ (80051d4 <HAL_SPI_MspInit+0x88>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	4a17      	ldr	r2, [pc, #92]	@ (80051d4 <HAL_SPI_MspInit+0x88>)
 8005178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800517c:	6453      	str	r3, [r2, #68]	@ 0x44
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <HAL_SPI_MspInit+0x88>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	4b11      	ldr	r3, [pc, #68]	@ (80051d4 <HAL_SPI_MspInit+0x88>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	4a10      	ldr	r2, [pc, #64]	@ (80051d4 <HAL_SPI_MspInit+0x88>)
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6313      	str	r3, [r2, #48]	@ 0x30
 800519a:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <HAL_SPI_MspInit+0x88>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80051a6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80051aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ac:	2302      	movs	r3, #2
 80051ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80051b8:	2305      	movs	r3, #5
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4619      	mov	r1, r3
 80051c2:	4805      	ldr	r0, [pc, #20]	@ (80051d8 <HAL_SPI_MspInit+0x8c>)
 80051c4:	f000 fef6 	bl	8005fb4 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80051c8:	bf00      	nop
 80051ca:	3728      	adds	r7, #40	@ 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40015000 	.word	0x40015000
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40021400 	.word	0x40021400

080051dc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a08      	ldr	r2, [pc, #32]	@ (800520c <HAL_SPI_MspDeInit+0x30>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10a      	bne.n	8005204 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80051ee:	4b08      	ldr	r3, [pc, #32]	@ (8005210 <HAL_SPI_MspDeInit+0x34>)
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	4a07      	ldr	r2, [pc, #28]	@ (8005210 <HAL_SPI_MspDeInit+0x34>)
 80051f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80051f8:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80051fa:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80051fe:	4805      	ldr	r0, [pc, #20]	@ (8005214 <HAL_SPI_MspDeInit+0x38>)
 8005200:	f001 f884 	bl	800630c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40015000 	.word	0x40015000
 8005210:	40023800 	.word	0x40023800
 8005214:	40021400 	.word	0x40021400

08005218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0b      	ldr	r2, [pc, #44]	@ (8005254 <HAL_TIM_Base_MspInit+0x3c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d10d      	bne.n	8005246 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	4b0a      	ldr	r3, [pc, #40]	@ (8005258 <HAL_TIM_Base_MspInit+0x40>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <HAL_TIM_Base_MspInit+0x40>)
 8005234:	f043 0310 	orr.w	r3, r3, #16
 8005238:	6413      	str	r3, [r2, #64]	@ 0x40
 800523a:	4b07      	ldr	r3, [pc, #28]	@ (8005258 <HAL_TIM_Base_MspInit+0x40>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40001000 	.word	0x40001000
 8005258:	40023800 	.word	0x40023800

0800525c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005260:	bf00      	nop
 8005262:	e7fd      	b.n	8005260 <NMI_Handler+0x4>

08005264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005268:	bf00      	nop
 800526a:	e7fd      	b.n	8005268 <HardFault_Handler+0x4>

0800526c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <MemManage_Handler+0x4>

08005274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005278:	bf00      	nop
 800527a:	e7fd      	b.n	8005278 <BusFault_Handler+0x4>

0800527c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <UsageFault_Handler+0x4>

08005284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b2:	f000 fcb3 	bl	8005c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052b6:	bf00      	nop
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db0b      	blt.n	80052e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	f003 021f 	and.w	r2, r3, #31
 80052d4:	4907      	ldr	r1, [pc, #28]	@ (80052f4 <__NVIC_EnableIRQ+0x38>)
 80052d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2001      	movs	r0, #1
 80052de:	fa00 f202 	lsl.w	r2, r0, r2
 80052e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000e100 	.word	0xe000e100

080052f8 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80052fe:	f000 f9df 	bl	80056c0 <I2C3_MspInit>
//    I2C3_GPIO_Init();
    /* Initialize I2C */
    I2C3_Init();
 8005302:	f000 f99d 	bl	8005640 <I2C3_Init>
//    I2C3__Init();

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8005306:	2202      	movs	r2, #2
 8005308:	2103      	movs	r1, #3
 800530a:	2082      	movs	r0, #130	@ 0x82
 800530c:	f000 fa2c 	bl	8005768 <I2C3_Write>
    HAL_Delay(5);
 8005310:	2005      	movs	r0, #5
 8005312:	f000 fca3 	bl	8005c5c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8005316:	2200      	movs	r2, #0
 8005318:	2103      	movs	r1, #3
 800531a:	2082      	movs	r0, #130	@ 0x82
 800531c:	f000 fa24 	bl	8005768 <I2C3_Write>
    HAL_Delay(2);
 8005320:	2002      	movs	r0, #2
 8005322:	f000 fc9b 	bl	8005c5c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8005326:	1cba      	adds	r2, r7, #2
 8005328:	2302      	movs	r3, #2
 800532a:	2100      	movs	r1, #0
 800532c:	2082      	movs	r0, #130	@ 0x82
 800532e:	f000 fa6b 	bl	8005808 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	b29a      	uxth	r2, r3
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	4313      	orrs	r3, r2
 8005342:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	f640 0211 	movw	r2, #2065	@ 0x811
 800534a:	4293      	cmp	r3, r2
 800534c:	d001      	beq.n	8005352 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800534e:	2303      	movs	r3, #3
 8005350:	e095      	b.n	800547e <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8005352:	2202      	movs	r2, #2
 8005354:	2103      	movs	r1, #3
 8005356:	2082      	movs	r0, #130	@ 0x82
 8005358:	f000 fa06 	bl	8005768 <I2C3_Write>
    HAL_Delay(5);
 800535c:	2005      	movs	r0, #5
 800535e:	f000 fc7d 	bl	8005c5c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8005362:	2200      	movs	r2, #0
 8005364:	2103      	movs	r1, #3
 8005366:	2082      	movs	r0, #130	@ 0x82
 8005368:	f000 f9fe 	bl	8005768 <I2C3_Write>
    HAL_Delay(2);
 800536c:	2002      	movs	r0, #2
 800536e:	f000 fc75 	bl	8005c5c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8005372:	2004      	movs	r0, #4
 8005374:	f000 f887 	bl	8005486 <STMPE811_Read>
 8005378:	4603      	mov	r3, r0
 800537a:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 800537c:	797b      	ldrb	r3, [r7, #5]
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8005384:	797b      	ldrb	r3, [r7, #5]
 8005386:	461a      	mov	r2, r3
 8005388:	2104      	movs	r1, #4
 800538a:	2082      	movs	r0, #130	@ 0x82
 800538c:	f000 f9ec 	bl	8005768 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8005390:	2004      	movs	r0, #4
 8005392:	f000 f878 	bl	8005486 <STMPE811_Read>
 8005396:	4603      	mov	r3, r0
 8005398:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 800539a:	797b      	ldrb	r3, [r7, #5]
 800539c:	f023 0302 	bic.w	r3, r3, #2
 80053a0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80053a2:	797b      	ldrb	r3, [r7, #5]
 80053a4:	461a      	mov	r2, r3
 80053a6:	2104      	movs	r1, #4
 80053a8:	2082      	movs	r0, #130	@ 0x82
 80053aa:	f000 f9dd 	bl	8005768 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80053ae:	2249      	movs	r2, #73	@ 0x49
 80053b0:	2120      	movs	r1, #32
 80053b2:	2082      	movs	r0, #130	@ 0x82
 80053b4:	f000 f9d8 	bl	8005768 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80053b8:	2002      	movs	r0, #2
 80053ba:	f000 fc4f 	bl	8005c5c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80053be:	2201      	movs	r2, #1
 80053c0:	2121      	movs	r1, #33	@ 0x21
 80053c2:	2082      	movs	r0, #130	@ 0x82
 80053c4:	f000 f9d0 	bl	8005768 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80053c8:	2017      	movs	r0, #23
 80053ca:	f000 f85c 	bl	8005486 <STMPE811_Read>
 80053ce:	4603      	mov	r3, r0
 80053d0:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80053d2:	797b      	ldrb	r3, [r7, #5]
 80053d4:	f043 031e 	orr.w	r3, r3, #30
 80053d8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80053da:	797b      	ldrb	r3, [r7, #5]
 80053dc:	461a      	mov	r2, r3
 80053de:	2117      	movs	r1, #23
 80053e0:	2082      	movs	r0, #130	@ 0x82
 80053e2:	f000 f9c1 	bl	8005768 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80053e6:	229a      	movs	r2, #154	@ 0x9a
 80053e8:	2141      	movs	r1, #65	@ 0x41
 80053ea:	2082      	movs	r0, #130	@ 0x82
 80053ec:	f000 f9bc 	bl	8005768 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80053f0:	2201      	movs	r2, #1
 80053f2:	214a      	movs	r1, #74	@ 0x4a
 80053f4:	2082      	movs	r0, #130	@ 0x82
 80053f6:	f000 f9b7 	bl	8005768 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80053fa:	2201      	movs	r2, #1
 80053fc:	214b      	movs	r1, #75	@ 0x4b
 80053fe:	2082      	movs	r0, #130	@ 0x82
 8005400:	f000 f9b2 	bl	8005768 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8005404:	2200      	movs	r2, #0
 8005406:	214b      	movs	r1, #75	@ 0x4b
 8005408:	2082      	movs	r0, #130	@ 0x82
 800540a:	f000 f9ad 	bl	8005768 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800540e:	2201      	movs	r2, #1
 8005410:	2156      	movs	r1, #86	@ 0x56
 8005412:	2082      	movs	r0, #130	@ 0x82
 8005414:	f000 f9a8 	bl	8005768 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8005418:	2201      	movs	r2, #1
 800541a:	2158      	movs	r1, #88	@ 0x58
 800541c:	2082      	movs	r0, #130	@ 0x82
 800541e:	f000 f9a3 	bl	8005768 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8005422:	2203      	movs	r2, #3
 8005424:	2140      	movs	r1, #64	@ 0x40
 8005426:	2082      	movs	r0, #130	@ 0x82
 8005428:	f000 f99e 	bl	8005768 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800542c:	22ff      	movs	r2, #255	@ 0xff
 800542e:	210b      	movs	r1, #11
 8005430:	2082      	movs	r0, #130	@ 0x82
 8005432:	f000 f999 	bl	8005768 <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8005436:	f000 f8c1 	bl	80055bc <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 800543a:	2009      	movs	r0, #9
 800543c:	f000 f823 	bl	8005486 <STMPE811_Read>
 8005440:	4603      	mov	r3, r0
 8005442:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8005444:	797b      	ldrb	r3, [r7, #5]
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 800544c:	797b      	ldrb	r3, [r7, #5]
 800544e:	461a      	mov	r2, r3
 8005450:	2109      	movs	r1, #9
 8005452:	2082      	movs	r0, #130	@ 0x82
 8005454:	f000 f988 	bl	8005768 <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8005458:	200a      	movs	r0, #10
 800545a:	f000 f814 	bl	8005486 <STMPE811_Read>
 800545e:	4603      	mov	r3, r0
 8005460:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8005462:	797b      	ldrb	r3, [r7, #5]
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800546a:	797b      	ldrb	r3, [r7, #5]
 800546c:	461a      	mov	r2, r3
 800546e:	210a      	movs	r1, #10
 8005470:	2082      	movs	r0, #130	@ 0x82
 8005472:	f000 f979 	bl	8005768 <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8005476:	20c8      	movs	r0, #200	@ 0xc8
 8005478:	f000 fbf0 	bl	8005c5c <HAL_Delay>

    return STMPE811_State_Ok;
 800547c:	2302      	movs	r3, #2

}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8005490:	f107 020f 	add.w	r2, r7, #15
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	4619      	mov	r1, r3
 8005498:	2082      	movs	r0, #130	@ 0x82
 800549a:	f000 f98f 	bl	80057bc <I2C3_Read>

    return readData;
 800549e:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	460a      	mov	r2, r1
 80054b2:	71fb      	strb	r3, [r7, #7]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80054b8:	79ba      	ldrb	r2, [r7, #6]
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	4619      	mov	r1, r3
 80054be:	2082      	movs	r0, #130	@ 0x82
 80054c0:	f000 f952 	bl	8005768 <I2C3_Write>
}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	799b      	ldrb	r3, [r3, #6]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d117      	bne.n	800550c <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f9b3 	bl	800584c <TM_STMPE811_ReadX>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	885b      	ldrh	r3, [r3, #2]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fa06 	bl	8005908 <TM_STMPE811_ReadY>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8005502:	3301      	adds	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	805a      	strh	r2, [r3, #2]
 800550a:	e048      	b.n	800559e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	799b      	ldrb	r3, [r3, #6]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d112      	bne.n	800553a <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f000 f997 	bl	800584c <TM_STMPE811_ReadX>
 800551e:	4603      	mov	r3, r0
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	885b      	ldrh	r3, [r3, #2]
 800552a:	4618      	mov	r0, r3
 800552c:	f000 f9ec 	bl	8005908 <TM_STMPE811_ReadY>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	805a      	strh	r2, [r3, #2]
 8005538:	e031      	b.n	800559e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	799b      	ldrb	r3, [r3, #6]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d115      	bne.n	800556e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	885b      	ldrh	r3, [r3, #2]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f980 	bl	800584c <TM_STMPE811_ReadX>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 f9d5 	bl	8005908 <TM_STMPE811_ReadY>
 800555e:	4603      	mov	r3, r0
 8005560:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8005564:	3301      	adds	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e017      	b.n	800559e <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	799b      	ldrb	r3, [r3, #6]
 8005572:	2b03      	cmp	r3, #3
 8005574:	d113      	bne.n	800559e <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f966 	bl	800584c <TM_STMPE811_ReadX>
 8005580:	4603      	mov	r3, r0
 8005582:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f9b9 	bl	8005908 <TM_STMPE811_ReadY>
 8005596:	4603      	mov	r3, r0
 8005598:	461a      	mov	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800559e:	2201      	movs	r2, #1
 80055a0:	214b      	movs	r1, #75	@ 0x4b
 80055a2:	2082      	movs	r0, #130	@ 0x82
 80055a4:	f000 f8e0 	bl	8005768 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80055a8:	2200      	movs	r2, #0
 80055aa:	214b      	movs	r1, #75	@ 0x4b
 80055ac:	2082      	movs	r0, #130	@ 0x82
 80055ae:	f000 f8db 	bl	8005768 <I2C3_Write>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055c2:	2300      	movs	r3, #0
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <enableInterruptSupportForTouch+0x5c>)
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	4a13      	ldr	r2, [pc, #76]	@ (8005618 <enableInterruptSupportForTouch+0x5c>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80055d2:	4b11      	ldr	r3, [pc, #68]	@ (8005618 <enableInterruptSupportForTouch+0x5c>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	609a      	str	r2, [r3, #8]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80055ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055f0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80055f2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80055f6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055fc:	2302      	movs	r3, #2
 80055fe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4805      	ldr	r0, [pc, #20]	@ (800561c <enableInterruptSupportForTouch+0x60>)
 8005606:	f000 fcd5 	bl	8005fb4 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800560a:	2028      	movs	r0, #40	@ 0x28
 800560c:	f7ff fe56 	bl	80052bc <__NVIC_EnableIRQ>

}
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	40020000 	.word	0x40020000

08005620 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <verifyHAL_I2C_IS_OKAY+0x1c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 800562c:	bf00      	nop
 800562e:	e7fd      	b.n	800562c <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	20025f50 	.word	0x20025f50

08005640 <I2C3_Init>:

static void I2C3_Init()
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4b19      	ldr	r3, [pc, #100]	@ (80056b0 <I2C3_Init+0x70>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	4a18      	ldr	r2, [pc, #96]	@ (80056b0 <I2C3_Init+0x70>)
 8005650:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005654:	6413      	str	r3, [r2, #64]	@ 0x40
 8005656:	4b16      	ldr	r3, [pc, #88]	@ (80056b0 <I2C3_Init+0x70>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8005662:	4b14      	ldr	r3, [pc, #80]	@ (80056b4 <I2C3_Init+0x74>)
 8005664:	4a14      	ldr	r2, [pc, #80]	@ (80056b8 <I2C3_Init+0x78>)
 8005666:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8005668:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <I2C3_Init+0x74>)
 800566a:	4a14      	ldr	r2, [pc, #80]	@ (80056bc <I2C3_Init+0x7c>)
 800566c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800566e:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <I2C3_Init+0x74>)
 8005670:	2200      	movs	r2, #0
 8005672:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8005674:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <I2C3_Init+0x74>)
 8005676:	2200      	movs	r2, #0
 8005678:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800567a:	4b0e      	ldr	r3, [pc, #56]	@ (80056b4 <I2C3_Init+0x74>)
 800567c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005680:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <I2C3_Init+0x74>)
 8005684:	2200      	movs	r2, #0
 8005686:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005688:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <I2C3_Init+0x74>)
 800568a:	2200      	movs	r2, #0
 800568c:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 800568e:	4809      	ldr	r0, [pc, #36]	@ (80056b4 <I2C3_Init+0x74>)
 8005690:	f000 ff62 	bl	8006558 <HAL_I2C_Init>
 8005694:	4603      	mov	r3, r0
 8005696:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 800569e:	bf00      	nop
 80056a0:	e7fd      	b.n	800569e <I2C3_Init+0x5e>
    }
//    return;
    HAL_Delay(100);
 80056a2:	2064      	movs	r0, #100	@ 0x64
 80056a4:	f000 fada 	bl	8005c5c <HAL_Delay>
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40023800 	.word	0x40023800
 80056b4:	20025efc 	.word	0x20025efc
 80056b8:	40005c00 	.word	0x40005c00
 80056bc:	000186a0 	.word	0x000186a0

080056c0 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c6:	f107 030c 	add.w	r3, r7, #12
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	609a      	str	r2, [r3, #8]
 80056d2:	60da      	str	r2, [r3, #12]
 80056d4:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	4b20      	ldr	r3, [pc, #128]	@ (800575c <I2C3_MspInit+0x9c>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	4a1f      	ldr	r2, [pc, #124]	@ (800575c <I2C3_MspInit+0x9c>)
 80056e0:	f043 0304 	orr.w	r3, r3, #4
 80056e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056e6:	4b1d      	ldr	r3, [pc, #116]	@ (800575c <I2C3_MspInit+0x9c>)
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	4b19      	ldr	r3, [pc, #100]	@ (800575c <I2C3_MspInit+0x9c>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	4a18      	ldr	r2, [pc, #96]	@ (800575c <I2C3_MspInit+0x9c>)
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	6313      	str	r3, [r2, #48]	@ 0x30
 8005702:	4b16      	ldr	r3, [pc, #88]	@ (800575c <I2C3_MspInit+0x9c>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800570e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005712:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005714:	2312      	movs	r3, #18
 8005716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005718:	2300      	movs	r3, #0
 800571a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005720:	2304      	movs	r3, #4
 8005722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8005724:	f107 030c 	add.w	r3, r7, #12
 8005728:	4619      	mov	r1, r3
 800572a:	480d      	ldr	r0, [pc, #52]	@ (8005760 <I2C3_MspInit+0xa0>)
 800572c:	f000 fc42 	bl	8005fb4 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8005730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005734:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005736:	2312      	movs	r3, #18
 8005738:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800573e:	2300      	movs	r3, #0
 8005740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005742:	2304      	movs	r3, #4
 8005744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	4619      	mov	r1, r3
 800574c:	4805      	ldr	r0, [pc, #20]	@ (8005764 <I2C3_MspInit+0xa4>)
 800574e:	f000 fc31 	bl	8005fb4 <HAL_GPIO_Init>
    
}
 8005752:	bf00      	nop
 8005754:	3720      	adds	r7, #32
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800
 8005760:	40020800 	.word	0x40020800
 8005764:	40020000 	.word	0x40020000

08005768 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af04      	add	r7, sp, #16
 800576e:	4603      	mov	r3, r0
 8005770:	80fb      	strh	r3, [r7, #6]
 8005772:	460b      	mov	r3, r1
 8005774:	717b      	strb	r3, [r7, #5]
 8005776:	4613      	mov	r3, r2
 8005778:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800577a:	793b      	ldrb	r3, [r7, #4]
 800577c:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 800577e:	797b      	ldrb	r3, [r7, #5]
 8005780:	b29a      	uxth	r2, r3
 8005782:	88f9      	ldrh	r1, [r7, #6]
 8005784:	4b0a      	ldr	r3, [pc, #40]	@ (80057b0 <I2C3_Write+0x48>)
 8005786:	9302      	str	r3, [sp, #8]
 8005788:	2301      	movs	r3, #1
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	f107 030f 	add.w	r3, r7, #15
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	2301      	movs	r3, #1
 8005794:	4807      	ldr	r0, [pc, #28]	@ (80057b4 <I2C3_Write+0x4c>)
 8005796:	f001 f823 	bl	80067e0 <HAL_I2C_Mem_Write>
 800579a:	4603      	mov	r3, r0
 800579c:	461a      	mov	r2, r3
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <I2C3_Write+0x50>)
 80057a0:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80057a2:	f7ff ff3d 	bl	8005620 <verifyHAL_I2C_IS_OKAY>
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	0003d090 	.word	0x0003d090
 80057b4:	20025efc 	.word	0x20025efc
 80057b8:	20025f50 	.word	0x20025f50

080057bc <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af04      	add	r7, sp, #16
 80057c2:	4603      	mov	r3, r0
 80057c4:	603a      	str	r2, [r7, #0]
 80057c6:	71fb      	strb	r3, [r7, #7]
 80057c8:	460b      	mov	r3, r1
 80057ca:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	b299      	uxth	r1, r3
 80057d0:	79bb      	ldrb	r3, [r7, #6]
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <I2C3_Read+0x40>)
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	2301      	movs	r3, #1
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	2301      	movs	r3, #1
 80057e2:	4807      	ldr	r0, [pc, #28]	@ (8005800 <I2C3_Read+0x44>)
 80057e4:	f001 f8f6 	bl	80069d4 <HAL_I2C_Mem_Read>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	4b05      	ldr	r3, [pc, #20]	@ (8005804 <I2C3_Read+0x48>)
 80057ee:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80057f0:	f7ff ff16 	bl	8005620 <verifyHAL_I2C_IS_OKAY>
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	0003d090 	.word	0x0003d090
 8005800:	20025efc 	.word	0x20025efc
 8005804:	20025f50 	.word	0x20025f50

08005808 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af04      	add	r7, sp, #16
 800580e:	603a      	str	r2, [r7, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	4603      	mov	r3, r0
 8005814:	71fb      	strb	r3, [r7, #7]
 8005816:	460b      	mov	r3, r1
 8005818:	71bb      	strb	r3, [r7, #6]
 800581a:	4613      	mov	r3, r2
 800581c:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	b299      	uxth	r1, r3
 8005822:	79bb      	ldrb	r3, [r7, #6]
 8005824:	b29a      	uxth	r2, r3
 8005826:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <I2C3_MulitByteRead+0x3c>)
 8005828:	9302      	str	r3, [sp, #8]
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	2301      	movs	r3, #1
 8005834:	4804      	ldr	r0, [pc, #16]	@ (8005848 <I2C3_MulitByteRead+0x40>)
 8005836:	f001 f8cd 	bl	80069d4 <HAL_I2C_Mem_Read>
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	0003d090 	.word	0x0003d090
 8005848:	20025efc 	.word	0x20025efc

0800584c <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8005856:	204d      	movs	r0, #77	@ 0x4d
 8005858:	f7ff fe15 	bl	8005486 <STMPE811_Read>
 800585c:	4603      	mov	r3, r0
 800585e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8005860:	204e      	movs	r0, #78	@ 0x4e
 8005862:	f7ff fe10 	bl	8005486 <STMPE811_Read>
 8005866:	4603      	mov	r3, r0
 8005868:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800586a:	7a7b      	ldrb	r3, [r7, #9]
 800586c:	021b      	lsls	r3, r3, #8
 800586e:	b21a      	sxth	r2, r3
 8005870:	7a3b      	ldrb	r3, [r7, #8]
 8005872:	b21b      	sxth	r3, r3
 8005874:	4313      	orrs	r3, r2
 8005876:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8005878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800587c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8005880:	4293      	cmp	r3, r2
 8005882:	dc06      	bgt.n	8005892 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8005884:	89fb      	ldrh	r3, [r7, #14]
 8005886:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800588a:	330c      	adds	r3, #12
 800588c:	b29b      	uxth	r3, r3
 800588e:	81fb      	strh	r3, [r7, #14]
 8005890:	e005      	b.n	800589e <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8005898:	3308      	adds	r3, #8
 800589a:	b29b      	uxth	r3, r3
 800589c:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 800589e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058a2:	4a18      	ldr	r2, [pc, #96]	@ (8005904 <TM_STMPE811_ReadX+0xb8>)
 80058a4:	fb82 1203 	smull	r1, r2, r2, r3
 80058a8:	441a      	add	r2, r3
 80058aa:	10d2      	asrs	r2, r2, #3
 80058ac:	17db      	asrs	r3, r3, #31
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80058b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058b6:	2bef      	cmp	r3, #239	@ 0xef
 80058b8:	dd02      	ble.n	80058c0 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80058ba:	23ef      	movs	r3, #239	@ 0xef
 80058bc:	81fb      	strh	r3, [r7, #14]
 80058be:	e005      	b.n	80058cc <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80058c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	da01      	bge.n	80058cc <TM_STMPE811_ReadX+0x80>
        val = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80058cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	dd05      	ble.n	80058e2 <TM_STMPE811_ReadX+0x96>
 80058d6:	89fa      	ldrh	r2, [r7, #14]
 80058d8:	88fb      	ldrh	r3, [r7, #6]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	b29b      	uxth	r3, r3
 80058de:	b21b      	sxth	r3, r3
 80058e0:	e004      	b.n	80058ec <TM_STMPE811_ReadX+0xa0>
 80058e2:	89fb      	ldrh	r3, [r7, #14]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80058ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	dd01      	ble.n	80058fa <TM_STMPE811_ReadX+0xae>
        return val;
 80058f6:	89fb      	ldrh	r3, [r7, #14]
 80058f8:	e000      	b.n	80058fc <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80058fa:	88fb      	ldrh	r3, [r7, #6]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	88888889 	.word	0x88888889

08005908 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8005912:	204f      	movs	r0, #79	@ 0x4f
 8005914:	f7ff fdb7 	bl	8005486 <STMPE811_Read>
 8005918:	4603      	mov	r3, r0
 800591a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 800591c:	2050      	movs	r0, #80	@ 0x50
 800591e:	f7ff fdb2 	bl	8005486 <STMPE811_Read>
 8005922:	4603      	mov	r3, r0
 8005924:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8005926:	7a7b      	ldrb	r3, [r7, #9]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	b21a      	sxth	r2, r3
 800592c:	7a3b      	ldrb	r3, [r7, #8]
 800592e:	b21b      	sxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8005934:	89fb      	ldrh	r3, [r7, #14]
 8005936:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800593a:	b29b      	uxth	r3, r3
 800593c:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800593e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005942:	4a19      	ldr	r2, [pc, #100]	@ (80059a8 <TM_STMPE811_ReadY+0xa0>)
 8005944:	fb82 1203 	smull	r1, r2, r2, r3
 8005948:	1052      	asrs	r2, r2, #1
 800594a:	17db      	asrs	r3, r3, #31
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8005950:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005954:	2b00      	cmp	r3, #0
 8005956:	dc02      	bgt.n	800595e <TM_STMPE811_ReadY+0x56>
        val = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	81fb      	strh	r3, [r7, #14]
 800595c:	e007      	b.n	800596e <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800595e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005962:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005966:	db02      	blt.n	800596e <TM_STMPE811_ReadY+0x66>
        val = 319;
 8005968:	f240 133f 	movw	r3, #319	@ 0x13f
 800596c:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800596e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	429a      	cmp	r2, r3
 8005976:	dd05      	ble.n	8005984 <TM_STMPE811_ReadY+0x7c>
 8005978:	89fa      	ldrh	r2, [r7, #14]
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	b29b      	uxth	r3, r3
 8005980:	b21b      	sxth	r3, r3
 8005982:	e004      	b.n	800598e <TM_STMPE811_ReadY+0x86>
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	b29b      	uxth	r3, r3
 800598c:	b21b      	sxth	r3, r3
 800598e:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8005990:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005994:	2b04      	cmp	r3, #4
 8005996:	dd01      	ble.n	800599c <TM_STMPE811_ReadY+0x94>
        return val;
 8005998:	89fb      	ldrh	r3, [r7, #14]
 800599a:	e000      	b.n	800599e <TM_STMPE811_ReadY+0x96>
    }
    return y;
 800599c:	88fb      	ldrh	r3, [r7, #6]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	2e8ba2e9 	.word	0x2e8ba2e9

080059ac <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b086      	sub	sp, #24
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e00a      	b.n	80059e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059cc:	f3af 8000 	nop.w
 80059d0:	4601      	mov	r1, r0
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	60ba      	str	r2, [r7, #8]
 80059d8:	b2ca      	uxtb	r2, r1
 80059da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	3301      	adds	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	dbf0      	blt.n	80059cc <_read+0x12>
  }

  return len;
 80059ea:	687b      	ldr	r3, [r7, #4]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	e009      	b.n	8005a1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	60ba      	str	r2, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	3301      	adds	r3, #1
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	dbf1      	blt.n	8005a06 <_write+0x12>
  }
  return len;
 8005a22:	687b      	ldr	r3, [r7, #4]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_close>:

int _close(int file)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a54:	605a      	str	r2, [r3, #4]
  return 0;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <_isatty>:

int _isatty(int file)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a6c:	2301      	movs	r3, #1
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	60f8      	str	r0, [r7, #12]
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a9c:	4a14      	ldr	r2, [pc, #80]	@ (8005af0 <_sbrk+0x5c>)
 8005a9e:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <_sbrk+0x60>)
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <_sbrk+0x64>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d102      	bne.n	8005ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ab0:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <_sbrk+0x64>)
 8005ab2:	4a12      	ldr	r2, [pc, #72]	@ (8005afc <_sbrk+0x68>)
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ab6:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <_sbrk+0x64>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d207      	bcs.n	8005ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ac4:	f003 fd30 	bl	8009528 <__errno>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	220c      	movs	r2, #12
 8005acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	e009      	b.n	8005ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <_sbrk+0x64>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ada:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <_sbrk+0x64>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4a05      	ldr	r2, [pc, #20]	@ (8005af8 <_sbrk+0x64>)
 8005ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20030000 	.word	0x20030000
 8005af4:	00000400 	.word	0x00000400
 8005af8:	20025f54 	.word	0x20025f54
 8005afc:	200260a8 	.word	0x200260a8

08005b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b04:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <SystemInit+0x20>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	4a05      	ldr	r2, [pc, #20]	@ (8005b20 <SystemInit+0x20>)
 8005b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000ed00 	.word	0xe000ed00

08005b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b28:	f7ff ffea 	bl	8005b00 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b2c:	480c      	ldr	r0, [pc, #48]	@ (8005b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b2e:	490d      	ldr	r1, [pc, #52]	@ (8005b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b30:	4a0d      	ldr	r2, [pc, #52]	@ (8005b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b34:	e002      	b.n	8005b3c <LoopCopyDataInit>

08005b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b3a:	3304      	adds	r3, #4

08005b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b40:	d3f9      	bcc.n	8005b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b42:	4a0a      	ldr	r2, [pc, #40]	@ (8005b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b44:	4c0a      	ldr	r4, [pc, #40]	@ (8005b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b48:	e001      	b.n	8005b4e <LoopFillZerobss>

08005b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b4c:	3204      	adds	r2, #4

08005b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b50:	d3fb      	bcc.n	8005b4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005b52:	f003 fcef 	bl	8009534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b56:	f7ff f898 	bl	8004c8a <main>
  bx  lr    
 8005b5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005b5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b64:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8005b68:	0800b1f4 	.word	0x0800b1f4
  ldr r2, =_sbss
 8005b6c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8005b70:	200260a8 	.word	0x200260a8

08005b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b74:	e7fe      	b.n	8005b74 <ADC_IRQHandler>
	...

08005b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005bb8 <HAL_Init+0x40>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <HAL_Init+0x40>)
 8005b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b88:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <HAL_Init+0x40>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005bb8 <HAL_Init+0x40>)
 8005b8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b94:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <HAL_Init+0x40>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a07      	ldr	r2, [pc, #28]	@ (8005bb8 <HAL_Init+0x40>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ba0:	2003      	movs	r0, #3
 8005ba2:	f000 f991 	bl	8005ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	f000 f808 	bl	8005bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bac:	f7ff f8f2 	bl	8004d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023c00 	.word	0x40023c00

08005bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bc4:	4b12      	ldr	r3, [pc, #72]	@ (8005c10 <HAL_InitTick+0x54>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <HAL_InitTick+0x58>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f9b7 	bl	8005f4e <HAL_SYSTICK_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e00e      	b.n	8005c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b0f      	cmp	r3, #15
 8005bee:	d80a      	bhi.n	8005c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	f000 f971 	bl	8005ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bfc:	4a06      	ldr	r2, [pc, #24]	@ (8005c18 <HAL_InitTick+0x5c>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000014 	.word	0x20000014
 8005c14:	2000001c 	.word	0x2000001c
 8005c18:	20000018 	.word	0x20000018

08005c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c20:	4b06      	ldr	r3, [pc, #24]	@ (8005c3c <HAL_IncTick+0x20>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <HAL_IncTick+0x24>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	4a04      	ldr	r2, [pc, #16]	@ (8005c40 <HAL_IncTick+0x24>)
 8005c2e:	6013      	str	r3, [r2, #0]
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000001c 	.word	0x2000001c
 8005c40:	20025f58 	.word	0x20025f58

08005c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return uwTick;
 8005c48:	4b03      	ldr	r3, [pc, #12]	@ (8005c58 <HAL_GetTick+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20025f58 	.word	0x20025f58

08005c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c64:	f7ff ffee 	bl	8005c44 <HAL_GetTick>
 8005c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d005      	beq.n	8005c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca0 <HAL_Delay+0x44>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c82:	bf00      	nop
 8005c84:	f7ff ffde 	bl	8005c44 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d8f7      	bhi.n	8005c84 <HAL_Delay+0x28>
  {
  }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	2000001c 	.word	0x2000001c

08005ca4 <__NVIC_SetPriorityGrouping>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cd6:	4a04      	ldr	r2, [pc, #16]	@ (8005ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	60d3      	str	r3, [r2, #12]
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	e000ed00 	.word	0xe000ed00

08005cec <__NVIC_GetPriorityGrouping>:
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf0:	4b04      	ldr	r3, [pc, #16]	@ (8005d04 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	0a1b      	lsrs	r3, r3, #8
 8005cf6:	f003 0307 	and.w	r3, r3, #7
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	e000ed00 	.word	0xe000ed00

08005d08 <__NVIC_EnableIRQ>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db0b      	blt.n	8005d32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	f003 021f 	and.w	r2, r3, #31
 8005d20:	4907      	ldr	r1, [pc, #28]	@ (8005d40 <__NVIC_EnableIRQ+0x38>)
 8005d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2001      	movs	r0, #1
 8005d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	e000e100 	.word	0xe000e100

08005d44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	db12      	blt.n	8005d7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	f003 021f 	and.w	r2, r3, #31
 8005d5c:	490a      	ldr	r1, [pc, #40]	@ (8005d88 <__NVIC_DisableIRQ+0x44>)
 8005d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2001      	movs	r0, #1
 8005d66:	fa00 f202 	lsl.w	r2, r0, r2
 8005d6a:	3320      	adds	r3, #32
 8005d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d70:	f3bf 8f4f 	dsb	sy
}
 8005d74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d76:	f3bf 8f6f 	isb	sy
}
 8005d7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	e000e100 	.word	0xe000e100

08005d8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	4603      	mov	r3, r0
 8005d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	db0c      	blt.n	8005db8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	f003 021f 	and.w	r2, r3, #31
 8005da4:	4907      	ldr	r1, [pc, #28]	@ (8005dc4 <__NVIC_ClearPendingIRQ+0x38>)
 8005da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	2001      	movs	r0, #1
 8005dae:	fa00 f202 	lsl.w	r2, r0, r2
 8005db2:	3360      	adds	r3, #96	@ 0x60
 8005db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000e100 	.word	0xe000e100

08005dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	6039      	str	r1, [r7, #0]
 8005dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	db0a      	blt.n	8005df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	490c      	ldr	r1, [pc, #48]	@ (8005e14 <__NVIC_SetPriority+0x4c>)
 8005de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de6:	0112      	lsls	r2, r2, #4
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	440b      	add	r3, r1
 8005dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005df0:	e00a      	b.n	8005e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	4908      	ldr	r1, [pc, #32]	@ (8005e18 <__NVIC_SetPriority+0x50>)
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	3b04      	subs	r3, #4
 8005e00:	0112      	lsls	r2, r2, #4
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	440b      	add	r3, r1
 8005e06:	761a      	strb	r2, [r3, #24]
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	e000e100 	.word	0xe000e100
 8005e18:	e000ed00 	.word	0xe000ed00

08005e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b089      	sub	sp, #36	@ 0x24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f1c3 0307 	rsb	r3, r3, #7
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	bf28      	it	cs
 8005e3a:	2304      	movcs	r3, #4
 8005e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3304      	adds	r3, #4
 8005e42:	2b06      	cmp	r3, #6
 8005e44:	d902      	bls.n	8005e4c <NVIC_EncodePriority+0x30>
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3b03      	subs	r3, #3
 8005e4a:	e000      	b.n	8005e4e <NVIC_EncodePriority+0x32>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e50:	f04f 32ff 	mov.w	r2, #4294967295
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43da      	mvns	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	401a      	ands	r2, r3
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e64:	f04f 31ff 	mov.w	r1, #4294967295
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	43d9      	mvns	r1, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e74:	4313      	orrs	r3, r2
         );
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3724      	adds	r7, #36	@ 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e94:	d301      	bcc.n	8005e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e96:	2301      	movs	r3, #1
 8005e98:	e00f      	b.n	8005eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec4 <SysTick_Config+0x40>)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ea2:	210f      	movs	r1, #15
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	f7ff ff8e 	bl	8005dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eac:	4b05      	ldr	r3, [pc, #20]	@ (8005ec4 <SysTick_Config+0x40>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eb2:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <SysTick_Config+0x40>)
 8005eb4:	2207      	movs	r2, #7
 8005eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	e000e010 	.word	0xe000e010

08005ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fee7 	bl	8005ca4 <__NVIC_SetPriorityGrouping>
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b086      	sub	sp, #24
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
 8005eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ef0:	f7ff fefc 	bl	8005cec <__NVIC_GetPriorityGrouping>
 8005ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	68b9      	ldr	r1, [r7, #8]
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f7ff ff8e 	bl	8005e1c <NVIC_EncodePriority>
 8005f00:	4602      	mov	r2, r0
 8005f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ff5d 	bl	8005dc8 <__NVIC_SetPriority>
}
 8005f0e:	bf00      	nop
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff feef 	bl	8005d08 <__NVIC_EnableIRQ>
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	4603      	mov	r3, r0
 8005f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff feff 	bl	8005d44 <__NVIC_DisableIRQ>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff ff94 	bl	8005e84 <SysTick_Config>
 8005f5c:	4603      	mov	r3, r0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff09 	bl	8005d8c <__NVIC_ClearPendingIRQ>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2201      	movs	r2, #1
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8005f9e:	4a04      	ldr	r2, [pc, #16]	@ (8005fb0 <HAL_EXTI_ClearPending+0x2c>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6153      	str	r3, [r2, #20]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40013c00 	.word	0x40013c00

08005fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	@ 0x24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e177      	b.n	80062c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	f040 8166 	bne.w	80062ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d005      	beq.n	8006006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006002:	2b02      	cmp	r3, #2
 8006004:	d130      	bne.n	8006068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	2203      	movs	r2, #3
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	43db      	mvns	r3, r3
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	4013      	ands	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4313      	orrs	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800603c:	2201      	movs	r2, #1
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	091b      	lsrs	r3, r3, #4
 8006052:	f003 0201 	and.w	r2, r3, #1
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	4313      	orrs	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f003 0303 	and.w	r3, r3, #3
 8006070:	2b03      	cmp	r3, #3
 8006072:	d017      	beq.n	80060a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	2203      	movs	r2, #3
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	43db      	mvns	r3, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4013      	ands	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	4313      	orrs	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d123      	bne.n	80060f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	08da      	lsrs	r2, r3, #3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3208      	adds	r2, #8
 80060b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	220f      	movs	r2, #15
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	08da      	lsrs	r2, r3, #3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3208      	adds	r2, #8
 80060f2:	69b9      	ldr	r1, [r7, #24]
 80060f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	2203      	movs	r2, #3
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 0203 	and.w	r2, r3, #3
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80c0 	beq.w	80062ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	4b66      	ldr	r3, [pc, #408]	@ (80062d8 <HAL_GPIO_Init+0x324>)
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	4a65      	ldr	r2, [pc, #404]	@ (80062d8 <HAL_GPIO_Init+0x324>)
 8006144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006148:	6453      	str	r3, [r2, #68]	@ 0x44
 800614a:	4b63      	ldr	r3, [pc, #396]	@ (80062d8 <HAL_GPIO_Init+0x324>)
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006156:	4a61      	ldr	r2, [pc, #388]	@ (80062dc <HAL_GPIO_Init+0x328>)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	089b      	lsrs	r3, r3, #2
 800615c:	3302      	adds	r3, #2
 800615e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	220f      	movs	r2, #15
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4013      	ands	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a58      	ldr	r2, [pc, #352]	@ (80062e0 <HAL_GPIO_Init+0x32c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d037      	beq.n	80061f2 <HAL_GPIO_Init+0x23e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a57      	ldr	r2, [pc, #348]	@ (80062e4 <HAL_GPIO_Init+0x330>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d031      	beq.n	80061ee <HAL_GPIO_Init+0x23a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a56      	ldr	r2, [pc, #344]	@ (80062e8 <HAL_GPIO_Init+0x334>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d02b      	beq.n	80061ea <HAL_GPIO_Init+0x236>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a55      	ldr	r2, [pc, #340]	@ (80062ec <HAL_GPIO_Init+0x338>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d025      	beq.n	80061e6 <HAL_GPIO_Init+0x232>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a54      	ldr	r2, [pc, #336]	@ (80062f0 <HAL_GPIO_Init+0x33c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d01f      	beq.n	80061e2 <HAL_GPIO_Init+0x22e>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a53      	ldr	r2, [pc, #332]	@ (80062f4 <HAL_GPIO_Init+0x340>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d019      	beq.n	80061de <HAL_GPIO_Init+0x22a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a52      	ldr	r2, [pc, #328]	@ (80062f8 <HAL_GPIO_Init+0x344>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_GPIO_Init+0x226>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a51      	ldr	r2, [pc, #324]	@ (80062fc <HAL_GPIO_Init+0x348>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00d      	beq.n	80061d6 <HAL_GPIO_Init+0x222>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a50      	ldr	r2, [pc, #320]	@ (8006300 <HAL_GPIO_Init+0x34c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <HAL_GPIO_Init+0x21e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a4f      	ldr	r2, [pc, #316]	@ (8006304 <HAL_GPIO_Init+0x350>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_GPIO_Init+0x21a>
 80061ca:	2309      	movs	r3, #9
 80061cc:	e012      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061ce:	230a      	movs	r3, #10
 80061d0:	e010      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061d2:	2308      	movs	r3, #8
 80061d4:	e00e      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061d6:	2307      	movs	r3, #7
 80061d8:	e00c      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061da:	2306      	movs	r3, #6
 80061dc:	e00a      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061de:	2305      	movs	r3, #5
 80061e0:	e008      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061e2:	2304      	movs	r3, #4
 80061e4:	e006      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061e6:	2303      	movs	r3, #3
 80061e8:	e004      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e002      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_GPIO_Init+0x240>
 80061f2:	2300      	movs	r3, #0
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	f002 0203 	and.w	r2, r2, #3
 80061fa:	0092      	lsls	r2, r2, #2
 80061fc:	4093      	lsls	r3, r2
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4313      	orrs	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006204:	4935      	ldr	r1, [pc, #212]	@ (80062dc <HAL_GPIO_Init+0x328>)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	089b      	lsrs	r3, r3, #2
 800620a:	3302      	adds	r3, #2
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006212:	4b3d      	ldr	r3, [pc, #244]	@ (8006308 <HAL_GPIO_Init+0x354>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	43db      	mvns	r3, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4013      	ands	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006236:	4a34      	ldr	r2, [pc, #208]	@ (8006308 <HAL_GPIO_Init+0x354>)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800623c:	4b32      	ldr	r3, [pc, #200]	@ (8006308 <HAL_GPIO_Init+0x354>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	43db      	mvns	r3, r3
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4013      	ands	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4313      	orrs	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006260:	4a29      	ldr	r2, [pc, #164]	@ (8006308 <HAL_GPIO_Init+0x354>)
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006266:	4b28      	ldr	r3, [pc, #160]	@ (8006308 <HAL_GPIO_Init+0x354>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	43db      	mvns	r3, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4013      	ands	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800628a:	4a1f      	ldr	r2, [pc, #124]	@ (8006308 <HAL_GPIO_Init+0x354>)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006290:	4b1d      	ldr	r3, [pc, #116]	@ (8006308 <HAL_GPIO_Init+0x354>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062b4:	4a14      	ldr	r2, [pc, #80]	@ (8006308 <HAL_GPIO_Init+0x354>)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3301      	adds	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2b0f      	cmp	r3, #15
 80062c4:	f67f ae84 	bls.w	8005fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	3724      	adds	r7, #36	@ 0x24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40023800 	.word	0x40023800
 80062dc:	40013800 	.word	0x40013800
 80062e0:	40020000 	.word	0x40020000
 80062e4:	40020400 	.word	0x40020400
 80062e8:	40020800 	.word	0x40020800
 80062ec:	40020c00 	.word	0x40020c00
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40021400 	.word	0x40021400
 80062f8:	40021800 	.word	0x40021800
 80062fc:	40021c00 	.word	0x40021c00
 8006300:	40022000 	.word	0x40022000
 8006304:	40022400 	.word	0x40022400
 8006308:	40013c00 	.word	0x40013c00

0800630c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800631e:	2300      	movs	r3, #0
 8006320:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e0d9      	b.n	80064dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006328:	2201      	movs	r2, #1
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4013      	ands	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	429a      	cmp	r2, r3
 8006340:	f040 80c9 	bne.w	80064d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006344:	4a6b      	ldr	r2, [pc, #428]	@ (80064f4 <HAL_GPIO_DeInit+0x1e8>)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	089b      	lsrs	r3, r3, #2
 800634a:	3302      	adds	r3, #2
 800634c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006350:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	220f      	movs	r2, #15
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4013      	ands	r3, r2
 8006364:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a63      	ldr	r2, [pc, #396]	@ (80064f8 <HAL_GPIO_DeInit+0x1ec>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d037      	beq.n	80063de <HAL_GPIO_DeInit+0xd2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a62      	ldr	r2, [pc, #392]	@ (80064fc <HAL_GPIO_DeInit+0x1f0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d031      	beq.n	80063da <HAL_GPIO_DeInit+0xce>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a61      	ldr	r2, [pc, #388]	@ (8006500 <HAL_GPIO_DeInit+0x1f4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02b      	beq.n	80063d6 <HAL_GPIO_DeInit+0xca>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a60      	ldr	r2, [pc, #384]	@ (8006504 <HAL_GPIO_DeInit+0x1f8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d025      	beq.n	80063d2 <HAL_GPIO_DeInit+0xc6>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a5f      	ldr	r2, [pc, #380]	@ (8006508 <HAL_GPIO_DeInit+0x1fc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01f      	beq.n	80063ce <HAL_GPIO_DeInit+0xc2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a5e      	ldr	r2, [pc, #376]	@ (800650c <HAL_GPIO_DeInit+0x200>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d019      	beq.n	80063ca <HAL_GPIO_DeInit+0xbe>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a5d      	ldr	r2, [pc, #372]	@ (8006510 <HAL_GPIO_DeInit+0x204>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_GPIO_DeInit+0xba>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a5c      	ldr	r2, [pc, #368]	@ (8006514 <HAL_GPIO_DeInit+0x208>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00d      	beq.n	80063c2 <HAL_GPIO_DeInit+0xb6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a5b      	ldr	r2, [pc, #364]	@ (8006518 <HAL_GPIO_DeInit+0x20c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <HAL_GPIO_DeInit+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a5a      	ldr	r2, [pc, #360]	@ (800651c <HAL_GPIO_DeInit+0x210>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d101      	bne.n	80063ba <HAL_GPIO_DeInit+0xae>
 80063b6:	2309      	movs	r3, #9
 80063b8:	e012      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063ba:	230a      	movs	r3, #10
 80063bc:	e010      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063be:	2308      	movs	r3, #8
 80063c0:	e00e      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063c2:	2307      	movs	r3, #7
 80063c4:	e00c      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063c6:	2306      	movs	r3, #6
 80063c8:	e00a      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063ca:	2305      	movs	r3, #5
 80063cc:	e008      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063ce:	2304      	movs	r3, #4
 80063d0:	e006      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063d2:	2303      	movs	r3, #3
 80063d4:	e004      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063d6:	2302      	movs	r3, #2
 80063d8:	e002      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <HAL_GPIO_DeInit+0xd4>
 80063de:	2300      	movs	r3, #0
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	f002 0203 	and.w	r2, r2, #3
 80063e6:	0092      	lsls	r2, r2, #2
 80063e8:	4093      	lsls	r3, r2
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d132      	bne.n	8006456 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80063f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	4949      	ldr	r1, [pc, #292]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80063fe:	4b48      	ldr	r3, [pc, #288]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	43db      	mvns	r3, r3
 8006406:	4946      	ldr	r1, [pc, #280]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 8006408:	4013      	ands	r3, r2
 800640a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800640c:	4b44      	ldr	r3, [pc, #272]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	43db      	mvns	r3, r3
 8006414:	4942      	ldr	r1, [pc, #264]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 8006416:	4013      	ands	r3, r2
 8006418:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800641a:	4b41      	ldr	r3, [pc, #260]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	43db      	mvns	r3, r3
 8006422:	493f      	ldr	r1, [pc, #252]	@ (8006520 <HAL_GPIO_DeInit+0x214>)
 8006424:	4013      	ands	r3, r2
 8006426:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f003 0303 	and.w	r3, r3, #3
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	220f      	movs	r2, #15
 8006432:	fa02 f303 	lsl.w	r3, r2, r3
 8006436:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006438:	4a2e      	ldr	r2, [pc, #184]	@ (80064f4 <HAL_GPIO_DeInit+0x1e8>)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	089b      	lsrs	r3, r3, #2
 800643e:	3302      	adds	r3, #2
 8006440:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	43da      	mvns	r2, r3
 8006448:	482a      	ldr	r0, [pc, #168]	@ (80064f4 <HAL_GPIO_DeInit+0x1e8>)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	089b      	lsrs	r3, r3, #2
 800644e:	400a      	ands	r2, r1
 8006450:	3302      	adds	r3, #2
 8006452:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	2103      	movs	r1, #3
 8006460:	fa01 f303 	lsl.w	r3, r1, r3
 8006464:	43db      	mvns	r3, r3
 8006466:	401a      	ands	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	08da      	lsrs	r2, r3, #3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3208      	adds	r2, #8
 8006474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	220f      	movs	r2, #15
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	08d2      	lsrs	r2, r2, #3
 800648c:	4019      	ands	r1, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3208      	adds	r2, #8
 8006492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	2103      	movs	r1, #3
 80064a0:	fa01 f303 	lsl.w	r3, r1, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	401a      	ands	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	2101      	movs	r1, #1
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	2103      	movs	r1, #3
 80064ca:	fa01 f303 	lsl.w	r3, r1, r3
 80064ce:	43db      	mvns	r3, r3
 80064d0:	401a      	ands	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	3301      	adds	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b0f      	cmp	r3, #15
 80064e0:	f67f af22 	bls.w	8006328 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40013800 	.word	0x40013800
 80064f8:	40020000 	.word	0x40020000
 80064fc:	40020400 	.word	0x40020400
 8006500:	40020800 	.word	0x40020800
 8006504:	40020c00 	.word	0x40020c00
 8006508:	40021000 	.word	0x40021000
 800650c:	40021400 	.word	0x40021400
 8006510:	40021800 	.word	0x40021800
 8006514:	40021c00 	.word	0x40021c00
 8006518:	40022000 	.word	0x40022000
 800651c:	40022400 	.word	0x40022400
 8006520:	40013c00 	.word	0x40013c00

08006524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	807b      	strh	r3, [r7, #2]
 8006530:	4613      	mov	r3, r2
 8006532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006534:	787b      	ldrb	r3, [r7, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006540:	e003      	b.n	800654a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006542:	887b      	ldrh	r3, [r7, #2]
 8006544:	041a      	lsls	r2, r3, #16
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	619a      	str	r2, [r3, #24]
}
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e12b      	b.n	80067c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fe fc30 	bl	8004de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	@ 0x24
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065bc:	f001 ff06 	bl	80083cc <HAL_RCC_GetPCLK1Freq>
 80065c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	4a81      	ldr	r2, [pc, #516]	@ (80067cc <HAL_I2C_Init+0x274>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d807      	bhi.n	80065dc <HAL_I2C_Init+0x84>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a80      	ldr	r2, [pc, #512]	@ (80067d0 <HAL_I2C_Init+0x278>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	bf94      	ite	ls
 80065d4:	2301      	movls	r3, #1
 80065d6:	2300      	movhi	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e006      	b.n	80065ea <HAL_I2C_Init+0x92>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4a7d      	ldr	r2, [pc, #500]	@ (80067d4 <HAL_I2C_Init+0x27c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	bf94      	ite	ls
 80065e4:	2301      	movls	r3, #1
 80065e6:	2300      	movhi	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e0e7      	b.n	80067c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4a78      	ldr	r2, [pc, #480]	@ (80067d8 <HAL_I2C_Init+0x280>)
 80065f6:	fba2 2303 	umull	r2, r3, r2, r3
 80065fa:	0c9b      	lsrs	r3, r3, #18
 80065fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a6a      	ldr	r2, [pc, #424]	@ (80067cc <HAL_I2C_Init+0x274>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d802      	bhi.n	800662c <HAL_I2C_Init+0xd4>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3301      	adds	r3, #1
 800662a:	e009      	b.n	8006640 <HAL_I2C_Init+0xe8>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006632:	fb02 f303 	mul.w	r3, r2, r3
 8006636:	4a69      	ldr	r2, [pc, #420]	@ (80067dc <HAL_I2C_Init+0x284>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	3301      	adds	r3, #1
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	430b      	orrs	r3, r1
 8006646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006652:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	495c      	ldr	r1, [pc, #368]	@ (80067cc <HAL_I2C_Init+0x274>)
 800665c:	428b      	cmp	r3, r1
 800665e:	d819      	bhi.n	8006694 <HAL_I2C_Init+0x13c>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1e59      	subs	r1, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	fbb1 f3f3 	udiv	r3, r1, r3
 800666e:	1c59      	adds	r1, r3, #1
 8006670:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006674:	400b      	ands	r3, r1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <HAL_I2C_Init+0x138>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1e59      	subs	r1, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	fbb1 f3f3 	udiv	r3, r1, r3
 8006688:	3301      	adds	r3, #1
 800668a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668e:	e051      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 8006690:	2304      	movs	r3, #4
 8006692:	e04f      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d111      	bne.n	80066c0 <HAL_I2C_Init+0x168>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1e58      	subs	r0, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6859      	ldr	r1, [r3, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	440b      	add	r3, r1
 80066aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ae:	3301      	adds	r3, #1
 80066b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e012      	b.n	80066e6 <HAL_I2C_Init+0x18e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	1e58      	subs	r0, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	440b      	add	r3, r1
 80066ce:	0099      	lsls	r1, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d6:	3301      	adds	r3, #1
 80066d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf0c      	ite	eq
 80066e0:	2301      	moveq	r3, #1
 80066e2:	2300      	movne	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <HAL_I2C_Init+0x196>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e022      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10e      	bne.n	8006714 <HAL_I2C_Init+0x1bc>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1e58      	subs	r0, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	440b      	add	r3, r1
 8006704:	fbb0 f3f3 	udiv	r3, r0, r3
 8006708:	3301      	adds	r3, #1
 800670a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800670e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006712:	e00f      	b.n	8006734 <HAL_I2C_Init+0x1dc>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	1e58      	subs	r0, r3, #1
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	0099      	lsls	r1, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	fbb0 f3f3 	udiv	r3, r0, r3
 800672a:	3301      	adds	r3, #1
 800672c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006730:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	6809      	ldr	r1, [r1, #0]
 8006738:	4313      	orrs	r3, r2
 800673a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006762:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6911      	ldr	r1, [r2, #16]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68d2      	ldr	r2, [r2, #12]
 800676e:	4311      	orrs	r1, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	430b      	orrs	r3, r1
 8006776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	000186a0 	.word	0x000186a0
 80067d0:	001e847f 	.word	0x001e847f
 80067d4:	003d08ff 	.word	0x003d08ff
 80067d8:	431bde83 	.word	0x431bde83
 80067dc:	10624dd3 	.word	0x10624dd3

080067e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	4608      	mov	r0, r1
 80067ea:	4611      	mov	r1, r2
 80067ec:	461a      	mov	r2, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	817b      	strh	r3, [r7, #10]
 80067f2:	460b      	mov	r3, r1
 80067f4:	813b      	strh	r3, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067fa:	f7ff fa23 	bl	8005c44 <HAL_GetTick>
 80067fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b20      	cmp	r3, #32
 800680a:	f040 80d9 	bne.w	80069c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	2319      	movs	r3, #25
 8006814:	2201      	movs	r2, #1
 8006816:	496d      	ldr	r1, [pc, #436]	@ (80069cc <HAL_I2C_Mem_Write+0x1ec>)
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fc8b 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
 8006826:	e0cc      	b.n	80069c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_I2C_Mem_Write+0x56>
 8006832:	2302      	movs	r3, #2
 8006834:	e0c5      	b.n	80069c2 <HAL_I2C_Mem_Write+0x1e2>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d007      	beq.n	800685c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0201 	orr.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800686a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2221      	movs	r2, #33	@ 0x21
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2240      	movs	r2, #64	@ 0x40
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800688c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4a4d      	ldr	r2, [pc, #308]	@ (80069d0 <HAL_I2C_Mem_Write+0x1f0>)
 800689c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800689e:	88f8      	ldrh	r0, [r7, #6]
 80068a0:	893a      	ldrh	r2, [r7, #8]
 80068a2:	8979      	ldrh	r1, [r7, #10]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4603      	mov	r3, r0
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fac2 	bl	8006e38 <I2C_RequestMemoryWrite>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d052      	beq.n	8006960 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e081      	b.n	80069c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fd50 	bl	8007368 <I2C_WaitOnTXEFlagUntilTimeout>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00d      	beq.n	80068ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d107      	bne.n	80068e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e06b      	b.n	80069c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b04      	cmp	r3, #4
 8006926:	d11b      	bne.n	8006960 <HAL_I2C_Mem_Write+0x180>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	781a      	ldrb	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1aa      	bne.n	80068be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fd43 	bl	80073f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697c:	2b04      	cmp	r3, #4
 800697e:	d107      	bne.n	8006990 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800698e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e016      	b.n	80069c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e000      	b.n	80069c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
  }
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	00100002 	.word	0x00100002
 80069d0:	ffff0000 	.word	0xffff0000

080069d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	@ 0x30
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	817b      	strh	r3, [r7, #10]
 80069e6:	460b      	mov	r3, r1
 80069e8:	813b      	strh	r3, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069ee:	f7ff f929 	bl	8005c44 <HAL_GetTick>
 80069f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	f040 8214 	bne.w	8006e2a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	2319      	movs	r3, #25
 8006a08:	2201      	movs	r2, #1
 8006a0a:	497b      	ldr	r1, [pc, #492]	@ (8006bf8 <HAL_I2C_Mem_Read+0x224>)
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fb91 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e207      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_I2C_Mem_Read+0x56>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e200      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d007      	beq.n	8006a50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2222      	movs	r2, #34	@ 0x22
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2240      	movs	r2, #64	@ 0x40
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8006bfc <HAL_I2C_Mem_Read+0x228>)
 8006a90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a92:	88f8      	ldrh	r0, [r7, #6]
 8006a94:	893a      	ldrh	r2, [r7, #8]
 8006a96:	8979      	ldrh	r1, [r7, #10]
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fa5e 	bl	8006f64 <I2C_RequestMemoryRead>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e1bc      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d113      	bne.n	8006ae2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aba:	2300      	movs	r3, #0
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	623b      	str	r3, [r7, #32]
 8006ace:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	e190      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d11b      	bne.n	8006b22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afa:	2300      	movs	r3, #0
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	61fb      	str	r3, [r7, #28]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	61fb      	str	r3, [r7, #28]
 8006b0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	e170      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d11b      	bne.n	8006b62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	e150      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b78:	e144      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	f200 80f1 	bhi.w	8006d66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d123      	bne.n	8006bd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fc79 	bl	8007488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e145      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006bd2:	e117      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d14e      	bne.n	8006c7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be2:	2200      	movs	r2, #0
 8006be4:	4906      	ldr	r1, [pc, #24]	@ (8006c00 <HAL_I2C_Mem_Read+0x22c>)
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 faa4 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e11a      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
 8006bf6:	bf00      	nop
 8006bf8:	00100002 	.word	0x00100002
 8006bfc:	ffff0000 	.word	0xffff0000
 8006c00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c78:	e0c4      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	2200      	movs	r2, #0
 8006c82:	496c      	ldr	r1, [pc, #432]	@ (8006e34 <HAL_I2C_Mem_Read+0x460>)
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fa55 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0cb      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	1c5a      	adds	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4955      	ldr	r1, [pc, #340]	@ (8006e34 <HAL_I2C_Mem_Read+0x460>)
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fa27 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e09d      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d64:	e04e      	b.n	8006e04 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fb8c 	bl	8007488 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e058      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691a      	ldr	r2, [r3, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	f003 0304 	and.w	r3, r3, #4
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d124      	bne.n	8006e04 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d107      	bne.n	8006dd2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dd0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f47f aeb6 	bne.w	8006b7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3728      	adds	r7, #40	@ 0x28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	00010004 	.word	0x00010004

08006e38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	817b      	strh	r3, [r7, #10]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	813b      	strh	r3, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 f960 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e88:	d103      	bne.n	8006e92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e05f      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e96:	897b      	ldrh	r3, [r7, #10]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	6a3a      	ldr	r2, [r7, #32]
 8006eaa:	492d      	ldr	r1, [pc, #180]	@ (8006f60 <I2C_RequestMemoryWrite+0x128>)
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f9bb 	bl	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e04c      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed4:	6a39      	ldr	r1, [r7, #32]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fa46 	bl	8007368 <I2C_WaitOnTXEFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d107      	bne.n	8006efa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e02b      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d105      	bne.n	8006f10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f04:	893b      	ldrh	r3, [r7, #8]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	611a      	str	r2, [r3, #16]
 8006f0e:	e021      	b.n	8006f54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f10:	893b      	ldrh	r3, [r7, #8]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f20:	6a39      	ldr	r1, [r7, #32]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fa20 	bl	8007368 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00d      	beq.n	8006f4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d107      	bne.n	8006f46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e005      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f4a:	893b      	ldrh	r3, [r7, #8]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	00010002 	.word	0x00010002

08006f64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	461a      	mov	r2, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	817b      	strh	r3, [r7, #10]
 8006f76:	460b      	mov	r3, r1
 8006f78:	813b      	strh	r3, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 f8c2 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc4:	d103      	bne.n	8006fce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0aa      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	4952      	ldr	r1, [pc, #328]	@ (8007130 <I2C_RequestMemoryRead+0x1cc>)
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f91d 	bl	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e097      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007010:	6a39      	ldr	r1, [r7, #32]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f9a8 	bl	8007368 <I2C_WaitOnTXEFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	2b04      	cmp	r3, #4
 8007024:	d107      	bne.n	8007036 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e076      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d105      	bne.n	800704c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007040:	893b      	ldrh	r3, [r7, #8]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e021      	b.n	8007090 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800704c:	893b      	ldrh	r3, [r7, #8]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b29b      	uxth	r3, r3
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800705a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705c:	6a39      	ldr	r1, [r7, #32]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f982 	bl	8007368 <I2C_WaitOnTXEFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	2b04      	cmp	r3, #4
 8007070:	d107      	bne.n	8007082 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e050      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007092:	6a39      	ldr	r1, [r7, #32]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f967 	bl	8007368 <I2C_WaitOnTXEFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d107      	bne.n	80070b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e035      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f82b 	bl	8007134 <I2C_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f2:	d103      	bne.n	80070fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e013      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007100:	897b      	ldrh	r3, [r7, #10]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	4906      	ldr	r1, [pc, #24]	@ (8007130 <I2C_RequestMemoryRead+0x1cc>)
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f886 	bl	8007228 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	00010002 	.word	0x00010002

08007134 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	603b      	str	r3, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007144:	e048      	b.n	80071d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d044      	beq.n	80071d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714e:	f7fe fd79 	bl	8005c44 <HAL_GetTick>
 8007152:	4602      	mov	r2, r0
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d302      	bcc.n	8007164 <I2C_WaitOnFlagUntilTimeout+0x30>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d139      	bne.n	80071d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	0c1b      	lsrs	r3, r3, #16
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10d      	bne.n	800718a <I2C_WaitOnFlagUntilTimeout+0x56>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	43da      	mvns	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	4013      	ands	r3, r2
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	bf0c      	ite	eq
 8007180:	2301      	moveq	r3, #1
 8007182:	2300      	movne	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	e00c      	b.n	80071a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	43da      	mvns	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	4013      	ands	r3, r2
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	bf0c      	ite	eq
 800719c:	2301      	moveq	r3, #1
 800719e:	2300      	movne	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	461a      	mov	r2, r3
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d116      	bne.n	80071d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e023      	b.n	8007220 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d10d      	bne.n	80071fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	43da      	mvns	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4013      	ands	r3, r2
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bf0c      	ite	eq
 80071f4:	2301      	moveq	r3, #1
 80071f6:	2300      	movne	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	e00c      	b.n	8007218 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	43da      	mvns	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4013      	ands	r3, r2
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	bf0c      	ite	eq
 8007210:	2301      	moveq	r3, #1
 8007212:	2300      	movne	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	429a      	cmp	r2, r3
 800721c:	d093      	beq.n	8007146 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007236:	e071      	b.n	800731c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007246:	d123      	bne.n	8007290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007256:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727c:	f043 0204 	orr.w	r2, r3, #4
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e067      	b.n	8007360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d041      	beq.n	800731c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007298:	f7fe fcd4 	bl	8005c44 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d302      	bcc.n	80072ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d136      	bne.n	800731c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10c      	bne.n	80072d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	43da      	mvns	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf14      	ite	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	2300      	moveq	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e00b      	b.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	43da      	mvns	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4013      	ands	r3, r2
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007308:	f043 0220 	orr.w	r2, r3, #32
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e021      	b.n	8007360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b01      	cmp	r3, #1
 8007324:	d10c      	bne.n	8007340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	43da      	mvns	r2, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	4013      	ands	r3, r2
 8007332:	b29b      	uxth	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
 800733e:	e00b      	b.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	43da      	mvns	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	bf14      	ite	ne
 8007352:	2301      	movne	r3, #1
 8007354:	2300      	moveq	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	f47f af6d 	bne.w	8007238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007374:	e034      	b.n	80073e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f000 f8e3 	bl	8007542 <I2C_IsAcknowledgeFailed>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e034      	b.n	80073f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d028      	beq.n	80073e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fe fc59 	bl	8005c44 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11d      	bne.n	80073e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ae:	2b80      	cmp	r3, #128	@ 0x80
 80073b0:	d016      	beq.n	80073e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	f043 0220 	orr.w	r2, r3, #32
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e007      	b.n	80073f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ea:	2b80      	cmp	r3, #128	@ 0x80
 80073ec:	d1c3      	bne.n	8007376 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007404:	e034      	b.n	8007470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f89b 	bl	8007542 <I2C_IsAcknowledgeFailed>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e034      	b.n	8007480 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741c:	d028      	beq.n	8007470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741e:	f7fe fc11 	bl	8005c44 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	429a      	cmp	r2, r3
 800742c:	d302      	bcc.n	8007434 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11d      	bne.n	8007470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d016      	beq.n	8007470 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745c:	f043 0220 	orr.w	r2, r3, #32
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e007      	b.n	8007480 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	f003 0304 	and.w	r3, r3, #4
 800747a:	2b04      	cmp	r3, #4
 800747c:	d1c3      	bne.n	8007406 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007494:	e049      	b.n	800752a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d119      	bne.n	80074d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0210 	mvn.w	r2, #16
 80074ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e030      	b.n	800753a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d8:	f7fe fbb4 	bl	8005c44 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d302      	bcc.n	80074ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d11d      	bne.n	800752a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f8:	2b40      	cmp	r3, #64	@ 0x40
 80074fa:	d016      	beq.n	800752a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2220      	movs	r2, #32
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007516:	f043 0220 	orr.w	r2, r3, #32
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e007      	b.n	800753a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007534:	2b40      	cmp	r3, #64	@ 0x40
 8007536:	d1ae      	bne.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007558:	d11b      	bne.n	8007592 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007562:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	f043 0204 	orr.w	r2, r3, #4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e0bf      	b.n	8007732 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fd fc76 	bl	8004eb8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80075e2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6999      	ldr	r1, [r3, #24]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075f8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6899      	ldr	r1, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b4a      	ldr	r3, [pc, #296]	@ (800773c <HAL_LTDC_Init+0x19c>)
 8007614:	400b      	ands	r3, r1
 8007616:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	041b      	lsls	r3, r3, #16
 800761e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6899      	ldr	r1, [r3, #8]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699a      	ldr	r2, [r3, #24]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68d9      	ldr	r1, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b3e      	ldr	r3, [pc, #248]	@ (800773c <HAL_LTDC_Init+0x19c>)
 8007642:	400b      	ands	r3, r1
 8007644:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	041b      	lsls	r3, r3, #16
 800764c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68d9      	ldr	r1, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6919      	ldr	r1, [r3, #16]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b33      	ldr	r3, [pc, #204]	@ (800773c <HAL_LTDC_Init+0x19c>)
 8007670:	400b      	ands	r3, r1
 8007672:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007678:	041b      	lsls	r3, r3, #16
 800767a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6919      	ldr	r1, [r3, #16]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6959      	ldr	r1, [r3, #20]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	4b27      	ldr	r3, [pc, #156]	@ (800773c <HAL_LTDC_Init+0x19c>)
 800769e:	400b      	ands	r3, r1
 80076a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6959      	ldr	r1, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80076e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80076f6:	431a      	orrs	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0206 	orr.w	r2, r2, #6
 800770e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	f000f800 	.word	0xf000f800

08007740 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007740:	b5b0      	push	{r4, r5, r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_LTDC_ConfigLayer+0x1a>
 8007756:	2302      	movs	r3, #2
 8007758:	e02c      	b.n	80077b4 <HAL_LTDC_ConfigLayer+0x74>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2134      	movs	r1, #52	@ 0x34
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4614      	mov	r4, r2
 800777e:	461d      	mov	r5, r3
 8007780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800778a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f811 	bl	80077bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2201      	movs	r2, #1
 80077a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bdb0      	pop	{r4, r5, r7, pc}

080077bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b089      	sub	sp, #36	@ 0x24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d8:	4413      	add	r3, r2
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	01db      	lsls	r3, r3, #7
 80077e8:	4413      	add	r3, r2
 80077ea:	3384      	adds	r3, #132	@ 0x84
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	4611      	mov	r1, r2
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	01d2      	lsls	r2, r2, #7
 80077f8:	440a      	add	r2, r1
 80077fa:	3284      	adds	r2, #132	@ 0x84
 80077fc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007800:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007812:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007814:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4619      	mov	r1, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	01db      	lsls	r3, r3, #7
 8007820:	440b      	add	r3, r1
 8007822:	3384      	adds	r3, #132	@ 0x84
 8007824:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800782a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800783a:	4413      	add	r3, r2
 800783c:	041b      	lsls	r3, r3, #16
 800783e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	01db      	lsls	r3, r3, #7
 800784a:	4413      	add	r3, r2
 800784c:	3384      	adds	r3, #132	@ 0x84
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	6812      	ldr	r2, [r2, #0]
 8007854:	4611      	mov	r1, r2
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	01d2      	lsls	r2, r2, #7
 800785a:	440a      	add	r2, r1
 800785c:	3284      	adds	r2, #132	@ 0x84
 800785e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007862:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007872:	4413      	add	r3, r2
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	01db      	lsls	r3, r3, #7
 8007880:	440b      	add	r3, r1
 8007882:	3384      	adds	r3, #132	@ 0x84
 8007884:	4619      	mov	r1, r3
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4313      	orrs	r3, r2
 800788a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	01db      	lsls	r3, r3, #7
 8007896:	4413      	add	r3, r2
 8007898:	3384      	adds	r3, #132	@ 0x84
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	6812      	ldr	r2, [r2, #0]
 80078a0:	4611      	mov	r1, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	01d2      	lsls	r2, r2, #7
 80078a6:	440a      	add	r2, r1
 80078a8:	3284      	adds	r2, #132	@ 0x84
 80078aa:	f023 0307 	bic.w	r3, r3, #7
 80078ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	01db      	lsls	r3, r3, #7
 80078ba:	4413      	add	r3, r2
 80078bc:	3384      	adds	r3, #132	@ 0x84
 80078be:	461a      	mov	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	061b      	lsls	r3, r3, #24
 80078e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	01db      	lsls	r3, r3, #7
 80078ec:	4413      	add	r3, r2
 80078ee:	3384      	adds	r3, #132	@ 0x84
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	01db      	lsls	r3, r3, #7
 80078fc:	4413      	add	r3, r2
 80078fe:	3384      	adds	r3, #132	@ 0x84
 8007900:	461a      	mov	r2, r3
 8007902:	2300      	movs	r3, #0
 8007904:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800790c:	461a      	mov	r2, r3
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	431a      	orrs	r2, r3
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	431a      	orrs	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	01db      	lsls	r3, r3, #7
 8007920:	440b      	add	r3, r1
 8007922:	3384      	adds	r3, #132	@ 0x84
 8007924:	4619      	mov	r1, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	01db      	lsls	r3, r3, #7
 8007936:	4413      	add	r3, r2
 8007938:	3384      	adds	r3, #132	@ 0x84
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	6812      	ldr	r2, [r2, #0]
 8007940:	4611      	mov	r1, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	01d2      	lsls	r2, r2, #7
 8007946:	440a      	add	r2, r1
 8007948:	3284      	adds	r2, #132	@ 0x84
 800794a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800794e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	01db      	lsls	r3, r3, #7
 800795a:	4413      	add	r3, r2
 800795c:	3384      	adds	r3, #132	@ 0x84
 800795e:	461a      	mov	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	01db      	lsls	r3, r3, #7
 8007970:	4413      	add	r3, r2
 8007972:	3384      	adds	r3, #132	@ 0x84
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	4611      	mov	r1, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	01d2      	lsls	r2, r2, #7
 8007980:	440a      	add	r2, r1
 8007982:	3284      	adds	r2, #132	@ 0x84
 8007984:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007988:	f023 0307 	bic.w	r3, r3, #7
 800798c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	69da      	ldr	r2, [r3, #28]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	68f9      	ldr	r1, [r7, #12]
 8007998:	6809      	ldr	r1, [r1, #0]
 800799a:	4608      	mov	r0, r1
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	01c9      	lsls	r1, r1, #7
 80079a0:	4401      	add	r1, r0
 80079a2:	3184      	adds	r1, #132	@ 0x84
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	01db      	lsls	r3, r3, #7
 80079b2:	4413      	add	r3, r2
 80079b4:	3384      	adds	r3, #132	@ 0x84
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	461a      	mov	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	01db      	lsls	r3, r3, #7
 80079c2:	4413      	add	r3, r2
 80079c4:	3384      	adds	r3, #132	@ 0x84
 80079c6:	461a      	mov	r2, r3
 80079c8:	2300      	movs	r3, #0
 80079ca:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	01db      	lsls	r3, r3, #7
 80079d6:	4413      	add	r3, r2
 80079d8:	3384      	adds	r3, #132	@ 0x84
 80079da:	461a      	mov	r2, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d102      	bne.n	80079f0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80079ea:	2304      	movs	r3, #4
 80079ec:	61fb      	str	r3, [r7, #28]
 80079ee:	e01b      	b.n	8007a28 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d102      	bne.n	80079fe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80079f8:	2303      	movs	r3, #3
 80079fa:	61fb      	str	r3, [r7, #28]
 80079fc:	e014      	b.n	8007a28 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d00b      	beq.n	8007a1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d007      	beq.n	8007a1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d003      	beq.n	8007a1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a1a:	2b07      	cmp	r3, #7
 8007a1c:	d102      	bne.n	8007a24 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	61fb      	str	r3, [r7, #28]
 8007a22:	e001      	b.n	8007a28 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007a24:	2301      	movs	r3, #1
 8007a26:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	01db      	lsls	r3, r3, #7
 8007a32:	4413      	add	r3, r2
 8007a34:	3384      	adds	r3, #132	@ 0x84
 8007a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	01d2      	lsls	r2, r2, #7
 8007a42:	440a      	add	r2, r1
 8007a44:	3284      	adds	r2, #132	@ 0x84
 8007a46:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	fb02 f303 	mul.w	r3, r2, r3
 8007a56:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6859      	ldr	r1, [r3, #4]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	1acb      	subs	r3, r1, r3
 8007a62:	69f9      	ldr	r1, [r7, #28]
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	6809      	ldr	r1, [r1, #0]
 8007a6e:	4608      	mov	r0, r1
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	01c9      	lsls	r1, r1, #7
 8007a74:	4401      	add	r1, r0
 8007a76:	3184      	adds	r1, #132	@ 0x84
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	01db      	lsls	r3, r3, #7
 8007a86:	4413      	add	r3, r2
 8007a88:	3384      	adds	r3, #132	@ 0x84
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	4611      	mov	r1, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	01d2      	lsls	r2, r2, #7
 8007a96:	440a      	add	r2, r1
 8007a98:	3284      	adds	r2, #132	@ 0x84
 8007a9a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a9e:	f023 0307 	bic.w	r3, r3, #7
 8007aa2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	01db      	lsls	r3, r3, #7
 8007aae:	4413      	add	r3, r2
 8007ab0:	3384      	adds	r3, #132	@ 0x84
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	01db      	lsls	r3, r3, #7
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3384      	adds	r3, #132	@ 0x84
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	6812      	ldr	r2, [r2, #0]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	01d2      	lsls	r2, r2, #7
 8007ad4:	440a      	add	r2, r1
 8007ad6:	3284      	adds	r2, #132	@ 0x84
 8007ad8:	f043 0301 	orr.w	r3, r3, #1
 8007adc:	6013      	str	r3, [r2, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3724      	adds	r7, #36	@ 0x24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
	...

08007aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e267      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d075      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b0a:	4b88      	ldr	r3, [pc, #544]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 030c 	and.w	r3, r3, #12
 8007b12:	2b04      	cmp	r3, #4
 8007b14:	d00c      	beq.n	8007b30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b16:	4b85      	ldr	r3, [pc, #532]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d112      	bne.n	8007b48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b22:	4b82      	ldr	r3, [pc, #520]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b2e:	d10b      	bne.n	8007b48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b30:	4b7e      	ldr	r3, [pc, #504]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d05b      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x108>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d157      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e242      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b50:	d106      	bne.n	8007b60 <HAL_RCC_OscConfig+0x74>
 8007b52:	4b76      	ldr	r3, [pc, #472]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a75      	ldr	r2, [pc, #468]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	e01d      	b.n	8007b9c <HAL_RCC_OscConfig+0xb0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b68:	d10c      	bne.n	8007b84 <HAL_RCC_OscConfig+0x98>
 8007b6a:	4b70      	ldr	r3, [pc, #448]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b74:	6013      	str	r3, [r2, #0]
 8007b76:	4b6d      	ldr	r3, [pc, #436]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	e00b      	b.n	8007b9c <HAL_RCC_OscConfig+0xb0>
 8007b84:	4b69      	ldr	r3, [pc, #420]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a68      	ldr	r2, [pc, #416]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	4b66      	ldr	r3, [pc, #408]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a65      	ldr	r2, [pc, #404]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d013      	beq.n	8007bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba4:	f7fe f84e 	bl	8005c44 <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bac:	f7fe f84a 	bl	8005c44 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b64      	cmp	r3, #100	@ 0x64
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e207      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f0      	beq.n	8007bac <HAL_RCC_OscConfig+0xc0>
 8007bca:	e014      	b.n	8007bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bcc:	f7fe f83a 	bl	8005c44 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bd4:	f7fe f836 	bl	8005c44 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b64      	cmp	r3, #100	@ 0x64
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e1f3      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007be6:	4b51      	ldr	r3, [pc, #324]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0xe8>
 8007bf2:	e000      	b.n	8007bf6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d063      	beq.n	8007cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c02:	4b4a      	ldr	r3, [pc, #296]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 030c 	and.w	r3, r3, #12
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00b      	beq.n	8007c26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c0e:	4b47      	ldr	r3, [pc, #284]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	d11c      	bne.n	8007c54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c1a:	4b44      	ldr	r3, [pc, #272]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d116      	bne.n	8007c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c26:	4b41      	ldr	r3, [pc, #260]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_RCC_OscConfig+0x152>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d001      	beq.n	8007c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e1c7      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	4937      	ldr	r1, [pc, #220]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c52:	e03a      	b.n	8007cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d020      	beq.n	8007c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c5c:	4b34      	ldr	r3, [pc, #208]	@ (8007d30 <HAL_RCC_OscConfig+0x244>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c62:	f7fd ffef 	bl	8005c44 <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c6a:	f7fd ffeb 	bl	8005c44 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e1a8      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f0      	beq.n	8007c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c88:	4b28      	ldr	r3, [pc, #160]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	4925      	ldr	r1, [pc, #148]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	600b      	str	r3, [r1, #0]
 8007c9c:	e015      	b.n	8007cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c9e:	4b24      	ldr	r3, [pc, #144]	@ (8007d30 <HAL_RCC_OscConfig+0x244>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca4:	f7fd ffce 	bl	8005c44 <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cac:	f7fd ffca 	bl	8005c44 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e187      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f0      	bne.n	8007cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0308 	and.w	r3, r3, #8
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d036      	beq.n	8007d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d016      	beq.n	8007d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cde:	4b15      	ldr	r3, [pc, #84]	@ (8007d34 <HAL_RCC_OscConfig+0x248>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce4:	f7fd ffae 	bl	8005c44 <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cec:	f7fd ffaa 	bl	8005c44 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e167      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <HAL_RCC_OscConfig+0x240>)
 8007d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d02:	f003 0302 	and.w	r3, r3, #2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f0      	beq.n	8007cec <HAL_RCC_OscConfig+0x200>
 8007d0a:	e01b      	b.n	8007d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d0c:	4b09      	ldr	r3, [pc, #36]	@ (8007d34 <HAL_RCC_OscConfig+0x248>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d12:	f7fd ff97 	bl	8005c44 <HAL_GetTick>
 8007d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d18:	e00e      	b.n	8007d38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d1a:	f7fd ff93 	bl	8005c44 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d907      	bls.n	8007d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e150      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	42470000 	.word	0x42470000
 8007d34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d38:	4b88      	ldr	r3, [pc, #544]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1ea      	bne.n	8007d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8097 	beq.w	8007e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d56:	4b81      	ldr	r3, [pc, #516]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	4b7d      	ldr	r3, [pc, #500]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d72:	4b7a      	ldr	r3, [pc, #488]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d7a:	60bb      	str	r3, [r7, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d82:	4b77      	ldr	r3, [pc, #476]	@ (8007f60 <HAL_RCC_OscConfig+0x474>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d118      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d8e:	4b74      	ldr	r3, [pc, #464]	@ (8007f60 <HAL_RCC_OscConfig+0x474>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a73      	ldr	r2, [pc, #460]	@ (8007f60 <HAL_RCC_OscConfig+0x474>)
 8007d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d9a:	f7fd ff53 	bl	8005c44 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da0:	e008      	b.n	8007db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007da2:	f7fd ff4f 	bl	8005c44 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e10c      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db4:	4b6a      	ldr	r3, [pc, #424]	@ (8007f60 <HAL_RCC_OscConfig+0x474>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0f0      	beq.n	8007da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d106      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x2ea>
 8007dc8:	4b64      	ldr	r3, [pc, #400]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dcc:	4a63      	ldr	r2, [pc, #396]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dd4:	e01c      	b.n	8007e10 <HAL_RCC_OscConfig+0x324>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	d10c      	bne.n	8007df8 <HAL_RCC_OscConfig+0x30c>
 8007dde:	4b5f      	ldr	r3, [pc, #380]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007de2:	4a5e      	ldr	r2, [pc, #376]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007de4:	f043 0304 	orr.w	r3, r3, #4
 8007de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dea:	4b5c      	ldr	r3, [pc, #368]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dee:	4a5b      	ldr	r2, [pc, #364]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007df0:	f043 0301 	orr.w	r3, r3, #1
 8007df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007df6:	e00b      	b.n	8007e10 <HAL_RCC_OscConfig+0x324>
 8007df8:	4b58      	ldr	r3, [pc, #352]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dfc:	4a57      	ldr	r2, [pc, #348]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007dfe:	f023 0301 	bic.w	r3, r3, #1
 8007e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e04:	4b55      	ldr	r3, [pc, #340]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e08:	4a54      	ldr	r2, [pc, #336]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e0a:	f023 0304 	bic.w	r3, r3, #4
 8007e0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d015      	beq.n	8007e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e18:	f7fd ff14 	bl	8005c44 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e1e:	e00a      	b.n	8007e36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e20:	f7fd ff10 	bl	8005c44 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e0cb      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e36:	4b49      	ldr	r3, [pc, #292]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3a:	f003 0302 	and.w	r3, r3, #2
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0ee      	beq.n	8007e20 <HAL_RCC_OscConfig+0x334>
 8007e42:	e014      	b.n	8007e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e44:	f7fd fefe 	bl	8005c44 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e4a:	e00a      	b.n	8007e62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e4c:	f7fd fefa 	bl	8005c44 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e0b5      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e62:	4b3e      	ldr	r3, [pc, #248]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1ee      	bne.n	8007e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d105      	bne.n	8007e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e74:	4b39      	ldr	r3, [pc, #228]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	4a38      	ldr	r2, [pc, #224]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80a1 	beq.w	8007fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e8a:	4b34      	ldr	r3, [pc, #208]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	f003 030c 	and.w	r3, r3, #12
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d05c      	beq.n	8007f50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d141      	bne.n	8007f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e9e:	4b31      	ldr	r3, [pc, #196]	@ (8007f64 <HAL_RCC_OscConfig+0x478>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ea4:	f7fd fece 	bl	8005c44 <HAL_GetTick>
 8007ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eac:	f7fd feca 	bl	8005c44 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e087      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ebe:	4b27      	ldr	r3, [pc, #156]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69da      	ldr	r2, [r3, #28]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	019b      	lsls	r3, r3, #6
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee0:	085b      	lsrs	r3, r3, #1
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	061b      	lsls	r3, r3, #24
 8007eee:	491b      	ldr	r1, [pc, #108]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f64 <HAL_RCC_OscConfig+0x478>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007efa:	f7fd fea3 	bl	8005c44 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f00:	e008      	b.n	8007f14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f02:	f7fd fe9f 	bl	8005c44 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e05c      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f14:	4b11      	ldr	r3, [pc, #68]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0f0      	beq.n	8007f02 <HAL_RCC_OscConfig+0x416>
 8007f20:	e054      	b.n	8007fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f22:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <HAL_RCC_OscConfig+0x478>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f28:	f7fd fe8c 	bl	8005c44 <HAL_GetTick>
 8007f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f30:	f7fd fe88 	bl	8005c44 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e045      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f42:	4b06      	ldr	r3, [pc, #24]	@ (8007f5c <HAL_RCC_OscConfig+0x470>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x444>
 8007f4e:	e03d      	b.n	8007fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d107      	bne.n	8007f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e038      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	40007000 	.word	0x40007000
 8007f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f68:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd8 <HAL_RCC_OscConfig+0x4ec>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d028      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d121      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d11a      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f98:	4013      	ands	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d111      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	085b      	lsrs	r3, r3, #1
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d107      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d001      	beq.n	8007fcc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e000      	b.n	8007fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40023800 	.word	0x40023800

08007fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e0cc      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ff0:	4b68      	ldr	r3, [pc, #416]	@ (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d90c      	bls.n	8008018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffe:	4b65      	ldr	r3, [pc, #404]	@ (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b63      	ldr	r3, [pc, #396]	@ (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e0b8      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008030:	4b59      	ldr	r3, [pc, #356]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	4a58      	ldr	r2, [pc, #352]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800803a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008048:	4b53      	ldr	r3, [pc, #332]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	4a52      	ldr	r2, [pc, #328]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008054:	4b50      	ldr	r3, [pc, #320]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	494d      	ldr	r1, [pc, #308]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	4313      	orrs	r3, r2
 8008064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d044      	beq.n	80080fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800807a:	4b47      	ldr	r3, [pc, #284]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d119      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e07f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d003      	beq.n	800809a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008096:	2b03      	cmp	r3, #3
 8008098:	d107      	bne.n	80080aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800809a:	4b3f      	ldr	r3, [pc, #252]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e06f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080aa:	4b3b      	ldr	r3, [pc, #236]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e067      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ba:	4b37      	ldr	r3, [pc, #220]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f023 0203 	bic.w	r2, r3, #3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4934      	ldr	r1, [pc, #208]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080cc:	f7fd fdba 	bl	8005c44 <HAL_GetTick>
 80080d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080d2:	e00a      	b.n	80080ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d4:	f7fd fdb6 	bl	8005c44 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e04f      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ea:	4b2b      	ldr	r3, [pc, #172]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 020c 	and.w	r2, r3, #12
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d1eb      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080fc:	4b25      	ldr	r3, [pc, #148]	@ (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d20c      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800810a:	4b22      	ldr	r3, [pc, #136]	@ (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008112:	4b20      	ldr	r3, [pc, #128]	@ (8008194 <HAL_RCC_ClockConfig+0x1b8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e032      	b.n	800818a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b19      	ldr	r3, [pc, #100]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4916      	ldr	r1, [pc, #88]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800813e:	4313      	orrs	r3, r2
 8008140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814e:	4b12      	ldr	r3, [pc, #72]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	490e      	ldr	r1, [pc, #56]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800815e:	4313      	orrs	r3, r2
 8008160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008162:	f000 f821 	bl	80081a8 <HAL_RCC_GetSysClockFreq>
 8008166:	4602      	mov	r2, r0
 8008168:	4b0b      	ldr	r3, [pc, #44]	@ (8008198 <HAL_RCC_ClockConfig+0x1bc>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	490a      	ldr	r1, [pc, #40]	@ (800819c <HAL_RCC_ClockConfig+0x1c0>)
 8008174:	5ccb      	ldrb	r3, [r1, r3]
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <HAL_RCC_ClockConfig+0x1c4>)
 800817c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800817e:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7fd fd1a 	bl	8005bbc <HAL_InitTick>

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40023c00 	.word	0x40023c00
 8008198:	40023800 	.word	0x40023800
 800819c:	0800b198 	.word	0x0800b198
 80081a0:	20000014 	.word	0x20000014
 80081a4:	20000018 	.word	0x20000018

080081a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081ac:	b094      	sub	sp, #80	@ 0x50
 80081ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081c0:	4b79      	ldr	r3, [pc, #484]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f003 030c 	and.w	r3, r3, #12
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d00d      	beq.n	80081e8 <HAL_RCC_GetSysClockFreq+0x40>
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	f200 80e1 	bhi.w	8008394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <HAL_RCC_GetSysClockFreq+0x34>
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d003      	beq.n	80081e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80081da:	e0db      	b.n	8008394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081dc:	4b73      	ldr	r3, [pc, #460]	@ (80083ac <HAL_RCC_GetSysClockFreq+0x204>)
 80081de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081e0:	e0db      	b.n	800839a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081e2:	4b73      	ldr	r3, [pc, #460]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80081e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081e6:	e0d8      	b.n	800839a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081e8:	4b6f      	ldr	r3, [pc, #444]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081f2:	4b6d      	ldr	r3, [pc, #436]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d063      	beq.n	80082c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081fe:	4b6a      	ldr	r3, [pc, #424]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	099b      	lsrs	r3, r3, #6
 8008204:	2200      	movs	r2, #0
 8008206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008208:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008210:	633b      	str	r3, [r7, #48]	@ 0x30
 8008212:	2300      	movs	r3, #0
 8008214:	637b      	str	r3, [r7, #52]	@ 0x34
 8008216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800821a:	4622      	mov	r2, r4
 800821c:	462b      	mov	r3, r5
 800821e:	f04f 0000 	mov.w	r0, #0
 8008222:	f04f 0100 	mov.w	r1, #0
 8008226:	0159      	lsls	r1, r3, #5
 8008228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800822c:	0150      	lsls	r0, r2, #5
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4621      	mov	r1, r4
 8008234:	1a51      	subs	r1, r2, r1
 8008236:	6139      	str	r1, [r7, #16]
 8008238:	4629      	mov	r1, r5
 800823a:	eb63 0301 	sbc.w	r3, r3, r1
 800823e:	617b      	str	r3, [r7, #20]
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800824c:	4659      	mov	r1, fp
 800824e:	018b      	lsls	r3, r1, #6
 8008250:	4651      	mov	r1, sl
 8008252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008256:	4651      	mov	r1, sl
 8008258:	018a      	lsls	r2, r1, #6
 800825a:	4651      	mov	r1, sl
 800825c:	ebb2 0801 	subs.w	r8, r2, r1
 8008260:	4659      	mov	r1, fp
 8008262:	eb63 0901 	sbc.w	r9, r3, r1
 8008266:	f04f 0200 	mov.w	r2, #0
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800827a:	4690      	mov	r8, r2
 800827c:	4699      	mov	r9, r3
 800827e:	4623      	mov	r3, r4
 8008280:	eb18 0303 	adds.w	r3, r8, r3
 8008284:	60bb      	str	r3, [r7, #8]
 8008286:	462b      	mov	r3, r5
 8008288:	eb49 0303 	adc.w	r3, r9, r3
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	f04f 0200 	mov.w	r2, #0
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800829a:	4629      	mov	r1, r5
 800829c:	024b      	lsls	r3, r1, #9
 800829e:	4621      	mov	r1, r4
 80082a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082a4:	4621      	mov	r1, r4
 80082a6:	024a      	lsls	r2, r1, #9
 80082a8:	4610      	mov	r0, r2
 80082aa:	4619      	mov	r1, r3
 80082ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ae:	2200      	movs	r2, #0
 80082b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082b8:	f7f7 ffea 	bl	8000290 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4613      	mov	r3, r2
 80082c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082c4:	e058      	b.n	8008378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082c6:	4b38      	ldr	r3, [pc, #224]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	099b      	lsrs	r3, r3, #6
 80082cc:	2200      	movs	r2, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	4611      	mov	r1, r2
 80082d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082d6:	623b      	str	r3, [r7, #32]
 80082d8:	2300      	movs	r3, #0
 80082da:	627b      	str	r3, [r7, #36]	@ 0x24
 80082dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	f04f 0000 	mov.w	r0, #0
 80082e8:	f04f 0100 	mov.w	r1, #0
 80082ec:	0159      	lsls	r1, r3, #5
 80082ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082f2:	0150      	lsls	r0, r2, #5
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4641      	mov	r1, r8
 80082fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80082fe:	4649      	mov	r1, r9
 8008300:	eb63 0b01 	sbc.w	fp, r3, r1
 8008304:	f04f 0200 	mov.w	r2, #0
 8008308:	f04f 0300 	mov.w	r3, #0
 800830c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008318:	ebb2 040a 	subs.w	r4, r2, sl
 800831c:	eb63 050b 	sbc.w	r5, r3, fp
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	00eb      	lsls	r3, r5, #3
 800832a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800832e:	00e2      	lsls	r2, r4, #3
 8008330:	4614      	mov	r4, r2
 8008332:	461d      	mov	r5, r3
 8008334:	4643      	mov	r3, r8
 8008336:	18e3      	adds	r3, r4, r3
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	464b      	mov	r3, r9
 800833c:	eb45 0303 	adc.w	r3, r5, r3
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	f04f 0300 	mov.w	r3, #0
 800834a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800834e:	4629      	mov	r1, r5
 8008350:	028b      	lsls	r3, r1, #10
 8008352:	4621      	mov	r1, r4
 8008354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008358:	4621      	mov	r1, r4
 800835a:	028a      	lsls	r2, r1, #10
 800835c:	4610      	mov	r0, r2
 800835e:	4619      	mov	r1, r3
 8008360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008362:	2200      	movs	r2, #0
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	61fa      	str	r2, [r7, #28]
 8008368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800836c:	f7f7 ff90 	bl	8000290 <__aeabi_uldivmod>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4613      	mov	r3, r2
 8008376:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008378:	4b0b      	ldr	r3, [pc, #44]	@ (80083a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	3301      	adds	r3, #1
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800838a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800838c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008392:	e002      	b.n	800839a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008394:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <HAL_RCC_GetSysClockFreq+0x204>)
 8008396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800839a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800839c:	4618      	mov	r0, r3
 800839e:	3750      	adds	r7, #80	@ 0x50
 80083a0:	46bd      	mov	sp, r7
 80083a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083a6:	bf00      	nop
 80083a8:	40023800 	.word	0x40023800
 80083ac:	00f42400 	.word	0x00f42400
 80083b0:	007a1200 	.word	0x007a1200

080083b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083b8:	4b03      	ldr	r3, [pc, #12]	@ (80083c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80083ba:	681b      	ldr	r3, [r3, #0]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000014 	.word	0x20000014

080083cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083d0:	f7ff fff0 	bl	80083b4 <HAL_RCC_GetHCLKFreq>
 80083d4:	4602      	mov	r2, r0
 80083d6:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	0a9b      	lsrs	r3, r3, #10
 80083dc:	f003 0307 	and.w	r3, r3, #7
 80083e0:	4903      	ldr	r1, [pc, #12]	@ (80083f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083e2:	5ccb      	ldrb	r3, [r1, r3]
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40023800 	.word	0x40023800
 80083f0:	0800b1a8 	.word	0x0800b1a8

080083f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10b      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008424:	2b00      	cmp	r3, #0
 8008426:	d075      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008428:	4b91      	ldr	r3, [pc, #580]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800842e:	f7fd fc09 	bl	8005c44 <HAL_GetTick>
 8008432:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008434:	e008      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008436:	f7fd fc05 	bl	8005c44 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e189      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008448:	4b8a      	ldr	r3, [pc, #552]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f0      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	019a      	lsls	r2, r3, #6
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	071b      	lsls	r3, r3, #28
 800846c:	4981      	ldr	r1, [pc, #516]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01f      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008480:	4b7c      	ldr	r3, [pc, #496]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008486:	0f1b      	lsrs	r3, r3, #28
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	019a      	lsls	r2, r3, #6
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	061b      	lsls	r3, r3, #24
 800849a:	431a      	orrs	r2, r3
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	071b      	lsls	r3, r3, #28
 80084a0:	4974      	ldr	r1, [pc, #464]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084a8:	4b72      	ldr	r3, [pc, #456]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ae:	f023 021f 	bic.w	r2, r3, #31
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	496e      	ldr	r1, [pc, #440]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00d      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	019a      	lsls	r2, r3, #6
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	061b      	lsls	r3, r3, #24
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	071b      	lsls	r3, r3, #28
 80084e0:	4964      	ldr	r1, [pc, #400]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084e8:	4b61      	ldr	r3, [pc, #388]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80084ea:	2201      	movs	r2, #1
 80084ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084ee:	f7fd fba9 	bl	8005c44 <HAL_GetTick>
 80084f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084f4:	e008      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084f6:	f7fd fba5 	bl	8005c44 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e129      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008508:	4b5a      	ldr	r3, [pc, #360]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0f0      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	d105      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008528:	2b00      	cmp	r3, #0
 800852a:	d079      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800852c:	4b52      	ldr	r3, [pc, #328]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008532:	f7fd fb87 	bl	8005c44 <HAL_GetTick>
 8008536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008538:	e008      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800853a:	f7fd fb83 	bl	8005c44 <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	2b02      	cmp	r3, #2
 8008546:	d901      	bls.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e107      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800854c:	4b49      	ldr	r3, [pc, #292]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008558:	d0ef      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d020      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008566:	4b43      	ldr	r3, [pc, #268]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856c:	0f1b      	lsrs	r3, r3, #28
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	019a      	lsls	r2, r3, #6
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	431a      	orrs	r2, r3
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	493b      	ldr	r1, [pc, #236]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800858e:	4b39      	ldr	r3, [pc, #228]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008594:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	3b01      	subs	r3, #1
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	4934      	ldr	r1, [pc, #208]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01e      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085b4:	4b2f      	ldr	r3, [pc, #188]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	019a      	lsls	r2, r3, #6
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	061b      	lsls	r3, r3, #24
 80085cc:	431a      	orrs	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	071b      	lsls	r3, r3, #28
 80085d4:	4927      	ldr	r1, [pc, #156]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80085dc:	4b25      	ldr	r3, [pc, #148]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ea:	4922      	ldr	r1, [pc, #136]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80085f2:	4b21      	ldr	r3, [pc, #132]	@ (8008678 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80085f8:	f7fd fb24 	bl	8005c44 <HAL_GetTick>
 80085fc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80085fe:	e008      	b.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008600:	f7fd fb20 	bl	8005c44 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b02      	cmp	r3, #2
 800860c:	d901      	bls.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e0a4      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008612:	4b18      	ldr	r3, [pc, #96]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800861a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800861e:	d1ef      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 808b 	beq.w	8008744 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	4a0f      	ldr	r2, [pc, #60]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800863c:	6413      	str	r3, [r2, #64]	@ 0x40
 800863e:	4b0d      	ldr	r3, [pc, #52]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800864a:	4b0c      	ldr	r3, [pc, #48]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a0b      	ldr	r2, [pc, #44]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008654:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008656:	f7fd faf5 	bl	8005c44 <HAL_GetTick>
 800865a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800865c:	e010      	b.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865e:	f7fd faf1 	bl	8005c44 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d909      	bls.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e075      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008670:	42470068 	.word	0x42470068
 8008674:	40023800 	.word	0x40023800
 8008678:	42470070 	.word	0x42470070
 800867c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008680:	4b38      	ldr	r3, [pc, #224]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0e8      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800868c:	4b36      	ldr	r3, [pc, #216]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008694:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d02f      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d028      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086aa:	4b2f      	ldr	r3, [pc, #188]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086b4:	4b2d      	ldr	r3, [pc, #180]	@ (800876c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80086b6:	2201      	movs	r2, #1
 80086b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086ba:	4b2c      	ldr	r3, [pc, #176]	@ (800876c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80086c0:	4a29      	ldr	r2, [pc, #164]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086c6:	4b28      	ldr	r3, [pc, #160]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d114      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80086d2:	f7fd fab7 	bl	8005c44 <HAL_GetTick>
 80086d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d8:	e00a      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086da:	f7fd fab3 	bl	8005c44 <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e035      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80086f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0ee      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008708:	d10d      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800870a:	4b17      	ldr	r3, [pc, #92]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008716:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800871a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800871e:	4912      	ldr	r1, [pc, #72]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008720:	4313      	orrs	r3, r2
 8008722:	608b      	str	r3, [r1, #8]
 8008724:	e005      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008726:	4b10      	ldr	r3, [pc, #64]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	4a0f      	ldr	r2, [pc, #60]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800872c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008730:	6093      	str	r3, [r2, #8]
 8008732:	4b0d      	ldr	r3, [pc, #52]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008734:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800873e:	490a      	ldr	r1, [pc, #40]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008740:	4313      	orrs	r3, r2
 8008742:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d004      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8008756:	4b06      	ldr	r3, [pc, #24]	@ (8008770 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008758:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40007000 	.word	0x40007000
 8008768:	40023800 	.word	0x40023800
 800876c:	42470e40 	.word	0x42470e40
 8008770:	424711e0 	.word	0x424711e0

08008774 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e01c      	b.n	80087c0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	795b      	ldrb	r3, [r3, #5]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fc fcb6 	bl	8005108 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0204 	orr.w	r2, r2, #4
 80087b0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	791b      	ldrb	r3, [r3, #4]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80087de:	2302      	movs	r3, #2
 80087e0:	e044      	b.n	800886c <HAL_RNG_GenerateRandomNumber+0xa4>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	795b      	ldrb	r3, [r3, #5]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d133      	bne.n	800885a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087f8:	f7fd fa24 	bl	8005c44 <HAL_GetTick>
 80087fc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80087fe:	e018      	b.n	8008832 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008800:	f7fd fa20 	bl	8005c44 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b02      	cmp	r3, #2
 800880c:	d911      	bls.n	8008832 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d00a      	beq.n	8008832 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2202      	movs	r2, #2
 8008826:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01c      	b.n	800886c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b01      	cmp	r3, #1
 800883e:	d1df      	bne.n	8008800 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	715a      	strb	r2, [r3, #5]
 8008858:	e004      	b.n	8008864 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2204      	movs	r2, #4
 800885e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	711a      	strb	r2, [r3, #4]

  return status;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	330c      	adds	r3, #12
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff ffa0 	bl	80087c8 <HAL_RNG_GenerateRandomNumber>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	e000      	b.n	8008896 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8008894:	2300      	movs	r3, #0
  }
}
 8008896:	4618      	mov	r0, r3
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b082      	sub	sp, #8
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e07b      	b.n	80089a8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d108      	bne.n	80088ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088c0:	d009      	beq.n	80088d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	61da      	str	r2, [r3, #28]
 80088c8:	e005      	b.n	80088d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d106      	bne.n	80088f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fc fc2b 	bl	800514c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2202      	movs	r2, #2
 80088fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800890c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	431a      	orrs	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008950:	431a      	orrs	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800895a:	ea42 0103 	orr.w	r1, r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008962:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	f003 0104 	and.w	r1, r3, #4
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897c:	f003 0210 	and.w	r2, r3, #16
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69da      	ldr	r2, [r3, #28]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008996:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e01a      	b.n	80089f8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2202      	movs	r2, #2
 80089c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7fc fbfe 	bl	80051dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a10:	f7fd f918 	bl	8005c44 <HAL_GetTick>
 8008a14:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d001      	beq.n	8008a2a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008a26:	2302      	movs	r3, #2
 8008a28:	e12a      	b.n	8008c80 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_SPI_Transmit+0x36>
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e122      	b.n	8008c80 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_SPI_Transmit+0x48>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e11b      	b.n	8008c80 <HAL_SPI_Transmit+0x280>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2203      	movs	r2, #3
 8008a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	88fa      	ldrh	r2, [r7, #6]
 8008a68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	88fa      	ldrh	r2, [r7, #6]
 8008a6e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a96:	d10f      	bne.n	8008ab8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ab6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ac2:	2b40      	cmp	r3, #64	@ 0x40
 8008ac4:	d007      	beq.n	8008ad6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ad4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ade:	d152      	bne.n	8008b86 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <HAL_SPI_Transmit+0xee>
 8008ae8:	8b7b      	ldrh	r3, [r7, #26]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d145      	bne.n	8008b7a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	881a      	ldrh	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008afe:	1c9a      	adds	r2, r3, #2
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b12:	e032      	b.n	8008b7a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d112      	bne.n	8008b48 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b26:	881a      	ldrh	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b32:	1c9a      	adds	r2, r3, #2
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008b46:	e018      	b.n	8008b7a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b48:	f7fd f87c 	bl	8005c44 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d803      	bhi.n	8008b60 <HAL_SPI_Transmit+0x160>
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d102      	bne.n	8008b66 <HAL_SPI_Transmit+0x166>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e082      	b.n	8008c80 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1c7      	bne.n	8008b14 <HAL_SPI_Transmit+0x114>
 8008b84:	e053      	b.n	8008c2e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <HAL_SPI_Transmit+0x194>
 8008b8e:	8b7b      	ldrh	r3, [r7, #26]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d147      	bne.n	8008c24 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008bba:	e033      	b.n	8008c24 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d113      	bne.n	8008bf2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	330c      	adds	r3, #12
 8008bd4:	7812      	ldrb	r2, [r2, #0]
 8008bd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008bf0:	e018      	b.n	8008c24 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bf2:	f7fd f827 	bl	8005c44 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d803      	bhi.n	8008c0a <HAL_SPI_Transmit+0x20a>
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d102      	bne.n	8008c10 <HAL_SPI_Transmit+0x210>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e02d      	b.n	8008c80 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1c6      	bne.n	8008bbc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 f8be 	bl	8008db4 <SPI_EndRxTxTransaction>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2220      	movs	r2, #32
 8008c42:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
  }
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3720      	adds	r7, #32
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c96:	b2db      	uxtb	r3, r3
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008cb4:	f7fc ffc6 	bl	8005c44 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cc4:	f7fc ffbe 	bl	8005c44 <HAL_GetTick>
 8008cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cca:	4b39      	ldr	r3, [pc, #228]	@ (8008db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	015b      	lsls	r3, r3, #5
 8008cd0:	0d1b      	lsrs	r3, r3, #20
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	fb02 f303 	mul.w	r3, r2, r3
 8008cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cda:	e054      	b.n	8008d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d050      	beq.n	8008d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ce4:	f7fc ffae 	bl	8005c44 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d902      	bls.n	8008cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d13d      	bne.n	8008d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d12:	d111      	bne.n	8008d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d1c:	d004      	beq.n	8008d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d26:	d107      	bne.n	8008d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d40:	d10f      	bne.n	8008d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e017      	b.n	8008da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	bf0c      	ite	eq
 8008d96:	2301      	moveq	r3, #1
 8008d98:	2300      	movne	r3, #0
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d19b      	bne.n	8008cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000014 	.word	0x20000014

08008db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	2102      	movs	r1, #2
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff ff6a 	bl	8008ca4 <SPI_WaitFlagStateUntilTimeout>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d007      	beq.n	8008de6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dda:	f043 0220 	orr.w	r2, r3, #32
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e032      	b.n	8008e4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008de6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e54 <SPI_EndRxTxTransaction+0xa0>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a1b      	ldr	r2, [pc, #108]	@ (8008e58 <SPI_EndRxTxTransaction+0xa4>)
 8008dec:	fba2 2303 	umull	r2, r3, r2, r3
 8008df0:	0d5b      	lsrs	r3, r3, #21
 8008df2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008df6:	fb02 f303 	mul.w	r3, r2, r3
 8008dfa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e04:	d112      	bne.n	8008e2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2180      	movs	r1, #128	@ 0x80
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	f7ff ff47 	bl	8008ca4 <SPI_WaitFlagStateUntilTimeout>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d016      	beq.n	8008e4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e20:	f043 0220 	orr.w	r2, r3, #32
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e00f      	b.n	8008e4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e42:	2b80      	cmp	r3, #128	@ 0x80
 8008e44:	d0f2      	beq.n	8008e2c <SPI_EndRxTxTransaction+0x78>
 8008e46:	e000      	b.n	8008e4a <SPI_EndRxTxTransaction+0x96>
        break;
 8008e48:	bf00      	nop
  }

  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20000014 	.word	0x20000014
 8008e58:	165e9f81 	.word	0x165e9f81

08008e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e041      	b.n	8008ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7fc f9c8 	bl	8005218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f000 f89e 	bl	8008fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d001      	beq.n	8008f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e04e      	b.n	8008fb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68da      	ldr	r2, [r3, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0201 	orr.w	r2, r2, #1
 8008f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a23      	ldr	r2, [pc, #140]	@ (8008fc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d022      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3e:	d01d      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d018      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d013      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a1c      	ldr	r2, [pc, #112]	@ (8008fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d00e      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d009      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a19      	ldr	r2, [pc, #100]	@ (8008fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d004      	beq.n	8008f7c <HAL_TIM_Base_Start_IT+0x80>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a18      	ldr	r2, [pc, #96]	@ (8008fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d111      	bne.n	8008fa0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b06      	cmp	r3, #6
 8008f8c:	d010      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f042 0201 	orr.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9e:	e007      	b.n	8008fb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0201 	orr.w	r2, r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40010000 	.word	0x40010000
 8008fc4:	40000400 	.word	0x40000400
 8008fc8:	40000800 	.word	0x40000800
 8008fcc:	40000c00 	.word	0x40000c00
 8008fd0:	40010400 	.word	0x40010400
 8008fd4:	40014000 	.word	0x40014000
 8008fd8:	40001800 	.word	0x40001800

08008fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a46      	ldr	r2, [pc, #280]	@ (8009108 <TIM_Base_SetConfig+0x12c>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d013      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ffa:	d00f      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a43      	ldr	r2, [pc, #268]	@ (800910c <TIM_Base_SetConfig+0x130>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00b      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a42      	ldr	r2, [pc, #264]	@ (8009110 <TIM_Base_SetConfig+0x134>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d007      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a41      	ldr	r2, [pc, #260]	@ (8009114 <TIM_Base_SetConfig+0x138>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_Base_SetConfig+0x40>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a40      	ldr	r2, [pc, #256]	@ (8009118 <TIM_Base_SetConfig+0x13c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d108      	bne.n	800902e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	4313      	orrs	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a35      	ldr	r2, [pc, #212]	@ (8009108 <TIM_Base_SetConfig+0x12c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d02b      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903c:	d027      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a32      	ldr	r2, [pc, #200]	@ (800910c <TIM_Base_SetConfig+0x130>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d023      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a31      	ldr	r2, [pc, #196]	@ (8009110 <TIM_Base_SetConfig+0x134>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d01f      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a30      	ldr	r2, [pc, #192]	@ (8009114 <TIM_Base_SetConfig+0x138>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d01b      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a2f      	ldr	r2, [pc, #188]	@ (8009118 <TIM_Base_SetConfig+0x13c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d017      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a2e      	ldr	r2, [pc, #184]	@ (800911c <TIM_Base_SetConfig+0x140>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a2d      	ldr	r2, [pc, #180]	@ (8009120 <TIM_Base_SetConfig+0x144>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d00f      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a2c      	ldr	r2, [pc, #176]	@ (8009124 <TIM_Base_SetConfig+0x148>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00b      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a2b      	ldr	r2, [pc, #172]	@ (8009128 <TIM_Base_SetConfig+0x14c>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a2a      	ldr	r2, [pc, #168]	@ (800912c <TIM_Base_SetConfig+0x150>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_Base_SetConfig+0xb2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a29      	ldr	r2, [pc, #164]	@ (8009130 <TIM_Base_SetConfig+0x154>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d108      	bne.n	80090a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	4313      	orrs	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a10      	ldr	r2, [pc, #64]	@ (8009108 <TIM_Base_SetConfig+0x12c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_Base_SetConfig+0xf8>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a12      	ldr	r2, [pc, #72]	@ (8009118 <TIM_Base_SetConfig+0x13c>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d103      	bne.n	80090dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	691a      	ldr	r2, [r3, #16]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d105      	bne.n	80090fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f023 0201 	bic.w	r2, r3, #1
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	611a      	str	r2, [r3, #16]
  }
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	40010000 	.word	0x40010000
 800910c:	40000400 	.word	0x40000400
 8009110:	40000800 	.word	0x40000800
 8009114:	40000c00 	.word	0x40000c00
 8009118:	40010400 	.word	0x40010400
 800911c:	40014000 	.word	0x40014000
 8009120:	40014400 	.word	0x40014400
 8009124:	40014800 	.word	0x40014800
 8009128:	40001800 	.word	0x40001800
 800912c:	40001c00 	.word	0x40001c00
 8009130:	40002000 	.word	0x40002000

08009134 <std>:
 8009134:	2300      	movs	r3, #0
 8009136:	b510      	push	{r4, lr}
 8009138:	4604      	mov	r4, r0
 800913a:	e9c0 3300 	strd	r3, r3, [r0]
 800913e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009142:	6083      	str	r3, [r0, #8]
 8009144:	8181      	strh	r1, [r0, #12]
 8009146:	6643      	str	r3, [r0, #100]	@ 0x64
 8009148:	81c2      	strh	r2, [r0, #14]
 800914a:	6183      	str	r3, [r0, #24]
 800914c:	4619      	mov	r1, r3
 800914e:	2208      	movs	r2, #8
 8009150:	305c      	adds	r0, #92	@ 0x5c
 8009152:	f000 f99b 	bl	800948c <memset>
 8009156:	4b0d      	ldr	r3, [pc, #52]	@ (800918c <std+0x58>)
 8009158:	6263      	str	r3, [r4, #36]	@ 0x24
 800915a:	4b0d      	ldr	r3, [pc, #52]	@ (8009190 <std+0x5c>)
 800915c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800915e:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <std+0x60>)
 8009160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009162:	4b0d      	ldr	r3, [pc, #52]	@ (8009198 <std+0x64>)
 8009164:	6323      	str	r3, [r4, #48]	@ 0x30
 8009166:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <std+0x68>)
 8009168:	6224      	str	r4, [r4, #32]
 800916a:	429c      	cmp	r4, r3
 800916c:	d006      	beq.n	800917c <std+0x48>
 800916e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009172:	4294      	cmp	r4, r2
 8009174:	d002      	beq.n	800917c <std+0x48>
 8009176:	33d0      	adds	r3, #208	@ 0xd0
 8009178:	429c      	cmp	r4, r3
 800917a:	d105      	bne.n	8009188 <std+0x54>
 800917c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009184:	f000 b9fa 	b.w	800957c <__retarget_lock_init_recursive>
 8009188:	bd10      	pop	{r4, pc}
 800918a:	bf00      	nop
 800918c:	080092dd 	.word	0x080092dd
 8009190:	080092ff 	.word	0x080092ff
 8009194:	08009337 	.word	0x08009337
 8009198:	0800935b 	.word	0x0800935b
 800919c:	20025f5c 	.word	0x20025f5c

080091a0 <stdio_exit_handler>:
 80091a0:	4a02      	ldr	r2, [pc, #8]	@ (80091ac <stdio_exit_handler+0xc>)
 80091a2:	4903      	ldr	r1, [pc, #12]	@ (80091b0 <stdio_exit_handler+0x10>)
 80091a4:	4803      	ldr	r0, [pc, #12]	@ (80091b4 <stdio_exit_handler+0x14>)
 80091a6:	f000 b869 	b.w	800927c <_fwalk_sglue>
 80091aa:	bf00      	nop
 80091ac:	20000020 	.word	0x20000020
 80091b0:	08009e1d 	.word	0x08009e1d
 80091b4:	20000030 	.word	0x20000030

080091b8 <cleanup_stdio>:
 80091b8:	6841      	ldr	r1, [r0, #4]
 80091ba:	4b0c      	ldr	r3, [pc, #48]	@ (80091ec <cleanup_stdio+0x34>)
 80091bc:	4299      	cmp	r1, r3
 80091be:	b510      	push	{r4, lr}
 80091c0:	4604      	mov	r4, r0
 80091c2:	d001      	beq.n	80091c8 <cleanup_stdio+0x10>
 80091c4:	f000 fe2a 	bl	8009e1c <_fflush_r>
 80091c8:	68a1      	ldr	r1, [r4, #8]
 80091ca:	4b09      	ldr	r3, [pc, #36]	@ (80091f0 <cleanup_stdio+0x38>)
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <cleanup_stdio+0x1e>
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fe23 	bl	8009e1c <_fflush_r>
 80091d6:	68e1      	ldr	r1, [r4, #12]
 80091d8:	4b06      	ldr	r3, [pc, #24]	@ (80091f4 <cleanup_stdio+0x3c>)
 80091da:	4299      	cmp	r1, r3
 80091dc:	d004      	beq.n	80091e8 <cleanup_stdio+0x30>
 80091de:	4620      	mov	r0, r4
 80091e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e4:	f000 be1a 	b.w	8009e1c <_fflush_r>
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop
 80091ec:	20025f5c 	.word	0x20025f5c
 80091f0:	20025fc4 	.word	0x20025fc4
 80091f4:	2002602c 	.word	0x2002602c

080091f8 <global_stdio_init.part.0>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009228 <global_stdio_init.part.0+0x30>)
 80091fc:	4c0b      	ldr	r4, [pc, #44]	@ (800922c <global_stdio_init.part.0+0x34>)
 80091fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009230 <global_stdio_init.part.0+0x38>)
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	4620      	mov	r0, r4
 8009204:	2200      	movs	r2, #0
 8009206:	2104      	movs	r1, #4
 8009208:	f7ff ff94 	bl	8009134 <std>
 800920c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009210:	2201      	movs	r2, #1
 8009212:	2109      	movs	r1, #9
 8009214:	f7ff ff8e 	bl	8009134 <std>
 8009218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800921c:	2202      	movs	r2, #2
 800921e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009222:	2112      	movs	r1, #18
 8009224:	f7ff bf86 	b.w	8009134 <std>
 8009228:	20026094 	.word	0x20026094
 800922c:	20025f5c 	.word	0x20025f5c
 8009230:	080091a1 	.word	0x080091a1

08009234 <__sfp_lock_acquire>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__sfp_lock_acquire+0x8>)
 8009236:	f000 b9a2 	b.w	800957e <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	2002609d 	.word	0x2002609d

08009240 <__sfp_lock_release>:
 8009240:	4801      	ldr	r0, [pc, #4]	@ (8009248 <__sfp_lock_release+0x8>)
 8009242:	f000 b99d 	b.w	8009580 <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	2002609d 	.word	0x2002609d

0800924c <__sinit>:
 800924c:	b510      	push	{r4, lr}
 800924e:	4604      	mov	r4, r0
 8009250:	f7ff fff0 	bl	8009234 <__sfp_lock_acquire>
 8009254:	6a23      	ldr	r3, [r4, #32]
 8009256:	b11b      	cbz	r3, 8009260 <__sinit+0x14>
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	f7ff bff0 	b.w	8009240 <__sfp_lock_release>
 8009260:	4b04      	ldr	r3, [pc, #16]	@ (8009274 <__sinit+0x28>)
 8009262:	6223      	str	r3, [r4, #32]
 8009264:	4b04      	ldr	r3, [pc, #16]	@ (8009278 <__sinit+0x2c>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f5      	bne.n	8009258 <__sinit+0xc>
 800926c:	f7ff ffc4 	bl	80091f8 <global_stdio_init.part.0>
 8009270:	e7f2      	b.n	8009258 <__sinit+0xc>
 8009272:	bf00      	nop
 8009274:	080091b9 	.word	0x080091b9
 8009278:	20026094 	.word	0x20026094

0800927c <_fwalk_sglue>:
 800927c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009280:	4607      	mov	r7, r0
 8009282:	4688      	mov	r8, r1
 8009284:	4614      	mov	r4, r2
 8009286:	2600      	movs	r6, #0
 8009288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800928c:	f1b9 0901 	subs.w	r9, r9, #1
 8009290:	d505      	bpl.n	800929e <_fwalk_sglue+0x22>
 8009292:	6824      	ldr	r4, [r4, #0]
 8009294:	2c00      	cmp	r4, #0
 8009296:	d1f7      	bne.n	8009288 <_fwalk_sglue+0xc>
 8009298:	4630      	mov	r0, r6
 800929a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d907      	bls.n	80092b4 <_fwalk_sglue+0x38>
 80092a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092a8:	3301      	adds	r3, #1
 80092aa:	d003      	beq.n	80092b4 <_fwalk_sglue+0x38>
 80092ac:	4629      	mov	r1, r5
 80092ae:	4638      	mov	r0, r7
 80092b0:	47c0      	blx	r8
 80092b2:	4306      	orrs	r6, r0
 80092b4:	3568      	adds	r5, #104	@ 0x68
 80092b6:	e7e9      	b.n	800928c <_fwalk_sglue+0x10>

080092b8 <iprintf>:
 80092b8:	b40f      	push	{r0, r1, r2, r3}
 80092ba:	b507      	push	{r0, r1, r2, lr}
 80092bc:	4906      	ldr	r1, [pc, #24]	@ (80092d8 <iprintf+0x20>)
 80092be:	ab04      	add	r3, sp, #16
 80092c0:	6808      	ldr	r0, [r1, #0]
 80092c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c6:	6881      	ldr	r1, [r0, #8]
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f000 fa7d 	bl	80097c8 <_vfiprintf_r>
 80092ce:	b003      	add	sp, #12
 80092d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092d4:	b004      	add	sp, #16
 80092d6:	4770      	bx	lr
 80092d8:	2000002c 	.word	0x2000002c

080092dc <__sread>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	460c      	mov	r4, r1
 80092e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e4:	f000 f8fc 	bl	80094e0 <_read_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	bfab      	itete	ge
 80092ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092ee:	89a3      	ldrhlt	r3, [r4, #12]
 80092f0:	181b      	addge	r3, r3, r0
 80092f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092f6:	bfac      	ite	ge
 80092f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092fa:	81a3      	strhlt	r3, [r4, #12]
 80092fc:	bd10      	pop	{r4, pc}

080092fe <__swrite>:
 80092fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009302:	461f      	mov	r7, r3
 8009304:	898b      	ldrh	r3, [r1, #12]
 8009306:	05db      	lsls	r3, r3, #23
 8009308:	4605      	mov	r5, r0
 800930a:	460c      	mov	r4, r1
 800930c:	4616      	mov	r6, r2
 800930e:	d505      	bpl.n	800931c <__swrite+0x1e>
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	2302      	movs	r3, #2
 8009316:	2200      	movs	r2, #0
 8009318:	f000 f8d0 	bl	80094bc <_lseek_r>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	4632      	mov	r2, r6
 800932a:	463b      	mov	r3, r7
 800932c:	4628      	mov	r0, r5
 800932e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009332:	f000 b8e7 	b.w	8009504 <_write_r>

08009336 <__sseek>:
 8009336:	b510      	push	{r4, lr}
 8009338:	460c      	mov	r4, r1
 800933a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933e:	f000 f8bd 	bl	80094bc <_lseek_r>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	89a3      	ldrh	r3, [r4, #12]
 8009346:	bf15      	itete	ne
 8009348:	6560      	strne	r0, [r4, #84]	@ 0x54
 800934a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800934e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009352:	81a3      	strheq	r3, [r4, #12]
 8009354:	bf18      	it	ne
 8009356:	81a3      	strhne	r3, [r4, #12]
 8009358:	bd10      	pop	{r4, pc}

0800935a <__sclose>:
 800935a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935e:	f000 b89d 	b.w	800949c <_close_r>

08009362 <__swbuf_r>:
 8009362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009364:	460e      	mov	r6, r1
 8009366:	4614      	mov	r4, r2
 8009368:	4605      	mov	r5, r0
 800936a:	b118      	cbz	r0, 8009374 <__swbuf_r+0x12>
 800936c:	6a03      	ldr	r3, [r0, #32]
 800936e:	b90b      	cbnz	r3, 8009374 <__swbuf_r+0x12>
 8009370:	f7ff ff6c 	bl	800924c <__sinit>
 8009374:	69a3      	ldr	r3, [r4, #24]
 8009376:	60a3      	str	r3, [r4, #8]
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	071a      	lsls	r2, r3, #28
 800937c:	d501      	bpl.n	8009382 <__swbuf_r+0x20>
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	b943      	cbnz	r3, 8009394 <__swbuf_r+0x32>
 8009382:	4621      	mov	r1, r4
 8009384:	4628      	mov	r0, r5
 8009386:	f000 f82b 	bl	80093e0 <__swsetup_r>
 800938a:	b118      	cbz	r0, 8009394 <__swbuf_r+0x32>
 800938c:	f04f 37ff 	mov.w	r7, #4294967295
 8009390:	4638      	mov	r0, r7
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	6922      	ldr	r2, [r4, #16]
 8009398:	1a98      	subs	r0, r3, r2
 800939a:	6963      	ldr	r3, [r4, #20]
 800939c:	b2f6      	uxtb	r6, r6
 800939e:	4283      	cmp	r3, r0
 80093a0:	4637      	mov	r7, r6
 80093a2:	dc05      	bgt.n	80093b0 <__swbuf_r+0x4e>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4628      	mov	r0, r5
 80093a8:	f000 fd38 	bl	8009e1c <_fflush_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1ed      	bne.n	800938c <__swbuf_r+0x2a>
 80093b0:	68a3      	ldr	r3, [r4, #8]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	60a3      	str	r3, [r4, #8]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	6022      	str	r2, [r4, #0]
 80093bc:	701e      	strb	r6, [r3, #0]
 80093be:	6962      	ldr	r2, [r4, #20]
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d004      	beq.n	80093d0 <__swbuf_r+0x6e>
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	07db      	lsls	r3, r3, #31
 80093ca:	d5e1      	bpl.n	8009390 <__swbuf_r+0x2e>
 80093cc:	2e0a      	cmp	r6, #10
 80093ce:	d1df      	bne.n	8009390 <__swbuf_r+0x2e>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 fd22 	bl	8009e1c <_fflush_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0d9      	beq.n	8009390 <__swbuf_r+0x2e>
 80093dc:	e7d6      	b.n	800938c <__swbuf_r+0x2a>
	...

080093e0 <__swsetup_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4b29      	ldr	r3, [pc, #164]	@ (8009488 <__swsetup_r+0xa8>)
 80093e4:	4605      	mov	r5, r0
 80093e6:	6818      	ldr	r0, [r3, #0]
 80093e8:	460c      	mov	r4, r1
 80093ea:	b118      	cbz	r0, 80093f4 <__swsetup_r+0x14>
 80093ec:	6a03      	ldr	r3, [r0, #32]
 80093ee:	b90b      	cbnz	r3, 80093f4 <__swsetup_r+0x14>
 80093f0:	f7ff ff2c 	bl	800924c <__sinit>
 80093f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093f8:	0719      	lsls	r1, r3, #28
 80093fa:	d422      	bmi.n	8009442 <__swsetup_r+0x62>
 80093fc:	06da      	lsls	r2, r3, #27
 80093fe:	d407      	bmi.n	8009410 <__swsetup_r+0x30>
 8009400:	2209      	movs	r2, #9
 8009402:	602a      	str	r2, [r5, #0]
 8009404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	e033      	b.n	8009478 <__swsetup_r+0x98>
 8009410:	0758      	lsls	r0, r3, #29
 8009412:	d512      	bpl.n	800943a <__swsetup_r+0x5a>
 8009414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009416:	b141      	cbz	r1, 800942a <__swsetup_r+0x4a>
 8009418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <__swsetup_r+0x46>
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f8af 	bl	8009584 <_free_r>
 8009426:	2300      	movs	r3, #0
 8009428:	6363      	str	r3, [r4, #52]	@ 0x34
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	2300      	movs	r3, #0
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f043 0308 	orr.w	r3, r3, #8
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	b94b      	cbnz	r3, 800945a <__swsetup_r+0x7a>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800944c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009450:	d003      	beq.n	800945a <__swsetup_r+0x7a>
 8009452:	4621      	mov	r1, r4
 8009454:	4628      	mov	r0, r5
 8009456:	f000 fd2f 	bl	8009eb8 <__smakebuf_r>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	f013 0201 	ands.w	r2, r3, #1
 8009462:	d00a      	beq.n	800947a <__swsetup_r+0x9a>
 8009464:	2200      	movs	r2, #0
 8009466:	60a2      	str	r2, [r4, #8]
 8009468:	6962      	ldr	r2, [r4, #20]
 800946a:	4252      	negs	r2, r2
 800946c:	61a2      	str	r2, [r4, #24]
 800946e:	6922      	ldr	r2, [r4, #16]
 8009470:	b942      	cbnz	r2, 8009484 <__swsetup_r+0xa4>
 8009472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009476:	d1c5      	bne.n	8009404 <__swsetup_r+0x24>
 8009478:	bd38      	pop	{r3, r4, r5, pc}
 800947a:	0799      	lsls	r1, r3, #30
 800947c:	bf58      	it	pl
 800947e:	6962      	ldrpl	r2, [r4, #20]
 8009480:	60a2      	str	r2, [r4, #8]
 8009482:	e7f4      	b.n	800946e <__swsetup_r+0x8e>
 8009484:	2000      	movs	r0, #0
 8009486:	e7f7      	b.n	8009478 <__swsetup_r+0x98>
 8009488:	2000002c 	.word	0x2000002c

0800948c <memset>:
 800948c:	4402      	add	r2, r0
 800948e:	4603      	mov	r3, r0
 8009490:	4293      	cmp	r3, r2
 8009492:	d100      	bne.n	8009496 <memset+0xa>
 8009494:	4770      	bx	lr
 8009496:	f803 1b01 	strb.w	r1, [r3], #1
 800949a:	e7f9      	b.n	8009490 <memset+0x4>

0800949c <_close_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d06      	ldr	r5, [pc, #24]	@ (80094b8 <_close_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7fc fac0 	bl	8005a2c <_close>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_close_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_close_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20026098 	.word	0x20026098

080094bc <_lseek_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	@ (80094dc <_lseek_r+0x20>)
 80094c0:	4604      	mov	r4, r0
 80094c2:	4608      	mov	r0, r1
 80094c4:	4611      	mov	r1, r2
 80094c6:	2200      	movs	r2, #0
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7fc fad5 	bl	8005a7a <_lseek>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_lseek_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_lseek_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20026098 	.word	0x20026098

080094e0 <_read_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4d07      	ldr	r5, [pc, #28]	@ (8009500 <_read_r+0x20>)
 80094e4:	4604      	mov	r4, r0
 80094e6:	4608      	mov	r0, r1
 80094e8:	4611      	mov	r1, r2
 80094ea:	2200      	movs	r2, #0
 80094ec:	602a      	str	r2, [r5, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f7fc fa63 	bl	80059ba <_read>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_read_r+0x1e>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_read_r+0x1e>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20026098 	.word	0x20026098

08009504 <_write_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	@ (8009524 <_write_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7fc fa6e 	bl	80059f4 <_write>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_write_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_write_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20026098 	.word	0x20026098

08009528 <__errno>:
 8009528:	4b01      	ldr	r3, [pc, #4]	@ (8009530 <__errno+0x8>)
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	2000002c 	.word	0x2000002c

08009534 <__libc_init_array>:
 8009534:	b570      	push	{r4, r5, r6, lr}
 8009536:	4d0d      	ldr	r5, [pc, #52]	@ (800956c <__libc_init_array+0x38>)
 8009538:	4c0d      	ldr	r4, [pc, #52]	@ (8009570 <__libc_init_array+0x3c>)
 800953a:	1b64      	subs	r4, r4, r5
 800953c:	10a4      	asrs	r4, r4, #2
 800953e:	2600      	movs	r6, #0
 8009540:	42a6      	cmp	r6, r4
 8009542:	d109      	bne.n	8009558 <__libc_init_array+0x24>
 8009544:	4d0b      	ldr	r5, [pc, #44]	@ (8009574 <__libc_init_array+0x40>)
 8009546:	4c0c      	ldr	r4, [pc, #48]	@ (8009578 <__libc_init_array+0x44>)
 8009548:	f000 fd24 	bl	8009f94 <_init>
 800954c:	1b64      	subs	r4, r4, r5
 800954e:	10a4      	asrs	r4, r4, #2
 8009550:	2600      	movs	r6, #0
 8009552:	42a6      	cmp	r6, r4
 8009554:	d105      	bne.n	8009562 <__libc_init_array+0x2e>
 8009556:	bd70      	pop	{r4, r5, r6, pc}
 8009558:	f855 3b04 	ldr.w	r3, [r5], #4
 800955c:	4798      	blx	r3
 800955e:	3601      	adds	r6, #1
 8009560:	e7ee      	b.n	8009540 <__libc_init_array+0xc>
 8009562:	f855 3b04 	ldr.w	r3, [r5], #4
 8009566:	4798      	blx	r3
 8009568:	3601      	adds	r6, #1
 800956a:	e7f2      	b.n	8009552 <__libc_init_array+0x1e>
 800956c:	0800b1ec 	.word	0x0800b1ec
 8009570:	0800b1ec 	.word	0x0800b1ec
 8009574:	0800b1ec 	.word	0x0800b1ec
 8009578:	0800b1f0 	.word	0x0800b1f0

0800957c <__retarget_lock_init_recursive>:
 800957c:	4770      	bx	lr

0800957e <__retarget_lock_acquire_recursive>:
 800957e:	4770      	bx	lr

08009580 <__retarget_lock_release_recursive>:
 8009580:	4770      	bx	lr
	...

08009584 <_free_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4605      	mov	r5, r0
 8009588:	2900      	cmp	r1, #0
 800958a:	d041      	beq.n	8009610 <_free_r+0x8c>
 800958c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009590:	1f0c      	subs	r4, r1, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfb8      	it	lt
 8009596:	18e4      	addlt	r4, r4, r3
 8009598:	f000 f8e0 	bl	800975c <__malloc_lock>
 800959c:	4a1d      	ldr	r2, [pc, #116]	@ (8009614 <_free_r+0x90>)
 800959e:	6813      	ldr	r3, [r2, #0]
 80095a0:	b933      	cbnz	r3, 80095b0 <_free_r+0x2c>
 80095a2:	6063      	str	r3, [r4, #4]
 80095a4:	6014      	str	r4, [r2, #0]
 80095a6:	4628      	mov	r0, r5
 80095a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ac:	f000 b8dc 	b.w	8009768 <__malloc_unlock>
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d908      	bls.n	80095c6 <_free_r+0x42>
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	1821      	adds	r1, r4, r0
 80095b8:	428b      	cmp	r3, r1
 80095ba:	bf01      	itttt	eq
 80095bc:	6819      	ldreq	r1, [r3, #0]
 80095be:	685b      	ldreq	r3, [r3, #4]
 80095c0:	1809      	addeq	r1, r1, r0
 80095c2:	6021      	streq	r1, [r4, #0]
 80095c4:	e7ed      	b.n	80095a2 <_free_r+0x1e>
 80095c6:	461a      	mov	r2, r3
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	b10b      	cbz	r3, 80095d0 <_free_r+0x4c>
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	d9fa      	bls.n	80095c6 <_free_r+0x42>
 80095d0:	6811      	ldr	r1, [r2, #0]
 80095d2:	1850      	adds	r0, r2, r1
 80095d4:	42a0      	cmp	r0, r4
 80095d6:	d10b      	bne.n	80095f0 <_free_r+0x6c>
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	4401      	add	r1, r0
 80095dc:	1850      	adds	r0, r2, r1
 80095de:	4283      	cmp	r3, r0
 80095e0:	6011      	str	r1, [r2, #0]
 80095e2:	d1e0      	bne.n	80095a6 <_free_r+0x22>
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	6053      	str	r3, [r2, #4]
 80095ea:	4408      	add	r0, r1
 80095ec:	6010      	str	r0, [r2, #0]
 80095ee:	e7da      	b.n	80095a6 <_free_r+0x22>
 80095f0:	d902      	bls.n	80095f8 <_free_r+0x74>
 80095f2:	230c      	movs	r3, #12
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	e7d6      	b.n	80095a6 <_free_r+0x22>
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	1821      	adds	r1, r4, r0
 80095fc:	428b      	cmp	r3, r1
 80095fe:	bf04      	itt	eq
 8009600:	6819      	ldreq	r1, [r3, #0]
 8009602:	685b      	ldreq	r3, [r3, #4]
 8009604:	6063      	str	r3, [r4, #4]
 8009606:	bf04      	itt	eq
 8009608:	1809      	addeq	r1, r1, r0
 800960a:	6021      	streq	r1, [r4, #0]
 800960c:	6054      	str	r4, [r2, #4]
 800960e:	e7ca      	b.n	80095a6 <_free_r+0x22>
 8009610:	bd38      	pop	{r3, r4, r5, pc}
 8009612:	bf00      	nop
 8009614:	200260a4 	.word	0x200260a4

08009618 <sbrk_aligned>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4e0f      	ldr	r6, [pc, #60]	@ (8009658 <sbrk_aligned+0x40>)
 800961c:	460c      	mov	r4, r1
 800961e:	6831      	ldr	r1, [r6, #0]
 8009620:	4605      	mov	r5, r0
 8009622:	b911      	cbnz	r1, 800962a <sbrk_aligned+0x12>
 8009624:	f000 fca6 	bl	8009f74 <_sbrk_r>
 8009628:	6030      	str	r0, [r6, #0]
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f000 fca1 	bl	8009f74 <_sbrk_r>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d103      	bne.n	800963e <sbrk_aligned+0x26>
 8009636:	f04f 34ff 	mov.w	r4, #4294967295
 800963a:	4620      	mov	r0, r4
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	1cc4      	adds	r4, r0, #3
 8009640:	f024 0403 	bic.w	r4, r4, #3
 8009644:	42a0      	cmp	r0, r4
 8009646:	d0f8      	beq.n	800963a <sbrk_aligned+0x22>
 8009648:	1a21      	subs	r1, r4, r0
 800964a:	4628      	mov	r0, r5
 800964c:	f000 fc92 	bl	8009f74 <_sbrk_r>
 8009650:	3001      	adds	r0, #1
 8009652:	d1f2      	bne.n	800963a <sbrk_aligned+0x22>
 8009654:	e7ef      	b.n	8009636 <sbrk_aligned+0x1e>
 8009656:	bf00      	nop
 8009658:	200260a0 	.word	0x200260a0

0800965c <_malloc_r>:
 800965c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009660:	1ccd      	adds	r5, r1, #3
 8009662:	f025 0503 	bic.w	r5, r5, #3
 8009666:	3508      	adds	r5, #8
 8009668:	2d0c      	cmp	r5, #12
 800966a:	bf38      	it	cc
 800966c:	250c      	movcc	r5, #12
 800966e:	2d00      	cmp	r5, #0
 8009670:	4606      	mov	r6, r0
 8009672:	db01      	blt.n	8009678 <_malloc_r+0x1c>
 8009674:	42a9      	cmp	r1, r5
 8009676:	d904      	bls.n	8009682 <_malloc_r+0x26>
 8009678:	230c      	movs	r3, #12
 800967a:	6033      	str	r3, [r6, #0]
 800967c:	2000      	movs	r0, #0
 800967e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009758 <_malloc_r+0xfc>
 8009686:	f000 f869 	bl	800975c <__malloc_lock>
 800968a:	f8d8 3000 	ldr.w	r3, [r8]
 800968e:	461c      	mov	r4, r3
 8009690:	bb44      	cbnz	r4, 80096e4 <_malloc_r+0x88>
 8009692:	4629      	mov	r1, r5
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff ffbf 	bl	8009618 <sbrk_aligned>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	4604      	mov	r4, r0
 800969e:	d158      	bne.n	8009752 <_malloc_r+0xf6>
 80096a0:	f8d8 4000 	ldr.w	r4, [r8]
 80096a4:	4627      	mov	r7, r4
 80096a6:	2f00      	cmp	r7, #0
 80096a8:	d143      	bne.n	8009732 <_malloc_r+0xd6>
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	d04b      	beq.n	8009746 <_malloc_r+0xea>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	4639      	mov	r1, r7
 80096b2:	4630      	mov	r0, r6
 80096b4:	eb04 0903 	add.w	r9, r4, r3
 80096b8:	f000 fc5c 	bl	8009f74 <_sbrk_r>
 80096bc:	4581      	cmp	r9, r0
 80096be:	d142      	bne.n	8009746 <_malloc_r+0xea>
 80096c0:	6821      	ldr	r1, [r4, #0]
 80096c2:	1a6d      	subs	r5, r5, r1
 80096c4:	4629      	mov	r1, r5
 80096c6:	4630      	mov	r0, r6
 80096c8:	f7ff ffa6 	bl	8009618 <sbrk_aligned>
 80096cc:	3001      	adds	r0, #1
 80096ce:	d03a      	beq.n	8009746 <_malloc_r+0xea>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	442b      	add	r3, r5
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	f8d8 3000 	ldr.w	r3, [r8]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	bb62      	cbnz	r2, 8009738 <_malloc_r+0xdc>
 80096de:	f8c8 7000 	str.w	r7, [r8]
 80096e2:	e00f      	b.n	8009704 <_malloc_r+0xa8>
 80096e4:	6822      	ldr	r2, [r4, #0]
 80096e6:	1b52      	subs	r2, r2, r5
 80096e8:	d420      	bmi.n	800972c <_malloc_r+0xd0>
 80096ea:	2a0b      	cmp	r2, #11
 80096ec:	d917      	bls.n	800971e <_malloc_r+0xc2>
 80096ee:	1961      	adds	r1, r4, r5
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	6025      	str	r5, [r4, #0]
 80096f4:	bf18      	it	ne
 80096f6:	6059      	strne	r1, [r3, #4]
 80096f8:	6863      	ldr	r3, [r4, #4]
 80096fa:	bf08      	it	eq
 80096fc:	f8c8 1000 	streq.w	r1, [r8]
 8009700:	5162      	str	r2, [r4, r5]
 8009702:	604b      	str	r3, [r1, #4]
 8009704:	4630      	mov	r0, r6
 8009706:	f000 f82f 	bl	8009768 <__malloc_unlock>
 800970a:	f104 000b 	add.w	r0, r4, #11
 800970e:	1d23      	adds	r3, r4, #4
 8009710:	f020 0007 	bic.w	r0, r0, #7
 8009714:	1ac2      	subs	r2, r0, r3
 8009716:	bf1c      	itt	ne
 8009718:	1a1b      	subne	r3, r3, r0
 800971a:	50a3      	strne	r3, [r4, r2]
 800971c:	e7af      	b.n	800967e <_malloc_r+0x22>
 800971e:	6862      	ldr	r2, [r4, #4]
 8009720:	42a3      	cmp	r3, r4
 8009722:	bf0c      	ite	eq
 8009724:	f8c8 2000 	streq.w	r2, [r8]
 8009728:	605a      	strne	r2, [r3, #4]
 800972a:	e7eb      	b.n	8009704 <_malloc_r+0xa8>
 800972c:	4623      	mov	r3, r4
 800972e:	6864      	ldr	r4, [r4, #4]
 8009730:	e7ae      	b.n	8009690 <_malloc_r+0x34>
 8009732:	463c      	mov	r4, r7
 8009734:	687f      	ldr	r7, [r7, #4]
 8009736:	e7b6      	b.n	80096a6 <_malloc_r+0x4a>
 8009738:	461a      	mov	r2, r3
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	42a3      	cmp	r3, r4
 800973e:	d1fb      	bne.n	8009738 <_malloc_r+0xdc>
 8009740:	2300      	movs	r3, #0
 8009742:	6053      	str	r3, [r2, #4]
 8009744:	e7de      	b.n	8009704 <_malloc_r+0xa8>
 8009746:	230c      	movs	r3, #12
 8009748:	6033      	str	r3, [r6, #0]
 800974a:	4630      	mov	r0, r6
 800974c:	f000 f80c 	bl	8009768 <__malloc_unlock>
 8009750:	e794      	b.n	800967c <_malloc_r+0x20>
 8009752:	6005      	str	r5, [r0, #0]
 8009754:	e7d6      	b.n	8009704 <_malloc_r+0xa8>
 8009756:	bf00      	nop
 8009758:	200260a4 	.word	0x200260a4

0800975c <__malloc_lock>:
 800975c:	4801      	ldr	r0, [pc, #4]	@ (8009764 <__malloc_lock+0x8>)
 800975e:	f7ff bf0e 	b.w	800957e <__retarget_lock_acquire_recursive>
 8009762:	bf00      	nop
 8009764:	2002609c 	.word	0x2002609c

08009768 <__malloc_unlock>:
 8009768:	4801      	ldr	r0, [pc, #4]	@ (8009770 <__malloc_unlock+0x8>)
 800976a:	f7ff bf09 	b.w	8009580 <__retarget_lock_release_recursive>
 800976e:	bf00      	nop
 8009770:	2002609c 	.word	0x2002609c

08009774 <__sfputc_r>:
 8009774:	6893      	ldr	r3, [r2, #8]
 8009776:	3b01      	subs	r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	b410      	push	{r4}
 800977c:	6093      	str	r3, [r2, #8]
 800977e:	da08      	bge.n	8009792 <__sfputc_r+0x1e>
 8009780:	6994      	ldr	r4, [r2, #24]
 8009782:	42a3      	cmp	r3, r4
 8009784:	db01      	blt.n	800978a <__sfputc_r+0x16>
 8009786:	290a      	cmp	r1, #10
 8009788:	d103      	bne.n	8009792 <__sfputc_r+0x1e>
 800978a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800978e:	f7ff bde8 	b.w	8009362 <__swbuf_r>
 8009792:	6813      	ldr	r3, [r2, #0]
 8009794:	1c58      	adds	r0, r3, #1
 8009796:	6010      	str	r0, [r2, #0]
 8009798:	7019      	strb	r1, [r3, #0]
 800979a:	4608      	mov	r0, r1
 800979c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <__sfputs_r>:
 80097a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a4:	4606      	mov	r6, r0
 80097a6:	460f      	mov	r7, r1
 80097a8:	4614      	mov	r4, r2
 80097aa:	18d5      	adds	r5, r2, r3
 80097ac:	42ac      	cmp	r4, r5
 80097ae:	d101      	bne.n	80097b4 <__sfputs_r+0x12>
 80097b0:	2000      	movs	r0, #0
 80097b2:	e007      	b.n	80097c4 <__sfputs_r+0x22>
 80097b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097b8:	463a      	mov	r2, r7
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ffda 	bl	8009774 <__sfputc_r>
 80097c0:	1c43      	adds	r3, r0, #1
 80097c2:	d1f3      	bne.n	80097ac <__sfputs_r+0xa>
 80097c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097c8 <_vfiprintf_r>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	460d      	mov	r5, r1
 80097ce:	b09d      	sub	sp, #116	@ 0x74
 80097d0:	4614      	mov	r4, r2
 80097d2:	4698      	mov	r8, r3
 80097d4:	4606      	mov	r6, r0
 80097d6:	b118      	cbz	r0, 80097e0 <_vfiprintf_r+0x18>
 80097d8:	6a03      	ldr	r3, [r0, #32]
 80097da:	b90b      	cbnz	r3, 80097e0 <_vfiprintf_r+0x18>
 80097dc:	f7ff fd36 	bl	800924c <__sinit>
 80097e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80097e2:	07d9      	lsls	r1, r3, #31
 80097e4:	d405      	bmi.n	80097f2 <_vfiprintf_r+0x2a>
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	059a      	lsls	r2, r3, #22
 80097ea:	d402      	bmi.n	80097f2 <_vfiprintf_r+0x2a>
 80097ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80097ee:	f7ff fec6 	bl	800957e <__retarget_lock_acquire_recursive>
 80097f2:	89ab      	ldrh	r3, [r5, #12]
 80097f4:	071b      	lsls	r3, r3, #28
 80097f6:	d501      	bpl.n	80097fc <_vfiprintf_r+0x34>
 80097f8:	692b      	ldr	r3, [r5, #16]
 80097fa:	b99b      	cbnz	r3, 8009824 <_vfiprintf_r+0x5c>
 80097fc:	4629      	mov	r1, r5
 80097fe:	4630      	mov	r0, r6
 8009800:	f7ff fdee 	bl	80093e0 <__swsetup_r>
 8009804:	b170      	cbz	r0, 8009824 <_vfiprintf_r+0x5c>
 8009806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009808:	07dc      	lsls	r4, r3, #31
 800980a:	d504      	bpl.n	8009816 <_vfiprintf_r+0x4e>
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	b01d      	add	sp, #116	@ 0x74
 8009812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009816:	89ab      	ldrh	r3, [r5, #12]
 8009818:	0598      	lsls	r0, r3, #22
 800981a:	d4f7      	bmi.n	800980c <_vfiprintf_r+0x44>
 800981c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800981e:	f7ff feaf 	bl	8009580 <__retarget_lock_release_recursive>
 8009822:	e7f3      	b.n	800980c <_vfiprintf_r+0x44>
 8009824:	2300      	movs	r3, #0
 8009826:	9309      	str	r3, [sp, #36]	@ 0x24
 8009828:	2320      	movs	r3, #32
 800982a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800982e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009832:	2330      	movs	r3, #48	@ 0x30
 8009834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80099e4 <_vfiprintf_r+0x21c>
 8009838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800983c:	f04f 0901 	mov.w	r9, #1
 8009840:	4623      	mov	r3, r4
 8009842:	469a      	mov	sl, r3
 8009844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009848:	b10a      	cbz	r2, 800984e <_vfiprintf_r+0x86>
 800984a:	2a25      	cmp	r2, #37	@ 0x25
 800984c:	d1f9      	bne.n	8009842 <_vfiprintf_r+0x7a>
 800984e:	ebba 0b04 	subs.w	fp, sl, r4
 8009852:	d00b      	beq.n	800986c <_vfiprintf_r+0xa4>
 8009854:	465b      	mov	r3, fp
 8009856:	4622      	mov	r2, r4
 8009858:	4629      	mov	r1, r5
 800985a:	4630      	mov	r0, r6
 800985c:	f7ff ffa1 	bl	80097a2 <__sfputs_r>
 8009860:	3001      	adds	r0, #1
 8009862:	f000 80a7 	beq.w	80099b4 <_vfiprintf_r+0x1ec>
 8009866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009868:	445a      	add	r2, fp
 800986a:	9209      	str	r2, [sp, #36]	@ 0x24
 800986c:	f89a 3000 	ldrb.w	r3, [sl]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 809f 	beq.w	80099b4 <_vfiprintf_r+0x1ec>
 8009876:	2300      	movs	r3, #0
 8009878:	f04f 32ff 	mov.w	r2, #4294967295
 800987c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009880:	f10a 0a01 	add.w	sl, sl, #1
 8009884:	9304      	str	r3, [sp, #16]
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800988c:	931a      	str	r3, [sp, #104]	@ 0x68
 800988e:	4654      	mov	r4, sl
 8009890:	2205      	movs	r2, #5
 8009892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009896:	4853      	ldr	r0, [pc, #332]	@ (80099e4 <_vfiprintf_r+0x21c>)
 8009898:	f7f6 fcaa 	bl	80001f0 <memchr>
 800989c:	9a04      	ldr	r2, [sp, #16]
 800989e:	b9d8      	cbnz	r0, 80098d8 <_vfiprintf_r+0x110>
 80098a0:	06d1      	lsls	r1, r2, #27
 80098a2:	bf44      	itt	mi
 80098a4:	2320      	movmi	r3, #32
 80098a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098aa:	0713      	lsls	r3, r2, #28
 80098ac:	bf44      	itt	mi
 80098ae:	232b      	movmi	r3, #43	@ 0x2b
 80098b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098b4:	f89a 3000 	ldrb.w	r3, [sl]
 80098b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ba:	d015      	beq.n	80098e8 <_vfiprintf_r+0x120>
 80098bc:	9a07      	ldr	r2, [sp, #28]
 80098be:	4654      	mov	r4, sl
 80098c0:	2000      	movs	r0, #0
 80098c2:	f04f 0c0a 	mov.w	ip, #10
 80098c6:	4621      	mov	r1, r4
 80098c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098cc:	3b30      	subs	r3, #48	@ 0x30
 80098ce:	2b09      	cmp	r3, #9
 80098d0:	d94b      	bls.n	800996a <_vfiprintf_r+0x1a2>
 80098d2:	b1b0      	cbz	r0, 8009902 <_vfiprintf_r+0x13a>
 80098d4:	9207      	str	r2, [sp, #28]
 80098d6:	e014      	b.n	8009902 <_vfiprintf_r+0x13a>
 80098d8:	eba0 0308 	sub.w	r3, r0, r8
 80098dc:	fa09 f303 	lsl.w	r3, r9, r3
 80098e0:	4313      	orrs	r3, r2
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	46a2      	mov	sl, r4
 80098e6:	e7d2      	b.n	800988e <_vfiprintf_r+0xc6>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	1d19      	adds	r1, r3, #4
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	9103      	str	r1, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	bfbb      	ittet	lt
 80098f4:	425b      	neglt	r3, r3
 80098f6:	f042 0202 	orrlt.w	r2, r2, #2
 80098fa:	9307      	strge	r3, [sp, #28]
 80098fc:	9307      	strlt	r3, [sp, #28]
 80098fe:	bfb8      	it	lt
 8009900:	9204      	strlt	r2, [sp, #16]
 8009902:	7823      	ldrb	r3, [r4, #0]
 8009904:	2b2e      	cmp	r3, #46	@ 0x2e
 8009906:	d10a      	bne.n	800991e <_vfiprintf_r+0x156>
 8009908:	7863      	ldrb	r3, [r4, #1]
 800990a:	2b2a      	cmp	r3, #42	@ 0x2a
 800990c:	d132      	bne.n	8009974 <_vfiprintf_r+0x1ac>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	1d1a      	adds	r2, r3, #4
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	9203      	str	r2, [sp, #12]
 8009916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800991a:	3402      	adds	r4, #2
 800991c:	9305      	str	r3, [sp, #20]
 800991e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80099f4 <_vfiprintf_r+0x22c>
 8009922:	7821      	ldrb	r1, [r4, #0]
 8009924:	2203      	movs	r2, #3
 8009926:	4650      	mov	r0, sl
 8009928:	f7f6 fc62 	bl	80001f0 <memchr>
 800992c:	b138      	cbz	r0, 800993e <_vfiprintf_r+0x176>
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	eba0 000a 	sub.w	r0, r0, sl
 8009934:	2240      	movs	r2, #64	@ 0x40
 8009936:	4082      	lsls	r2, r0
 8009938:	4313      	orrs	r3, r2
 800993a:	3401      	adds	r4, #1
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009942:	4829      	ldr	r0, [pc, #164]	@ (80099e8 <_vfiprintf_r+0x220>)
 8009944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009948:	2206      	movs	r2, #6
 800994a:	f7f6 fc51 	bl	80001f0 <memchr>
 800994e:	2800      	cmp	r0, #0
 8009950:	d03f      	beq.n	80099d2 <_vfiprintf_r+0x20a>
 8009952:	4b26      	ldr	r3, [pc, #152]	@ (80099ec <_vfiprintf_r+0x224>)
 8009954:	bb1b      	cbnz	r3, 800999e <_vfiprintf_r+0x1d6>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	3307      	adds	r3, #7
 800995a:	f023 0307 	bic.w	r3, r3, #7
 800995e:	3308      	adds	r3, #8
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009964:	443b      	add	r3, r7
 8009966:	9309      	str	r3, [sp, #36]	@ 0x24
 8009968:	e76a      	b.n	8009840 <_vfiprintf_r+0x78>
 800996a:	fb0c 3202 	mla	r2, ip, r2, r3
 800996e:	460c      	mov	r4, r1
 8009970:	2001      	movs	r0, #1
 8009972:	e7a8      	b.n	80098c6 <_vfiprintf_r+0xfe>
 8009974:	2300      	movs	r3, #0
 8009976:	3401      	adds	r4, #1
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	4619      	mov	r1, r3
 800997c:	f04f 0c0a 	mov.w	ip, #10
 8009980:	4620      	mov	r0, r4
 8009982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009986:	3a30      	subs	r2, #48	@ 0x30
 8009988:	2a09      	cmp	r2, #9
 800998a:	d903      	bls.n	8009994 <_vfiprintf_r+0x1cc>
 800998c:	2b00      	cmp	r3, #0
 800998e:	d0c6      	beq.n	800991e <_vfiprintf_r+0x156>
 8009990:	9105      	str	r1, [sp, #20]
 8009992:	e7c4      	b.n	800991e <_vfiprintf_r+0x156>
 8009994:	fb0c 2101 	mla	r1, ip, r1, r2
 8009998:	4604      	mov	r4, r0
 800999a:	2301      	movs	r3, #1
 800999c:	e7f0      	b.n	8009980 <_vfiprintf_r+0x1b8>
 800999e:	ab03      	add	r3, sp, #12
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	462a      	mov	r2, r5
 80099a4:	4b12      	ldr	r3, [pc, #72]	@ (80099f0 <_vfiprintf_r+0x228>)
 80099a6:	a904      	add	r1, sp, #16
 80099a8:	4630      	mov	r0, r6
 80099aa:	f3af 8000 	nop.w
 80099ae:	4607      	mov	r7, r0
 80099b0:	1c78      	adds	r0, r7, #1
 80099b2:	d1d6      	bne.n	8009962 <_vfiprintf_r+0x19a>
 80099b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099b6:	07d9      	lsls	r1, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_vfiprintf_r+0x1fe>
 80099ba:	89ab      	ldrh	r3, [r5, #12]
 80099bc:	059a      	lsls	r2, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_vfiprintf_r+0x1fe>
 80099c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099c2:	f7ff fddd 	bl	8009580 <__retarget_lock_release_recursive>
 80099c6:	89ab      	ldrh	r3, [r5, #12]
 80099c8:	065b      	lsls	r3, r3, #25
 80099ca:	f53f af1f 	bmi.w	800980c <_vfiprintf_r+0x44>
 80099ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099d0:	e71e      	b.n	8009810 <_vfiprintf_r+0x48>
 80099d2:	ab03      	add	r3, sp, #12
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	462a      	mov	r2, r5
 80099d8:	4b05      	ldr	r3, [pc, #20]	@ (80099f0 <_vfiprintf_r+0x228>)
 80099da:	a904      	add	r1, sp, #16
 80099dc:	4630      	mov	r0, r6
 80099de:	f000 f879 	bl	8009ad4 <_printf_i>
 80099e2:	e7e4      	b.n	80099ae <_vfiprintf_r+0x1e6>
 80099e4:	0800b1b0 	.word	0x0800b1b0
 80099e8:	0800b1ba 	.word	0x0800b1ba
 80099ec:	00000000 	.word	0x00000000
 80099f0:	080097a3 	.word	0x080097a3
 80099f4:	0800b1b6 	.word	0x0800b1b6

080099f8 <_printf_common>:
 80099f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099fc:	4616      	mov	r6, r2
 80099fe:	4698      	mov	r8, r3
 8009a00:	688a      	ldr	r2, [r1, #8]
 8009a02:	690b      	ldr	r3, [r1, #16]
 8009a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	bfb8      	it	lt
 8009a0c:	4613      	movlt	r3, r2
 8009a0e:	6033      	str	r3, [r6, #0]
 8009a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a14:	4607      	mov	r7, r0
 8009a16:	460c      	mov	r4, r1
 8009a18:	b10a      	cbz	r2, 8009a1e <_printf_common+0x26>
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	6033      	str	r3, [r6, #0]
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	0699      	lsls	r1, r3, #26
 8009a22:	bf42      	ittt	mi
 8009a24:	6833      	ldrmi	r3, [r6, #0]
 8009a26:	3302      	addmi	r3, #2
 8009a28:	6033      	strmi	r3, [r6, #0]
 8009a2a:	6825      	ldr	r5, [r4, #0]
 8009a2c:	f015 0506 	ands.w	r5, r5, #6
 8009a30:	d106      	bne.n	8009a40 <_printf_common+0x48>
 8009a32:	f104 0a19 	add.w	sl, r4, #25
 8009a36:	68e3      	ldr	r3, [r4, #12]
 8009a38:	6832      	ldr	r2, [r6, #0]
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	dc26      	bgt.n	8009a8e <_printf_common+0x96>
 8009a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a44:	6822      	ldr	r2, [r4, #0]
 8009a46:	3b00      	subs	r3, #0
 8009a48:	bf18      	it	ne
 8009a4a:	2301      	movne	r3, #1
 8009a4c:	0692      	lsls	r2, r2, #26
 8009a4e:	d42b      	bmi.n	8009aa8 <_printf_common+0xb0>
 8009a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a54:	4641      	mov	r1, r8
 8009a56:	4638      	mov	r0, r7
 8009a58:	47c8      	blx	r9
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d01e      	beq.n	8009a9c <_printf_common+0xa4>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	6922      	ldr	r2, [r4, #16]
 8009a62:	f003 0306 	and.w	r3, r3, #6
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	bf02      	ittt	eq
 8009a6a:	68e5      	ldreq	r5, [r4, #12]
 8009a6c:	6833      	ldreq	r3, [r6, #0]
 8009a6e:	1aed      	subeq	r5, r5, r3
 8009a70:	68a3      	ldr	r3, [r4, #8]
 8009a72:	bf0c      	ite	eq
 8009a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a78:	2500      	movne	r5, #0
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	bfc4      	itt	gt
 8009a7e:	1a9b      	subgt	r3, r3, r2
 8009a80:	18ed      	addgt	r5, r5, r3
 8009a82:	2600      	movs	r6, #0
 8009a84:	341a      	adds	r4, #26
 8009a86:	42b5      	cmp	r5, r6
 8009a88:	d11a      	bne.n	8009ac0 <_printf_common+0xc8>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	e008      	b.n	8009aa0 <_printf_common+0xa8>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4652      	mov	r2, sl
 8009a92:	4641      	mov	r1, r8
 8009a94:	4638      	mov	r0, r7
 8009a96:	47c8      	blx	r9
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d103      	bne.n	8009aa4 <_printf_common+0xac>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	e7c6      	b.n	8009a36 <_printf_common+0x3e>
 8009aa8:	18e1      	adds	r1, r4, r3
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	2030      	movs	r0, #48	@ 0x30
 8009aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ab2:	4422      	add	r2, r4
 8009ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009abc:	3302      	adds	r3, #2
 8009abe:	e7c7      	b.n	8009a50 <_printf_common+0x58>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	4641      	mov	r1, r8
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	47c8      	blx	r9
 8009aca:	3001      	adds	r0, #1
 8009acc:	d0e6      	beq.n	8009a9c <_printf_common+0xa4>
 8009ace:	3601      	adds	r6, #1
 8009ad0:	e7d9      	b.n	8009a86 <_printf_common+0x8e>
	...

08009ad4 <_printf_i>:
 8009ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad8:	7e0f      	ldrb	r7, [r1, #24]
 8009ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009adc:	2f78      	cmp	r7, #120	@ 0x78
 8009ade:	4691      	mov	r9, r2
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	469a      	mov	sl, r3
 8009ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009aea:	d807      	bhi.n	8009afc <_printf_i+0x28>
 8009aec:	2f62      	cmp	r7, #98	@ 0x62
 8009aee:	d80a      	bhi.n	8009b06 <_printf_i+0x32>
 8009af0:	2f00      	cmp	r7, #0
 8009af2:	f000 80d2 	beq.w	8009c9a <_printf_i+0x1c6>
 8009af6:	2f58      	cmp	r7, #88	@ 0x58
 8009af8:	f000 80b9 	beq.w	8009c6e <_printf_i+0x19a>
 8009afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b04:	e03a      	b.n	8009b7c <_printf_i+0xa8>
 8009b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b0a:	2b15      	cmp	r3, #21
 8009b0c:	d8f6      	bhi.n	8009afc <_printf_i+0x28>
 8009b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8009b14 <_printf_i+0x40>)
 8009b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b14:	08009b6d 	.word	0x08009b6d
 8009b18:	08009b81 	.word	0x08009b81
 8009b1c:	08009afd 	.word	0x08009afd
 8009b20:	08009afd 	.word	0x08009afd
 8009b24:	08009afd 	.word	0x08009afd
 8009b28:	08009afd 	.word	0x08009afd
 8009b2c:	08009b81 	.word	0x08009b81
 8009b30:	08009afd 	.word	0x08009afd
 8009b34:	08009afd 	.word	0x08009afd
 8009b38:	08009afd 	.word	0x08009afd
 8009b3c:	08009afd 	.word	0x08009afd
 8009b40:	08009c81 	.word	0x08009c81
 8009b44:	08009bab 	.word	0x08009bab
 8009b48:	08009c3b 	.word	0x08009c3b
 8009b4c:	08009afd 	.word	0x08009afd
 8009b50:	08009afd 	.word	0x08009afd
 8009b54:	08009ca3 	.word	0x08009ca3
 8009b58:	08009afd 	.word	0x08009afd
 8009b5c:	08009bab 	.word	0x08009bab
 8009b60:	08009afd 	.word	0x08009afd
 8009b64:	08009afd 	.word	0x08009afd
 8009b68:	08009c43 	.word	0x08009c43
 8009b6c:	6833      	ldr	r3, [r6, #0]
 8009b6e:	1d1a      	adds	r2, r3, #4
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6032      	str	r2, [r6, #0]
 8009b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e09d      	b.n	8009cbc <_printf_i+0x1e8>
 8009b80:	6833      	ldr	r3, [r6, #0]
 8009b82:	6820      	ldr	r0, [r4, #0]
 8009b84:	1d19      	adds	r1, r3, #4
 8009b86:	6031      	str	r1, [r6, #0]
 8009b88:	0606      	lsls	r6, r0, #24
 8009b8a:	d501      	bpl.n	8009b90 <_printf_i+0xbc>
 8009b8c:	681d      	ldr	r5, [r3, #0]
 8009b8e:	e003      	b.n	8009b98 <_printf_i+0xc4>
 8009b90:	0645      	lsls	r5, r0, #25
 8009b92:	d5fb      	bpl.n	8009b8c <_printf_i+0xb8>
 8009b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b98:	2d00      	cmp	r5, #0
 8009b9a:	da03      	bge.n	8009ba4 <_printf_i+0xd0>
 8009b9c:	232d      	movs	r3, #45	@ 0x2d
 8009b9e:	426d      	negs	r5, r5
 8009ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ba4:	4859      	ldr	r0, [pc, #356]	@ (8009d0c <_printf_i+0x238>)
 8009ba6:	230a      	movs	r3, #10
 8009ba8:	e011      	b.n	8009bce <_printf_i+0xfa>
 8009baa:	6821      	ldr	r1, [r4, #0]
 8009bac:	6833      	ldr	r3, [r6, #0]
 8009bae:	0608      	lsls	r0, r1, #24
 8009bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bb4:	d402      	bmi.n	8009bbc <_printf_i+0xe8>
 8009bb6:	0649      	lsls	r1, r1, #25
 8009bb8:	bf48      	it	mi
 8009bba:	b2ad      	uxthmi	r5, r5
 8009bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bbe:	4853      	ldr	r0, [pc, #332]	@ (8009d0c <_printf_i+0x238>)
 8009bc0:	6033      	str	r3, [r6, #0]
 8009bc2:	bf14      	ite	ne
 8009bc4:	230a      	movne	r3, #10
 8009bc6:	2308      	moveq	r3, #8
 8009bc8:	2100      	movs	r1, #0
 8009bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bce:	6866      	ldr	r6, [r4, #4]
 8009bd0:	60a6      	str	r6, [r4, #8]
 8009bd2:	2e00      	cmp	r6, #0
 8009bd4:	bfa2      	ittt	ge
 8009bd6:	6821      	ldrge	r1, [r4, #0]
 8009bd8:	f021 0104 	bicge.w	r1, r1, #4
 8009bdc:	6021      	strge	r1, [r4, #0]
 8009bde:	b90d      	cbnz	r5, 8009be4 <_printf_i+0x110>
 8009be0:	2e00      	cmp	r6, #0
 8009be2:	d04b      	beq.n	8009c7c <_printf_i+0x1a8>
 8009be4:	4616      	mov	r6, r2
 8009be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bea:	fb03 5711 	mls	r7, r3, r1, r5
 8009bee:	5dc7      	ldrb	r7, [r0, r7]
 8009bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bf4:	462f      	mov	r7, r5
 8009bf6:	42bb      	cmp	r3, r7
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	d9f4      	bls.n	8009be6 <_printf_i+0x112>
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d10b      	bne.n	8009c18 <_printf_i+0x144>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	07df      	lsls	r7, r3, #31
 8009c04:	d508      	bpl.n	8009c18 <_printf_i+0x144>
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	6861      	ldr	r1, [r4, #4]
 8009c0a:	4299      	cmp	r1, r3
 8009c0c:	bfde      	ittt	le
 8009c0e:	2330      	movle	r3, #48	@ 0x30
 8009c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c18:	1b92      	subs	r2, r2, r6
 8009c1a:	6122      	str	r2, [r4, #16]
 8009c1c:	f8cd a000 	str.w	sl, [sp]
 8009c20:	464b      	mov	r3, r9
 8009c22:	aa03      	add	r2, sp, #12
 8009c24:	4621      	mov	r1, r4
 8009c26:	4640      	mov	r0, r8
 8009c28:	f7ff fee6 	bl	80099f8 <_printf_common>
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	d14a      	bne.n	8009cc6 <_printf_i+0x1f2>
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	b004      	add	sp, #16
 8009c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	f043 0320 	orr.w	r3, r3, #32
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	4833      	ldr	r0, [pc, #204]	@ (8009d10 <_printf_i+0x23c>)
 8009c44:	2778      	movs	r7, #120	@ 0x78
 8009c46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	6831      	ldr	r1, [r6, #0]
 8009c4e:	061f      	lsls	r7, r3, #24
 8009c50:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c54:	d402      	bmi.n	8009c5c <_printf_i+0x188>
 8009c56:	065f      	lsls	r7, r3, #25
 8009c58:	bf48      	it	mi
 8009c5a:	b2ad      	uxthmi	r5, r5
 8009c5c:	6031      	str	r1, [r6, #0]
 8009c5e:	07d9      	lsls	r1, r3, #31
 8009c60:	bf44      	itt	mi
 8009c62:	f043 0320 	orrmi.w	r3, r3, #32
 8009c66:	6023      	strmi	r3, [r4, #0]
 8009c68:	b11d      	cbz	r5, 8009c72 <_printf_i+0x19e>
 8009c6a:	2310      	movs	r3, #16
 8009c6c:	e7ac      	b.n	8009bc8 <_printf_i+0xf4>
 8009c6e:	4827      	ldr	r0, [pc, #156]	@ (8009d0c <_printf_i+0x238>)
 8009c70:	e7e9      	b.n	8009c46 <_printf_i+0x172>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	f023 0320 	bic.w	r3, r3, #32
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	e7f6      	b.n	8009c6a <_printf_i+0x196>
 8009c7c:	4616      	mov	r6, r2
 8009c7e:	e7bd      	b.n	8009bfc <_printf_i+0x128>
 8009c80:	6833      	ldr	r3, [r6, #0]
 8009c82:	6825      	ldr	r5, [r4, #0]
 8009c84:	6961      	ldr	r1, [r4, #20]
 8009c86:	1d18      	adds	r0, r3, #4
 8009c88:	6030      	str	r0, [r6, #0]
 8009c8a:	062e      	lsls	r6, r5, #24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0x1c0>
 8009c90:	6019      	str	r1, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0x1c6>
 8009c94:	0668      	lsls	r0, r5, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0x1bc>
 8009c98:	8019      	strh	r1, [r3, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	4616      	mov	r6, r2
 8009ca0:	e7bc      	b.n	8009c1c <_printf_i+0x148>
 8009ca2:	6833      	ldr	r3, [r6, #0]
 8009ca4:	1d1a      	adds	r2, r3, #4
 8009ca6:	6032      	str	r2, [r6, #0]
 8009ca8:	681e      	ldr	r6, [r3, #0]
 8009caa:	6862      	ldr	r2, [r4, #4]
 8009cac:	2100      	movs	r1, #0
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7f6 fa9e 	bl	80001f0 <memchr>
 8009cb4:	b108      	cbz	r0, 8009cba <_printf_i+0x1e6>
 8009cb6:	1b80      	subs	r0, r0, r6
 8009cb8:	6060      	str	r0, [r4, #4]
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	6123      	str	r3, [r4, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cc4:	e7aa      	b.n	8009c1c <_printf_i+0x148>
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	4632      	mov	r2, r6
 8009cca:	4649      	mov	r1, r9
 8009ccc:	4640      	mov	r0, r8
 8009cce:	47d0      	blx	sl
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d0ad      	beq.n	8009c30 <_printf_i+0x15c>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	079b      	lsls	r3, r3, #30
 8009cd8:	d413      	bmi.n	8009d02 <_printf_i+0x22e>
 8009cda:	68e0      	ldr	r0, [r4, #12]
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	bfb8      	it	lt
 8009ce2:	4618      	movlt	r0, r3
 8009ce4:	e7a6      	b.n	8009c34 <_printf_i+0x160>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4632      	mov	r2, r6
 8009cea:	4649      	mov	r1, r9
 8009cec:	4640      	mov	r0, r8
 8009cee:	47d0      	blx	sl
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d09d      	beq.n	8009c30 <_printf_i+0x15c>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	9903      	ldr	r1, [sp, #12]
 8009cfa:	1a5b      	subs	r3, r3, r1
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	dcf2      	bgt.n	8009ce6 <_printf_i+0x212>
 8009d00:	e7eb      	b.n	8009cda <_printf_i+0x206>
 8009d02:	2500      	movs	r5, #0
 8009d04:	f104 0619 	add.w	r6, r4, #25
 8009d08:	e7f5      	b.n	8009cf6 <_printf_i+0x222>
 8009d0a:	bf00      	nop
 8009d0c:	0800b1c1 	.word	0x0800b1c1
 8009d10:	0800b1d2 	.word	0x0800b1d2

08009d14 <__sflush_r>:
 8009d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1c:	0716      	lsls	r6, r2, #28
 8009d1e:	4605      	mov	r5, r0
 8009d20:	460c      	mov	r4, r1
 8009d22:	d454      	bmi.n	8009dce <__sflush_r+0xba>
 8009d24:	684b      	ldr	r3, [r1, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dc02      	bgt.n	8009d30 <__sflush_r+0x1c>
 8009d2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	dd48      	ble.n	8009dc2 <__sflush_r+0xae>
 8009d30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d32:	2e00      	cmp	r6, #0
 8009d34:	d045      	beq.n	8009dc2 <__sflush_r+0xae>
 8009d36:	2300      	movs	r3, #0
 8009d38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d3c:	682f      	ldr	r7, [r5, #0]
 8009d3e:	6a21      	ldr	r1, [r4, #32]
 8009d40:	602b      	str	r3, [r5, #0]
 8009d42:	d030      	beq.n	8009da6 <__sflush_r+0x92>
 8009d44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	0759      	lsls	r1, r3, #29
 8009d4a:	d505      	bpl.n	8009d58 <__sflush_r+0x44>
 8009d4c:	6863      	ldr	r3, [r4, #4]
 8009d4e:	1ad2      	subs	r2, r2, r3
 8009d50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d52:	b10b      	cbz	r3, 8009d58 <__sflush_r+0x44>
 8009d54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d56:	1ad2      	subs	r2, r2, r3
 8009d58:	2300      	movs	r3, #0
 8009d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d5c:	6a21      	ldr	r1, [r4, #32]
 8009d5e:	4628      	mov	r0, r5
 8009d60:	47b0      	blx	r6
 8009d62:	1c43      	adds	r3, r0, #1
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	d106      	bne.n	8009d76 <__sflush_r+0x62>
 8009d68:	6829      	ldr	r1, [r5, #0]
 8009d6a:	291d      	cmp	r1, #29
 8009d6c:	d82b      	bhi.n	8009dc6 <__sflush_r+0xb2>
 8009d6e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e18 <__sflush_r+0x104>)
 8009d70:	410a      	asrs	r2, r1
 8009d72:	07d6      	lsls	r6, r2, #31
 8009d74:	d427      	bmi.n	8009dc6 <__sflush_r+0xb2>
 8009d76:	2200      	movs	r2, #0
 8009d78:	6062      	str	r2, [r4, #4]
 8009d7a:	04d9      	lsls	r1, r3, #19
 8009d7c:	6922      	ldr	r2, [r4, #16]
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	d504      	bpl.n	8009d8c <__sflush_r+0x78>
 8009d82:	1c42      	adds	r2, r0, #1
 8009d84:	d101      	bne.n	8009d8a <__sflush_r+0x76>
 8009d86:	682b      	ldr	r3, [r5, #0]
 8009d88:	b903      	cbnz	r3, 8009d8c <__sflush_r+0x78>
 8009d8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d8e:	602f      	str	r7, [r5, #0]
 8009d90:	b1b9      	cbz	r1, 8009dc2 <__sflush_r+0xae>
 8009d92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d96:	4299      	cmp	r1, r3
 8009d98:	d002      	beq.n	8009da0 <__sflush_r+0x8c>
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f7ff fbf2 	bl	8009584 <_free_r>
 8009da0:	2300      	movs	r3, #0
 8009da2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009da4:	e00d      	b.n	8009dc2 <__sflush_r+0xae>
 8009da6:	2301      	movs	r3, #1
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b0      	blx	r6
 8009dac:	4602      	mov	r2, r0
 8009dae:	1c50      	adds	r0, r2, #1
 8009db0:	d1c9      	bne.n	8009d46 <__sflush_r+0x32>
 8009db2:	682b      	ldr	r3, [r5, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0c6      	beq.n	8009d46 <__sflush_r+0x32>
 8009db8:	2b1d      	cmp	r3, #29
 8009dba:	d001      	beq.n	8009dc0 <__sflush_r+0xac>
 8009dbc:	2b16      	cmp	r3, #22
 8009dbe:	d11e      	bne.n	8009dfe <__sflush_r+0xea>
 8009dc0:	602f      	str	r7, [r5, #0]
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e022      	b.n	8009e0c <__sflush_r+0xf8>
 8009dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dca:	b21b      	sxth	r3, r3
 8009dcc:	e01b      	b.n	8009e06 <__sflush_r+0xf2>
 8009dce:	690f      	ldr	r7, [r1, #16]
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	d0f6      	beq.n	8009dc2 <__sflush_r+0xae>
 8009dd4:	0793      	lsls	r3, r2, #30
 8009dd6:	680e      	ldr	r6, [r1, #0]
 8009dd8:	bf08      	it	eq
 8009dda:	694b      	ldreq	r3, [r1, #20]
 8009ddc:	600f      	str	r7, [r1, #0]
 8009dde:	bf18      	it	ne
 8009de0:	2300      	movne	r3, #0
 8009de2:	eba6 0807 	sub.w	r8, r6, r7
 8009de6:	608b      	str	r3, [r1, #8]
 8009de8:	f1b8 0f00 	cmp.w	r8, #0
 8009dec:	dde9      	ble.n	8009dc2 <__sflush_r+0xae>
 8009dee:	6a21      	ldr	r1, [r4, #32]
 8009df0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009df2:	4643      	mov	r3, r8
 8009df4:	463a      	mov	r2, r7
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b0      	blx	r6
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	dc08      	bgt.n	8009e10 <__sflush_r+0xfc>
 8009dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e10:	4407      	add	r7, r0
 8009e12:	eba8 0800 	sub.w	r8, r8, r0
 8009e16:	e7e7      	b.n	8009de8 <__sflush_r+0xd4>
 8009e18:	dfbffffe 	.word	0xdfbffffe

08009e1c <_fflush_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	690b      	ldr	r3, [r1, #16]
 8009e20:	4605      	mov	r5, r0
 8009e22:	460c      	mov	r4, r1
 8009e24:	b913      	cbnz	r3, 8009e2c <_fflush_r+0x10>
 8009e26:	2500      	movs	r5, #0
 8009e28:	4628      	mov	r0, r5
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}
 8009e2c:	b118      	cbz	r0, 8009e36 <_fflush_r+0x1a>
 8009e2e:	6a03      	ldr	r3, [r0, #32]
 8009e30:	b90b      	cbnz	r3, 8009e36 <_fflush_r+0x1a>
 8009e32:	f7ff fa0b 	bl	800924c <__sinit>
 8009e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0f3      	beq.n	8009e26 <_fflush_r+0xa>
 8009e3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e40:	07d0      	lsls	r0, r2, #31
 8009e42:	d404      	bmi.n	8009e4e <_fflush_r+0x32>
 8009e44:	0599      	lsls	r1, r3, #22
 8009e46:	d402      	bmi.n	8009e4e <_fflush_r+0x32>
 8009e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e4a:	f7ff fb98 	bl	800957e <__retarget_lock_acquire_recursive>
 8009e4e:	4628      	mov	r0, r5
 8009e50:	4621      	mov	r1, r4
 8009e52:	f7ff ff5f 	bl	8009d14 <__sflush_r>
 8009e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e58:	07da      	lsls	r2, r3, #31
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	d4e4      	bmi.n	8009e28 <_fflush_r+0xc>
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	059b      	lsls	r3, r3, #22
 8009e62:	d4e1      	bmi.n	8009e28 <_fflush_r+0xc>
 8009e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e66:	f7ff fb8b 	bl	8009580 <__retarget_lock_release_recursive>
 8009e6a:	e7dd      	b.n	8009e28 <_fflush_r+0xc>

08009e6c <__swhatbuf_r>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	460c      	mov	r4, r1
 8009e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e74:	2900      	cmp	r1, #0
 8009e76:	b096      	sub	sp, #88	@ 0x58
 8009e78:	4615      	mov	r5, r2
 8009e7a:	461e      	mov	r6, r3
 8009e7c:	da0d      	bge.n	8009e9a <__swhatbuf_r+0x2e>
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e84:	f04f 0100 	mov.w	r1, #0
 8009e88:	bf14      	ite	ne
 8009e8a:	2340      	movne	r3, #64	@ 0x40
 8009e8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e90:	2000      	movs	r0, #0
 8009e92:	6031      	str	r1, [r6, #0]
 8009e94:	602b      	str	r3, [r5, #0]
 8009e96:	b016      	add	sp, #88	@ 0x58
 8009e98:	bd70      	pop	{r4, r5, r6, pc}
 8009e9a:	466a      	mov	r2, sp
 8009e9c:	f000 f848 	bl	8009f30 <_fstat_r>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	dbec      	blt.n	8009e7e <__swhatbuf_r+0x12>
 8009ea4:	9901      	ldr	r1, [sp, #4]
 8009ea6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009eaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009eae:	4259      	negs	r1, r3
 8009eb0:	4159      	adcs	r1, r3
 8009eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eb6:	e7eb      	b.n	8009e90 <__swhatbuf_r+0x24>

08009eb8 <__smakebuf_r>:
 8009eb8:	898b      	ldrh	r3, [r1, #12]
 8009eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ebc:	079d      	lsls	r5, r3, #30
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	d507      	bpl.n	8009ed4 <__smakebuf_r+0x1c>
 8009ec4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	6123      	str	r3, [r4, #16]
 8009ecc:	2301      	movs	r3, #1
 8009ece:	6163      	str	r3, [r4, #20]
 8009ed0:	b003      	add	sp, #12
 8009ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed4:	ab01      	add	r3, sp, #4
 8009ed6:	466a      	mov	r2, sp
 8009ed8:	f7ff ffc8 	bl	8009e6c <__swhatbuf_r>
 8009edc:	9f00      	ldr	r7, [sp, #0]
 8009ede:	4605      	mov	r5, r0
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff fbba 	bl	800965c <_malloc_r>
 8009ee8:	b948      	cbnz	r0, 8009efe <__smakebuf_r+0x46>
 8009eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eee:	059a      	lsls	r2, r3, #22
 8009ef0:	d4ee      	bmi.n	8009ed0 <__smakebuf_r+0x18>
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	f043 0302 	orr.w	r3, r3, #2
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	e7e2      	b.n	8009ec4 <__smakebuf_r+0xc>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	6020      	str	r0, [r4, #0]
 8009f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f06:	81a3      	strh	r3, [r4, #12]
 8009f08:	9b01      	ldr	r3, [sp, #4]
 8009f0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f0e:	b15b      	cbz	r3, 8009f28 <__smakebuf_r+0x70>
 8009f10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f14:	4630      	mov	r0, r6
 8009f16:	f000 f81d 	bl	8009f54 <_isatty_r>
 8009f1a:	b128      	cbz	r0, 8009f28 <__smakebuf_r+0x70>
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	431d      	orrs	r5, r3
 8009f2c:	81a5      	strh	r5, [r4, #12]
 8009f2e:	e7cf      	b.n	8009ed0 <__smakebuf_r+0x18>

08009f30 <_fstat_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d07      	ldr	r5, [pc, #28]	@ (8009f50 <_fstat_r+0x20>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	f7fb fd81 	bl	8005a44 <_fstat>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	d102      	bne.n	8009f4c <_fstat_r+0x1c>
 8009f46:	682b      	ldr	r3, [r5, #0]
 8009f48:	b103      	cbz	r3, 8009f4c <_fstat_r+0x1c>
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20026098 	.word	0x20026098

08009f54 <_isatty_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d06      	ldr	r5, [pc, #24]	@ (8009f70 <_isatty_r+0x1c>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	f7fb fd80 	bl	8005a64 <_isatty>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d102      	bne.n	8009f6e <_isatty_r+0x1a>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	b103      	cbz	r3, 8009f6e <_isatty_r+0x1a>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	20026098 	.word	0x20026098

08009f74 <_sbrk_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d06      	ldr	r5, [pc, #24]	@ (8009f90 <_sbrk_r+0x1c>)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	602b      	str	r3, [r5, #0]
 8009f80:	f7fb fd88 	bl	8005a94 <_sbrk>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_sbrk_r+0x1a>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_sbrk_r+0x1a>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20026098 	.word	0x20026098

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
